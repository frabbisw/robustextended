{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (sorted[i + 1] - sorted[i] < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if the given list of numbers contains a number that is the sum of the other numbers.\n  >>> hasSumElements([1, 2, 3])\n  false\n  >>> hasSumElements([1, 2, 3, 4, 5])\n  true\n  >>> hasSumElements([1, 2, 3, 4, 5, 6])\n  false\n  >>> hasSumElements([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasSumElements = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b);\n  return sum === numbers.length;\n};\n\n/*\n  Check if the given list of numbers contains a number that is the product of the other numbers.\n  >>> hasProductElements([1, 2, 3])\n  false\n  >>> hasProductElements([1, 2, 3, 4, 5])\n  true\n  >>> hasProductElements([1, 2, 3, 4, 5, 6])\n  false\n  >>> hasProductElements([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasProductElements = (numbers) => {\n  const product = numbers.reduce((a, b) => a * b);\n  return product === numbers.length;\n};\n\n/*\n  Check if the given list of numbers contains a number that is the average of the other numbers.\n  >>> hasAverageElements([1, 2, 3])\n  false\n  >>> hasAverageElements([1, 2, 3, 4, 5])\n  true\n  >>> hasAverageElements([1, 2, 3, 4, 5, 6])\n  false\n  >>> hasAverageElements([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasAverageElements = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b);\n  const average = sum / numbers.length;\n  return average === numbers.length;\n};\n\n/*\n  Check if the given list of numbers contains a number that is the median of the other numbers.\n  >>> hasMedianElements([1, 2, 3])\n  false\n  >>> hasMedianElements([1, 2, 3, 4, 5])\n  true\n  >>> hasMedianElements([1, 2, 3, 4, 5, 6])\n  false\n  >>> hasMedianElements([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasMedianElements = (numbers) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return (sorted[len / 2] + sorted[len / 2 - 1]) / 2 === sorted[len / 2];\n  } else {\n    return sorted[len / 2] === sorted[len / 2 - 1];\n  }\n};\n\n/*\n  Check if the given list of numbers contains a number that is the mode of the other numbers.\n  >>> hasModeElements([1, 2, 3])\n  false\n  >>> hasModeElements([1, 2, 3, 4, 5])\n  true\n  >>> hasModeElements([1, 2, 3, 4, 5, 6])\n  false\n  >>> hasModeElements([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasModeElements = (numbers) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  const mode = sorted[len - 1];\n  for (let i = 0; i < len - 1; i++) {\n    if (sorted[i + 1] === mode) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if the given list of numbers contains a number that is the mode of the other numbers.\n  >>> hasModeElements([1, 2, 3])\n  false\n  >>> hasModeElements([1, 2, 3, 4, 5])\n  true\n  >>> hasModeElements([1, 2, 3, 4, 5, 6])\n  false\n  >>> hasModeElements([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasModeElements = (numbers) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  const mode = sorted[len - 1];\n  for (let i = 0; i < len - 1; i++) {\n    if (sorted[i + 1] === mode) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if the given list of numbers contains a number that is the mode of the other numbers.\n  >>> hasModeElements([1, 2, 3])\n  false\n  >>> hasModeElements([1, 2, 3, 4, 5])\n  true\n  >>> hasModeElements([1, 2, 3, 4, 5, 6])\n  false\n  >>> hasModeElements([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasModeElements = (numbers) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  const mode = sorted[len - 1];\n  for (let i = 0; i < len - 1; i++) {\n    if (sorted[i + 1] === mode) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport {\n  hasCloseElements,\n  hasSumElements,\n  hasProductElements,\n  hasAverageElements,\n  hasMedianElements,\n  has", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_string_array = paren_string.split('(');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_length_minus_one = paren_string_array_length - 1;\n  const paren_string_array_length_minus_two = paren_string_array_length - 2;\n  const paren_string_array_length_minus_three = paren_string_array_length - 3;\n  const paren_string_array_length_minus_four = paren_string_array_length - 4;\n  const paren_string_array_length_minus_five = paren_string_array_length - 5;\n  const paren_string_array_length_minus_six = paren_string_array_length - 6;\n  const paren_string_array_length_minus_seven = paren_string_array_length - 7;\n  const paren_string_array_length_minus_eight = paren_string_array_length - 8;\n  const paren_string_array_length_minus_nine = paren_string_array_length - 9;\n  const paren_string_array_length_minus_ten = paren_string_array_length - 10;\n  const paren_string_array_length_minus_eleven = paren_string_array_length - 11;\n  const paren_string_array_length_minus_twelve = paren_string_array_length - 12;\n  const paren_string_array_length_minus_thirteen = paren_string_array_length - 13;\n  const paren_string_array_length_minus_fourteen = paren_string_array_length - 14;\n  const paren_string_array_length_minus_fifteen = paren_string_array_length - 15;\n  const paren_string_array_length_minus_sixteen = paren_string_array_length - 16;\n  const paren_string_array_length_minus_seventeen = paren_string_array_length - 17;\n  const paren_string_array_length_minus_eighteen = paren_string_array_length - 18;\n  const paren_string_array_length_minus_nineteen = paren_string_array_length - 19;\n  const paren_string_array_length_minus_twenty = paren_string_array_length - 20;\n  const paren_string_array_length_minus_twenty_one = paren_string_array_length - 21;\n  const paren_string_array_length_minus_twenty_two = paren_string_array_length - 22;\n  const paren_string_array_length_minus_twenty_three = paren_string_array_length - 23;\n  const paren_string_array_length_minus_twenty_four = paren_string_array_length - 24;\n  const paren_string_array_length_minus_twenty_five = paren_string_array_length - 25;\n  const paren_string_array_length_minus_twenty_six = paren_string_array_length - 26;\n  const paren_string_array_length_minus_twenty_seven = paren_string_array_length - 27;\n  const paren_string_array_length_minus_twenty_eight = paren_string_array_length - 28;\n  const paren_string_array_length_minus_twenty_nine = paren_string_array_length - 29;\n  const paren_string_array_length_minus_thirty = paren_string_array_length - 30;\n  const paren_string_array_length_minus_thirty_one = paren_string_array_length - 31;\n  const paren_string_array_length_minus_thirty_two = paren_string_array_length - 32;\n  const paren_string_array_length_minus_thirty_three = paren_string_array_length - 33;\n  const paren_string_array_length_minus_thirty_four = paren_string_array_length - 34;\n  const paren_string_array_length_minus_thirty_five = paren_string_array_length - 35;\n  const paren_string_array_length_minus_thirty_six = paren_string_array_length - 36;\n  const paren_string_array_length_minus_thirty_seven = paren_string_array_length - 37;\n  const paren_string_array_length_minus_thirty_eight = paren_string_array_length - 38;\n  const paren_string_array_length_minus_thirty_nine = paren_string_array_length - 39;\n  const paren_string_array_length_minus_thirty_ten = paren_string_array_length - 40;\n  const paren_string_array_length_minus_thirty_eleven = paren_string_array_length - 41;\n  const paren_string_array_length_minus_thirty_twelve = paren_string_array_length - 42;\n  const paren_string_array_length_minus_thirty_thirteen = paren_string_array_length - 43;\n  const paren_string_array_length_minus_thirty_fourteen = paren_string_array_length - 44;\n  const paren_string_array_length_minus_thirty_fifteen = paren_string_array_length - 45;\n  const paren_string_array_length_minus_thirty_sixteen = paren_string_array_length - 46;\n  const paren_string_array_length_minus_thirty_seventeen = paren_string_array_length - 47;\n  const paren_string_array_length_minus_thirty_eighteen = paren_string_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPalindrome = prefix.split('').reverse().join('');\n  const longestPalindromeSuffix = longestPalindrome.split('').reverse().join('');\n  const longestPalindromePrefix = longestPalindrome.split('').join('');\n  const longestPalindromePrefixSuffix = longestPalindromePrefix.split('').reverse().join('');\n  const longestPalindromePrefixSuffixReverse = longestPalindromePrefix.split('').reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverse = longestPalindromePrefix.split('').reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n  const longestPalindromePrefixSuffixReverseReverseReverseReverseReverse = longestPalindromePrefix.split('').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile9 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile11 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile13 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile14 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile15 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile16 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile17 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile18 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile19 = (n) => {\n  const result = [];\n  for (let i = 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString9 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString10 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString11 = (s) => {\n  const words = s.split(/", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  } else {\n    return -1;\n  }\n};\n\nexport default chooseNum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = Math.ceil(avg)\n  const binary = rounded.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [...x].filter(x => x % 2 === 0).sort();\n  return [...x].filter(x => x % 2!== 0).sort();\n};\n\nexport default uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(sortedArr[i])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f2 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f3 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f4 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f5 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f6 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f7 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f8 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f9 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f10 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f11 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f12 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f13 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f14 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f15 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f16 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f17 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f18 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f19 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f20 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f21 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f22 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f23 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f24 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f25 = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i);\n  }\n  return factorials;\n};\n\nconst f26 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome2 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome3 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome4 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome5 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome6 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome7 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome8 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome9 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome10 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome11 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome12 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome13 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst evenOddPalindrome14 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      if (i % j === 0) {\n        count++\n      }\n      j = j / 2\n    }\n  }\n  return [count, count - 1]\n}\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 2, 3]));\nconsole.log(countNums([1, 2, 3, 4]));\nconsole.log(countNums([1, 2, 3, 4, 5]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log(countNums([1, 2, 3,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst moveOneBall = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse2 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse3 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse4 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse5 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse6 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse7 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse8 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse9 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse10 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse11 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse12 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse13 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse14 = (str) => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string made of the characters in the string, but in reverse order.\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse15 = (str) => {\n  let result = '';\n  for (let i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const i = 0\n  const j = 0\n  const k = 0\n  const flag = 0\n  while (i < len1 && j < len2) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      lst1[i] = lst2[j]\n      lst2[j] = lst1[i]\n      i++\n      j++\n    } else if (lst1[i] % 2 === 0) {\n      i++\n    } else if (lst2[j] % 2 === 0) {\n      j++\n    } else {\n      flag = 1\n      break\n    }\n  }\n  if (flag === 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\nconst lst1 = [1, 2, 3, 4]\nconst lst2 = [1, 5, 3, 4]\n\nconsole.log(exchange(lst1, lst2))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram2 = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram3 = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram4 = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram5 = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram6 = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return [result.reverse().join(''), result.length === s.length];\n};\n\nconst isPalindrome = (s) => {\n  const [result, isPalindrome] = reverseDelete(s, s);\n  return isPalindrome;\n};\n\nconsole.log(isPalindrome('abcdef'));\nconsole.log(isPalindrome('abcdedcba'));\nconsole.log(isPalindrome('abcdefghijklmnopqrstuvwxyz'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i].toString().split('').filter(x => x.length % 2 === 1).length;\n    count += num;\n  }\n  return count;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0)\n  const minSum = Math.min(sum, 0)\n  const minSubArraySum = (nums) => {\n    const sum = nums.reduce((acc, num) => acc + num, 0)\n    const minSum = Math.min(sum, 0)\n    return minSum\n  }\n  return minSubArraySum(nums)\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0];\n  const [row_fill, col_fill] = [0, 0];\n  const [row_max, col_max] = [0, 0];\n  const [row_min, col_min] = [0, 0];\n  const [row_sum, col_sum] = [0, 0];\n  const [row_avg, col_avg] = [0, 0];\n  const [row_avg_fill, col_avg_fill] = [0, 0];\n  const [row_avg_max, col_avg_max] = [0, 0];\n  const [row_avg_min, col_avg_min] = [0, 0];\n  const [row_avg_sum, col_avg_sum] = [0, 0];\n  const [row_avg_avg, col_avg_avg] = [0, 0];\n  const [row_avg_avg_fill, col_avg_avg_fill] = [0, 0];\n  const [row_avg_avg_max, col_avg_avg_max] = [0, 0];\n  const [row_avg_avg_min, col_avg_avg_min] = [0, 0];\n  const [row_avg_avg_sum, col_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg, col_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_fill, col_avg_avg_avg_fill] = [0, 0];\n  const [row_avg_avg_avg_max, col_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_min, col_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_sum, col_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_avg, col_avg_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_avg_fill, col_avg_avg_avg_avg_fill] = [0, 0];\n  const [row_avg_avg_avg_avg_max, col_avg_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_avg_min, col_avg_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_avg_sum, col_avg_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_avg_avg, col_avg_avg_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_fill, col_avg_avg_avg_avg_avg_fill] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_max, col_avg_avg_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_min, col_avg_avg_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_sum, col_avg_avg_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg, col_avg_avg_avg_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_fill, col_avg_avg_avg_avg_avg_avg_fill] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_max, col_avg_avg_avg_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_min, col_avg_avg_avg_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_av", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = [];\n  let i = 0;\n  while (i < arr.length) {\n    const current = arr[i];\n    const ones = 0;\n    while (current) {\n      ones += current & 1;\n      current = current >>> 1;\n    }\n    sorted.push(ones);\n    i++;\n  }\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords2 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords3 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords4 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords5 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords6 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords7 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords8 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords9 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords10 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords11 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords12 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords13 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords14 = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    let word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestDistance = Infinity;\n  let currentDistance = 0;\n  let currentVowel = '';\n  let currentIndex = 0;\n  let currentVowelIndex = 0;\n  let currentConsonantIndex = 0;\n  let currentConsonant = '';\n  let currentLetter = '';\n  while (currentIndex < wordLength) {\n    currentLetter = word[currentIndex];\n    if (vowels.indexOf(currentLetter)!== -1) {\n      if (currentVowel === '') {\n        currentVowel = currentLetter;\n        currentVowelIndex = currentIndex;\n      } else {\n        currentVowel = '';\n      }\n    } else if (consonants.indexOf(currentLetter)!== -1) {\n      if (currentVowel === '') {\n        currentVowel = currentLetter;\n        currentVowelIndex = currentIndex;\n      } else {\n        currentVowel = '';\n      }\n    } else {\n      if (currentVowel === '') {\n        currentVowel = currentLetter;\n        currentVowelIndex = currentIndex;\n      } else {\n        currentVowel = '';\n      }\n    }\n    currentIndex++;\n  }\n  if (currentVowel!== '') {\n    closestVowel = currentVowel;\n    closestDistance = currentIndex - currentVowelIndex;\n  }\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\nconsole.log(getClosestVowel(\"\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens11 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = 0;\n  strings.forEach(string => {\n    if (string.length > longest) {\n      longest = string.length;\n    }\n  });\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const max = sorted[k - 1];\n  return [...sorted.slice(0, k - 1), max];\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_2 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_3 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_4 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_5 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_6 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_7 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_8 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_9 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_10 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_11 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_12 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_13 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_14 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_15 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_16 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_17 = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), 0)\n  const sum = arr.slice(0, k).reduce((a, b) => a + b, 0)\n  return max + sum\n}\n\nconst addElements_18 = (arr, k) => {\n  const max = arr.slice(0, k).reduce", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz11 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 && day > 31) {\n    return false;\n  }\n  if (month === 5 && day > 30) {\n    return false;\n  }\n  if (month === 7 && day > 31) {\n    return false;\n  }\n  if (month === 8 && day > 30) {\n    return false;\n  }\n  if (month === 10 && day > 31) {\n    return false;\n  }\n  if (month === 12 && day > 31) {\n    return false;\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.length === 1? words : words.filter((word, index) => index % 2 === 0);\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord2 = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord3 = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord4 = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord5 = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord6 = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord7 = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord8 = (txt) => {\n  const chars = txt.split('');\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toLowerCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  ord (\"a\") = 0, ord (\"b\") = 1,... ord (\"z\") = 25\n  */\nconst ord9 = (txt) => {\n  const chars = txt", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let prev = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < lst[prev]) {\n      return false\n    }\n    prev = i\n  }\n  return true\n}\n\nexport default isSorted\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// console.log(intersection((1, 2), (2, 3)) === \"NO\");\n// console.log(intersection((-1, 1), (0, 4)) === \"NO\");\n// console.log(intersection((-3, -1), (-5, 5)) === \"YES\");\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const arrLength = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const sign = arr[i]\n    if (sign === 1) {\n      sum += Math.pow(10, i)\n    } else if (sign === -1) {\n      sum -= Math.pow(10, i)\n    }\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const arrLength = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const sign = arr[i]\n    if (sign === 1) {\n      sum += Math.pow(10, i)\n    } else if (sign === -1) {\n      sum -= Math.pow(10, i)\n    }\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  const arrLength = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const sign = arr[i]\n    if (sign === 1) {\n      sum += Math.pow(10, i)\n    } else if (sign === -1) {\n      sum -= Math.pow(10, i)\n    }\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  const arrLength = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const sign = arr[i]\n    if (sign === 1) {\n      sum += Math.pow(10, i)\n    } else if (sign === -1) {\n      sum -= Math.pow(10, i)\n    }\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  const arrLength = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const sign = arr[i]\n    if (sign === 1) {\n      sum += Math.pow(10, i)\n    } else if (sign === -1) {\n      sum -= Math.pow(10, i)\n    }\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  const arrLength = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const sign = arr[i]\n    if (sign === 1) {\n      sum += Math.pow(10, i)\n    } else if (sign === -1) {\n      sum -= Math.pow(10, i)\n    }\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  const arrLength = arr.length\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const sign = arr[i]\n    if (sign === 1) {\n      sum += Math.pow(10, i)\n    } else if (sign === -1) {\n      sum -= Math.pow(10, i)\n    }\n  }\n  return sum\n}\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  const arrLength = arr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = [grid[0][0]];\n  for (let i = 1; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [grid[i][j]];\n      for (let k = 0; k < i; k++) {\n        if (grid[i][j] < grid[k][j]) {\n          dp[i][j].unshift(dp[k][j].pop());\n        }\n      }\n    }\n  }\n  const res = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[j][i].length === k) {\n        res.push(dp[j][i].shift());\n      }\n    }\n  }\n  return res;\n};\n\nconst test = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = [grid[0][0]];\n  for (let i = 1; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [grid[i][j]];\n      for (let k = 0; k < i; k++) {\n        if (grid[i][j] < grid[k][j]) {\n          dp[i][j].unshift(dp[k][j].pop());\n        }\n      }\n    }\n  }\n  const res = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[j][i].length === k) {\n        res.push(dp[j][i].shift());\n      }\n    }\n  }\n  return res;\n};\n\nconst test2 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = [grid[0][0]];\n  for (let i = 1; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [grid[i][j]];\n      for (let k = 0; k < i; k++) {\n        if (grid[i][j] < grid[k][j]) {\n          dp[i][j].unshift(dp[k][j].pop());\n        }\n      }\n    }\n  }\n  const res = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[j][i].length === k) {\n        res.push(dp[j][i].shift());\n      }\n    }\n  }\n  return res;\n};\n\nconst test3 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = [grid[0][0]];\n  for (let i = 1; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [grid[i][j]];\n      for (let k = 0; k < i; k++) {\n        if (grid[i][j] < grid[k][j]) {\n          dp[i][j].unshift(dp[k][j].pop());\n        }\n      }\n    }\n  }\n  const res = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[j][i].length === k) {\n        res.push(dp[j][i].shift());\n      }\n    }\n  }\n  return res;\n};\n\nconst test4 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = [grid[0][0]];\n  for (let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greatestCommonDivisor(b, a);\n  let x = Math.floor(a / b);\n  while (a % b!== 0) {\n    x--;\n    a = b;\n    b = a % b;\n  }\n  return b;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1, 1, 1];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2]);\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverse = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString2 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString3 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString4 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString5 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString6 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString7 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString8 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString9 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString10 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString11 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef\") == \"fedcba\"\n  */\nconst reverseString12 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  GIf you return a string, you must return the string reversed. For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"abcdef", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i])\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/* Create a function that returns true if the last two characters in a given string are an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n  const lastTwoChars = txt.slice(-2);\n  const isALetter = lastTwoChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/* Create a function that returns true if the last three characters in a given string are an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreALetter = (txt) => {\n  const lastThreeChars = txt.slice(-3);\n  const isALetter = lastThreeChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/* Create a function that returns true if the last four characters in a given string are an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreALetter = (txt) => {\n  const lastFourChars = txt.slice(-4);\n  const isALetter = lastFourChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/* Create a function that returns true if the last five characters in a given string are an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreALetter = (txt) => {\n  const lastFiveChars = txt.slice(-5);\n  const isALetter = lastFiveChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/* Create a function that returns true if the last six characters in a given string are an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastSixCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSixCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSixCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSixCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSixCharsAreALetter = (txt) => {\n  const lastSixChars = txt.slice(-6);\n  const isALetter = lastSixChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/* Create a function that returns true if the last seven characters in a given string are an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastSevenCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSevenCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSevenCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSevenCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSevenCharsAreALetter = (txt) => {\n  const lastSevenChars = txt.slice(-7);\n  const isALetter = lastSevenChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/* Create a function that returns true if the last eight characters in a given string are an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastEightCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastEightCharsAreALetter(\"apple pi e\") �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = Math.floor((i + j) / 2)\n    if (arr[mid] < arr[i]) {\n      i = mid + 1\n    } else if (arr[mid] > arr[j]) {\n      j = mid\n    } else {\n      max = mid\n      j = mid - 1\n    }\n  }\n  return max\n}\n\n/*\n  canArrange([1,2,3,4,5,6,7,8,9,10]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) = 3\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) = 3\n  canArrange([1,2,3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  }\n  return [0, 0];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger one.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger one.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"5,1\"\n  compareThree(\"1\", 1) ➞ null\n  */\nconst compareThree = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger one.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"5,1\"\n  compareFour(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger one.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"5,1\"\n  compareFive(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger one.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareSix(1, 2.5) ➞ 2.5\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"5,1\"\n  compareSix(\"1\", 1) ➞ null\n  */\nconst compareSix = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger one.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareSeven(1, 2.5) ➞ 2.5\n  compareSeven(1, \"2,3\") ➞ \"2,3\"\n  compareSeven(\"5,1\", \"6\") ➞ \"5,1\"\n  compareSeven(\"1\", 1) ➞ null\n  */\nconst compareSeven = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOrOddOrOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Eevaluate whether the given number n can be written as the sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci2 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci2(n - 1) + fibonacci2(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci3 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci3(n - 1) + fibonacci3(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci4(n - 1) + fibonacci4(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci5 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci5(n - 1) + fibonacci5(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci6 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci6(n - 1) + fibonacci6(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci7 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci7(n - 1) + fibonacci7(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci8 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci8(n - 1) + fibonacci8(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci9 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci9(n - 1) + fibonacci9(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci10 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci10(n - 1) + fibonacci10(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci11 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci11(n - 1) + fibonacci11(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci12 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci12(n - 1) + fibonacci12(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci13 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci13(n - 1) + fibonacci13(n - 2)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci14 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci14(n - 1) + fibonacci14(n - 2)\n}\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.split('')\n  while (prefix.length > 0) {\n    prefixes.push(prefix.join(''))\n    prefix = prefix.slice(1)\n  }\n  return prefixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suffix.join(''))\n    suffix = suffix.slice(1)\n  }\n  return suffixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'cab', 'bca', 'bac']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  while (suffix.length > 0) {\n    suffixes.push(suff", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces2 = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces3 = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces4 = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces5 = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces6 = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores in it with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubesSquared = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubesSquaredSquared = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = primes.indexOf(word.length)\n    if (index!== -1) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  }\n\n  if (x_num === n_num && x_den === n_den + 1) {\n    return false;\n  }\n\n  if (x_num === n_num + 1 && x_den === n_den) {\n    return false;\n  }\n\n  if (x_num === n_num + 1 && x_den === n_den + 1) {\n    return true;\n  }\n\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = Array.from({ length: n }, (_, i) => i * i - i + 1);\n  const triples = arr.filter((_, i) => i < n - 1).map((_, i) => i * i - i + 1);\n  const sum = triples.reduce((a, b) => a + b, 0);\n  return sum % 3 === 0? sum / 3 : -1;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  if (planet1Index < 0 || planet2Index < 0) {\n    return () => []\n  }\n  const planet1Orbit = getOrbit(planet1)\n  const planet2Orbit = getOrbit(planet2)\n  const planet1OrbitLength = getOrbitLength(planet1Orbit)\n  const planet2OrbitLength = getOrbitLength(planet2Orbit)\n  const planet1OrbitStart = getOrbitStart(planet1Orbit)\n  const planet2OrbitStart = getOrbitStart(planet2Orbit)\n  const planet1OrbitEnd = getOrbitEnd(planet1Orbit)\n  const planet2OrbitEnd = getOrbitEnd(planet2Orbit)\n  const planet1OrbitLengthDiff = planet1OrbitEnd - planet1OrbitStart\n  const planet2OrbitLengthDiff = planet2OrbitEnd - planet2OrbitStart\n  const planet1OrbitStartDiff = planet1OrbitStart - planet2OrbitStart\n  const planet2OrbitStartDiff = planet2OrbitStart - planet1OrbitStart\n  const planet1OrbitEndDiff = planet1OrbitEnd - planet2OrbitEnd\n  const planet2OrbitEndDiff = planet2OrbitEnd - planet1OrbitEnd\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiff / planet1OrbitLength\n  const planet2OrbitLengthDiffPercent = planet2OrbitLengthDiff / planet2OrbitLength\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiff / planet1OrbitLengthDiff\n  const planet2OrbitStartDiffPercent = planet2OrbitStartDiff / planet2OrbitLengthDiff\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiff / planet1OrbitLengthDiff\n  const planet2OrbitEndDiffPercent = planet2OrbitEndDiff / planet2OrbitLengthDiff\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStartDiffPercent = planet1OrbitStartDiffPercent + planet2OrbitStartDiffPercent\n  const planet1OrbitEndDiffPercent = planet1OrbitEndDiffPercent + planet2OrbitEndDiffPercent\n  const planet1OrbitLengthDiffPercent = planet1OrbitLengthDiffPercent + planet2OrbitLengthDiffPercent\n  const planet1OrbitStart", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_11 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_12 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_13 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 0) {\n      sorted.push(lst[i])\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 5, 2, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 5, 2, 3, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n5; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 5, 2, 3, 4, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5, n6) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n5; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n6; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 5, 2, 3, 4, 5, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, n2, n3, n4, n5, n6, n7) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n5; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n6; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n7; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0, 5, 2, 3, 4, 5, 6, 7)\n  '0 1 2 3 4 5 6 7'\n  */\nconst stringSequence = (n, n2, n3, n4, n5, n6, n7, n8) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n2; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n3; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n4; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n5; i++) {\n    s +='';\n  }\n  for (let i = 0; i < n6; i++) {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n < 7) {\n    return true;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n}\n\nconst test = () => {\n  let x = xOrY(7, 34, 12);\n  let y = xOrY(15, 8, 5);\n  console.log(x);\n  console.log(y);\n}\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifferenceEven = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifferenceOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifferenceEvenOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifferenceEvenOddOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifferenceEvenOddOddOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 2 + 0 = 16\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifferenceOddEven = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 2 + 0 = 16\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifferenceOddEvenOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 2 + 0 = 16\n  doubleTheDifference([-1, -2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const score = game.map((x, i) => x)\n  const guess = guess.map((x, i) => x)\n  const diff = game.map((x, i) => Math.abs(x - guess[i]))\n  const diffLength = diff.length\n  const diffSum = diff.reduce((a, b) => a + b)\n  const diffAvg = diffSum / diffLength\n  const diffMax = diff.reduce((a, b) => Math.max(a, b))\n  const diffMin = diff.reduce((a, b) => Math.min(a, b))\n  const diffAvgDiff = Math.abs(diffAvg - score[0])\n  const diffMaxDiff = Math.abs(diffMax - score[0])\n  const diffMinDiff = Math.abs(diffMin - score[0])\n  const diffAvgDiffMax = Math.abs(diffAvgDiff - score[0])\n  const diffAvgDiffMin = Math.abs(diffAvgDiff - score[0])\n  const diffMaxDiffMax = Math.abs(diffMaxDiff - score[0])\n  const diffMaxDiffMin = Math.abs(diffMaxDiff - score[0])\n  const diffMinDiffMin = Math.abs(diffMinDiff - score[0])\n  const diffAvgDiffMaxMin = Math.abs(diffAvgDiffMax - score[0])\n  const diffAvgDiffMaxMin = Math.abs(diffAvgDiffMax - score[0])\n  const diffMaxDiffMinMin = Math.abs(diffMaxDiffMin - score[0])\n  const diffMaxDiffMinMax = Math.abs(diffMaxDiffMin - score[0])\n  const diffMinDiffMinMax = Math.abs(diffMinDiffMin - score[0])\n  const diffAvgDiffMaxMinMax = Math.abs(diffAvgDiffMaxMinMax - score[0])\n  const diffAvgDiffMaxMinMax = Math.abs(diffAvgDiffMaxMinMax - score[0])\n  const diffMaxDiffMinMaxMax = Math.abs(diffMaxDiffMinMaxMax - score[0])\n  const diffMaxDiffMinMaxMin = Math.abs(diffMaxDiffMinMaxMin - score[0])\n  const diffMinDiffMinMaxMax = Math.abs(diffMinDiffMinMaxMax - score[0])\n  const diffMinDiffMinMaxMin = Math.abs(diffMinDiffMinMaxMin - score[0])\n  const diffAvgDiffMaxMinMaxMin = Math.abs(diffAvgDiffMaxMinMaxMin - score[0])\n  const diffAvgDiffMaxMinMaxMin = Math.abs(diffAvgDiffMaxMinMaxMin - score[0])\n  const diffMaxDiffMinMaxMinMax = Math.abs(diffMaxDiffMinMaxMinMaxMax - score[0])\n  const diffMaxDiffMinMaxMinMax = Math.abs(diffMaxDiffMinMaxMinMaxMax - score[0])\n  const diffMinDiffMinMaxMinMax = Math.abs(diffMinDiffMinMaxMinMaxMax - score[0])\n  const diffMinDiffMinMaxMinMax = Math.abs(diffMinDiffMinMaxMinMaxMax - score[0])\n  const diffAvgDiffMaxMinMaxMinMax = Math.abs(diffAvgDiffMaxMinMaxMinMaxMax - score[0])\n  const diffAvgDiffMaxMinMaxMinMax = Math.abs(diffAvgDiffMaxMinMaxMinMaxMax - score[0])\n  const diffMaxDiffMinMaxMinMaxMax = Math.abs(diffMaxDiffMinMaxMinMaxMinMaxMax - score[0])\n  const diffMaxDiffMinMaxMinMaxMax = Math.abs(diffMaxDiffMinMaxMinMaxMinMaxMax - score[0])\n  const diffMinDiffMinMaxMinMaxMax = Math.abs(diffMinDiffMinMaxMinMaxMinMaxMax - score[0])\n  const diffMinDiffMinMaxMinMaxMax = Math.abs(diffMinDiffMinMaxMinMaxMinMaxMax - score[0])\n  const diffAvgDiffMaxMinMaxMinMaxMax = Math.abs(diffAvgDiffMaxMinMaxMinMaxMinMaxMax - score[0])\n  const diffAvgDiffMaxMinMaxMinMaxMax = Math.abs(diffAvgDiffMaxMinMaxMinMaxMinMaxMax - score[0])\n  const diffMaxDiffMinMaxMinMaxMaxMax = Math.abs(diffMaxDiffMinMaxMinMaxMinMaxMinMaxMax - score[0])\n  const diffMaxDiffMinMaxMinMaxMaxMax = Math.abs(diffMaxDiffMinMaxMinMaxMinMaxMinMaxMax - score[0])\n  const diffMinDiffMinMaxMinMaxMaxMax = Math.abs(diffMinDiffMinMaxMinMaxMinMaxMinMaxMax - score[0])\n  const diffMinDiffMinMaxMinMaxMaxMax = Math.abs(diffMinDiffMinMaxMinMaxMinMaxMinMaxMax - score[0])\n  const diffAvgDiffMaxMinMaxMinMaxMaxMax = Math.abs(diffAvgDiffMaxMinMaxMinMaxMinMaxMinMaxMaxMax - score[0])\n  const diffAvgDiffMaxMinMaxMinMaxMaxMax = Math.abs(diffAvgDiffMaxMinMaxMinMaxMinMaxMinMaxMaxMax - score[0])\n  const diffMaxDiffMinMaxMinMaxMinMaxMaxMax = Math.abs(diffMaxDiffMinMaxMinMaxMinMaxMinMaxMinMaxMaxMax - score[0])\n  const diffMaxDiffMinMaxMinMaxMinMaxMaxMax = Math.abs(diffMaxDiffMinMaxMinMaxMinMaxMinMaxMinMaxMaxMax - score[0])\n  const diffMinDiffMinMaxMinMaxMinMaxMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.match(/[A-Z]/g).length;\n    const sm = ext.match(/[a-z]/g).length;\n    strength[ext] = cap - sm;\n  });\n  const maxStrength = Object.keys(strength).reduce((max, key) => {\n    return strength[key] > strength[max]? key : max;\n  }, '');\n  return `${class_name}.${maxStrength}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_arr = a.split(\"\");\n  const b_arr = b.split(\"\");\n  const a_arr_len = a_arr.length;\n  const b_arr_len = b_arr.length;\n  const a_arr_len_minus_1 = a_arr_len - 1;\n  const b_arr_len_minus_1 = b_arr_len - 1;\n  const a_arr_len_minus_1_minus_1 = a_arr_len_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1 = b_arr_len_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = a_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n  const b_arr_len_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    while (num > 0) {\n        count += num % 2;\n        num = Math.floor(num / 2);\n    }\n    return (count % 2 === 0)? (1, count) : (2, count);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits2 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits3 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits4 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits5 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits6 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits7 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits8 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits9 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits10 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return (sum % 10 === 0)? (sum, sum) : (sum + 1, sum);\n};\n\n/*GReturns a tuple with the sum of the digits of a number.\n\n   Example:\n      sumDigits(123) ==> (3, 6)\n      sumDigits(1234) ==> (4, 9)\n  */\nconst sumDigits11 = (num) => {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const result = []\n  let i = 0\n  while (number > 0) {\n    while (number % 10 === 0) {\n      result.push(roman[i])\n      number = number / 10\n    }\n    i++\n    number = number % 10\n  }\n  return result.reverse().join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in upper case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const result = []\n  let i = 0\n  while (number > 0) {\n    while (number % 10 === 0) {\n      result.push(roman[i])\n      number = number / 10\n    }\n    i++\n    number = number % 10\n  }\n  return result.reverse().join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lower case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const result = []\n  let i = 0\n  while (number > 0) {\n    while (number % 10 === 0) {\n      result.push(roman[i])\n      number = number / 10\n    }\n    i++\n    number = number % 10\n  }\n  return result.reverse().join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in upper case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const result = []\n  let i = 0\n  while (number > 0) {\n    while (number % 10 === 0) {\n      result.push(roman[i])\n      number = number / 10\n    }\n    i++\n    number = number % 10\n  }\n  return result.reverse().join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lower case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const result = []\n  let i = 0\n  while (number > 0) {\n    while (number % 10 === 0) {\n      result.push(roman[i])\n      number = number / 10\n    }\n    i++\n    number = number % 10\n  }\n  return result.reverse().join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in upper case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const result = []\n  let i = 0\n  while (number > 0) {\n    while (number % 10 === 0) {\n      result.push(roman[i])\n      number = number / 10\n    }\n    i++\n    number = number % 10\n  }\n  return result.reverse().join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lower case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const result = []\n  let i = 0\n  while (number > 0) {\n    while (number % 10 === 0) {\n      result.push(roman[i])\n      number = number / 10\n    }\n    i++\n    number = number % 10\n  }\n  return result.reverse().join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in upper case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V',", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const unique = new Set(words)\n  return words.find((word) => unique.has(word))\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]))\nconsole.log(findMax([\"name\", \"enam\", \"game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 1],\n  [5, 14, 2],\n  [6, 15, 3],\n  [7, 16, 4],\n  [8, 17, 5],\n  [9, 18, 6],\n  [10, 19, 7],\n  [11, 20, 8],\n  [12, 21, 9],\n  [13, 22, 10],\n  [14, 23, 11],\n  [15, 24, 12],\n  [16, 25, 13],\n  [17, 26, 14],\n  [18, 27, 15],\n  [19, 28, 16],\n  [20, 29, 17],\n  [21, 30, 18],\n  [22, 31, 19],\n  [23, 32, 20],\n  [24, 33, 21],\n  [25, 34, 22],\n  [26, 35, 23],\n  [27, 36, 24],\n  [28, 37, 25],\n  [29, 38, 26],\n  [30, 39, 27],\n  [31, 40, 28],\n  [32, 41, 29],\n  [33, 42, 30],\n  [34, 43, 31],\n  [35, 44, 32],\n  [36, 45, 33],\n  [37, 46, 34],\n  [38, 47, 35],\n  [39, 48, 36],\n  [40, 49, 37],\n  [41, 50, 38],\n  [42, 51, 39],\n  [43, 52, 40],\n  [44, 53, 41],\n  [45, 54, 42],\n  [46, 55, 43],\n  [47, 56, 44],\n  [48, 57, 45],\n  [49, 58, 46],\n  [50, 59, 47],\n  [51, 60, 48],\n  [52, 61, 49],\n  [53, 62, 50],\n  [54, 63, 51],\n  [55, 64, 52],\n  [56, 65, 53],\n  [57, 66, 54],\n  [58, 67, 55],\n  [59, 68, 56],\n  [60, 69, 57],\n  [61, 70, 58],\n  [62, 71, 59],\n  [63, 72, 60],\n  [64, 73, 61],\n  [65, 74, 62],\n  [66, 75, 63],\n  [67, 76, 64],\n  [68, 77, 65],\n  [69, 78, 66],\n  [70, 79, 67],\n  [71, 80, 68],\n  [72, 81, 69],\n  [73, 82, 70],\n  [74, 83, 71],\n  [75, 84, 72],\n  [76, 85, 73],\n  [77, 86, 74],\n  [78, 87, 75],\n  [79, 88, 76],\n  [80, 89, 77],\n  [81, 90, 78],\n  [82, 91, 79],\n  [83, 92, 80],\n  [84, 93, 81],\n  [85, 94, 82],\n  [86, 95, 83],\n  [87, 96, 84],\n  [88, 97, 85],\n  [89, 98, 86],\n  [90, 99, 87],\n  [91, 100, 88],\n  [92, 101, 89],\n  [93, 102, 90],\n  [94, 103, 91],\n  [95, 104, 92],\n  [96, 105, 93],\n  [97, 106, 94],\n  [98, 107, 95],\n  [99, 108, 96],\n  [100, 109, 97],\n  [101, 110, 98],\n  [102, 111, 99],\n  [103, 112, 100],\n  [104, 113, 101],\n  [105, 114, 102],\n  [106, 115, 103],\n  [107, 116, 104],\n  [108, 117, 105],\n  [109, 118, 106],\n  [110, 119, 107],\n  [111, 120, 108],\n  [112, 121, 109],\n  [113, 122, 110],\n  [114, 123, 111],\n  [115, 124, 112],\n  [116, 125, 113],\n  [117, 126, 114],\n  [118, 127, 115],\n  [119, 128, 116],\n  [120, 129, 117],\n  [121, 130, 118],\n  [122, 131, 119],\n  [123, 132, 120],\n  [124, 133, 121],\n  [125, 134, 122],\n  [126, 135, 123],\n  [127, 136, 124],\n  [128, 137, 125],", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toLowerCase()] = 1\n    } else {\n      counts[char.toLowerCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toUpperCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.forEach(char => {\n    if (counts[char.toLowerCase()] === undefined) {\n      counts[char.toUpperCase()] = 1\n    } else {\n      counts[char.toUpperCase()]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters11 = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  chars.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let result = '';\n  for (let i = len - 1; i >= 0; i--) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'a9c7a8b5e3a3b1b4f2a5b5a7b5b8b9bab9cab9d'\n  */\nconst stringToSha1 = (text) => {\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == '9b4c7c8b5e3a3b1b4f2a5b5a7b5b8b9bab9cab9d'\n  */\nconst stringToSha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_2 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('base64');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_3 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_4 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('base64');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_5 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_6 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('base64');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_7 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512_8 = (text) => {\n  const sha512 = crypto.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result.filter(x => x % 2 === 0);\n};\n\nexport default generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o|') {\n      beats.push(1);\n    } else if (notes[i] === 'o ') {\n      beats.push(4);\n    } else if (notes[i] === 'o |') {\n      beats.push(2);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | | | | | | | | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | | | | | | | | | | | | | | | | | | | | |", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, subst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 2\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  Output is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 3\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  Output is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 4\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  Output is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 5\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  Output is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 6\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  Output is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 7\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  Output is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 8\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  Output is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArray = numbers.split(' ').map(Number);\n  const sortedArray = numbersArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/*\n  Question 9\n  Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(3.1)\n  3\n  >>> truncateNumber(3.6)\n  4\n  >>> truncateNumber(3.7)\n  4\n  >>> truncateNumber(3.8)\n  4\n  >>> truncateNumber(3.9)\n  4\n  >>> truncateNumber(4.0)\n  4\n  >>> truncateNumber(4.1)\n  4\n  >>> truncateNumber(4.2)\n  4\n  >>> truncateNumber(4.3)\n  4\n  >>> truncateNumber(4.4)\n  4\n  >>> truncateNumber(4.5)\n  4\n  >>> truncateNumber(4.6)\n  5\n  >>> truncateNumber(4.7)\n  5\n  >>> truncateNumber(4.8)\n  5\n  >>> truncateNumber(4.9)\n  5\n  >>> truncateNumber(5.0)\n  5\n  >>> truncateNumber(5.1)\n  5\n  >>> truncateNumber(5.2)\n  5\n  >>> truncateNumber(5.3)\n  5\n  >>> truncateNumber(5.4)\n  5\n  >>> truncateNumber(5.5)\n  5\n  >>> truncateNumber(5.6)\n  6\n  >>> truncateNumber(5.7)\n  6\n  >>> truncateNumber(5.8)\n  6\n  >>> truncateNumber(5.9)\n  6\n  >>> truncateNumber(6.0)\n  6\n  >>> truncateNumber(6.1)\n  6\n  >>> truncateNumber(6.2)\n  6\n  >>> truncateNumber(6.3)\n  6\n  >>> truncateNumber(6.4)\n  6\n  >>> truncateNumber(6.5)\n  6\n  >>> truncateNumber(6.6)\n  6\n  >>> truncateNumber(6.7)\n  6\n  >>> truncateNumber(6.8)\n  6\n  >>> truncateNumber(6.9)\n  6\n  >>> truncateNumber(7.0)\n  7\n  >>> truncateNumber(7.1)\n  7\n  >>> truncateNumber(7.2)\n  7\n  >>> truncateNumber(7.3)\n  7\n  >>> truncateNumber(7.4)\n  7\n  >>> truncateNumber(7.5)\n  7\n  >>> truncateNumber(7.6)\n  7\n  >>> truncateNumber(7.7)\n  7\n  >>> truncateNumber(7.8)\n  7\n  >>> truncateNumber(7.9)\n  7\n  >>> truncateNumber(8.0)\n  8\n  >>> truncateNumber(8.1)\n  8\n  >>> truncateNumber(8.2)\n  8\n  >>> truncateNumber(8.3)\n  8\n  >>> truncateNumber(8.4)\n  8\n  >>> truncateNumber(8.5)\n  8\n  >>> truncateNumber(8.6)\n  8\n  >>> truncateNumber(8.7)\n  8\n  >>> truncateNumber(8.8)\n  8\n  >>> truncateNumber(8.9)\n  8\n  >>> truncateNumber(9.0)\n  9\n  >>> truncateNumber(9.1)\n  9\n  >>> truncateNumber(9.2)\n  9\n  >>> truncateNumber(9.3)\n  9\n  >>> truncateNumber(9.4)\n  9\n  >>> truncateNumber(9.5)\n  9\n  >>> truncateNumber(9.6)\n  9\n  >>> truncateNumber(9.7)\n  9\n  >>> truncateNumber(9.8)\n  9\n  >>> truncateNumber(9.9)\n  9\n  >>> truncateNumber(10.0)\n  10\n  >>> truncateNumber(10.1)\n  10\n  >>> truncateNumber(10.2)\n  10\n  >>> truncateNumber(10.3)\n  10\n  >>> truncateNumber(10.4)\n  10\n  >>> truncateNumber(10.5)\n  10\n  >>> truncateNumber(10.6)\n  10\n  >>> truncateNumber(10.7)\n  10\n  >>> truncateNumber(10.8)\n  10\n  >>> truncateNumber(10.9)\n  10\n  >>> truncateNumber(11.0)\n  11\n  >>> truncateNumber(11.1)\n  11\n  >>> truncateNumber(11.2)\n  11\n  >>> truncateNumber(11.3)\n  11\n  >>> truncateNumber(11.4)\n  11\n  >>> truncateNumber(11.5)\n  11\n  >>> truncateNumber(11.6)\n  11\n  >>> truncateNumber(11.7)\n  11\n  >>> truncateNumber(11.8)\n  11\n  >>> truncateNumber(11.9)\n  11\n  >>> truncateNumber(12.0)\n  12\n  >>> truncateNumber(12.1)\n  12\n  >>> truncateNumber(12.2)\n  12\n  >>> truncateNumber(12.3)\n  12\n  >>> truncateNumber(12.4)\n  12\n  >>> truncateNumber(12.5)\n  12\n  >>> truncateNumber(12.6)\n  12\n  >>> truncateNumber(12.7)\n  12\n  >>> truncateNumber(12.8)\n  12\n  >>> truncateNumber(12.9)\n  12\n  >>> truncateNumber(13.0)\n  13\n  >>> truncateNumber(13.1)\n  13\n  >>> truncateNumber(13.2)\n  13\n  >>> truncateNumber(13.3)\n  13\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n   ...numbers\n  ]\n}\n\n/**\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbers = (values) => {\n  return values.filter(v => typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegers = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegers = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegersOrStrings = (values) => {\n  return values.filter(v => typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number' && typeof v!=='string' && typeof v!== 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersOrStringsOrIntegersOrStringsOrIntegersOrStr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Returns the index of the first occurrence of the given string in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'c')\n  * // => 2\n  * strindex('abc', 'd')\n  * // => -1\n  */\nconst strindex = (string, search) => {\n  const index = string.indexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the last occurrence of the given string in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strlastindex('abc', 'a')\n  * // => 1\n  * strlastindex('abc', 'b')\n  * // => 2\n  * strlastindex('abc', 'c')\n  * // => 3\n  * strlastindex('abc', 'd')\n  * // => -1\n  */\nconst strlastindex = (string, search) => {\n  const index = string.lastIndexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the first occurrence of the given character in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'c')\n  * // => 2\n  * strindex('abc', 'd')\n  * // => -1\n  */\nconst strindex = (string, search) => {\n  const index = string.indexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the last occurrence of the given character in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strlastindex('abc', 'a')\n  * // => 1\n  * strlastindex('abc', 'b')\n  * // => 2\n  * strlastindex('abc', 'c')\n  * // => 3\n  * strlastindex('abc', 'd')\n  * // => -1\n  */\nconst strlastindex = (string, search) => {\n  const index = string.lastIndexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the first occurrence of the given character in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'c')\n  * // => 2\n  * strindex('abc', 'd')\n  * // => -1\n  */\nconst strindex = (string, search) => {\n  const index = string.indexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the last occurrence of the given character in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strlastindex('abc', 'a')\n  * // => 1\n  * strlastindex('abc', 'b')\n  * // => 2\n  * strlastindex('abc', 'c')\n  * // => 3\n  * strlastindex('abc', 'd')\n  * // => -1\n  */\nconst strlastindex = (string, search) => {\n  const index = string.lastIndexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the first occurrence of the given character in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'c')\n  * // => 2\n  * strindex('abc', 'd')\n  * // => -1\n  */\nconst strindex = (string, search) => {\n  const index = string.indexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the last occurrence of the given character in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strlastindex('abc', 'a')\n  * // => 1\n  * strlastindex('abc', 'b')\n  * // => 2\n  * strlastindex('abc', 'c')\n  * // => 3\n  * strlastindex('abc', 'd')\n  * // => -1\n  */\nconst strlastindex = (string, search) => {\n  const index = string.lastIndexOf(search);\n  return index === -1? -1 : index;\n};\n\n/**\n  * Returns the index of the first occurrence of the given character in the given string\n  *\n  * @param {string} string\n  * @param {string} search\n  * @returns {number}\n  * @example\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'c')\n  * // => 2\n  * strindex('abc', 'd')\n  * // => -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisors = [1];\n  let max = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i > max) {\n        max = i;\n      }\n    }\n    i++;\n  }\n  return max;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i < min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor2 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i < min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor3 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i < min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor4 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i > min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor5 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i < min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor6 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i > min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor7 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i < min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor8 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i < min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor9 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i > min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor10 = (n) => {\n  let divisors = [1];\n  let min = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      divisors.push(i);\n      if (i < min) {\n        min = i;\n      }\n    }\n    i++;\n  }\n  return min;\n};\n\n/* Find for a given number n the smallest number dividing n evenly, less than n\n  >>> smallestDivisor(15)\n  5\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors2 = []\n  const factors3 = []\n  const factors4 = []\n  const factors5 = []\n  const factors6 = []\n  const factors7 = []\n  const factors8 = []\n  const factors9 = []\n  const factors10 = []\n  const factors11 = []\n  const factors12 = []\n  const factors13 = []\n  const factors14 = []\n  const factors15 = []\n  const factors16 = []\n  const factors17 = []\n  const factors18 = []\n  const factors19 = []\n  const factors20 = []\n  const factors21 = []\n  const factors22 = []\n  const factors23 = []\n  const factors24 = []\n  const factors25 = []\n  const factors26 = []\n  const factors27 = []\n  const factors28 = []\n  const factors29 = []\n  const factors30 = []\n  const factors31 = []\n  const factors32 = []\n  const factors33 = []\n  const factors34 = []\n  const factors35 = []\n  const factors36 = []\n  const factors37 = []\n  const factors38 = []\n  const factors39 = []\n  const factors40 = []\n  const factors41 = []\n  const factors42 = []\n  const factors43 = []\n  const factors44 = []\n  const factors45 = []\n  const factors46 = []\n  const factors47 = []\n  const factors48 = []\n  const factors49 = []\n  const factors50 = []\n  const factors51 = []\n  const factors52 = []\n  const factors53 = []\n  const factors54 = []\n  const factors55 = []\n  const factors56 = []\n  const factors57 = []\n  const factors58 = []\n  const factors59 = []\n  const factors60 = []\n  const factors61 = []\n  const factors62 = []\n  const factors63 = []\n  const factors64 = []\n  const factors65 = []\n  const factors66 = []\n  const factors67 = []\n  const factors68 = []\n  const factors69 = []\n  const factors70 = []\n  const factors71 = []\n  const factors72 = []\n  const factors73 = []\n  const factors74 = []\n  const factors75 = []\n  const factors76 = []\n  const factors77 = []\n  const factors78 = []\n  const factors79 = []\n  const factors80 = []\n  const factors81 = []\n  const factors82 = []\n  const factors83 = []\n  const factors84 = []\n  const factors85 = []\n  const factors86 = []\n  const factors87 = []\n  const factors88 = []\n  const factors89 = []\n  const factors90 = []\n  const factors91 = []\n  const factors92 = []\n  const factors93 = []\n  const factors94 = []\n  const factors95 = []\n  const factors96 = []\n  const factors97 = []\n  const factors98 = []\n  const factors99 = []\n  const factors100 = []\n  const factors101 = []\n  const factors102 = []\n  const factors103 = []\n  const factors104 = []\n  const factors105 = []\n  const factors106 = []\n  const factors107 = []\n  const factors108 = []\n  const factors109 = []\n  const factors110 = []\n  const factors111 = []\n  const factors112 = []\n  const factors113 = []\n  const factors114 = []\n  const factors115 = []\n  const factors116 = []\n  const factors117 = []\n  const factors118 = []\n  const factors119 = []\n  const factors120 = []\n  const factors121 = []\n  const factors122 = []\n  const factors123 = []\n  const factors124 = []\n  const factors125 = []\n  const factors126 = []\n  const factors127 = []\n  const factors128 = []\n  const factors129 = []\n  const factors130 = []\n  const factors131 = []\n  const factors132 = []\n  const factors133 = []\n  const factors134 = []\n  const factors135 = []\n  const factors136 = []\n  const factors137 = []\n  const factors138 = []\n  const factors139 = []\n  const factors140 = []\n  const factors141 = []\n  const factors142 = []\n  const factors143 = []\n  const factors144 = []\n  const factors145 = []\n  const factors146 = []\n  const factors147 = []\n  const factors148 = []\n  const factors149 = []\n  const factors150 = []\n  const factors151 = []\n  const factors152 = []\n  const factors153 = []\n  const factors154 = []\n  const factors155 = []\n  const factors156 = []\n  const factors157 = []\n  const factors158 = []\n  const factors159 = []\n  const factors160 = []\n  const factors161 = []\n  const factors162 = []\n  const factors163 = []\n  const factors164 = []\n  const factors165 = []\n  const factors166 = []\n  const factors167 = []\n  const factors168 = []\n  const factors169 = []\n  const factors170 = []\n  const factors171 = []\n  const factors172 = []\n  const factors173 = []\n  const factors174 = []\n  const factors175 = []\n  const factors176 = []\n  const factors177 = []\n  const factors178 = []\n  const factors179 = []\n  const factors180 = []\n  const factors181 = []\n  const factors182 = []\n  const factors183 = []\n  const factors184 = []\n  const factors185 = []\n  const factors186 = []\n  const factors187 = []\n  const factors188 = []\n  const factors189 = []\n  const factors190 = []\n  const factors191 = []\n  const factors192 = []\n  const factors193 = []\n  const factors194 = []\n  const factors195 = []\n  const factors196 = []\n  const factors197 = []\n  const factors198 = []\n  const factors199 = []\n  const factors200 = []\n  const factors201 = []\n  const factors202 = []\n  const factors203 = []\n  const factors204 = []\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(number);\n      numberIndex.push(i);\n    }\n    i++;\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const numberIndex = [];\n  const numberIndexLength = numbers.length;\n  let i = 0;\n  while (i < numberIndexLength) {\n    const number = numbers[i];\n    if (uniqueNumbersIndex.indexOf(number) === -1) {\n      uniqueNumbers.push(number);\n      uniqueNumbersIndex.push(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 = (string) => {\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operations = Array.from(operations);\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport { belowZero };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n % 3 === 0) return false\n  if (n < 99) return true\n  if (n % 5 === 0) return false\n  if (n < 999) return true\n  if (n % 7 === 0) return false\n  if (n < 9999) return true\n  if (n % 11 === 0) return false\n  if (n < 99999) return true\n  if (n % 13 === 0) return false\n  if (n < 99999999) return true\n  return false\n}\n\n/*Return the number of primes less than a given number.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const max = xs[n / 2];\n    const min = xs[n / 2 - 1];\n    if (max === min) {\n      return max;\n    }\n    const mid = (max + min) / 2;\n    const midX = poly(mid);\n    if (midX === 0) {\n      return mid;\n    }\n    const midX2 = poly(midX);\n    if (midX2 === 0) {\n      return midX;\n    }\n    if (midX2 < 0) {\n      return findZero(xs.slice(0, n / 2));\n    }\n    return findZero(xs.slice(n / 2 + 1));\n  }\n  return null;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by five, while its values for indices divisible by five correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst sortFifth = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by ten, while its values for indices divisible by ten correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst sortTenth = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> sortTwenty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> sortTwenty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  */\nconst sortTwenty = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\n/*Tits function takes a list l and returns a list l' that is identical to l in indices that are not divisible by thirty, while its values for indices divisible by thirty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThirty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  >>> sortThirty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n  >>> sortThirty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique = (l) => {\n  return unique(l).length;\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique2 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique3 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique4 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique5 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique6 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique7 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique8 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique9 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique10 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique11 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique12 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique13 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique14 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n  * @param {Array} l\n  * @returns {number}\n  *Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n  * @param {Array} l\n  * @returns {number}\n  *Rreturns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n  * @param {Array} l\n  * @returns {number}\n  *Rreturns the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/**\n  * @param {Array} l\n  * @returns {Array}\n  *Rreturns the sorted list.\n  >>> sorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, 0, 1, 2, 3, 9, 123, 5, 6]\n  */\nconst sorted = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i]);\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  * @param {Array} l\n  * @returns {Array}\n  *Rreturns the list with the largest and smallest elements removed.\n  >>> removeMin([1, 2, 3])\n  [2, 3]\n  >>> removeMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst removeMin = (l) => {\n  const min = minElement(l);\n  const sorted = sorted(l);\n  sorted.splice(0, 1);\n  return sorted;\n};\n\n/**\n  * @param {Array} l\n  * @returns {Array}\n  *Rreturns the list with the largest and smallest elements removed.\n  >>> removeMax([1, 2, 3])\n  [1, 2]\n  >>> removeMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst removeMax = (l) => {\n  const max = maxElement(l);\n  const sorted = sorted(l);\n  sorted.splice(sorted.length - 1, 1);\n  return sorted;\n};\n\n/**\n  * @param {Array} l\n  * @returns {Array}\n  *Rreturns the list with the largest and smallest elements removed.\n  >>> removeMin([1, 2, 3])\n  [2, 3]\n  >>> removeMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst removeMax = (l) => {\n  const max = maxElement(l);\n  const sorted = sorted(l);\n  sorted.splice(sorted.length - 1, 1);\n  return sorted;\n};\n\n/**\n  * @param {Array} l\n  * @returns {Array}\n  *Rreturns the list with the largest and smallest elements removed.\n  >>> removeMin([1, 2, 3])\n  [2, 3]\n  >>> removeMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst removeMin = (l) => {\n  const min = minElement(l);\n  const sorted = sorted(l);\n  sorted.splice(0, 1);\n  return sorted;\n};\n\n/**\n  * @param {Array} l\n  * @returns {Array}\n  *Rreturns the list with the largest and smallest elements removed.\n  >>> removeMax([1, 2, 3])\n  [1, 2]\n  >>> removeMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst removeMax = (l) => {\n  const max = maxElement(l);\n  const sorted = sorted(l);\n  sorted.splice", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0) {\n    return '11';\n  }\n  if (n % 13 === 0) {\n    return '13';\n  }\n  return n;\n};\n\nexport default fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortBy = (l, key) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByKey = (l, key) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByValue = (l, key) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByValueKey = (l, key) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByValueKeyDesc = (l, key) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByValueKeyDescDesc = (l, key) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns dec", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  return (primeFib(n - 1) + primeFib(n - 2)) % 1000000;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.abs(number - mean));\n    return Math.abs(mean - (mean(diff) / 2));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n    return Math.sqrt(mean(diff));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n    return Math.sqrt(mean(diff));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n    return Math.sqrt(mean(diff));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n    return Math.sqrt(mean(diff));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n    return Math.sqrt(mean(diff));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n    return Math.sqrt(mean(diff));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const diff = numbers.map(number => Math.pow(Math.abs(number - mean), 2));\n    return Math.sqrt(mean(diff));\n  };\n  return deviation(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation around the mean value of this dataset. The standard deviation is the square root of the average of the squared differences between each element and a midpoint (mean in this case): SD = sqrt(average | (x - x _ mean)^2 |)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  return l.length === unique.size && l.every((x) => unique.has(x) && x === 0)\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  return l.length === unique.size && l.every((x) => unique.has(x) && x === 0)\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  return l.length === unique.size && l.every((x) => unique.has(x) && x === 0)\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  return l.length === unique.size && l.every((x) => unique.has(x) && x === 0)\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  return l.length === unique.size && l.every((x) => unique.has(x) && x === 0)\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  return l.length === unique.size && l.every((x) => unique.has(x) && x === 0)\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  return l.length === unique.size && l.every((x) => unique.has(x) && x === 0)\n}\n\n/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision2 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision3 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision4 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision5 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision6 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision7 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision8 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x - cars[j].x) < cars[i].width / 2 + cars[j].width / 2) {\n          collisions++;\n        }\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return collisions;\n};\n\n/*\n  This function outputs the number of cars that collide.\n  */\nconst carRaceCollision9 = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < n) {\n      if (i < n - 1 && j < n - 1) {\n        if (Math.abs(cars[i].x -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 8, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 10, 6, 12, 4, 12, 0, 120]\n  */\nconst multList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 2);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 2.5, 0, 2.5]\n  */\nconst divList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 2);\n  }\n  return newList;\n};\n\n/*Return list with elements added to each other.\n  >>> addList([1, 2, 3])\n  [2, 4, 6]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [7, 5, 7, 5, 9, 3, 9, 0, 123]\n  */\nconst addList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + l[i + 1]);\n  }\n  return newList;\n};\n\n/*Return list with elements subtracted from each other.\n  >>> subList([1, 2, 3])\n  [0, 1, 2]\n  >>> subList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 2, 3, 3, 8, 0, 122]\n  */\nconst subList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - l[i + 1]);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by each other.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 10, 6, 12, 4, 12, 0, 120]\n  */\nconst multList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * l[i + 1]);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by each other.\n  >>> divList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 2.5, 0, 2.5]\n  */\nconst divList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / l[i + 1]);\n  }\n  return newList;\n};\n\n/*Return list with elements added to each other.\n  >>> addList([1, 2, 3])\n  [2, 4, 6]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [7, 5, 7, 5, 9, 3, 9, 0, 123]\n  */\nconst addList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + l[i + 1]);\n  }\n  return newList;\n};\n\n/*Return list with elements subtracted from each other.\n  >>> subList([1, 2, 3])\n  [0, 1, 2]\n  >>> subList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 2, 3, 3, 8, 0, 122]\n  */\nconst subList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - l[i + 1]);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by each other.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 10, 6,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero4 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero5 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero6 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero7 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero8 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero9 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero10 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst pairsSumToZero11", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*Cfind the number of digits in the number x.\n  >>> findDigits(123)\n  3\n  >>> findDigits(12345)\n  5\n  >>> findDigits(1234567)\n  7\n  >>> findDigits(123456789)\n  9\n  >>> findDigits(12345678901)\n  11\n  >>> findDigits(1234567890123)\n  13\n  >>> findDigits(123456789012345)\n  15\n  >>> findDigits(12345678901234567)\n  17\n  >>> findDigits(1234567890123456789)\n  19\n  */\nconst findDigits = (x) => {\n  let result = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    result++;\n  }\n  return result;\n};\n\n/*Cfind the number of digits in the number x.\n  >>> findDigits(123)\n  3\n  >>> findDigits(12345)\n  5\n  >>> findDigits(1234567)\n  7\n  >>> findDigits(123456789)\n  9\n  >>> findDigits(12345678901)\n  11\n  >>> findDigits(1234567890123)\n  13\n  >>> findDigits(123456789012345)\n  15\n  >>> findDigits(12345678901234567)\n  17\n  >>> findDigits(1234567890123456789)\n  19\n  */\nconst findDigits2 = (x) => {\n  let result = 0;\n  while (x > 0) {\n    result++;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\n/*Cfind the number of digits in the number x.\n  >>> findDigits(123)\n  3\n  >>> findDigits(12345)\n  5\n  >>> findDigits(1234567)\n  7\n  >>> findDigits(123456789)\n  9\n  >>> findDigits(12345678901)\n  11\n  >>> findDigits(1234567890123)\n  13\n  >>> findDigits(123456789012345)\n  15\n  >>> findDigits(12345678901234567)\n  17\n  >>> findDigits(1234567890123456789)\n  19\n  */\nconst findDigits3 = (x) => {\n  let result = 0;\n  while (x > 0) {\n    result++;\n    x = Math.floor(x / 100);\n  }\n  return result;\n};\n\n/*Cfind the number of digits in the number x.\n  >>> findDigits(123)\n  3\n  >>> findDigits(12345)\n  5\n  >>> findDigits(1234567)\n  7\n  >>> findDigits(123456789)\n  9\n  >>> findDigits(12345678901)\n  11\n  >>> findDigits(1234567890123)\n  13\n  >>> findDigits(123456789012345)\n  15\n  >>> findDigits(12345678901234567)\n  17\n  >>> findDigits(1234567890123456789)\n  19\n  */\nconst findDigits4 = (x) => {\n  let result = 0;\n  while (x > 0) {\n    result++;\n    x = Math.floor(x / 1000);\n  }\n  return result;\n};\n\n/*Cfind the number of digits in the number x.\n  >>> findDigits(123)\n  3\n  >>> findDigits(12345)\n  5\n  >>> findDigits(1234567)\n  7\n  >>> findDigits(123456789)\n  9\n  >>> findDigits(12345678901)\n  11\n  >>> findDigits(1234567890123)\n  13\n  >>> findDigits(123456789012345)\n  15\n  >>> findDigits(12345678901234567)\n  17\n  >>> findDigits(1234567890123456789)\n  19\n  */\nconst findDigits5 = (x) => {\n  let result = 0;\n  while (x > 0) {\n    result++;\n    x = Math.floor(x / 10000);\n  }\n  return result;\n};\n\n/*Cfind the number of digits in the number x.\n  >>> findDigits(123)\n  3\n  >>> findDigits(12345)\n  5\n  >>> findDigits(1234567)\n  7\n  >>> findDigits(123456789)\n  9\n  >>> findDigits(12345678901)\n  11\n  >>> findDigits(1234567890123)\n  13\n  >>> findDigits(123456789012345)\n  15\n  >>> findDigits(12345678901234567)\n  17\n  >>> findDigits(1234567890123456789)\n  19\n  */\nconst findDigits6 = (x) => {\n  let result = 0;\n  while (x > 0) {\n    result++;\n    x = Math.floor(x / 100000);\n  }\n  return result;\n};\n\n/*Cfind the number of digits in the number x.\n  >>> findDigits(123)\n  3\n  >>> findDigits(12345)\n  5\n  >>> findDigits(1234567)\n  7\n  >>> findDigits(123456789)\n  9\n  >>> findDigits(12345678901)\n  11\n  >>> findDigits(1234567890123)\n  13\n  >>> findDigits", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4(n - 1) + fib4(n - 2)\n  }\n}\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  1\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  3\n  >>> fib4(4)\n  5\n  >>> fib4(5)\n  8\n  >>> fib4(6)\n  13\n  >>> fib4(7)\n  21\n  */\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4_(n - 1) + fib4_(n - 2)\n  }\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) {\n    return 0\n  } else if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(2, a) % p)\n}\n\n/*Return n^2 modulo p (Attention Numeric).\n  >>> modp2(3, 5)\n  3\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 2) % p)\n}\n\n/*Return n^3 modulo p (Attention Numeric).\n  >>> modp3(3, 5)\n  3\n  >>> modp3(1101, 101)\n  2\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 3) % p)\n}\n\n/*Return n^4 modulo p (Attention Numeric).\n  >>> modp4(3, 5)\n  3\n  >>> modp4(1101, 101)\n  2\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 4) % p)\n}\n\n/*Return n^5 modulo p (Attention Numeric).\n  >>> modp5(3, 5)\n  3\n  >>> modp5(1101, 101)\n  2\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 5) % p)\n}\n\n/*Return n^6 modulo p (Attention Numeric).\n  >>> modp6(3, 5)\n  3\n  >>> modp6(1101, 101)\n  2\n  >>> modp6(0, 101)\n  1\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 6) % p)\n}\n\n/*Return n^7 modulo p (Attention Numeric).\n  >>> modp7(3, 5)\n  3\n  >>> modp7(1101, 101)\n  2\n  >>> modp7(0, 101)\n  1\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 7) % p)\n}\n\n/*Return n^8 modulo p (Attention Numeric).\n  >>> modp8(3, 5)\n  3\n  >>> modp8(1101, 101)\n  2\n  >>> modp8(0, 101)\n  1\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 8) % p)\n}\n\n/*Return n^9 modulo p (Attention Numeric).\n  >>> modp9(3, 5)\n  3\n  >>> modp9(1101, 101)\n  2\n  >>> modp9(0, 101)\n  1\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 9) % p)\n}\n\n/*Return n^10 modulo p (Attention Numeric).\n  >>> modp10(3, 5)\n  3\n  >>> modp10(1101, 101)\n  2\n  >>> modp10(0, 101)\n  1\n  >>> modp10(3, 11)\n  8\n  >>> modp10(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 10) % p)\n}\n\n/*Return n^11 modulo p (Attention Numeric).\n  >>> modp11(3, 5)\n  3\n  >>> modp11(1101, 101)\n  2\n  >>> modp11(0, 101)\n  1\n  >>> modp11(3, 11)\n  8\n  >>> modp11(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (Math.pow(n, 11) % p)\n}\n\n/*Return n^12 modulo p (Attention Numeric", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len && j < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n    j++;\n  }\n  return result;\n};\n\nexport default intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Return the sum of all numbers in list l.\n  >>> sum([1, 2, 4, 10])\n  15\n  >>> sum([1, 20, 4, 10])\n  24\n  */\nconst sum = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*\n  Return the average of all numbers in list l.\n  >>> average([1, 2, 4, 10])\n  5\n  >>> average([1, 20, 4, 10])\n  4\n  */\nconst average = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum / len\n}\n\n/*\n  Return the median of all numbers in list l.\n  >>> median([1, 2, 4, 10])\n  4\n  >>> median([1, 20, 4, 10])\n  4\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len % 2 === 0) {\n    return (l[len / 2 - 1] + l[len / 2]) / 2\n  } else {\n    return l[len / 2]\n  }\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode2 = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode3 = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode4 = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode5 = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode6 = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode7 = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      maxIndex = i\n    }\n  }\n  return l[maxIndex]\n}\n\n/*\n  Return the mode of all numbers in list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode8 = (l) => {\n  const len = l.length\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Calculate the factorial of a number\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  * Calculate the sum of a list of numbers\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((acc, n) => acc + n, 0);\n};\n\n/*\n  * Calculate the average of a list of numbers\n  >>> average([1, 2, 3])\n  2\n  >>> average([1, 2, 3, 4])\n  2.5\n  >>> average([1, 2, 3, 4, 5])\n  3\n  */\nconst average = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/*\n  * Calculate the median of a list of numbers\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 4])\n  2.5\n  >>> median([1, 2, 3, 4, 5])\n  3\n  */\nconst median = (numbers) => {\n  const sorted = numbers.sort();\n  if (numbers.length % 2 === 0) {\n    return (sorted[numbers.length / 2 - 1] + sorted[numbers.length / 2]) / 2;\n  } else {\n    return sorted[numbers.length / 2];\n  }\n};\n\n/*\n  * Calculate the mode of a list of numbers\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([1, 2, 3, 4])\n  3\n  >>> mode([1, 2, 3, 4, 5])\n  4\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const mode = sorted[numbers.length - 1];\n  const count = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*\n  * Calculate the range of a list of numbers\n  >>> range([1, 2, 3])\n  [1, 2, 3]\n  >>> range([1, 2, 3, 4])\n  [1, 2, 3]\n  >>> range([1, 2, 3, 4, 5])\n  [1, 2, 3, 4]\n  */\nconst range = (numbers) => {\n  const sorted = numbers.sort();\n  const start = sorted[0];\n  const end = sorted[numbers.length - 1];\n  return [start, end];\n};\n\n/*\n  * Calculate the mode of a list of numbers\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([1, 2, 3, 4])\n  3\n  >>> mode([1, 2, 3, 4, 5])\n  4\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const mode = sorted[numbers.length - 1];\n  const count = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*\n  * Calculate the mode of a list of numbers\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([1, 2, 3, 4])\n  3\n  >>> mode([1, 2, 3, 4, 5])\n  4\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const mode = sorted[numbers.length - 1];\n  const count = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*\n  * Calculate the mode of a list of numbers\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([1, 2, 3, 4])\n  3\n  >>> mode([1, 2, 3, 4, 5])\n  4\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const mode = sorted[numbers.length - 1];\n  const count = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    }\n  }\n  return mode;\n};\n\n/*\n  * Calculate the mode of a list of numbers\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([1, 2, 3, 4])\n  3\n  >>> mode([1, 2, 3, 4, 5])\n  4\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let s0Len = s0.length;\n    let s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters and numbers.\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsNums('abcd', 'dddddddabc')\n  true\n  >>> sameCharsNums('dddddddabc', 'abcd')\n  true\n  >>> sameCharsNums('eabcd', 'dddddddabce')\n  false\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsNums = (s0, s1) => {\n    let s0Len = s0.length;\n    let s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i] && s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters and numbers.\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsNums('abcd', 'dddddddabc')\n  true\n  >>> sameCharsNums('dddddddabc', 'abcd')\n  true\n  >>> sameCharsNums('eabcd', 'dddddddabce')\n  false\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsNums2 = (s0, s1) => {\n    let s0Len = s0.length;\n    let s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i] && s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters and numbers.\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsNums('abcd', 'dddddddabc')\n  true\n  >>> sameCharsNums('dddddddabc', 'abcd')\n  true\n  >>> sameCharsNums('eabcd', 'dddddddabce')\n  false\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsNums3 = (s0, s1) => {\n    let s0Len = s0.length;\n    let s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i] && s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check that two words have the same letters and numbers.\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsNums('abcd', 'dddddddabc')\n  true\n  >>> sameCharsNums('dddddddabc', 'abcd')\n  true\n  >>> sameCharsNums('eabcd', 'dddddddabce')\n  false\n  >>> sameCharsNums('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsNums4 = (s0, s1) => {\n    let s0Len = s0.length;\n    let s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0[i]!== s1[i] && s0[i].toLowerCase()!== s1[i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = {\n    sameChars,\n    sameCharsNums,\n    sameCharsNums2,\n    sameCharsNums3,\n    sameCharsNums4\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return false\n  }\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\")\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWords = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    words.push(word)\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInBrackets = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInBracketsAndQuotes = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInQuotes = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInQuotesAndBrackets = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInBracketsAndQuotesAndBrackets = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInBracketsAndQuotesAndQuotes = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInQuotesAndQuotes = (str) => {\n  const words = []\n  let i = 0\n  while (i < str.length) {\n    const start = i\n    while (i < str.length &&!isWhitespace(str[i])) {\n      i++\n    }\n    const word = str.slice(start, i)\n    if (word.length > 0) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/*\n  Given a string, returns a list of all the words in the string.\n  Words are defined as sequences of non-whitespace characters.\n  */\nconst getWordsInQuotesAndQuotesAndQuotes = (str) => {\n  const words = []\n  let i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic11 = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <= prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*\n  >>> mon", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\nexport default largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [paren_string];\n  const stack_length = stack.length;\n  const stack_max = stack_length - 1;\n  const stack_max_index = stack_max;\n  const stack_max_index_index = stack_max_index - 1;\n  const stack_max_index_index_index = stack_max_index_index - 1;\n  const stack_max_index_index_index_index = stack_max_index_index_index - 1;\n\n  const stack_max_index_index_index_index_index_index = stack_max_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index - 1;\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(i)\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the number of times that the string appears in the string.\n  \n  >>> count(\"aa\")\n  1\n  >>> count(\"aaa\")\n  3\n  >>> count(\"aaaa\")\n  4\n  >>> count(\"aaaaa\")\n  5\n  >>> count(\"aaaaaa\")\n  6\n  >>> count(\"aaaaaaa\")\n  7\n  >>> count(\"aaaaaaaa\")\n  8\n  >>> count(\"aaaaaaaaa\")\n  9\n  >>> count(\"aaaaaaaaaa\")\n  10\n  >>> count(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [0];\n  for (let i = 0; i < xs.length - 1; i++) {\n    d[i] = xs[i] + xs[i + 1] * d[i];\n  }\n  d[xs.length - 1] = xs[xs.length - 1] + xs[xs.length - 1] * d[xs.length - 1];\n  return d;\n};\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  49\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  56\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  63\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  70\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  77\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  84\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  91\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  98\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  105\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  112\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  119\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  126\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  133\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  140\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  147\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  154\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  161\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  168\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  175\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  182\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  189\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  196\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  203\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.unshift(x.pop());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.push(x.shift());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.push(x.shift());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.unshift(x.pop());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.unshift(x.shift());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.push(x.shift());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.push(x.shift());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.unshift(x.pop());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.unshift(x.shift());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift % length;\n  if (displacement < 0) {\n    displacement = length + displacement;\n  }\n  for (let i = 0; i < displacement; i++) {\n    result.push(x.shift());\n  }\n  return result.join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const length = x.length;\n  const result = x.slice(0);\n  const displacement = shift", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of upper letters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 2\n      digitCount(\"abcCd\") => 3\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 3\n      digitCount(\"aAaaaXa\") => 5\n  */\nconst digitCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of lower letters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 0\n      digitCount(\"abcCd\") => 1\n      digitCount(\"helloE\") => 0\n      digitCount(\"woArBld\") => 1\n      digitCount(\"aAaaaXa\") => 1\n  */\nconst lowerCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) >= 97 && s[i].charCodeAt(0) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of upper letters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 1\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 2\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst upperCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of lower and upper letters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 1\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 2\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) >= 97 && s[i].charCodeAt(0) <= 122) {\n      count++;\n    }\n    if (s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of lower and upper letters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 1\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 2\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount2 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) >= 97 && s[i].charCodeAt(0) <= 122) {\n      count++;\n    }\n    if (s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of lower and upper letters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 1\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 2\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount3 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) >= 97 && s[i].charCodeAt(0) <= 122) {\n      count++;\n    }\n    if (s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n      count++;\n    }\n    if (s[i].charCodeAt(0) >= 97 && s[i].charCodeAt(0) <= 122) {\n      count++;\n    }\n    if (s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task Writes a function that takes a string as input and returns the number of lower and upper letters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"abAB\") => 1\n      digitCount(\"abcCd\") => 2\n      digitCount(\"helloE\") => 1\n      digitCount(\"woArBld\") => 2\n      digitCount(\"aAaaaXa\") => 3\n  */\nconst letterCount4 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const apple = /apple/i\n  const orange = /orange/i\n  const mango = /mango/i\n  const total = s.split('').reduce((a, b) => a + b, 0)\n  const num = n.split('').reduce((a, b) => a + b, 0)\n  const appleCount = s.match(apple)\n  const orangeCount = s.match(orange)\n  const mangoCount = s.match(mango)\n  const appleCount = appleCount? appleCount.length : 0\n  const orangeCount = orangeCount? orangeCount.length : 0\n  const mangoCount = mangoCount? mangoCount.length : 0\n  const totalCount = total.split('').reduce((a, b) => a + b, 0)\n  const totalAppleCount = totalCount - num - appleCount\n  const totalOrangeCount = totalCount - num - orangeCount\n  const totalMangoCount = totalCount - num - mangoCount\n  return totalAppleCount + totalOrangeCount + totalMangoCount\n}\n\nmodule.exports = fruitDistribution\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const min = arr.reduce((a, b) => a < b? a : b, Infinity)\n  const min_index = arr.findIndex(x => x === min)\n  if (min_index === -1) {\n    return []\n  }\n  return [min, min_index]\n}\n\nexport default pluck\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that do not contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterOutSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringInclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that do not contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterOutSubstringInclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringExclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that do not contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterOutSubstringExclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringIncludeExclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that do not contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterOutSubstringIncludeExclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringExcludeInclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that do not contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterOutSubstringExcludeInclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringIncludeExcludeInclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for strings that do not contain a specific substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterOutSubstringIncludeExcludeInclude = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterOutSubstring,\n  filterBySubstringInclude,\n  filterOutSubstringInclude,\n  filterBySubstringExclude,\n  filterOutSubstringExclude,\n  filterBySubstringIncludeExclude,\n  filterOutSubstringIncludeExclude,\n  filterBySubstringExcludeInclude,\n  filterOutSubstringExcludeInclude,\n  filterBySubstringIncludeExcludeInclude,\n  filterOutSubstringIncludeExcludeInclude\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      sorted.push(lst[i]);\n    }\n    if (lst[i] === max) {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\nconsole.log(willItFly([1, 2], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let len = arr.length\n  let min = arr[0]\n  let minIndex = 0\n  let minChange = 0\n  let i = 0\n  let j = len - 1\n  let change = 0\n  while (i < j) {\n    if (arr[i] === arr[j]) {\n      change = arr[i]\n      min = arr[i]\n      minIndex = i\n      minChange = change\n      i++\n      j--\n    } else if (arr[i] < arr[j]) {\n      change = arr[i]\n      min = arr[i]\n      minIndex = i\n      minChange = change\n      i++\n    } else {\n      change = arr[j]\n      min = arr[j]\n      minIndex = j\n      minChange = change\n      j--\n    }\n  }\n  return minChange\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch9 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\nconst totalMatch10 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrime is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast2 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast3 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast4 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast5 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast6 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast7 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast8 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast9 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast10 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast is a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrimeFast(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrimeFast11 = (a) => {\n  if (a % 2 === 0) return false\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  isPrimeFast", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isPower = (x, n) => {\n    const isPowerOfTwo = (x, n) => {\n      return (x & (x - 1)) === 0 && x > 0 && n > 0;\n    };\n    return isPowerOfTwo(x, n);\n  };\n  return isPower(x, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    let digit = num[i];\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      digit = digit.toUpperCase();\n    }\n    digit = parseInt(digit, 16);\n    if (isPrime(digit)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  const digits = decimal.toString(2);\n  for (let i = 0; i < digits.length; i++) {\n    binary += digits[i] + '0';\n  }\n  return 'db' + binary + 'db';\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal2 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal3 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal4 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal5 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal6 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal7 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal8 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal9 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal10 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal11 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal12 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal13 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal14 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal15 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal16 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal17 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal18 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal19 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal20 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal21 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal22 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal23 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal24 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal25 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal26 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal27 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal28 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal29 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal30 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal31 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal32 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal33 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal34 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);\n  return decimal;\n};\n\nconst binaryToDecimal35 = (binary) => {\n  const decimal = parseInt(binary.substring(2), 2);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number and its sum.\n  >>> sumList([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 6), (4, 8)]\n  */\nconst sumList = (numbers) => {\n  return numbers.map((num) => [num, num + num])\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a number", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    sum = 0,\n    n = s.length,\n    isHappy = true;\n\n  while (i < n) {\n    sum = 0;\n    while (j < n) {\n      sum += s[i] * s[j];\n      j++;\n    }\n    if (sum % 10 === 0) {\n      k = 0;\n      while (k < n) {\n        if (s[i] === s[k] && s[i] === s[k + 1]) {\n          l = k + 2;\n          break;\n        }\n        k++;\n      }\n      if (l === n) {\n        isHappy = false;\n        break;\n      }\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n  };\n\n  const sortedGrades = grades.sort((a, b) => a - b);\n\n  const sortedGradesLength = sortedGrades.length;\n  const gradeLength = sortedGradesLength - 1;\n\n  let grade = 0;\n  let letterGrade = '';\n  for (let i = 0; i < gradeLength; i++) {\n    grade = sortedGrades[i];\n    if (grade > 3.7) {\n      letterGrade = 'A';\n    } else if (grade > 3.3) {\n      letterGrade = 'A-';\n    } else if (grade > 3.0) {\n      letterGrade = 'B+';\n    } else if (grade > 2.7) {\n      letterGrade = 'B';\n    } else if (grade > 2.3) {\n      letterGrade = 'B-';\n    } else if (grade > 2.0) {\n      letterGrade = 'C+';\n    } else if (grade > 1.7) {\n      letterGrade = 'C';\n    } else if (grade > 1.3) {\n      letterGrade = 'C-';\n    } else if (grade > 1.0) {\n      letterGrade = 'D+';\n    } else if (grade > 0.7) {\n      letterGrade = 'D';\n    } else if (grade > 0.0) {\n      letterGrade = 'D-';\n    } else {\n      letterGrade = 'E';\n    }\n    letterGrade +='' + grade;\n    letterGrade +='' + sortedGrades[i + 1];\n    console.log(letterGrade);\n  }\n  return letterGrade;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    if (number === 1) return false;\n    if (number === 2) return true;\n    if (number % 2 === 0) return false;\n    for (let i = 3; i * i <= number; i += 2) {\n      if (number % i === 0) return false;\n    }\n    return true;\n  };\n  return prime.test(string) && isPrime(string.length);\n};\n\n/*\n  isPrime is a function that takes a number and returns true if the number is prime or otherwise wrong\n  Examples\n  isPrime(2) == true\n  isPrime(3) == true\n  isPrime(4) == false\n  isPrime(5) == true\n  isPrime(6) == false\n  isPrime(7) == true\n  isPrime(8) == false\n  isPrime(9) == true\n  isPrime(10) == false\n  isPrime(11) == true\n  isPrime(12) == false\n  isPrime(13) == true\n  isPrime(14) == false\n  isPrime(15) == true\n  isPrime(16) == false\n  isPrime(17) == true\n  isPrime(18) == false\n  isPrime(19) == true\n  isPrime(20) == false\n  isPrime(21) == true\n  isPrime(22) == false\n  isPrime(23) == true\n  isPrime(24) == false\n  isPrime(25) == true\n  isPrime(26) == false\n  isPrime(27) == true\n  isPrime(28) == false\n  isPrime(29) == true\n  isPrime(30) == false\n  isPrime(31) == true\n  isPrime(32) == false\n  isPrime(33) == true\n  isPrime(34) == false\n  isPrime(35) == true\n  isPrime(36) == false\n  isPrime(37) == true\n  isPrime(38) == false\n  isPrime(39) == true\n  isPrime(40) == false\n  isPrime(41) == true\n  isPrime(42) == false\n  isPrime(43) == true\n  isPrime(44) == false\n  isPrime(45) == true\n  isPrime(46) == false\n  isPrime(47) == true\n  isPrime(48) == false\n  isPrime(49) == true\n  isPrime(50) == false\n  isPrime(51) == true\n  isPrime(52) == false\n  isPrime(53) == true\n  isPrime(54) == false\n  isPrime(55) == true\n  isPrime(56) == false\n  isPrime(57) == true\n  isPrime(58) == false\n  isPrime(59) == true\n  isPrime(60) == false\n  isPrime(61) == true\n  isPrime(62) == false\n  isPrime(63) == true\n  isPrime(64) == false\n  isPrime(65) == true\n  isPrime(66) == false\n  isPrime(67) == true\n  isPrime(68) == false\n  isPrime(69) == true\n  isPrime(70) == false\n  isPrime(71) == true\n  isPrime(72) == false\n  isPrime(73) == true\n  isPrime(74) == false\n  isPrime(75) == true\n  isPrime(76) == false\n  isPrime(77) == true\n  isPrime(78) == false\n  isPrime(79) == true\n  isPrime(80) == false\n  isPrime(81) == true\n  isPrime(82) == false\n  isPrime(83) == true\n  isPrime(84) == false\n  isPrime(85) == true\n  isPrime(86) == false\n  isPrime(87) == true\n  isPrime(88) == false\n  isPrime(89) == true\n  isPrime(90) == false\n  isPrime(91) == true\n  isPrime(92) == false\n  isPrime(93) == true\n  isPrime(94) == false\n  isPrime(95) == true\n  isPrime(96) == false\n  isPrime(97) == true\n  isPrime(98) == false\n  isPrime(99) == true\n  isPrime(100) == false\n  isPrime(101) == true\n  isPrime(102) == false\n  isPrime(103) == true\n  isPrime(104) == false\n  isPrime(105) == true\n  isPrime(106) == false\n  isPrime(107) == true\n  isPrime(108) == false\n  isPrime(109) == true\n  isPrime(110) == false\n  isPrime(111) == true\n  isPrime(112) == false\n  isPrime(113) == true\n  isPrime(114) == false\n  isPrime(115) == true\n  isPrime(116) == false\n  isPrime(117) == true\n  isPrime(118) == false\n  isPrime(119) == true\n  isPrime(120) == false\n  isPrime(121) == true\n  isPrime(122) == false\n  isPrime(123) == true\n  isPrime(124) == false\n  isPrime(125) == true\n  isPrime(126) == false\n  isPrime(127) == true\n  isPrime(128) == false\n  isPrime(129) == true\n  isPrime(130) == false\n  isPrime(131) == true\n  isPrime(132) == false\n  isPrime(133) == true\n  isPrime(134) == false\n  isPrime(135) == true\n  isPrime(136) == false\n  isPrime(137) == true\n  isPrime(138) == false\n  isPrime(139) == true\n  isPrime(140) == false\n  isPrime(141) == true\n  isPrime(142) == false\n  isPrime(143) == true\n  isPrime(144) == false\n  isPrime(145) == true\n  isPrime(146) == false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n  }\n  // @expect 2\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i.toString().length === n) {\n        count++;\n      }\n    }\n    return count;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let words = s.split(' ');\n  let wordsLength = words.length;\n  let i = 0;\n  while (i < wordsLength) {\n    let word = words[i];\n    let wordLength = word.length;\n    let j = i + 1;\n    while (j < wordsLength) {\n      let nextWord = words[j];\n      let nextWordLength = nextWord.length;\n      if (nextWordLength < wordLength) {\n        let diff = wordLength - nextWordLength;\n        let diffChars = diff;\n        let diffCharsLength = diff;\n        let k = 0;\n        while (k < diffCharsLength) {\n          let char = word[k];\n          let charNext = nextWord[k];\n          if (char < charNext) {\n            let diffChar = char - charNext;\n            let diffCharLength = 1;\n            let newChar = char + diffChar;\n            let newCharLength = 1;\n            let newWord = word.slice(0, k) + newChar + word.slice(k + 1);\n            let newWordLength = newWord.length;\n            let newWordChars = newWord.split(' ');\n            let newWordCharsLength = newWordChars.length;\n            let newWordCharsIndex = 0;\n            while (newWordCharsIndex < newWordCharsLength) {\n              let newWordChar = newWordChars[newWordCharsIndex];\n              let newWordCharLength = newWordChar.length;\n              let newWordCharIndex = 0;\n              while (newWordCharIndex < newWordCharLength) {\n                let newWordCharChar = newWordChar[newWordCharIndex];\n                let newWordCharCharNext = newWordChars[newWordCharsIndex + 1];\n                if (newWordCharChar < newWordCharCharNext) {\n                  let newWordCharDiff = newWordCharChar - newWordCharCharNext;\n                  let newWordCharDiffLength = 1;\n                  let newWordCharNewChar = newWordCharChar + newWordCharDiff;\n                  let newWordCharNewCharLength = 1;\n                  let newWordCharNewWord = newWordChar.slice(0, newWordCharIndex) + newWordCharNewChar + newWordChar.slice(newWordCharIndex + 1);\n                  let newWordCharNewWordLength = newWordCharNewWord.length;\n                  let newWordCharNewWordChars = newWordCharNewWord.split(' ');\n                  let newWordCharNewWordCharsLength = newWordCharNewWordChars.length;\n                  let newWordCharNewWordCharsIndex = 0;\n                  while (newWordCharNewWordCharsIndex < newWordCharNewWordCharsLength) {\n                    let newWordCharNewWordChar = newWordCharNewWordChars[newWordCharNewWordCharsIndex];\n                    let newWordCharNewWordCharLength = newWordCharNewWordChar.length;\n                    let newWordCharNewWordCharIndex = 0;\n                    while (newWordCharNewWordCharIndex < newWordCharNewWordCharLength) {\n                      let newWordCharNewWordCharChar = newWordCharNewWordChar[newWordCharNewWordCharIndex];\n                      let newWordCharNewWordCharCharNext = newWordCharNewWordChars[newWordCharNewWordCharIndex + 1];\n                      if (newWordCharNewWordCharChar < newWordCharNewWordCharCharNext) {\n                        let newWordCharNewWordCharDiff = newWordCharNewWordCharChar - newWordCharNewWordCharCharNext;\n                        let newWordCharNewWordCharDiffLength = 1;\n                        let newWordCharNewWordCharNewChar = newWordCharNewWordCharChar + newWordCharNewWordCharDiff;\n                        let newWordCharNewWordCharNewCharLength = 1;\n                        let newWordCharNewWordCharNewWord = newWordCharNewWord.slice(0, newWordCharNewWordIndex) + newWordCharNewWordCharNewChar + newWordCharNewWord.slice(newWordCharNewWordIndex + 1);\n                        let newWordCharNewWordNewWordLength = newWordCharNewWordNewWord.length;\n                        let newWordCharNewWordNewWordChars = newWordCharNewWordNewWord.split(' ');\n                        let newWordCharNewWordNewWordCharsLength = newWordCharNewWordNewWordChars.length;\n                        let newWordCharNewWordNewWordCharsIndex = 0;\n                        while (newWordCharNewWordNewWordCharsIndex < newWordCharNewWordNewWordCharsLength) {\n                          let newWordCharNewWordNewWordChar = newWordCharNewWordNewWordChars[newWordCharNewWordNewWordCharsIndex];\n                          let newWordCharNewWordNewWordCharLength = newWordCharNewWordNewWordChar.length;\n                          let newWordCharNewWordNewWordCharIndex = 0;\n                          while (newWordCharNewWordNewWordCharIndex < newWordCharNewWordNewWordCharLength) {\n                            let newWordCharNewWordNewWordCharChar = newWordCharNewWordNewWordChar[newWordCharNewWordNewWordCharIndex];\n                            let newWordCharNewWordNewWordCharCharNext = newWordCharNewWordNewWordChars[newWordCharNewWordNewWordCharIndex + 1];\n                            if (newWordCharNewWordNewWordCharChar < newWordCharNewWordNewWordCharCharNext) {\n                              let newWordCharNewWordNewWordCharDiff = newWordCharNewWordNewWordCharChar - newWordCharNewWordNewWordCharCharNext;\n                              let newWordCharNewWordNewWordCharDiffLength = 1;\n                              let newWordCharNewWordNewWordCharNewChar = newWordCharNewWordNewWordCharChar + newWordCharNewWordNewWordCharDiff;\n                              let newWordCharNewWordNewWordCharNewCharLength = 1;\n                              let newWordCharNewWordNewWordCharNewWord = newWordCharNewWord.slice(0, newWordCharNewWordIndex) + newWordCharNewWordNewWordCharNewChar + new", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sortBy = (lst, f) => lst.sort((a, b) => f(a) - f(b));\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row.length);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow = (lst, x) => {\n  const sorted = sortBy(lst, (row) => row", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sortedArray[i] + sortedArray[j];\n    if (sum % 2 === 1) {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const rotate = (s, n) => {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      let index = alphabet.indexOf(s.charAt(i));\n      result += alphabet[(index + n) % 26];\n    }\n    return result;\n  };\n  return rotate(s, 2);\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const rotate = (s, n) => {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      let index = alphabet.indexOf(s.charAt(i));\n      result += alphabet[(index - n) % 26];\n    }\n    return result;\n  };\n  return rotate(s, 2);\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const rotate = (s, n) => {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      let index = alphabet.indexOf(s.charAt(i));\n      result += alphabet[(index + n) % 26];\n    }\n    return result;\n  };\n  return rotate(s, 2);\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt2 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const rotate = (s, n) => {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      let index = alphabet.indexOf(s.charAt(i));\n      result += alphabet[(index - n) % 26];\n    }\n    return result;\n  };\n  return rotate(s, 2);\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const rotate = (s, n) => {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      let index = alphabet.indexOf(s.charAt(i));\n      result += alphabet[(index + n) % 26];\n    }\n    return result;\n  };\n  return rotate(s, 2);\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt3 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const rotate = (s, n) => {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      let index = alphabet.indexOf(s.charAt(i));\n      result += alphabet[(index - n) % 26];\n    }\n    return result;\n  };\n  return rotate(s, 2);\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  //  console.log(nextSmallest([1, 2, 3, 4, 5]));\n  //  console.log(nextSmallest([5, 1, 4, 3, 2]));\n  //  console.log(nextSmallest([]));\n  //  console.log(nextSmallest([1, 1]));\n  //  console.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:[.,?!]|\\s)\\s*)*$/\n  return regex.test(S)\n}\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n};\n\nexport default anyInt;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  const vowelsReversed = ['O', 'U', 'I', 'E', 'A'];\n  const messageReversed = message.split('').reverse().join('');\n  const messageReversedReplaced = messageReversed.replace(vowels, vowelsReversed);\n  return messageReversedReplaced;\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum - max;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict.hasOwnProperty(key)) {\n      if (key.toLowerCase()!== key) {\n        result = false;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  If you specify a list, you return true if all elements are lowercase or all elements are uppercase, otherwise you return false. If the specified list is empty, the function should return false.\n  Examples:\n  checkListCase([\"a\",\"apple\", \"b\",\"banana\"]) should return true.\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"B\",\"banana\"]) should return false.\n  checkListCase([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return false.\n  checkListCase([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return false.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return true.\n  */\nconst checkListCase = (list) => {\n  let result = true;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].toLowerCase()!== list[i]) {\n      result = false;\n    }\n  }\n  return result;\n};\n\n/*\n  If you specify a string, you return true if all characters are lowercase or all characters are uppercase, otherwise you return false. If the specified string is empty, the function should return false.\n  Examples:\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase(\"a\",\"apple\") should return true.\n  checkStringCase", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const result = []\n  let i = 0\n  while (i < n) {\n    const prime = primes[i]\n    while (prime * prime <= n) {\n      result.push(prime)\n      prime += 2\n    }\n    i++\n  }\n  return result\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (a === 1) return b\n  if (b === 1) return a\n  if (a === -1) return -b\n  if (b === -1) return a\n  if (a === 2) return multiply(a, b)\n  if (b === 2) return multiply(a, b)\n  if (a === -2) return multiply(a, b)\n  if (b === -2) return multiply(a, b)\n  if (a === 3) return multiply(a, b)\n  if (b === 3) return multiply(a, b)\n  if (a === -3) return multiply(a, b)\n  if (b === -3) return multiply(a, b)\n  if (a === 4) return multiply(a, b)\n  if (b === 4) return multiply(a, b)\n  if (a === -4) return multiply(a, b)\n  if (b === -4) return multiply(a, b)\n  if (a === 5) return multiply(a, b)\n  if (b === 5) return multiply(a, b)\n  if (a === -5) return multiply(a, b)\n  if (b === -5) return multiply(a, b)\n  if (a === 6) return multiply(a, b)\n  if (b === 6) return multiply(a, b)\n  if (a === -6) return multiply(a, b)\n  if (b === -6) return multiply(a, b)\n  if (a === 7) return multiply(a, b)\n  if (b === 7) return multiply(a, b)\n  if (a === -7) return multiply(a, b)\n  if (b === -7) return multiply(a, b)\n  if (a === 8) return multiply(a, b)\n  if (b === 8) return multiply(a, b)\n  if (a === -8) return multiply(a, b)\n  if (b === -8) return multiply(a, b)\n  if (a === 9) return multiply(a, b)\n  if (b === 9) return multiply(a, b)\n  if (a === -9) return multiply(a, b)\n  if (b === -9) return multiply(a, b)\n  if (a === 10) return multiply(a, b)\n  if (b === 10) return multiply(a, b)\n  if (a === -10) return multiply(a, b)\n  if (b === -10) return multiply(a, b)\n  if (a === 11) return multiply(a, b)\n  if (b === 11) return multiply(a, b)\n  if (a === -11) return multiply(a, b)\n  if (b === -11) return multiply(a, b)\n  if (a === 12) return multiply(a, b)\n  if (b === 12) return multiply(a, b)\n  if (a === -12) return multiply(a, b)\n  if (b === -12) return multiply(a, b)\n  if (a === 13) return multiply(a, b)\n  if (b === 13) return multiply(a, b)\n  if (a === -13) return multiply(a, b)\n  if (b === -13) return multiply(a, b)\n  if (a === 14) return multiply(a, b)\n  if (b === 14) return multiply(a, b)\n  if (a === -14) return multiply(a, b)\n  if (b === -14) return multiply(a, b)\n  if (a === 15) return multiply(a, b)\n  if (b === 15) return multiply(a, b)\n  if (a === -15) return multiply(a, b)\n  if (b === -15) return multiply(a, b)\n  if (a === 16) return multiply(a, b)\n  if (b === 16) return multiply(a, b)\n  if (a === -16) return multiply(a, b)\n  if (b === -16) return multiply(a, b)\n  if (a === 17) return multiply(a, b)\n  if (b === 17) return multiply(a, b)\n  if (a === -17) return multiply(a, b)\n  if (b === -17) return multiply(a, b)\n  if (a === 18) return multiply(a, b)\n  if (b === 18) return multiply(a, b)\n  if (a === -18) return multiply(a, b)\n  if (b === -18) return multiply(a, b)\n  if (a === 19) return multiply(a, b)\n  if (b === 19) return multiply(a, b)\n  if (a === -19) return multiply(a, b)\n  if (b === -19) return multiply(a, b)\n  if (a === 20) return multiply(a, b)\n  if (b === 20) return multiply(a, b)\n  if (a === -20) return multiply(a, b)\n  if (b === -20) return multiply(a, b)\n  if (a === 21) return multiply(a, b)\n  if (b === 21) return multiply(a, b)\n  if (a === -21) return multiply(a, b)\n  if (b === -21) return multiply(a, b)\n  if (a === 22) return multiply(a, b)\n  if (b === 22) return multiply(a, b)\n  if (a === -22) return multiply(a, b)\n  if (b === -22) return multiply(a, b)\n  if (a === 23) return multiply(a, b)\n  if (b === 23) return multiply(a, b)\n  if (a === -23) return multiply(a, b)\n  if (b === -23) return multiply(a, b)\n  if (a === 24)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd2 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLowerOdd2 = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd3 = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd3 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd4 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLowerOdd4 = (s) => {\n  const count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  if (Math.abs(number) % 1 === 0) {\n    return number;\n  }\n  return Math.round(number);\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
