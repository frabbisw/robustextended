{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_regex = /\\(([^()]*)\\)/g;\n  const paren_groups = paren_regex.exec(paren_string);\n  const paren_groups_list = [];\n  while (paren_groups) {\n    paren_groups_list.push(paren_groups[1]);\n    paren_groups = paren_regex.exec(paren_string);\n  }\n  return paren_groups_list;\n};\n\n/*\n  Input:\nn  */\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').reverse().join('');\n  let longestPalindrome = prefix;\n  let longestPalindromeLength = prefix.length;\n  while (isPalindrome(suffix)) {\n    longestPalindrome = prefix + suffix;\n    longestPalindromeLength = prefix.length + suffix.length;\n    suffix = suffix.split('').reverse().join('');\n  }\n  return longestPalindrome;\n}\n\n/* Test if a string will be a palindrome*/ \n const isPalindrome = (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').reverse().join('');\n  let longestPalindrome = prefix;\n  let longestPalindromeLength = prefix.length;\n  while (isPalindrome(suffix)) {\n    longestPalindrome = prefix + suffix;\n    longestPalindromeLength = prefix.length + suffix.length;\n    suffix = suffix.split('').reverse().join('');\n  }\n  return longestPalindrome;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').reverse().join('');\n  let longestPalindrome = prefix;\n  let longestPalindromeLength = prefix.length;\n  while (isPalindrome(suffix)) {\n    longestPalindrome = prefix + suffix;\n    longestPalindromeLength = prefix.length + suffix.length;\n    suffix = suffix.split('').reverse().join('');\n  }\n  return longestPalindrome;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').reverse().join('');\n  let longestPalindrome = prefix;\n  let longestPalindromeLength = prefix.length;\n  while (isPalindrome(suffix)) {\n    longestPalindrome = prefix + suffix;\n    longestPalindromeLength = prefix.length + suffix.length;\n    suffix = suffix.split('').reverse().join('');\n  }\n  return longestPalindrome;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').reverse().join('');\n  let longestPalindrome = prefix;\n  let longestPalindromeLength = prefix.length;\n  while (isPalindrome(suffix)) {\n    longestPalindrome = prefix + suffix;\n    longestPalindromeLength = prefix.length + suffix.length;\n    suffix = suffix.split('').reverse().join('');\n  }\n  return longestPalindrome;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 3 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 4 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 5 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 6 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 7 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 8 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 9 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile10 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 10 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile11 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 11 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile12 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 12 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile13 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 13 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile14 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 14 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile15 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 15 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile16 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 16 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile17 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 17 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile18 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 18 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile19 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 19 === 0) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum(y, x);\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i % 2 === 0) {\n      max = i;\n    }\n  }\n  return max;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = Math.round(avg)\n  const binary = rounded.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let j = i;\n    while (j < x.length && x[j] % 2 === 0) {\n      j++;\n    }\n    if (j === x.length) {\n      result.push(x[i]);\n    }\n    i = j + 1;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength10 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength11 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength12 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const namesArr = names.map((name, index) => {\n    return reversed[index]\n  })\n  return namesArr\n}\n\nconst byLength13 = (arr) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n  const even = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  const odd = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  return [factorial(n), even(n), odd(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n  const even = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  const odd = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  return [factorial(n), even(n), odd(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n  const even = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  const odd = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  return [factorial(n), even(n), odd(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n  const even = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  const odd = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  return [factorial(n), even(n), odd(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n  const even = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  const odd = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  return [factorial(n), even(n), odd(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n  const even = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  const odd = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  return [factorial(n), even(n), odd(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n  const even = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        result += i;\n      }\n    }\n    return result;\n  };\n  const odd = (n) => {\n    let result = 1;\n    for (let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = a / 2;\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = b / 2;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <=", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      num = Math.abs(num);\n      let signDigit = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num % 10;\n      num = num / 10;\n      num = num %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall8 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall9 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall10 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      flag = false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nmodule.exports = stringXor;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1Len = lst1.length;\n  let lst2Len = lst2.length;\n  if (lst1Len === 0 || lst2Len === 0) {\n    return false;\n  }\n  let lst1Even = [];\n  let lst2Even = [];\n  for (let i = 0; i < lst1Len; i++) {\n    if (lst1[i] % 2 === 0) {\n      lst1Even.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2Len; i++) {\n    if (lst2[i] % 2 === 0) {\n      lst2Even.push(lst2[i]);\n    }\n  }\n  if (lst1Even.length === lst2Even.length) {\n    return true;\n  }\n  return false;\n};\n\nexports.exchange = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      result.push(s[i]);\n      i++;\n    }\n  }\n  return [result.reverse().join(''), result.length === len];\n};\n\nconst checkPalindrome = (s, c) => {\n  const [result, isPalindrome] = reverseDelete(s, c);\n  return [result, isPalindrome];\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\nconst test2 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n];\n\nconst test3 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test4 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test5 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test6 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test7 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test8 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test9 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test10 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test11 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test12 = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n  ['abcdefg', 'b'],\n];\n\nconst test", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const oddCount = (str) => {\n      const oddCount = (str) => {\n        const oddCount = (str) => {\n          const oddCount = (str) => {\n            const oddCount = (str) => {\n              const oddCount = (str) => {\n                const oddCount = (str) => {\n                  const oddCount = (str) => {\n                    const oddCount = (str) => {\n                      const oddCount = (str) => {\n                        const oddCount = (str) => {\n                          const oddCount = (str) => {\n                            const oddCount = (str) => {\n                              const oddCount = (str) => {\n                                const oddCount = (str) => {\n                                  const oddCount = (str) => {\n                                    const oddCount = (str) => {\n                                      const oddCount = (str) => {\n                                        const oddCount = (str) => {\n                                          const oddCount = (str) => {\n                                            const oddCount = (str) => {\n                                              const oddCount = (str) => {\n                                                const oddCount = (str) => {\n                                                  const oddCount = (str) => {\n                                                    const oddCount = (str) => {\n                                                      const oddCount = (str) => {\n                                                        const oddCount = (str) => {\n                                                          const oddCount = (str) => {\n                                                           const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                               ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = sum + nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n        if (count === capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  let grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ];\n  let capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    const aDec = parseInt(aInt, 2);\n    const bDec = parseInt(bInt, 2);\n    return aDec - bDec;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const length = s.length;\n  let i = 0;\n  while (i < length) {\n    const word = s.substr(i, n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of words in the string s that will contain exactly n consonants.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 2\nselectConsonants(\"Mary had a little lamb\", 3) ==> 1\nselectConsonants(\"simple white space\", 2) ==> 0\nselectConsonants(\"Hello world\", 4) ==> 1\nselectConsonants(\"Uncle sam\", 3) ==> 1\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.length;\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of consonants in the string s.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 4\nselectConsonants(\"Mary had a little lamb\", 3) ==> 3\nselectConsonants(\"simple white space\", 2) ==> 2\nselectConsonants(\"Hello world\", 4) ==> 4\nselectConsonants(\"Uncle sam\", 3) ==> 3\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.reduce((acc, word) => acc + word.length, 0);\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of consonants in the string s.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 4\nselectConsonants(\"Mary had a little lamb\", 3) ==> 3\nselectConsonants(\"simple white space\", 2) ==> 2\nselectConsonants(\"Hello world\", 4) ==> 4\nselectConsonants(\"Uncle sam\", 3) ==> 3\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.reduce((acc, word) => acc + word.length, 0);\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of consonants in the string s.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 4\nselectConsonants(\"Mary had a little lamb\", 3) ==> 3\nselectConsonants(\"simple white space\", 2) ==> 2\nselectConsonants(\"Hello world\", 4) ==> 4\nselectConsonants(\"Uncle sam\", 3) ==> 3\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.reduce((acc, word) => acc + word.length, 0);\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of consonants in the string s.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 4\nselectConsonants(\"Mary had a little lamb\", 3) ==> 3\nselectConsonants(\"simple white space\", 2) ==> 2\nselectConsonants(\"Hello world\", 4) ==> 4\nselectConsonants(\"Uncle sam\", 3) ==> 3\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.reduce((acc, word) => acc + word.length, 0);\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of consonants in the string s.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 4\nselectConsonants(\"Mary had a little lamb\", 3) ==> 3\nselectConsonants(\"simple white space\", 2) ==> 2\nselectConsonants(\"Hello world\", 4) ==> 4\nselectConsonants(\"Uncle sam\", 3) ==> 3\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.reduce((acc, word) => acc + word.length, 0);\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of consonants in the string s.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 4\nselectConsonants(\"Mary had a little lamb\", 3) ==> 3\nselectConsonants(\"simple white space\", 2) ==> 2\nselectConsonants(\"Hello world\", 4) ==> 4\nselectConsonants(\"Uncle sam\", 3) ==> 3\n*/\nconst selectConsonants = (s, n) => {\n  const words = selectWords(s, n);\n  return words.reduce((acc, word) => acc + word.length, 0);\n};\n\n/*\nGiven a string s and a number n, you will be task to implement a function that will return \nthe number of consonants in the string s.\n\nExample:\nselectConsonants(\"Mary had a little lamb\", 4) ==> 4\nselectConsonants(\"Mary had a little lamb\", 3) ==> 3\nselectConsonants(\"simple white space\", 2)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const closestVowel = ''\n  const closestVowelIndex = 0\n  const closestVowelDistance = 0\n  const wordLength = word.length\n  const wordStart = word.length - 1\n  const wordEnd = 0\n  const wordChars = word.split('')\n  const wordCharsLength = wordChars.length\n  const wordCharsLengthMinusOne = wordCharsLength - 1\n  const wordCharsLengthMinusTwo = wordCharsLength - 2\n  const wordCharsLengthMinusThree = wordCharsLength - 3\n  const wordCharsLengthMinusFour = wordCharsLength - 4\n  const wordCharsLengthMinusFive = wordCharsLength - 5\n  const wordCharsLengthMinusSix = wordCharsLength - 6\n  const wordCharsLengthMinusSeven = wordCharsLength - 7\n  const wordCharsLengthMinusEight = wordCharsLength - 8\n  const wordCharsLengthMinusNine = wordCharsLength - 9\n  const wordCharsLengthMinusTen = wordCharsLength - 10\n  const wordCharsLengthMinusEleven = wordCharsLength - 11\n  const wordCharsLengthMinusTwelve = wordCharsLength - 12\n  const wordCharsLengthMinusThirteen = wordCharsLength - 13\n  const wordCharsLengthMinusFourteen = wordCharsLength - 14\n  const wordCharsLengthMinusFifteen = wordCharsLength - 15\n  const wordCharsLengthMinusSixteen = wordCharsLength - 16\n  const wordCharsLengthMinusSeventeen = wordCharsLength - 17\n  const wordCharsLengthMinusEighteen = wordCharsLength - 18\n  const wordCharsLengthMinusNineteen = wordCharsLength - 19\n  const wordCharsLengthMinusTwenty = wordCharsLength - 20\n  const wordCharsLengthMinusTwentyOne = wordCharsLength - 21\n  const wordCharsLengthMinusTwentyTwo = wordCharsLength - 22\n  const wordCharsLengthMinusTwentyThree = wordCharsLength - 23\n  const wordCharsLengthMinusTwentyFour = wordCharsLength - 24\n  const wordCharsLengthMinusTwentyFive = wordCharsLength - 25\n  const wordCharsLengthMinusTwentySix = wordCharsLength - 26\n  const wordCharsLengthMinusTwentySeven = wordCharsLength - 27\n  const wordCharsLengthMinusTwentyEight = wordCharsLength - 28\n  const wordCharsLengthMinusTwentyNine = wordCharsLength - 29\n  const wordCharsLengthMinusThirty = wordCharsLength - 30\n  const wordCharsLengthMinusThirtyOne = wordCharsLength - 31\n  const wordCharsLengthMinusThirtyTwo = wordCharsLength - 32\n  const wordCharsLengthMinusThirtyThree = wordCharsLength - 33\n  const wordCharsLengthMinusThirtyFour = wordCharsLength - 34\n  const wordCharsLengthMinusThirtyFive = wordCharsLength - 35\n  const wordCharsLengthMinusThirtySix = wordCharsLength - 36\n  const wordCharsLengthMinusThirtySeven = wordCharsLength - 37\n  const wordCharsLengthMinusThirtyEight = wordCharsLength - 38\n  const wordCharsLengthMinusThirtyNine = wordCharsLength - 39\n  const wordCharsLengthMinusFourty = wordCharsLength - 40\n  const wordCharsLengthMinusFourtyOne = wordCharsLength - 41\n  const wordCharsLengthMinusFourtyTwo = wordCharsLength - 42\n  const wordCharsLengthMinusFourtyThree = wordCharsLength - 43\n  const wordCharsLengthMinusFourtyFour = wordCharsLength - 44\n  const wordCharsLengthMinusFourtyFive = wordCharsLength - 45\n  const wordCharsLengthMinusFourtySix = wordCharsLength - 46\n  const wordCharsLengthMinusFourtySeven = wordCharsLength - 47\n  const wordCharsLengthMinusFourtyEight = wordCharsLength - 48\n  const wordCharsLengthMinusFourtyNine = wordCharsLength - 49\n  const wordCharsLengthMinusFifty = wordCharsLength - 50\n  const wordCharsLengthMinusFiftyOne = wordCharsLength - 51\n  const wordCharsLengthMinusFiftyTwo = wordCharsLength - 52\n  const wordCharsLengthMinusFiftyThree = wordCharsLength - 53\n  const wordCharsLengthMinusFiftyFour = wordCharsLength - 54\n  const wordCharsLengthMinusFiftyFive = wordCharsLength - 55\n  const wordCharsLengthMinusFiftySix = wordCharsLength - 56\n  const wordCharsLengthMinusFiftySeven = wordCharsLength - 57\n  const wordCharsLengthMinusFiftyEight = wordCharsLength - 58\n  const wordCharsLengthMinusFiftyNine = wordCharsLength - 59\n  const wordCharsLengthMinusSixty = wordCharsLength - 60\n  const wordCharsLengthMinusSixtyOne = wordCharsLength - 61\n  const wordCharsLengthMinusSixtyTwo = wordCharsLength - 62\n  const wordCharsLengthMinusSixtyThree = wordCharsLength - 63\n  const wordCharsLengthMinusSixtyFour = wordCharsLength - 64", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.slice(0, k);\n  const min = arr.slice(k);\n  const maxIndex = max.indexOf(max.reduce((a, b) => Math.max(a, b), 0));\n  const minIndex = min.indexOf(min.reduce((a, b) => Math.min(a, b), 0));\n  return [...max.slice(0, maxIndex),...min.slice(minIndex)];\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = collatz(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n    const odd = odd(n);\n    return odd.concat(oddCollatz(odd[1]));\n  };\n  return oddCollatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const odd = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2 === 1? n : n - 1;\n    const even = n % 2 === 0? n : n - 1;\n    return [odd, even];\n  };\n  const oddCollatz = (n) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\nconst date = '03-11-2000';\nconsole.log(validDate(date));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const letters = txt.split(/[^a-zA-Z]+/);\n  const oddLetters = txt.split(/[a-z]/).filter(letter => letter.length % 2 === 1);\n  return [words, letters, oddLetters];\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n  should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const letters = txt.split(/[^a-zA-Z]+/);\n  const oddLetters = txt.split(/[a-z]/).filter(letter => letter.length % 2 === 1);\n  return [words, letters, oddLetters];\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n  should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const letters = txt.split(/[^a-zA-Z]+/);\n  const oddLetters = txt.split(/[a-z]/).filter(letter => letter.length % 2 === 1);\n  return [words, letters, oddLetters];\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n  should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const letters = txt.split(/[^a-zA-Z]+/);\n  const oddLetters = txt.split(/[a-z]/).filter(letter => letter.length % 2 === 1);\n  return [words, letters, oddLetters];\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n  should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const letters = txt.split(/[^a-zA-Z]+/);\n  const oddLetters = txt.split(/[a-z]/).filter(letter => letter.length % 2 === 1);\n  return [words, letters, oddLetters];\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n  should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const letters = txt.split(/[^a-zA-Z]+/);\n  const oddLetters = txt.split(/[a-z]/).filter(letter => letter.length % 2 === 1);\n  return [words, letters, oddLetters];\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n  should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const last = sorted[sortedLength - 1];\n  const lastIndex = lst.indexOf(last);\n  const lastIndexPlusOne = lastIndex + 1;\n  const lastIndexPlusTwo = lastIndex + 2;\n  return (lastIndexPlusOne === sortedLength) ||\n    (lastIndexPlusTwo === sortedLength) ||\n    (lastIndexPlusOne === sortedLength - 1 && lst[lastIndexPlusTwo] < last);\n};\n\n/*\nGiven a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const last = sorted[sortedLength - 1];\n  const lastIndex = lst.indexOf(last);\n  const lastIndexPlusOne = lastIndex + 1;\n  const lastIndexPlusTwo = lastIndex + 2;\n  return (lastIndexPlusOne === sortedLength) ||\n    (lastIndexPlusTwo === sortedLength) ||\n    (lastIndexPlusOne === sortedLength - 1 && lst[lastIndexPlusTwo] < last);\n};\n\n/*\nGiven a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted3 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const last = sorted[sortedLength - 1];\n  const lastIndex = lst.indexOf(last);\n  const lastIndexPlusOne = lastIndex + 1;\n  const lastIndexPlusTwo = lastIndex + 2;\n  return (lastIndexPlusOne === sortedLength) ||\n    (lastIndexPlusTwo === sortedLength) ||\n    (lastIndexPlusOne === sortedLength - 1 && lst[lastIndexPlusTwo] < last);\n};\n\n/*\nGiven a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted4 = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const last = sorted[sortedLength - 1];\n  const lastIndex = lst.indexOf(last);\n  const lastIndexPlusOne = lastIndex + 1;\n  const lastIndexPlusTwo = lastIndex + 2;\n  return (lastIndexPlusOne === sortedLength) ||\n    (lastIndexPlusTwo === sortedLength) ||\n    (lastIndexPlusOne === sortedLength - 1 && lst[lastIndexPlusTwo] < last);\n};\n\n/*\nGiven a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return \"YES\";\n  }\n  const prime = isPrime(length);\n  if (prime) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nexport default intersection;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const sign = arr.reduce((acc, num) => {\n    if (num === 0) {\n      return acc;\n    }\n    return acc + (num > 0? 1 : -1);\n  }, 0);\n  return sign * arr.reduce((acc, num) => acc * num, 1);\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = grid[0][0]\n  dp[1] = grid[0][1]\n  dp[2] = grid[0][2]\n  dp[3] = grid[0][3]\n  dp[4] = grid[0][4]\n  dp[5] = grid[0][5]\n  dp[6] = grid[0][6]\n  dp[7] = grid[0][7]\n  dp[8] = grid[0][8]\n  dp[9] = grid[0][9]\n  let i = 1\n  let j = 1\n  let min = dp[0]\n  while (i < n && j < m) {\n    if (dp[i] < dp[j]) {\n      dp[i + 1] = dp[i]\n      i++\n    } else {\n      dp[j + 1] = dp[j]\n      j++\n    }\n    if (i == n) {\n      min = dp[j]\n      break\n    }\n    if (j == m) {\n      min = dp[i]\n      break\n    }\n  }\n  return dp.slice(0, k)\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconsole.log(minPath(grid, 3))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  while (a!== b) {\n    if (a > b) {\n      a = a - b;\n    } else {\n      b = b - a;\n    }\n  }\n  return a;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n  const stack = [];\n  const brackets = /\\[|\\]/g;\n  const brackets_nested = /\\[\\[|\\]\\]/g;\n  const brackets_nested_2 = /\\[\\[\\]\\]/g;\n  const brackets_nested_3 = /\\[\\]/g;\n  const brackets_nested_4 = /\\[\\]/g;\n  const brackets_nested_5 = /\\[\\]/g;\n  const brackets_nested_6 = /\\[\\]/g;\n  const brackets_nested_7 = /\\[\\]/g;\n  const brackets_nested_8 = /\\[\\]/g;\n  const brackets_nested_9 = /\\[\\]/g;\n  const brackets_nested_10 = /\\[\\]/g;\n  const brackets_nested_11 = /\\[\\]/g;\n  const brackets_nested_12 = /\\[\\]/g;\n  const brackets_nested_13 = /\\[\\]/g;\n  const brackets_nested_14 = /\\[\\]/g;\n  const brackets_nested_15 = /\\[\\]/g;\n  const brackets_nested_16 = /\\[\\]/g;\n  const brackets_nested_17 = /\\[\\]/g;\n  const brackets_nested_18 = /\\[\\]/g;\n  const brackets_nested_19 = /\\[\\]/g;\n  const brackets_nested_20 = /\\[\\]/g;\n  const brackets_nested_21 = /\\[\\]/g;\n  const brackets_nested_22 = /\\[\\]/g;\n  const brackets_nested_23 = /\\[\\]/g;\n  const brackets_nested_24 = /\\[\\]/g;\n  const brackets_nested_25 = /\\[\\]/g;\n  const brackets_nested_26 = /\\[\\]/g;\n  const brackets_nested_27 = /\\[\\]/g;\n  const brackets_nested_28 = /\\[\\]/g;\n  const brackets_nested_29 = /\\[\\]/g;\n  const brackets_nested_30 = /\\[\\]/g;\n  const brackets_nested_31 = /\\[\\]/g;\n  const brackets_nested_32 = /\\[\\]/g;\n  const brackets_nested_33 = /\\[\\]/g;\n  const brackets_nested_34 = /\\[\\]/g;\n  const brackets_nested_35 = /\\[\\]/g;\n  const brackets_nested_36 = /\\[\\]/g;\n  const brackets_nested_37 = /\\[\\]/g;\n  const brackets_nested_38 = /\\[\\]/g;\n  const brackets_nested_39 = /\\[\\]/g;\n  const brackets_nested_40 = /\\[\\]/g;\n  const brackets_nested_41 = /\\[\\]/g;\n  const brackets_nested_42 = /\\[\\]/g;\n  const brackets_nested_43 = /\\[\\]/g;\n  const brackets_nested_44 = /\\[\\]/g;\n  const brackets_nested_45 = /\\[\\]/g;\n  const brackets_nested_46 = /\\[\\]/g;\n  const brackets_nested_47 = /\\[\\]/g;\n  const brackets_nested_48 = /\\[\\]/g;\n  const brackets_nested_49 = /\\[\\]/g;\n  const brackets_nested_50 = /\\[\\]/g;\n  const brackets_nested_51 = /\\[\\]/g;\n  const brackets_nested_52 = /\\[\\]/g;\n  const brackets_nested_53 = /\\[\\]/g;\n  const brackets_nested_54 = /\\[\\]/g;\n  const brackets_nested_55 = /\\[\\]/g;\n  const brackets_nested_56 = /\\[\\]/g;\n  const brackets_nested_57 = /\\[\\]/g;\n  const brackets_nested_58 = /\\[\\]/g;\n  const brackets_nested_59 = /\\[\\]/g;\n  const brackets_nested_60 = /\\[\\]/g;\n  const brackets_nested_61 = /\\[\\]/g;\n  const brackets_nested_62 = /\\[\\]/g;\n  const brackets_nested_63 = /\\[\\]/g;\n  const brackets_nested_64 = /\\[\\]/g;\n  const brackets_nested_65 = /\\[\\]/g;\n  const brackets_nested_66 = /\\[\\]/g;\n  const brackets_nested_67 = /\\[\\]/g;\n  const brackets_nested_68 = /\\[\\]/g;\n  const brackets_nested_69 = /\\[\\]/g;\n  const brackets_nested_70 = /\\[\\]/g;\n  const brackets_nested_71 = /\\[\\]/g;\n  const brackets_nested_72 = /\\[\\]/g;\n  const brackets_nested_73 = /\\[\\]/g;\n  const brackets_nested_74 = /\\[\\]/g;\n  const brackets_nested_75 = /", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sqSum = lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n  return sum + sqSum;\n};\n\nconst sumSquares19 = (lst) => {\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/[a-zA-Z0-9]/)\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\n// console.log(canArrange([1,2,4,3,5]));\n// console.log(canArrange([1,2,3]));\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === null) {\n        largest = lst[i];\n      } else {\n        largest = Math.max(largest, lst[i]);\n      }\n    } else if (lst[i] > 0) {\n      if (smallest === null) {\n        smallest = lst[i];\n      } else {\n        smallest = Math.min(smallest, lst[i]);\n      }\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : [largest, smallest];\n};\n\nlargestSmallestIntegers([2, 4, 1, 3, 5, 7]);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareTwo = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareThree = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareFour = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareFive = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareSix = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareSeven = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareEight = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    return a > b? a : b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    return a > b? a : b;\n  }\n  if(a === b){\n    return null;\n  }\n  return a;\n}\n\nconst compareNine = (a,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOddOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  nth-order factorial of this integer.\n  */\nconst nthFactorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial17(n - 1)\n}\n\n/*\n  The function will receive an", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example 1\"\n  fixUnderscores(\" Example 2\") == \"Example 2\"\n  fixUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'');\n};\n\n/*\n  Given a string text, will replace all double underscores in it with \n   single underscores, and if a string will have more than 2 \n   consecutive double underscores, then will replace all \n   consecutive double underscores with-\n  \n   fixDoubleUnderscores(\"Example\") == \"Example\"\n  fixDoubleUnderscores(\"Example 1\") == \"Example_1\"\n  fixDoubleUnderscores(\" Example 2\") == \"Example_2\"\n  fixDoubleUnderscores(\" Example   3\") == \"Example_3\"\n  */\nconst fixDoubleUnderscores = (text) => {\n  return text.replace(/__+/g, '_');\n};\n\n/*\n  Given a string text, will replace all double spaces in it with \n   single spaces, and if a string will have more than 2 \n   consecutive double spaces, then will replace all \n   consecutive double spaces with-\n  \n   fixDoubleSpaces(\"Example\") == \"Example\"\n  fixDoubleSpaces(\"Example 1\") == \"Example 1\"\n  fixDoubleSpaces(\" Example 2\") == \"Example 2\"\n  fixDoubleSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'');\n};\n\n/*\n  Given a string text, will replace all double underscores in it with \n   single underscores, and if a string will have more than 2 \n   consecutive double underscores, then will replace all \n   consecutive double underscores with-\n  \n   fixDoubleUnderscores(\"Example\") == \"Example\"\n  fixDoubleUnderscores(\"Example 1\") == \"Example 1\"\n  fixDoubleUnderscores(\" Example 2\") == \"Example 2\"\n  fixDoubleUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleUnderscores = (text) => {\n  return text.replace(/__{2,}/g, '_');\n};\n\n/*\n  Given a string text, will replace all double spaces in it with \n   single spaces, and if a string will have more than 2 \n   consecutive double spaces, then will replace all \n   consecutive double spaces with-\n  \n   fixDoubleSpaces(\"Example\") == \"Example\"\n  fixDoubleSpaces(\"Example 1\") == \"Example 1\"\n  fixDoubleSpaces(\" Example 2\") == \"Example 2\"\n  fixDoubleSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'');\n};\n\n/*\n  Given a string text, will replace all double underscores in it with \n   single underscores, and if a string will have more than 2 \n   consecutive double underscores, then will replace all \n   consecutive double underscores with-\n  \n   fixDoubleUnderscores(\"Example\") == \"Example\"\n  fixDoubleUnderscores(\"Example 1\") == \"Example 1\"\n  fixDoubleUnderscores(\" Example 2\") == \"Example 2\"\n  fixDoubleUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n  return text.replace(/__{2,}/g, '_');\n};\n\n/*\n  Given a string text, will replace all double spaces in it with \n   single spaces, and if a string will have more than 2 \n   consecutive double spaces, then will replace all \n   consecutive double spaces with-\n  \n   fixDoubleSpaces(\"Example\") == \"Example\"\n  fixDoubleSpaces(\"Example 1\") == \"Example 1\"\n  fixDoubleSpaces(\" Example 2\") == \"Example 2\"\n  fixDoubleSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'');\n};\n\n/*\n  Given a string text, will replace all double underscores in it with \n   single underscores, and if a string will have more than 2 \n   consecutive double underscores, then will replace all \n   consecutive double underscores with-\n  \n   fixDoubleUnderscores(\"Example\") == \"Example\"\n  fixDoubleUnderscores(\"Example 1\") == \"Example 1\"\n  fixDoubleUnderscores(\" Example 2\") == \"Example 2\"\n  fixDoubleUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n  return text.replace(/__{2,}/g, '_');\n};\n\n/*\n  Given a string text, will replace all double spaces in it with \n   single spaces, and if a string will have more than 2 \n   consecutive double spaces, then will replace all \n   consecutive double spaces with-\n  \n   fixDoubleSpaces(\"Example\") == \"Example\"\n  fixDoubleSpaces(\"Example 1\") == \"Example 1\"\n  fixDoubleSpaces(\" Example 2\") == \"Example 2\"\n  fixDoubleSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n  return text.replace(/\\s{2,}/", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3])); // 6\nconsole.log(sumSquares([])); // 0\nconsole.log(sumSquares([-1,-5,2,-1,-5])); // -126\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    while (word.length > 0) {\n      let newLength = getPrimeNumber(word.length)\n      let newWord = word.substr(0, newLength)\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\d/g, '')\n      newWord = newWord.replace(/\\D/g, '')\n      newWord = newWord.replace(/\\w/g, '')\n      newWord = newWord.replace(/\\W/g, '')\n      newWord = newWord.replace(/\\s/", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  if(x === n) return true;\n  if(x === \"0\") return false;\n  if(x === \"1\") return true;\n  if(x === \"2\") return false;\n  if(x === \"3\") return false;\n  if(x === \"4\") return false;\n  if(x === \"5\") return false;\n  if(x === \"6\") return false;\n  if(x === \"7\") return false;\n  if(x === \"8\") return false;\n  if(x === \"9\") return false;\n  if(x === \"10\") return false;\n  if(x === \"11\") return false;\n  if(x === \"12\") return false;\n  if(x === \"13\") return false;\n  if(x === \"14\") return false;\n  if(x === \"15\") return false;\n  if(x === \"16\") return false;\n  if(x === \"17\") return false;\n  if(x === \"18\") return false;\n  if(x === \"19\") return false;\n  if(x === \"20\") return false;\n  if(x === \"21\") return false;\n  if(x === \"22\") return false;\n  if(x === \"23\") return false;\n  if(x === \"24\") return false;\n  if(x === \"25\") return false;\n  if(x === \"26\") return false;\n  if(x === \"27\") return false;\n  if(x === \"28\") return false;\n  if(x === \"29\") return false;\n  if(x === \"30\") return false;\n  if(x === \"31\") return false;\n  if(x === \"32\") return false;\n  if(x === \"33\") return false;\n  if(x === \"34\") return false;\n  if(x === \"35\") return false;\n  if(x === \"36\") return false;\n  if(x === \"37\") return false;\n  if(x === \"38\") return false;\n  if(x === \"39\") return false;\n  if(x === \"40\") return false;\n  if(x === \"41\") return false;\n  if(x === \"42\") return false;\n  if(x === \"43\") return false;\n  if(x === \"44\") return false;\n  if(x === \"45\") return false;\n  if(x === \"46\") return false;\n  if(x === \"47\") return false;\n  if(x === \"48\") return false;\n  if(x === \"49\") return false;\n  if(x === \"50\") return false;\n  if(x === \"51\") return false;\n  if(x === \"52\") return false;\n  if(x === \"53\") return false;\n  if(x === \"54\") return false;\n  if(x === \"55\") return false;\n  if(x === \"56\") return false;\n  if(x === \"57\") return false;\n  if(x === \"58\") return false;\n  if(x === \"59\") return false;\n  if(x === \"60\") return false;\n  if(x === \"61\") return false;\n  if(x === \"62\") return false;\n  if(x === \"63\") return false;\n  if(x === \"64\") return false;\n  if(x === \"65\") return false;\n  if(x === \"66\") return false;\n  if(x === \"67\") return false;\n  if(x === \"68\") return false;\n  if(x === \"69\") return false;\n  if(x === \"70\") return false;\n  if(x === \"71\") return false;\n  if(x === \"72\") return false;\n  if(x === \"73\") return false;\n  if(x === \"74\") return false;\n  if(x === \"75\") return false;\n  if(x === \"76\") return false;\n  if(x === \"77\") return false;\n  if(x === \"78\") return false;\n  if(x === \"79\") return false;\n  if(x === \"80\") return false;\n  if(x === \"81\") return false;\n  if(x === \"82\") return false;\n  if(x === \"83\") return false;\n  if(x === \"84\") return false;\n  if(x === \"85\") return false;\n  if(x === \"86\") return false;\n  if(x === \"87\") return false;\n  if(x === \"88\") return false;\n  if(x === \"89\") return false;\n  if(x === \"90\") return false;\n  if(x === \"91\") return false;\n  if(x === \"92\") return false;\n  if(x === \"93\") return false;\n  if(x === \"94\") return false;\n  if(x === \"95\") return false;\n  if(x === \"96\") return false;\n  if(x === \"97\") return false;\n  if(x === \"98\") return false;\n  if(x === \"99\") return false;\n  if(x === \"100\") return false;\n  if(x === \"101\") return false;\n  if(x === \"102\") return false;\n  if(x === \"103\") return false;\n  if(x === \"104\") return false;\n  if(x === \"105\") return false;\n  if(x === \"106\") return false;\n  if(x === \"107\") return false;\n  if(x === \"108\") return false;\n  if(x === \"109\") return false;\n  if(x === \"110\") return false;\n  if(x === \"111\")", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which will sort the will give list of strings \n   in ascending order according to the length of their first letters. \n   Note: if there will be several items with similar length of their first letters, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    return aLength - bLength;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which will sort the will give list of strings \n   in ascending order according to the length of their first letters. \n   Note: if there will be several items with similar length of their first letters, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    return bLength - aLength;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which will sort the will give list of strings \n   in ascending order according to the length of their first letters. \n   Note: if there will be several items with similar length of their first letters, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    return aLength - bLength;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which will sort the will give list of strings \n   in ascending order according to the length of their first letters. \n   Note: if there will be several items with similar length of their first letters, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    return bLength - aLength;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which will sort the will give list of strings \n   in ascending order according to the length of their first letters. \n   Note: if there will be several items with similar length of their first letters, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    return bLength - aLength;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which will sort the will give list of strings \n   in ascending order according to the length of their first letters. \n   Note: if there will be several items with similar length of their first letters, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    return aLength - bLength;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which will sort the will give list of strings \n   in ascending order according to the length of their first letters. \n   Note: if there will be several items with similar length of their first letters, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    return bLength -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1);\n  const b = a.map((x, i) => x * (i + 1));\n  const c = a.map((x, i) => x * (i + 1) * (i + 1));\n  const d = a.map((x, i) => x + b[i] + c[i]);\n  return d.filter((x, i, arr) => x % 3 === 0).length;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1_name = planet1.toUpperCase();\n  let planet2_name = planet2.toUpperCase();\n  let planet1_orbit = get_orbit(planet1_name);\n  let planet2_orbit = get_orbit(planet2_name);\n  let planet_list = [];\n  let planet_list_sorted = [];\n  let planet_list_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted = [];\n  let planet_list_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort2 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort3 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort4 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort5 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort6 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort7 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort8 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort9 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort10 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort11 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr) => curr.length % 2 === 0)\n   .concat([sum])\n   .sort((a, b) => a - b);\n};\n\nconst list_sort12 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*')\n  '0'\n  >>> stringSequence(5, '-', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}${repeat}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+')\n  '0'\n  >>> stringSequence(5, '-', '*', '+')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}${repeat}${plus}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}${repeat}${plus}${equals}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=', '#')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=', '#')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=', hash = '#') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}${repeat}${plus}${equals}${hash}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=', '#', '$')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=', '#', '$')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=', hash = '#', dollar = '$') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}${repeat}${plus}${equals}${hash}${dollar}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=', '#', '$', '%')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=', '#', '$', '%')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=', hash = '#', dollar = '$', percent = '%') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}${repeat}${plus}${equals}${hash}${dollar}${percent}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '=', '#', '$', '%', '&')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '=', '#', '$', '%', '&')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', plus = '+', equals = '=', hash = '#', dollar = '$', percent = '%', ampersand = '&') => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}${delimiter}${repeat}${plus}${equals}${hash}${dollar}${percent}${ampersand}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 14 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifferenceEven = (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 14 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifferenceEven2 = (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 14 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifferenceEven3 = (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 14 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifferenceEven4 = (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 14 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifferenceEven5 = (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 14 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifferenceEven6 = (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.slice(0);\n  const guesses = guess.slice(0);\n  const len = scores.length;\n  const len2 = guesses.length;\n  const diff = [];\n  for (let i = 0; i < len; i++) {\n    diff[i] = Math.abs(scores[i] - guesses[i]);\n  }\n  return diff;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const extension_names = extensions.map(ext => ext.split('.')[1]);\n  extension_names.forEach(ext => {\n    strength[ext] = strength[ext] || 0;\n    strength[ext] += strength.CAP - strength.SM;\n  });\n  const strongest_extension = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest_extension}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    let a_length = a.length;\n    let b_length = b.length;\n    let a_sub = a.substring(0, a_length - b_length);\n    let b_sub = b.substring(0, b_length - a_length);\n    if(a_sub === b_sub || a_sub === b_sub.split('').reverse().join('')){\n        return true;\n    }\n    return false;\n}\n\nconst cycpattern = (a, b) => {\n    let a_length = a.length;\n    let b_length = b.length;\n    let a_sub = a.substring(0, a_length - b_length);\n    let b_sub = b.substring(0, b_length - a_length);\n    let a_rot = a_sub.split('').reverse().join('');\n    let b_rot = b_sub.split('').reverse().join('');\n    if(cycpatternCheck(a_rot, b_rot)){\n        return true;\n    }\n    return false;\n}\n\nconsole.log(cycpattern(\"abcd\",\"abd\"));\nconsole.log(cycpattern(\"hello\",\"ell\"));\nconsole.log(cycpattern(\"whassup\",\"psus\"));\nconsole.log(cycpattern(\"abab\",\"baa\"));\nconsole.log(cycpattern(\"efef\",\"eeff\"));\nconsole.log(cycpattern(\"himenss\",\"simen\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nexport default evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in upper case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lower case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  right", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  const max= words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n\nconst findMax = (words)=>{\n  const max = words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.filter(w=>w===max);\n};\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  const [left, remaining] = eat(remaining, need - number, remaining);\n  return [number + left, remaining];\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0],\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0],\n  [13, 22, 0],\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i]] === undefined) {\n      map[chars[i]] = 1\n    } else {\n      map[chars[i]]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitive = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitive = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitiveCaseSensitive = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitive = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive = (string) => {\n  const chars = string.split('')\n  const map = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (map[chars[i].toLowerCase()] === undefined) {\n      map[chars[i].toLowerCase()] = 1\n    } else {\n      map[chars[i].toLowerCase()]++\n    }\n  }\n  return Object.keys(map).length\n}\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let sum2 = 0\n  let product2 = 1\n  let sum3 = 0\n  let product3 = 1\n  let sum4 = 0\n  let product4 = 1\n  let sum5 = 0\n  let product5 = 1\n  let sum6 = 0\n  let product6 = 1\n  let sum7 = 0\n  let product7 = 1\n  let sum8 = 0\n  let product8 = 1\n  let sum9 = 0\n  let product9 = 1\n  while (i < len) {\n    sum = 0\n    while (j < len2) {\n      sum += operator[i][j] * operand[j]\n      j++\n    }\n    result.push(sum)\n    i++\n  }\n  while (k < len) {\n    sum2 = 0\n    while (j < len2) {\n      sum2 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum2)\n    k++\n  }\n  while (k < len) {\n    sum3 = 0\n    while (j < len2) {\n      sum3 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum3)\n    k++\n  }\n  while (k < len) {\n    sum4 = 0\n    while (j < len2) {\n      sum4 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum4)\n    k++\n  }\n  while (k < len) {\n    sum5 = 0\n    while (j < len2) {\n      sum5 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum5)\n    k++\n  }\n  while (k < len) {\n    sum6 = 0\n    while (j < len2) {\n      sum6 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum6)\n    k++\n  }\n  while (k < len) {\n    sum7 = 0\n    while (j < len2) {\n      sum7 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum7)\n    k++\n  }\n  while (k < len) {\n    sum8 = 0\n    while (j < len2) {\n      sum8 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum8)\n    k++\n  }\n  while (k < len) {\n    sum9 = 0\n    while (j < len2) {\n      sum9 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum9)\n    k++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let sum2 = 0\n  let product2 = 1\n  let sum3 = 0\n  let product3 = 1\n  let sum4 = 0\n  let product4 = 1\n  let sum5 = 0\n  let product5 = 1\n  let sum6 = 0\n  let product6 = 1\n  let sum7 = 0\n  let product7 = 1\n  let sum8 = 0\n  let product8 = 1\n  let sum9 = 0\n  let product9 = 1\n  while (i < len) {\n    sum = 0\n    while (j < len2) {\n      sum += operator[i][j] * operand[j]\n      j++\n    }\n    result.push(sum)\n    i++\n  }\n  while (k < len) {\n    sum2 = 0\n    while (j < len2) {\n      sum2 += operator[k][j] * operand[j]\n      j++\n    }\n    result.push(sum2)\n    k++\n  }\n  while (k < len) {\n    sum3 = 0\n    while (j", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let result = \"\";\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a9c5b4d9b2f8a0e9f0a3b7a9f9e7f0a3b7a9f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7a9f9e7f0a3b7", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  const result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  \n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  \n  Explanation:\n  The first note is a whole note, and will last four beats.\n  The second note is a half note, and will last two beats.\n  The third note is a quarter note, and will last one beat.\n  The fourth note is a whole note, and will last four beats.\n  The fifth note is a half note, and will last two beats.\n  The sixth note is a quarter note, and will last one beat.\n  The seventh note is a whole note, and will last four beats.\n  The eighth note is a half note, and will last two beats.\n  The ninth note is a quarter note, and will last one beat.\n  The tenth note is a whole note, and will last four beats.\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  \n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  \n  Explanation:\n  The first note is a whole note, and will last four beats.\n  The second note is a half note, and will last two beats.\n  The third note is a quarter note, and will last one beat.\n  The fourth note is a whole note, and will last four beats.\n  The fifth note is a half note, and will last two beats.\n  The sixth note is a quarter note, and will last one beat.\n  The seventh note is a whole note, and will last four beats.\n  The eighth note is a half note, and will last two beats.\n  The ninth note is a quarter note, and will last one beat.\n  The tenth note is a whole note, and will last four beats.\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  \n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  \n  Explanation:\n  The first note is a whole note, and will last four beats.\n  The second note is a half note, and will last two beats.\n  The third note is a quarter note, and will last one beat.\n  The fourth note is a whole note, and will last four beats.\n  The fifth note is a half note, and will last two beats.\n  The sixth note is a quarter note, and will last one beat.\n  The seventh note is a whole note, and will last four beats.\n  The eighth note is a half note, and will last two beats.\n  The ninth note is a quarter note, and will last one beat.\n  The tenth note is a whole note, and will last four beats.\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input:\n  'o o|.| o| o|.|.|.|.| o o'\n  \n  Output:\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  \n  Explanation:\n  The first note is a whole note, and will last four beats.\n  The second note is a half note, and will last two beats.\n  The third note is a quarter note, and will last one beat.\n  The fourth note is a whole note, and will last four beats.\n  The fifth note is a half note, and will last two beats.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters of another string.\n  >>> longestSubstring('abc', 'bca')\n  'bc'\n  >>> longestSubstring('abc', 'bcd')\n  'bc'\n  >>> longestSubstring('abc', 'bcc')\n  'bc'\n  >>> longestSubstring('abc', 'bccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bccccccccccccccccccccccccccccccccccccccccccccc')\n  'bc'\n  >>> longestSubstring('abc', 'bcccccccccccccccccccccccccccccccccccccccccccccc')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from largest to smallest\n  >>> sortNumbers('five two one')\n  'five two one'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers2('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from largest to smallest\n  >>> sortNumbers3('five two one')\n  'five two one'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers4('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from largest to smallest\n  >>> sortNumbers5('five two one')\n  'five two one'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers6('three one five')\n  'one three five'", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal2 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal3 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal4 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal5 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal6 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal7 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal8 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal9 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the number with decimals.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal10 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + '.' + decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        closestIndex = 0;\n  for (let i = 1; i < sorted.length; i++) {\n    if (Math.abs(sorted[i] - closest) < Math.abs(sorted[closestIndex] - closest)) {\n      closest = sorted[i];\n      closestIndex = i;\n    }\n  }\n  return [closest, sorted[closestIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        closestIndex = 0;\n  for (let i = 1; i < sorted.length; i++) {\n    if (Math.abs(sorted[i] - closest) < Math.abs(sorted[closestIndex] - closest)) {\n      closest = sorted[i];\n      closestIndex = i;\n    }\n  }\n  return [closest, sorted[closestIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        closestIndex = 0;\n  for (let i = 1; i < sorted.length; i++) {\n    if (Math.abs(sorted[i] - closest) < Math.abs(sorted[closestIndex] - closest)) {\n      closest = sorted[i];\n      closestIndex = i;\n    }\n  }\n  return [closest, sorted[closestIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        closestIndex = 0;\n  for (let i = 1; i < sorted.length; i++) {\n    if (Math.abs(sorted[i] - closest) < Math.abs(sorted[closestIndex] - closest)) {\n      closest = sorted[i];\n      closestIndex = i;\n    }\n  }\n  return [closest, sorted[closestIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        closestIndex = 0;\n  for (let i = 1; i < sorted.length; i++) {\n    if (Math.abs(sorted[i] - closest) < Math.abs(sorted[closestIndex] - closest)) {\n      closest = sorted[i];\n      closestIndex = i;\n    }\n  }\n  return [closest, sorted[closestIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  return [\n    (numbers[0] - min) / range,\n    (numbers[1] - min) / range,\n    (numbers[2] - min) / range,\n    (numbers[3] - min) / range,\n    (numbers[4] - min) / range,\n  ]\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithms = (numbers) => {\n  const log = (x) => Math.log(x)\n  return numbers.map(log)\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit2 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit3 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit4 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit5 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit6 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit7 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit8 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit9 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit10 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit11 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsToUnit12 = (numbers) => {\n  const log = (x) => Math.log(x)\n  return rescaleToUnit(logarithms(numbers))\n}\n\n/**\n  * Given a list of numbers, will return the list of the logarithms of the numbers\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst logarithmsTo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter will give list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter will give list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter will give list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter will give list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n/**\n  * Filter will give list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter will give list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter will give list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter will give list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter will give list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n/**\n  * Filter will give list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter will give list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter will give list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter will give list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter will give list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n/**\n  * Filter will give list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter will give list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter will give list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter will give list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n/**\n  * Filter will give list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n/**\n  * Filter will give list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n/* Return number of characters in string\n  >>> strlen('abc')\n  3\n  */\nconst strlen19 = (string) => {\n  let i = 0\n  while (i < string.length) {\n    ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let largest", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i++\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize2 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize3 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize4 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize5 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize6 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize7 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i--\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates2 = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    } else {\n      duplicates.push(strings[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates2(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates3 = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    } else {\n      duplicates.push(strings[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates3(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates4 = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    } else {\n      duplicates.push(strings[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates4(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates5 = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    } else {\n      duplicates.push(strings[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates5(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates6 = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    } else {\n      duplicates.push(strings[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates6(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates7 = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    } else {\n      duplicates.push(strings[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates7(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates8 = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    } else {\n      duplicates.push(strings[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates8(['a', 'b', 'c', 'b', 'd'])\n  ['", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeSpaces = (string) => {\n  return string.replace(/\\s+/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpaces = (string) => {\n  return string.replace(/\\s+/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlines = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeAllSpacesAndNewlinesAndQuotesAndQuotes = (string) => {\n  return string.replace(/\\s+/g, '').replace(/\\n/g, '').replace(/\\\"/g, '').replace(/\\\"/g, '');\n};\n\n/*\n  For a will give string, will remove all spaces.\n  >>> removeAllSpaces('Hello World')\n  'HelloWorld'\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterBy", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, curr) => acc + curr, 0);\n  return sum < 0;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  let i = 5\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 6\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  1\n  >>> countPrimes(2)\n  2\n  >>> countPrimes(3)\n  3\n  >>> countPrimes(4)\n  4\n  >>> countPrimes(5)\n  5\n  >>> countPrimes(6)\n  6\n  >>> countPrimes(7)\n  7\n  >>> countPrimes(8)\n  8\n  >>> countPrimes(9)\n  9\n  >>> countPrimes(10)\n  10\n  >>> countPrimes(11)\n  11\n  >>> countPrimes(12)\n  12\n  >>> countPrimes(13)\n  13\n  >>> countPrimes(14)\n  14\n  >>> countPrimes(15)\n  15\n  >>> countPrimes(16)\n  16\n  >>> countPrimes(17)\n  17\n  >>> countPrimes(18)\n  18\n  >>> countPrimes(19)\n  19\n  >>> countPrimes(20)\n  20\n  >>> countPrimes(21)\n  21\n  >>> countPrimes(22)\n  22\n  >>> countPrimes(23)\n  23\n  >>> countPrimes(24)\n  24\n  >>> countPrimes(25)\n  25\n  >>> countPrimes(26)\n  26\n  >>> countPrimes(27)\n  27\n  >>> countPrimes(28)\n  28\n  >>> countPrimes(29)\n  29\n  >>> countPrimes(30)\n  30\n  >>> countPrimes(31)\n  31\n  >>> countPrimes(32)\n  32\n  >>> countPrimes(33)\n  33\n  >>> countPrimes(34)\n  34\n  >>> countPrimes(35)\n  35\n  >>> countPrimes(36)\n  36\n  >>> countPrimes(37)\n  37\n  >>> countPrimes(38)\n  38\n  >>> countPrimes(39)\n  39\n  >>> countPrimes(40)\n  40\n  >>> countPrimes(41)\n  41\n  >>> countPrimes(42)\n  42\n  >>> countPrimes(43)\n  43\n  >>> countPrimes(44)\n  44\n  >>> countPrimes(45)\n  45\n  >>> countPrimes(46)\n  46\n  >>> countPrimes(47)\n  47\n  >>> countPrimes(48)\n  48\n  >>> countPrimes(49)\n  49\n  >>> countPrimes(50)\n  50\n  >>> countPrimes(51)\n  51\n  >>> countPrimes(52)\n  52\n  >>> countPrimes(53)\n  53\n  >>> countPrimes(54)\n  54\n  >>> countPrimes(55)\n  55\n  >>> countPrimes(56)\n  56\n  >>> countPrimes(57)\n  57\n  >>> countPrimes(58)\n  58\n  >>> countPrimes(59)\n  59\n  >>> countPrimes(60)\n  60\n  >>> countPrimes(61)\n  61\n  >>> countPrimes(62)\n  62\n  >>> countPrimes(63)\n  63\n  >>> countPrimes(64)\n  64\n  >>> countPrimes(65)\n  65\n  >>> countPrimes(66)\n  66\n  >>> countPrimes(67)\n  67\n  >>> countPrimes(68)\n  68\n  >>> countPrimes(69)\n  69\n  >>> countPrimes(70)\n  70\n  >>> countPrimes(71)\n  71\n  >>> countPrimes(72)\n  72\n  >>> countPrimes(73)\n  73\n  >>> countPrimes(74)\n  74\n  >>> countPrimes(75)\n  75\n  >>> countPrimes(76)\n  76\n  >>> countPrimes(77)\n  77\n  >>> countPrimes(78)\n  78\n  >>> countPrimes(79)\n  79\n  >>> countPrimes(80)\n  80\n  >>> countPrimes(81)\n  81\n  >>> countPrimes(82)\n  82\n  >>> countPrimes(83)\n  83\n  >>> countPrimes(84)\n  84\n  >>> countPrimes(85)\n  85\n  >>> countPrimes(86)\n  86\n  >>> countPrimes(87)\n  87\n  >>> countPrimes(88)\n  88\n  >>> countPrimes(89)\n  89\n  >>> countPrimes(90)\n  90\n  >>> countPrimes(91)\n  91\n  >>> countPrimes(92)\n  92\n  >>> countPrimes(93)\n  93\n  >>> countPrimes(94)\n  94\n  >>> countPrimes(95)\n  95\n  >>> countPrimes(96)\n  96\n  >>> countPrimes(97)\n  97\n  >>> countPrimes(98)\n  98\n  >>> countPrimes(99)\n  99\n  >>> countPrimes(100)\n  100\n  >>> countPrimes(101)\n  101\n  >>> countPrimes(102)\n  102\n  >>> countPrimes(103)\n  103\n  >>> countPrimes(104)\n  104\n  >>> countPrimes(105)\n  105\n  >>> countPrimes(106)\n  106\n  >>> countPrimes(107)\n  107\n  >>> countPrimes(108)\n  108\n  >>> countPrimes(109)\n  109\n  >>> countPrimes(110", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const max = Math.max(...xs)\n  const min = Math.min(...xs)\n  const mid = Math.floor((max - min) / 2)\n  const x = mid\n  const poly = poly(xs, x)\n  const zero = poly(x)\n  if (zero === 0) {\n    return x\n  }\n  if (zero === max) {\n    return findZero(xs.slice(0, len - 1))\n  }\n  if (zero === min) {\n    return findZero(xs.slice(1))\n  }\n  return findZero(xs.slice(1, len - 1))\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const max = Math.max(...xs)\n  const min = Math.min(...xs)\n  const mid = Math.floor((max - min) / 2)\n  const x = mid\n  const poly = poly(xs, x)\n  const zero = poly(x)\n  if (zero === 0) {\n    return x\n  }\n  if (zero === max) {\n    return findZero(xs.slice(0, len - 1))\n  }\n  if (zero === min) {\n    return findZero(xs.slice(1))\n  }\n  return findZero(xs.slice(1, len - 1))\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const max = Math.max(...xs)\n  const min = Math.min(...xs)\n  const mid = Math.floor((max - min) / 2)\n  const x = mid\n  const poly = poly(xs, x)\n  const zero = poly(x)\n  if (zero === 0) {\n    return x\n  }\n  if (zero === max) {\n    return findZero(xs.slice(0, len - 1))\n  }\n  if (zero === min) {\n    return findZero(xs.slice(1))\n  }\n  return findZero(xs.slice(1, len - 1))\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird7 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird8 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird9 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird10 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird11 = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  const unique = (item) => {\n    if (result.indexOf(item) === -1) {\n      result.push(item);\n    }\n  };\n  for (let i = 0; i < l.length; i++) {\n    unique(l[i]);\n  }\n  return result;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic2= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic3= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic4= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic5= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, AA = 1, BB = 1, CC = 1, DD = 1, EE = 1, FF = 1, GG = 1, HH = 1, II = 1, JJ = 1, KK = 1, LL = 1, MM = 1, NN = 1, OO = 1, PP = 1, QQ = 1, RR = 1, SS = 1, TT = 1, UU = 1, VV = 1, WW = 1, XX = 1, YY = 1, ZZ = 1, AAA = 1, BBB = 1, CCC = 1, DDD = 1, EEE = 1, FFF = 1, GGG = 1, HHH = 1, IIII = 1, JJJJ = 1, KKKK = 1, LLLL = 1, MMMM = 1, NNNN = 1, OOOO = 1, PPPP = 1, QQQQ = 1, RRRR = 1, SSSS = 1, TTTT = 1, UUUU = 1, VVVV = 1, WWWW = 1, XXXXX = 1, YYYY = 1, ZZZZ = 1, AAAAA = 1, BBBBB = 1, CCCCC = 1, DDDDD = 1, EEEEE = 1, FFFFF = 1, GGGGG = 1, HHHHH = 1, IIIIII = 1, JJJJJJ = 1, KKKKKK = 1, LLLLL = 1, MMMMMM = 1, NNNNN = 1, OOOOOO = 1, PPPPP = 1, QQQQQ = 1, RRRRRR = 1, SSSSSS = 1, TTTTTT = 1, UUUUUU = 1, VVVVVV = 1, WWWWWW = 1, XXXXXXX = 1, YYYYYY = 1, ZZZZZZ = 1, AAAAAA = 1, BBBBBB = 1, CCCCCC = 1, DDDDDD = 1, EEEEEEE = 1, FFFFFFF = 1, GGGGGGG = 1, HHHHHH = 1, IIIIIIII = 1, JJJJJJJJ = 1, KKKKKKK = 1, LLLLLL = 1, MMMMMMM = 1, NNNNNNN = 1, OOOOOOO = 1, PPPPPP = 1, QQQQQQ = 1, RRRRRRR = 1, SSSSSSS = 1, TTTTTTT = 1, UUUUUUU = 1, VVVVVVV = 1, WWWWWWW = 1, XXXXXXXX = 1, YYYYYYY = 1, ZZZZZZZ = 1, AAAAAAAA = 1, BBBBBBBB = 1, CCCCCCCC = 1, DDDDDDDD = 1, EEEEEEEE = 1, FFFFFFFF = 1, GGGGGGGG = 1, HHHHHHHH = 1, IIIIIIII = 1, JJJJJJJJ = 1, KKKKKKKK = 1, LLLLLLL = 1, MMMMMMMM = 1, NNNNNNNN = 1, OOOOOOOO = 1, PPPPPPP = 1, QQQQQQQ = 1, RRRRRRRR = 1, SSSSSSSS = 1, TTTTTTTT = 1, UUUUUUUU = 1, VVVVVVVV = 1, WWWWWWWW = 1, XXXXXXXXX = 1, YYYYYYYY = 1, ZZZZZZZZ = 1, AAAAAAAAAA = 1, BBBBBBBBB = 1, CCCCCCCCC = 1, DDDDDDDDD = 1, EEEEEEEEE = 1, FFFFFFFFF = 1, GGGGGGGGGG = 1, HHHHHHHHH = 1, IIIIIIIIII = 1, JJJJJJJJJJ = 1, KKKKKKKKK = 1, LLLLLLLL = 1, MMMMMMMMM = 1, NNNNNNNNN = 1, OOOOOOOOO = 1, PPPPPPPPP = 1, QQQQQQQQ = 1, RRRRRRRRR = 1, SSSSSSSSS = 1, TTTTTTTTT = 1, UUUUUUUUU = 1, VVVVVVVVV = 1, WWWWWWWWW = 1, XXXXXXXXXX = 1, YYYYYYYYY = 1, ZZZZZZZZZ = 1, AAAAAAAAAAAAA = 1, BBBBBBBBBB = 1, CCCCCCCCCC = 1, DDDDDDDDDD = 1, EEEEEEEEEEE = 1, FFFFFFFFFF = 1, GGGGGGGGGG = 1, HHHHHHHHHH = 1, IIIIIIIIII = 1, JJJJJJJJJJJ = 1, KKKKKKKKKK = 1, LLLLLLLLL = 1, MMMMMMMMMM = 1, NNNNNNNNNN = 1, OOOOOOOOOP = 1, PPPPPPPPPP = 1, QQQQQQQQQ = 1, RRRRRRRRRR = 1, SSSSSSSSST = 1, TTTTTTTTTT = 1, UUUUUUUUUU = 1, VVVVVVVVVV = 1, WWWWWWWWWW = 1, XXXXXXXXXXX = 1, YYYYYYYYYYY = 1, ZZZZZZZZZZZ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(number => Math.abs(number - mean)));\n  return mean(mad);\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n    let cars=[];\n    let collisions=0;\n    let car1=0;\n    let car2=0;\n    let car1x=0;\n    let car2x=0;\n    let car1y=0;\n    let car2y=0;\n    let car1vx=0;\n    let car2vx=0;\n    let car1vy=0;\n    let car2vy=0;\n    let car1v=0;\n    let car2v=0;\n    let car1x2=0;\n    let car2x2=0;\n    let car1y2=0;\n    let car2y2=0;\n    let car1vx2=0;\n    let car2vx2=0;\n    let car1vy2=0;\n    let car2vy2=0;\n    let car1v2=0;\n    let car2v2=0;\n    let car1x3=0;\n    let car2x3=0;\n    let car1y3=0;\n    let car2y3=0;\n    let car1vx3=0;\n    let car2vx3=0;\n    let car1vy3=0;\n    let car2vy3=0;\n    let car1v3=0;\n    let car2v3=0;\n    let car1x4=0;\n    let car2x4=0;\n    let car1y4=0;\n    let car2y4=0;\n    let car1vx4=0;\n    let car2vx4=0;\n    let car1vy4=0;\n    let car2vy4=0;\n    let car1v4=0;\n    let car2v4=0;\n    cars.push(car1);\n    cars.push(car2);\n    cars.push(car1x);\n    cars.push(car2x);\n    cars.push(car1y);\n    cars.push(car2y);\n    cars.push(car1vx);\n    cars.push(car2vx);\n    cars.push(car1vy);\n    cars.push(car2vy);\n    cars.push(car1v);\n    cars.push(car2v);\n    cars.push(car1x2);\n    cars.push(car2x2);\n    cars.push(car1y2);\n    cars.push(car2y2);\n    cars.push(car1vx2);\n    cars.push(car2vx2);\n    cars.push(car1vy2);\n    cars.push(car2vy2);\n    cars.push(car1v2);\n    cars.push(car2v2);\n    cars.push(car1x3);\n    cars.push(car2x3);\n    cars.push(car1y3);\n    cars.push(car2y3);\n    cars.push(car1vx3);\n    cars.push(car2vx3);\n    cars.push(car1vy3);\n    cars.push(car2vy3);\n    cars.push(car1v3);\n    cars.push(car2v3);\n    cars.push(car1x4);\n    cars.push(car2x4);\n    cars.push(car1y4);\n    cars.push(car2y4);\n    cars.push(car1vx4);\n    cars.push(car2vx4);\n    cars.push(car1vy4);\n    cars.push(car2vy4);\n    cars.push(car1v4);\n    cars.push(car2v4);\n    cars.push(car1x5);\n    cars.push(car2x5);\n    cars.push(car1y5);\n    cars.push(car2y5);\n    cars.push(car1vx5);\n    cars.push(car2vx5);\n    cars.push(car1vy5);\n    cars.push(car2vy5);\n    cars.push(car1v5);\n    cars.push(car2v5);\n    cars.push(car1x6);\n    cars.push(car2x6);\n    cars.push(car1y6);\n    cars.push(car2y6);\n    cars.push(car1vx6);\n    cars.push(car2vx6);\n    cars.push(car1vy6);\n    cars.push(car2vy6);\n    cars.push(car1v6);\n    cars.push(car2v6);\n    cars.push(car1x7);\n    cars.push(car2x7);\n    cars.push(car1y7);\n    cars.push(car2y7);\n    cars.push(car1vx7);\n    cars.push(car2vx7);\n    cars.push(car1vy7);\n    cars.push(car2vy7);\n    cars.push(car1v7);\n    cars.push(car2v7);\n    cars.push(car1x8);\n    cars.push(car2x8);\n    cars.push(car1y8);\n    cars.push(car2y8);\n    cars.push(car1vx8);\n    cars.push(car2vx8);\n    cars.push(car1vy8);\n    cars.push(car2vy8);\n    cars.push(car1v8);\n    cars.push(car2v8);\n    cars.push(car1x9);\n    cars.push(car2x9);\n    cars.push", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [...l];\n  newList.forEach((v, i) => {\n    newList[i] = v + 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const result = l.reduce((acc, curr) => {\n        if (acc === 0) {\n            return false;\n        }\n        if (acc === curr) {\n            return true;\n        }\n        return false;\n    }, true);\n    return result;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  const remainder = x % base;\n  const remainderStr = remainder.toString(base);\n  const remainderLen = remainderStr.length;\n  const resultStr = result + remainderStr;\n  return resultStr.substr(len - remainderLen);\n};\n\n/*\n  Given a number x, return the number of digits in x.\n  >>> countDigits(8)\n  2\n  >>> countDigits(8.5)\n  2\n  >>> countDigits(0)\n  0\n  >>> countDigits(1)\n  1\n  >>> countDigits(10)\n  2\n  >>> countDigits(0.1)\n  1\n  >>> countDigits(0.01)\n  2\n  >>> countDigits(0.001)\n  3\n  >>> countDigits(0.0001)\n  4\n  >>> countDigits(0.00001)\n  5\n  >>> countDigits(0.000001)\n  6\n  >>> countDigits(0.0000001)\n  7\n  >>> countDigits(0.00000001)\n  8\n  >>> countDigits(0.000000001)\n  9\n  >>> countDigits(0.0000000001)\n  10\n  >>> countDigits(0.00000000001)\n  11\n  >>> countDigits(0.000000000001)\n  12\n  >>> countDigits(0.0000000000001)\n  13\n  >>> countDigits(0.00000000000001)\n  14\n  >>> countDigits(0.000000000000001)\n  15\n  >>> countDigits(0.0000000000000001)\n  16\n  >>> countDigits(0.0000000000000001)\n  16\n  >>> countDigits(0.000000000000001)\n  17\n  >>> countDigits(0.00000000000001)\n  18\n  >>> countDigits(0.000000000000001)\n  19\n  >>> countDigits(0.00000000000001)\n  20\n  >>> countDigits(0.000000000000001)\n  21\n  >>> countDigits(0.00000000000001)\n  22\n  >>> countDigits(0.000000000000001)\n  23\n  >>> countDigits(0.00000000000001)\n  24\n  >>> countDigits(0.000000000000001)\n  25\n  >>> countDigits(0.00000000000001)\n  26\n  >>> countDigits(0.000000000000001)\n  27\n  >>> countDigits(0.00000000000001)\n  28\n  >>> countDigits(0.000000000000001)\n  29\n  >>> countDigits(0.00000000000001)\n  30\n  >>> countDigits(0.000000000000001)\n  31\n  >>> countDigits(0.00000000000001)\n  32\n  >>> countDigits(0.000000000000001)\n  33\n  >>> countDigits(0.00000000000001)\n  34\n  >>> countDigits(0.000000000000001)\n  35\n  >>> countDigits(0.00000000000001)\n  36\n  >>> countDigits(0.000000000000001)\n  37\n  >>> countDigits(0.00000000000001)\n  38\n  >>> countDigits(0.000000000000001)\n  39\n  >>> countDigits(0.00000000000001)\n  40\n  >>> countDigits(0.000000000000001)\n  41\n  >>> countDigits(0.00000000000001)\n  42\n  >>> countDigits(0.000000000000001)\n  43\n  >>> countDigits(0.00000000000001)\n  44\n  >>> countDigits(0.000000000000001)\n  45\n  >>> countDigits(0.00000000000001)\n  46\n  >>> countDigits(0.000000000000001)\n  47\n  >>> countDigits(0.00000000000001)\n  48\n  >>> countDigits(0.000000000000001)\n  49\n  >>> countDigits(0.00000000000001)\n  50\n  >>> countDigits(0.000000000000001)\n  51\n  >>> countDigits(0.00000000000001)\n  52\n  >>> countDigits(0.000000000000001)\n  53\n  >>> countDigits(0.00000000000001)\n  54\n  >>> countDigits(0.000000000000001)\n  55\n  >>> countDigits(0.00000000000001)\n  56\n  >>> countDigits(0.000000000000001)\n  57\n  >>> countDigits(0.00000000000001)\n  58\n  >>> countDigits(0.000000000000001)\n  59\n  >>> countDigits(0.00000000000001)\n  60\n  >>> countDigits(0.000000000000001)\n  61\n  >>> countDigits(0.00000000000001)\n  62\n  >>> countDigits(0.000000000000001)\n  63\n  >>> countDigits(0.00000000000001)\n  64\n  >>> countDigits(0.000000000000001)\n  65\n  >>> countDigits(0.00000000000001)\n  66\n  >>> countDigits(0.000000000000001)\n  67\n  >>> countDigits(0.00000000000001)\n  68\n  >>> countDigits(0.000000000000001)\n  69\n  >>> countDigits(0.00000000000001)\n  70\n  >>> countDigits(0.000000000000001)\n  71\n  >>> countDigits(0.00000000000001)\n  72\n  >>> countDigits(0.000000000000001)\n  73\n  >>> countDigits(0.00000000000001)\n  74\n  >>> countDigits(0.000000000000001)\n  75\n  >>> countDigits(0.00000000000001)\n  76\n  >>> countDigits(0.000000000000001)\n  77\n  >>> countDigits(0.00000000000001)\n  78\n  >>> countDigits(0.000000000000001)\n  79\n  >>> countDigits(0.00000000000001)\n  80\n  >>> count", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  9.0\n  */\nconst mean = (l) => {\n  return l.reduce((sum, x) => sum + x, 0) / l.length;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the standard deviation of elements in the list l.\n  >>> standardDeviation([3, 1, 2, 4, 5])\n  1.0\n  >>> standardDeviation([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst standardDeviation = (l) => {\n  const mean = mean(l);\n  return Math.sqrt(\n    l.reduce((sum, x) => sum + (x - mean) ** 2, 0) / l.length\n  );\n};\n\n/*Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum = (l) => {\n  return l.reduce((sum, x) => sum + x, 0);\n};\n\n/*Return the variance of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.25\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  9.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return l.reduce((sum, x) => sum + (x - mean) ** 2, 0) / l.length;\n};\n\n/*Return the skewness of elements in the list l.\n  >>> skewness([3, 1, 2, 4, 5])\n  0.0\n  >>> skewness([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst skewness = (l) => {\n  const mean = mean(l);\n  const variance = variance(l);\n  return l.reduce((sum, x) => sum + (x - mean) ** 3, 0) / l.length - 3 * variance;\n};\n\n/*Return the kurtosis of elements in the list l.\n  >>> kurtosis([3, 1, 2, 4, 5])\n  2.0\n  >>> kurtosis([-10, 4, 6, 1000, 10, 20])\n  3.0\n  */\nconst kurtosis = (l) => {\n  const mean = mean(l);\n  const variance = variance(l);\n  const skewness = skewness(l);\n  return l.reduce((sum, x) => sum + (x - mean) ** 4, 0) / l.length - 4 * variance - 3 * skewness;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  9.0\n  */\nconst mean = (l) => {\n  return l.reduce((sum, x) => sum + x, 0) / l.length;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*Return the standard deviation of elements in the list l.\n  >>> standardDeviation([3, 1, 2, 4, 5])\n  1.0\n  >>> standardDeviation([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst standardDeviation = (l) => {\n  const mean = mean(l);\n  return Math.sqrt(\n    l.reduce((sum, x) => sum + (x - mean) ** 2, 0) / l.length\n  );\n};\n\n/*Return the variance of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.25\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  9.0\n  */", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half, textLength);\n    return firstHalf === secondHalf;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let textLength = text.length;\n    let half = Math.floor(textLength / 2);\n    let firstHalf = text.substring(0, half);\n    let secondHalf = text.substring(half,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const n_p = n % p;\n  if (n_p === 0) return 1;\n  return n_p;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(7, 8)\n  1\n  >>> gcd(7, 9)\n  7\n  >>> gcd(7, 10)\n  7\n  >>> gcd(7, 11)\n  7\n  >>> gcd(7, 12)\n  7\n  >>> gcd(7, 13)\n  7\n  >>> gcd(7, 14)\n  7\n  >>> gcd(7, 15)\n  7\n  >>> gcd(7, 16)\n  7\n  >>> gcd(7, 17)\n  7\n  >>> gcd(7, 18)\n  7\n  >>> gcd(7, 19)\n  7\n  >>> gcd(7, 20)\n  7\n  >>> gcd(7, 21)\n  7\n  >>> gcd(7, 22)\n  7\n  >>> gcd(7, 23)\n  7\n  >>> gcd(7, 24)\n  7\n  >>> gcd(7, 25)\n  7\n  >>> gcd(7, 26)\n  7\n  >>> gcd(7, 27)\n  7\n  >>> gcd(7, 28)\n  7\n  >>> gcd(7, 29)\n  7\n  >>> gcd(7, 30)\n  7\n  >>> gcd(7, 31)\n  7\n  >>> gcd(7, 32)\n  7\n  >>> gcd(7, 33)\n  7\n  >>> gcd(7, 34)\n  7\n  >>> gcd(7, 35)\n  7\n  >>> gcd(7, 36)\n  7\n  >>> gcd(7, 37)\n  7\n  >>> gcd(7, 38)\n  7\n  >>> gcd(7, 39)\n  7\n  >>> gcd(7, 40)\n  7\n  >>> gcd(7, 41)\n  7\n  >>> gcd(7, 42)\n  7\n  >>> gcd(7, 43)\n  7\n  >>> gcd(7, 44)\n  7\n  >>> gcd(7, 45)\n  7\n  >>> gcd(7, 46)\n  7\n  >>> gcd(7, 47)\n  7\n  >>> gcd(7, 48)\n  7\n  >>> gcd(7, 49)\n  7\n  >>> gcd(7, 50)\n  7\n  >>> gcd(7, 51)\n  7\n  >>> gcd(7, 52)\n  7\n  >>> gcd(7, 53)\n  7\n  >>> gcd(7, 54)\n  7\n  >>> gcd(7, 55)\n  7\n  >>> gcd(7, 56)\n  7\n  >>> gcd(7, 57)\n  7\n  >>> gcd(7, 58)\n  7\n  >>> gcd(7, 59)\n  7\n  >>> gcd(7, 60)\n  7\n  >>> gcd(7, 61)\n  7\n  >>> gcd(7, 62)\n  7\n  >>> gcd(7, 63)\n  7\n  >>> gcd(7, 64)\n  7\n  >>> gcd(7, 65)\n  7\n  >>> gcd(7, 66)\n  7\n  >>> gcd(7, 67)\n  7\n  >>> gcd(7, 68)\n  7\n  >>> gcd(7, 69)\n  7\n  >>> gcd(7, 70)\n  7\n  >>> gcd(7, 71)\n  7\n  >>> gcd(7, 72)\n  7\n  >>> gcd(7, 73)\n  7\n  >>> gcd(7, 74)\n  7\n  >>> gcd(7, 75)\n  7\n  >>> gcd(7, 76)\n  7\n  >>> gcd(7, 77)\n  7\n  >>> gcd(7, 78)\n  7\n  >>> gcd(7, 79)\n  7\n  >>> gcd(7, 80)\n  7\n  >>> gcd(7, 81)\n  7\n  >>> gcd(7, 82)\n  7\n  >>> gcd(7, 83)\n  7\n  >>> gcd(7, 84)\n  7\n  >>> gcd(7, 85)\n  7\n  >>> gcd(7, 86)\n  7\n  >>> gcd(7, 87)\n  7\n  >>> gcd(7, 88)\n  7\n  >>> gcd(7, 89)\n  7\n  >>> gcd(7, 90)\n  7\n  >>> gcd(7, 91)\n  7\n  >>> gcd(7, 92)\n  7\n  >>> gcd(7, 93)\n  7\n  >>> gcd(7, 94)\n  7\n  >>> gcd(7, 95)\n  7\n  >>> gcd(7, 96)\n  7\n  >>> gcd(7, 97)\n  7\n  >>> gcd(7, 98)\n  7\n  >>> gcd(7, 99)\n  7\n  >>> gcd(7, 100)\n  7\n  >>> gcd(7, 101)\n  7\n  >>> gcd(7, 102)\n  7\n  >>> gcd(7, 103)\n  7\n  >>> gcd(7, 104)\n  7\n  >>> gcd(7, 105)\n  7\n  >>> gcd(7, 106)\n  7\n  >>> gcd(7, 107)\n  7\n  >>> gcd(7, 108)\n  7\n  >>> gcd(7, 109)\n  7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  if (len === 0) return []\n  const result = []\n  let i = 0\n  while (i < len - 1) {\n    result.push(numbers[i])\n    result.push(delimeter)\n    i += 1\n  }\n  result.push(numbers[i])\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5- \" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5- \" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5- \" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5- \" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5- \" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5- \" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation will be a function that will take string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', '?', '!', ';', ':', '-', '_', '\\'', '\"', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'re', '\\'re', '\\'s', '\\'s', '\\'d', '\\'ll', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re', '\\'re', '\\'s', '\\'re',", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l will be above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold2 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold4 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold6 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold8 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold9 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold10 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold11 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold12 = (l, t1, t2) => {\n  return l.every(x => x >= t1 && x <= t2);\n};\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  625\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> squareRoot(2)\n  1.414213562373095\n  >>> squareRoot(5)\n  2.23606797749978\n  */\nconst factorial = (x) => {\n  return x <= 1? 1 : x * factorial(x - 1);\n};\n\n/*\n  >>> factorial(2)\n  2\n  >>> factorial(5)\n  120\n  */\nconst fibonacci = (x) => {\n  if (x <= 1) {\n    return 1;\n  } else {\n    return fibonacci(x - 1) + fibonacci(x - 2);\n  }\n};\n\n/*\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(5)\n  8\n  */\nconst gcd = (x, y) => {\n  if (x === 0) {\n    return y;\n  } else if (y === 0) {\n    return x;\n  } else {\n    return gcd(y, x % y);\n  }\n};\n\n/*\n  >>> gcd(2, 3)\n  1\n  >>> gcd(5, 7)\n  1\n  */\nconst lcm = (x, y) => {\n  return x * y / gcd(x, y);\n};\n\n/*\n  >>> lcm(2, 3)\n  6\n  >>> lcm(5, 7)\n  35\n  */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst difference = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> difference(2, 3)\n  1\n  >>> difference(5, 7)\n  4\n  */\nconst product = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> product(2, 3)\n  6\n  >>> product(5, 7)\n  35\n  */\nconst quotient = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> quotient(2, 3)\n  0.6666666666666666\n  >>> quotient(5, 7)\n  2.8333333333333333\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  4\n  */\nconst powerOfTen = (x, n) => {\n  return Math.pow(10, n) * x;\n};\n\n/*\n  >>> powerOfTen(2, 3)\n  8\n  >>> powerOfTen(5, 7)\n  625\n  */\nconst powerOfTwo = (x, n) => {\n  return Math.pow(2, n) * x;\n};\n\n/*\n  >>> powerOfTwo(2, 3)\n  8\n  >>> powerOfTwo(5, 7)\n  625\n  */\nconst powerOfTenToTheNth = (x, n) => {\n  return Math.pow(10, n) * x;\n};\n\n/*\n  >>> powerOfTenToTheNth(2, 3)\n  8\n  >>> powerOfTenToTheNth(5, 7)\n  625\n  */\nconst factorialOfNthPower = (x, n) => {\n  return Math.pow(x, n);\n};\n\n/*\n  >>> factorialOfNthPower(2, 3)\n  8\n  >>> factorialOfNthPower(5, 7)\n  625\n  */\nconst factorialOfNthPowerOfTwo = (x, n) => {\n  return Math.pow(2, n) * x;\n};\n\n/*\n  >>> factorialOfNthPowerOfTwo(2, 3)\n  8\n  >>> factorialOfNthPowerOfTwo(5, 7)\n  625\n  */\nconst factorialOfNthPowerOfTen = (x, n) => {\n  return Math.pow(10, n) * x;\n};\n\n/*\n  >>> factorialOfNthPowerOfTen(2, 3)\n  8\n  >>> factorialOfNthPowerOfTen(5, 7)\n  625\n  */\nconst factorialOfNthPowerOfTwoOfTen = (x, n) => {\n  return Math.pow(2, n) * x;\n};\n\n/*\n  >>> factorialOfNthPowerOfTen(2, 3)\n  8\n  >>> factorialOfNthPowerOfTen(5, 7)\n  625\n  */\nconst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('eabcd', 'dddddddabc')\n  true\n  >>> isAnagram('eabcd', 'dddddddabce')\n  false\n  >>> isAnagram('eabcd', 'dddddddabce', {anagram: true})\n  true\n  >>> isAnagram('eabcd', 'dddddddabce', {anagram: false})\n  false\n  >>> isAnagram('eabcd', 'dddddddabce', {anagram: true, sameChars: true})\n  true\n  >>> isAnagram('eabcd', 'dddddddabce', {anagram: true, sameChars: false})\n  false\n  */\nconst isAnagram = (s0, s1, options = {}) => {\n    if (options.anagram === false) {\n        return false;\n    }\n    if (options.anagram === true && options.sameChars === false) {\n        return false;\n    }\n    if (options.anagram === true && options.sameChars === true) {\n        return sameChars(s0, s1);\n    }\n    return true;\n};\n\nexport {\n    isAnagram,\n    sameChars,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\" \")\n  const bracketsLength = bracketsArray.length\n  let bracketsIndex = 0\n  let bracketsCount = 0\n  let bracketsCount2 = 0\n  let bracketsCount3 = 0\n  let bracketsCount4 = 0\n  let bracketsCount5 = 0\n  let bracketsCount6 = 0\n  let bracketsCount7 = 0\n  let bracketsCount8 = 0\n  let bracketsCount9 = 0\n  let bracketsCount10 = 0\n  let bracketsCount11 = 0\n  let bracketsCount12 = 0\n  let bracketsCount13 = 0\n  let bracketsCount14 = 0\n  let bracketsCount15 = 0\n  let bracketsCount16 = 0\n  let bracketsCount17 = 0\n  let bracketsCount18 = 0\n  let bracketsCount19 = 0\n  let bracketsCount20 = 0\n  let bracketsCount21 = 0\n  let bracketsCount22 = 0\n  let bracketsCount23 = 0\n  let bracketsCount24 = 0\n  let bracketsCount25 = 0\n  let bracketsCount26 = 0\n  let bracketsCount27 = 0\n  let bracketsCount28 = 0\n  let bracketsCount29 = 0\n  let bracketsCount30 = 0\n  let bracketsCount31 = 0\n  let bracketsCount32 = 0\n  let bracketsCount33 = 0\n  let bracketsCount34 = 0\n  let bracketsCount35 = 0\n  let bracketsCount36 = 0\n  let bracketsCount37 = 0\n  let bracketsCount38 = 0\n  let bracketsCount39 = 0\n  let bracketsCount40 = 0\n  let bracketsCount41 = 0\n  let bracketsCount42 = 0\n  let bracketsCount43 = 0\n  let bracketsCount44 = 0\n  let bracketsCount45 = 0\n  let bracketsCount46 = 0\n  let bracketsCount47 = 0\n  let bracketsCount48 = 0\n  let bracketsCount49 = 0\n  let bracketsCount50 = 0\n  let bracketsCount51 = 0\n  let bracketsCount52 = 0\n  let bracketsCount53 = 0\n  let bracketsCount54 = 0\n  let bracketsCount55 = 0\n  let bracketsCount56 = 0\n  let bracketsCount57 = 0\n  let bracketsCount58 = 0\n  let bracketsCount59 = 0\n  let bracketsCount60 = 0\n  let bracketsCount61 = 0\n  let bracketsCount62 = 0\n  let bracketsCount63 = 0\n  let bracketsCount64 = 0\n  let bracketsCount65 = 0\n  let bracketsCount66 = 0\n  let bracketsCount67 = 0\n  let bracketsCount68 = 0\n  let bracketsCount69 = 0\n  let bracketsCount70 = 0\n  let bracketsCount71 = 0\n  let bracketsCount72 = 0\n  let bracketsCount73 = 0\n  let bracketsCount74 = 0\n  let bracketsCount75 = 0\n  let bracketsCount76 = 0\n  let bracketsCount77 = 0\n  let bracketsCount78 = 0\n  let bracketsCount79 = 0\n  let bracketsCount80 = 0\n  let bracketsCount81 = 0\n  let bracketsCount82 = 0\n  let bracketsCount83 = 0\n  let bracketsCount84 = 0\n  let bracketsCount85 = 0\n  let bracketsCount86 = 0\n  let bracketsCount87 = 0\n  let bracketsCount88 = 0\n  let bracketsCount89 = 0\n  let bracketsCount90 = 0\n  let bracketsCount91 = 0\n  let bracketsCount92 = 0\n  let bracketsCount93 = 0\n  let bracketsCount94 = 0\n  let bracketsCount95 = 0\n  let bracketsCount96 = 0\n  let bracketsCount97 = 0\n  let bracketsCount98 = 0\n  let bracketsCount99 = 0\n  let bracketsCount100 = 0\n  let bracketsCount101 = 0\n  let bracketsCount102 = 0\n  let bracketsCount103 = 0\n  let bracketsCount104 = 0\n  let bracketsCount105 = 0\n  let bracketsCount106 = 0\n  let bracketsCount107 = 0\n  let bracketsCount108 = 0\n  let bracketsCount109 = 0\n  let bracketsCount110 = 0\n  let bracketsCount111 = 0\n  let bracketsCount112 = 0\n  let bracketsCount113 = 0\n  let bracketsCount114 = 0\n  let bracketsCount115 = 0\n  let bracketsCount116 = 0\n  let bracketsCount117 = 0\n  let bracketsCount118 = 0\n  let bracketsCount119 = 0\n  let bracketsCount120 = 0\n  let bracketsCount121 = 0\n  let bracketsCount122 = 0\n  let bracketsCount123 = 0\n  let bracketsCount124 = 0\n  let bracketsCount125 = 0\n  let bracketsCount126 = 0\n  let bracketsCount127 = 0\n  let bracketsCount128 = 0\n  let bracketsCount129 = 0\n  let bracketsCount130 = 0\n  let bracketsCount131 = 0\n  let bracketsCount132 = 0\n  let bracketsCount133 = 0\n  let bracketsCount134 = 0\n  let bracketsCount135 = 0\n  let bracketsCount136 = 0\n  let bracketsCount137 = 0\n  let bracketsCount138 = 0\n  let bracketsCount139 = 0\n  let bracketsCount140 = 0\n  let bracketsCount141 = 0\n  let bracketsCount142 = 0\n  let bracketsCount143 = 0\n  let bracketsCount144 = 0\n  let bracketsCount145 = 0\n  let bracketsCount146 = 0\n  let bracketsCount147 = 0\n  let bracketsCount148 = 0\n  let bracketsCount149 = 0\n  let bracketsCount150 = 0\n  let bracketsCount151 = 0\n  let bracketsCount152 = 0\n  let bracketsCount153 = 0\n  let bracketsCount154 = 0\n  let bracketsCount155 = 0\n  let bracketsCount156 = 0\n  let bracketsCount157 = 0\n  let bracketsCount158 = 0\n  let bracketsCount159 = 0\n  let bracketsCount160 = 0\n  let bracketsCount161 = 0\n  let bracketsCount162 = 0\n  let bracketsCount163 = 0\n  let bracketsCount164 = 0\n  let bracketsCount165 = 0\n  let bracketsCount166 = 0\n  let bracketsCount167 = 0\n  let bracketsCount168 = 0\n  let bracketsCount169 = 0\n  let bracketsCount170 = 0\n  let bracketsCount171 = 0\n  let bracketsCount172 = 0\n  let bracketsCount173 = 0\n  let bracketsCount174 = 0\n  let bracketsCount175 = 0\n  let bracketsCount176", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic11 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === l.length && sorted[0] === l[0] && sorted[sorted.length - 1] === l[l.length - 1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const l1_length = l1.length;\n  const l2_length = l2.length;\n  const i = 0;\n  const j = 0;\n  while (i < l1_length && j < l2_length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const stack_length = 0\n  const stack_max_length = 0\n  const stack_max_level = 0\n  const stack_max_level_index = 0\n  const stack_max_level_index_index = 0\n  const stack_max_level_index_level = 0\n  const stack_max_level_index_level_index = 0\n  const stack_max_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index = 0\n  const stack_max_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_level = 0\n  const stack_max_level_index_level_index_level_index_level_index_level_index_level_index_level_index_index = 0\n  const stack_max_level_index_level_index_level_index_level_index", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    isOpen = false,\n    isClosed = false;\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n      isOpen = true;\n    } else if (brackets[i] === \")\") {\n      if (isOpen) {\n        stack.pop();\n        isOpen = false;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  */\nconst sum = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the product of all the numbers.\n  >>> product([1, 2, 3])\n  6\n  >>> product([1, 2, 3, 4, 5])\n  120\n  >>> product([1, 2, 3, 4, 5, 6])\n  720\n  >>> product([1, 2, 3, 4, 5, 6, 7])\n  5040\n  */\nconst product = (xs) => {\n  const len = xs.length\n  let product = 1\n  for (let i = 0; i < len; i++) {\n    product *= xs[i]\n  }\n  return product\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers squared.\n  >>> sumSquared([1, 2, 3])\n  9\n  >>> sumSquared([1, 2, 3, 4, 5])\n  45\n  >>> sumSquared([1, 2, 3, 4, 5, 6])\n  225\n  >>> sumSquared([1, 2, 3, 4, 5, 6, 7])\n  429\n  */\nconst sumSquared = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers cubed.\n  >>> sumCubed([1, 2, 3])\n  9\n  >>> sumCubed([1, 2, 3, 4, 5])\n  45\n  >>> sumCubed([1, 2, 3, 4, 5, 6])\n  225\n  >>> sumCubed([1, 2, 3, 4, 5, 6, 7])\n  429\n  */\nconst sumCubed = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers cubed.\n  >>> sumCubed([1, 2, 3, 4, 5, 6, 7])\n  429\n  */\nconst sumCubed2 = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i] * xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers cubed.\n  >>> sumCubed([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1088\n  */\nconst sumCubed3 = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i] * xs[i] * xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers cubed.\n  >>> sumCubed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  1040\n  */\nconst sumCubed4 = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers cubed.\n  >>> sumCubed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  1088\n  */\nconst sumCubed5 = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers cubed.\n  >>> sumCubed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  1040\n  */\nconst sumCubed6 = (xs) => {\n  const len = xs.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i] * xs", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let result = x;\n    for (let i = 0; i < shift; i++) {\n        result = result * 10 + x % 10;\n        x = Math.floor(x / 10);\n    }\n    return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 3)\n  \"12\"\n  >>> circularShift(12, 4)\n  \"12\"\n  >>> circularShift(12, 5)\n  \"12\"\n  >>> circularShift(12, 6)\n  \"12\"\n  >>> circularShift(12, 7)\n  \"12\"\n  >>> circularShift(12, 8)\n  \"12\"\n  >>> circularShift(12, 9)\n  \"12\"\n  >>> circularShift(12, 10)\n  \"12\"\n  >>> circularShift(12, 11)\n  \"12\"\n  >>> circularShift(12, 12)\n  \"12\"\n  >>> circularShift(12, 13)\n  \"12\"\n  >>> circularShift(12, 14)\n  \"12\"\n  >>> circularShift(12, 15)\n  \"12\"\n  >>> circularShift(12, 16)\n  \"12\"\n  >>> circularShift(12, 17)\n  \"12\"\n  >>> circularShift(12, 18)\n  \"12\"\n  >>> circularShift(12, 19)\n  \"12\"\n  >>> circularShift(12, 20)\n  \"12\"\n  >>> circularShift(12, 21)\n  \"12\"\n  >>> circularShift(12, 22)\n  \"12\"\n  >>> circularShift(12, 23)\n  \"12\"\n  >>> circularShift(12, 24)\n  \"12\"\n  >>> circularShift(12, 25)\n  \"12\"\n  >>> circularShift(12, 26)\n  \"12\"\n  >>> circularShift(12, 27)\n  \"12\"\n  >>> circularShift(12, 28)\n  \"12\"\n  >>> circularShift(12, 29)\n  \"12\"\n  >>> circularShift(12, 30)\n  \"12\"\n  >>> circularShift(12, 31)\n  \"12\"\n  >>> circularShift(12, 32)\n  \"12\"\n  >>> circularShift(12, 33)\n  \"12\"\n  >>> circularShift(12, 34)\n  \"12\"\n  >>> circularShift(12, 35)\n  \"12\"\n  >>> circularShift(12, 36)\n  \"12\"\n  >>> circularShift(12, 37)\n  \"12\"\n  >>> circularShift(12, 38)\n  \"12\"\n  >>> circularShift(12, 39)\n  \"12\"\n  >>> circularShift(12, 40)\n  \"12\"\n  >>> circularShift(12, 41)\n  \"12\"\n  >>> circularShift(12, 42)\n  \"12\"\n  >>> circularShift(12, 43)\n  \"12\"\n  >>> circularShift(12, 44)\n  \"12\"\n  >>> circularShift(12, 45)\n  \"12\"\n  >>> circularShift(12, 46)\n  \"12\"\n  >>> circularShift(12, 47)\n  \"12\"\n  >>> circularShift(12, 48)\n  \"12\"\n  >>> circularShift(12, 49)\n  \"12\"\n  >>> circularShift(12, 50)\n  \"12\"\n  >>> circularShift(12, 51)\n  \"12\"\n  >>> circularShift(12, 52)\n  \"12\"\n  >>> circularShift(12, 53)\n  \"12\"\n  >>> circularShift(12, 54)\n  \"12\"\n  >>> circularShift(12, 55)\n  \"12\"\n  >>> circularShift(12, 56)\n  \"12\"\n  >>> circularShift(12, 57)\n  \"12\"\n  >>> circularShift(12, 58)\n  \"12\"\n  >>> circularShift(12, 59)\n  \"12\"\n  >>> circularShift(12, 60)\n  \"12\"\n  >>> circularShift(12, 61)\n  \"12\"\n  >>> circularShift(12, 62)\n  \"12\"\n  >>> circularShift(12, 63)\n  \"12\"\n  >>> circularShift(12, 64)\n  \"12\"\n  >>> circularShift(12, 65)\n  \"12\"\n  >>> circularShift(12, 66)\n  \"12\"\n  >>> circularShift(12, 67)\n  \"12\"\n  >>> circularShift(12, 68)\n  \"12\"\n  >>> circularShift(12, 69)\n  \"12\"\n  >>> circularShift(12, 70)\n  \"12\"\n  >>> circularShift(12, 71)\n  \"12\"\n  >>> circularShift(12, 72)\n  \"12\"\n  >>> circularShift(12, 73)\n  \"12\"\n  >>> circularShift(12, 74)\n  \"12\"\n  >>> circularShift(12, 75)\n  \"12\"\n  >>> circularShift(12, 76)\n  \"12\"\n  >>> circularShift(12, 77)\n  \"12\"\n  >>> circularShift(12, 78)\n  \"12\"\n  >>> circularShift(12, 79)\n  \"12\"\n  >>> circularShift(12, 80)\n  \"12\"\n  >>> circularShift(12, 81)\n  \"12\"\n  >>> circularShift(12, 82)\n  \"12\"\n  >>> circularShift(12, 83)\n  \"12\"\n  >>> circularShift(12, 84)\n  \"12\"\n  >>> circularShift(12, 85)\n  \"12\"\n  >>> circularShift(12, 86)\n  \"12\"\n  >>> circularShift(12, 87)\n  \"12\"\n  >>> circularShift(12, 88)\n  \"12\"\n  >>> circularShift(12, 89)\n  \"12\"\n  >>> circularShift(12, 90)\n  \"12\"\n  >>> circularShift(12, 91)\n  \"12\"\n  >>> circularShift(12, 92)\n  \"12\"\n  >>> circularShift(12, 93", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst lowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullLowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullUpperDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullLowerUpperDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullUpperLowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullUpperLowerUpperDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullUpperLowerUpperLowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  let [a, b] = s.split(\" and \");\n  let [c, d] = b.split(\" and \");\n  let [e, f] = d.split(\" and \");\n  let [g, h] = f.split(\" and \");\n  let [i, j] = h.split(\" and \");\n  let [k, l] = j.split(\" and \");\n  let [m, n] = l.split(\" and \");\n  let [o, p] = n.split(\" and \");\n  let [q, r] = p.split(\" and \");\n  let [s, t] = r.split(\" and \");\n  let [u, v] = t.split(\" and \");\n  let [w, x] = v.split(\" and \");\n  let [y, z] = x.split(\" and \");\n  let [aa, bb] = z.split(\" and \");\n  let [cc, dd] = y.split(\" and \");\n  let [ee, ff] = y.split(\" and \");\n  let [gg, hh] = ee.split(\" and \");\n  let [ii, jj] = ee.split(\" and \");\n  let [kk, ll] = ii.split(\" and \");\n  let [mm, nn] = ii.split(\" and \");\n  let [oo, pp] = nn.split(\" and \");\n  let [qq, rr] = nn.split(\" and \");\n  let [ss, tt] = rr.split(\" and \");\n  let [uu, vv] = tt.split(\" and \");\n  let [ww, xx] = vv.split(\" and \");\n  let [yy, zz] = xx.split(\" and \");\n  let [aa1, bb1] = zz.split(\" and \");\n  let [cc1, dd1] = yy.split(\" and \");\n  let [ee1, ff1] = yy.split(\" and \");\n  let [gg1, hh1] = ee1.split(\" and \");\n  let [ii1, jj1] = ee1.split(\" and \");\n  let [kk1, ll1] = ii1.split(\" and \");\n  let [mm1, nn1] = ii1.split(\" and \");\n  let [oo1, pp1] = nn1.split(\" and \");\n  let [qq1, rr1] = nn1.split(\" and \");\n  let [ss1, tt1] = rr1.split(\" and \");\n  let [uu1, vv1] = tt1.split(\" and \");\n  let [ww1, xx1] = vv1.split(\" and \");\n  let [yy1, zz1] = xx1.split(\" and \");\n  let [aa2, bb2] = zz1.split(\" and \");\n  let [cc2, dd2] = yy1.split(\" and \");\n  let [ee2, ff2] = yy1.split(\" and \");\n  let [gg2, hh2] = ee2.split(\" and \");\n  let [ii2, jj2] = ee2.split(\" and \");\n  let [kk2, ll2] = ii2.split(\" and \");\n  let [mm2, nn2] = ii2.split(\" and \");\n  let [oo2, pp2] = nn2.split(\" and \");\n  let [qq2, rr2] = nn2.split(\" and \");\n  let [ss2, tt2] = rr2.split(\" and \");\n  let [uu2, vv2] = tt2.split(\" and \");\n  let [ww2, xx2] = vv2.split(\" and \");\n  let [yy2, zz2] = xx2.split(\" and \");\n  let [aa3, bb3] = zz2.split(\" and \");\n  let [cc3, dd3] = yy2.split(\" and \");\n  let [ee3, ff3] = yy2.split(\" and \");\n  let [gg3, hh3] = ee3.split(\" and \");\n  let [ii3, jj3] = ee3.split(\" and \");\n  let [kk3, ll3] = ii3.split(\" and \");\n  let [mm3, nn3] = ii3.split(\" and \");\n  let [oo3, pp3] = nn3.split(\" and \");\n  let [qq3, rr3] = nn3.split(\" and \");\n  let [ss3, tt3] = rr3.split(\" and \");\n  let [uu3, vv3] = tt3.split(\" and \");\n  let [ww3, xx3] = vv3.split(\" and \");\n  let [yy3, zz3] = xx3.split(\" and \");\n  let [aa4, bb4] = zz3.split(\" and \");\n  let [cc4, dd4] = yy3.split(\" and \");\n  let [ee4, ff4] = yy3.split(\" and \");\n  let [gg4, hh4] = ee4.split(\" and \");\n  let [ii4, jj4] = ee4.split", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck2 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck3 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck4 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck5 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck6 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck7 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck8 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck9 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck10 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck11 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck12 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n};\n\nconst pluck13 = (arr) => {\n    let min = arr[0];\n    let minIndex = 0;\n    let index =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === 0) {\n    return -1;\n  }\n  let maxFrequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      maxFrequency++;\n    }\n  }\n  if (maxFrequency < max) {\n    return -1;\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, subst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const sorted = lst.slice()\n  let min = sorted[0]\n  let max = sorted[0]\n  let i = 1\n  while (i < len) {\n    if (sorted[i] < min) {\n      min = sorted[i]\n    }\n    if (sorted[i] > max) {\n      max = sorted[i]\n    }\n    i++\n  }\n  sorted.splice(0, 0, max)\n  sorted.splice(len - 1, 1)\n  sorted.splice(0, 0, min)\n  return sorted\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea2 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea3 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea4 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea5 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea6 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea7 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea8 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea9 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea10 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea11 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea12 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea13 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea14 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};\n\nconst triangleArea15 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let isPalindrome = q.every(x => x === q.reverse().pop());\n  let sum = q.reduce((a, b) => a + b);\n  return sum <= w && isPalindrome;\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3], 5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let min = arr.length\n  let min_index = 0\n  let min_value = arr[0]\n  let change = 0\n  while (i < j) {\n    if (arr[i] === arr[j]) {\n      change = 1\n      i++\n      j--\n    } else if (arr[i] < arr[j]) {\n      change = 1\n      i++\n    } else {\n      change = 1\n      j--\n    }\n    if (change < min) {\n      min = change\n      min_index = i\n      min_value = arr[i]\n    }\n  }\n  return min\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) return lst1\n  const len = len1\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']) === ['hI', 'Hi'])\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) === ['hi', 'admin'])\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']) === ['4'])\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers(a);\n  return prime.every(x => x * x === a);\n};\n\nconst primeNumbers = (a) => {\n  const prime = [];\n  for (let i = 2; i <= a; i++) {\n    if (isPrime(i)) {\n      prime.push(i);\n    }\n  }\n  return prime;\n};\n\nconst isPrime = (a) => {\n  const divisor = 2;\n  while (divisor <= a) {\n    if (a % divisor === 0) {\n      return false;\n    }\n    divisor++;\n  }\n  return true;\n};\n\nexport default isMultiplyPrime;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube2 = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube3 = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube4 = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube5 = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube6 = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube7 = (a) => {\n  return a % 6 === 0 && a % 5 === 0 && a % 4 === 0 && a % 3 === 0 && a % 2 === 0 && a % 1 === 0;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> true\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube8 = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  const numLength = num.length;\n  const result = [];\n  for (let i = 0; i < numLength; i++) {\n    const currentDigit = num.charAt(i);\n    const currentDigitIndex = hexDigits.indexOf(currentDigit);\n    if (currentDigitIndex === -1) {\n      result.push(0);\n    } else {\n      result.push(currentDigitIndex);\n    }\n  }\n  return result.reduce((prev, current) => prev + current, 0);\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\nconsole.log(decimalToBinary(15));\nconsole.log(decimalToBinary(32));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  For a will give list of strings, return a tuple consisting of a sum and a product of all the strings in a list.\n  Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([\"a\", \"b\", \"c\", \"d\"])\n  (10, 24)\n  >>> sumProduct([\"\", \"\", \"\", \"\"])\n  (0, 1)\n  >>> sumProduct([\"a\", \"b\", \"c\", \"d\", \"e\"])\n  (10, 24)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  For a will give list of tuples, return a tuple consisting of a sum and a product of all the tuples in a list.\n  Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([(1, 2), (3, 4), (5, 6)])\n  (10, 24)\n  >>> sumProduct([(1, 2), (3, 4), (5, 6), (7, 8)])\n  (10, 24)\n  >>> sumProduct([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n  (10, 24)\n  */\nconst sumProduct = (numbers, tuple) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i][0]\n    product *= numbers[i][1]\n  }\n  return (sum, product)\n}\n\n/*\n  For a will give list of lists, return a tuple consisting of a sum and a product of all the lists in a list.\n  Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([[1, 2], [3, 4], [5, 6]])\n  (10, 24)\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8]])\n  (10, 24)\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\n  (10, 24)\n  */\nconst sumProduct = (numbers, list) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i][0]\n    product *= numbers[i][1]\n  }\n  return (sum, product)\n}\n\n/*\n  For a will give list of lists, return a tuple consisting of a sum and a product of all the lists in a list.\n  Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\n  (10, 24)\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n  (10, 24)\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]])\n  (10, 24)\n  */\nconst sumProduct = (numbers, list) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i][0]\n    product *= numbers[i][1]\n  }\n  return (sum, product)\n}\n\n/*\n  For a will give list of lists, return a tuple consisting of a sum and a product of all the lists in a list.\n  Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]])\n  (10, 24)\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]])\n  (10, 24)\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]])\n  (10, 24)\n  */\nconst sumProduct = (numbers, list) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i][0]\n    product *= numbers[i][1]\n  }\n  return (sum, product)\n}\n\n/*\n  For a will give list of lists, return a tuple consisting of a sum and a product of all the lists in a list.\n  Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]])\n  (10, 24)\n  >>> sumProduct([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let i = 0;\n  let count = 0;\n  let prev = 0;\n  while (i < len) {\n    count = 0;\n    while (i < len && count < 3) {\n      if (s[i] === s[i + 1]) {\n        count++;\n      } else {\n        count = 0;\n      }\n      i++;\n    }\n    if (count === 3) {\n      if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n        return true;\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D+',\n    E: 'E'\n  };\n  const sorted = grades.sort((a, b) => a - b);\n  const gradesLength = sorted.length;\n  const gradesLengthMinusOne = gradesLength - 1;\n  const gradesLengthMinusTwo = gradesLength - 2;\n  const gradesLengthMinusThree = gradesLength - 3;\n  const gradesLengthMinusFour = gradesLength - 4;\n  const gradesLengthMinusFive = gradesLength - 5;\n  const gradesLengthMinusSix = gradesLength - 6;\n  const gradesLengthMinusSeven = gradesLength - 7;\n  const gradesLengthMinusEight = gradesLength - 8;\n  const gradesLengthMinusNine = gradesLength - 9;\n  const gradesLengthMinusTen = gradesLength - 10;\n  const gradesLengthMinusEleven = gradesLength - 11;\n  const gradesLengthMinusTwelve = gradesLength - 12;\n  const gradesLengthMinusThirteen = gradesLength - 13;\n  const gradesLengthMinusFourteen = gradesLength - 14;\n  const gradesLengthMinusFifteen = gradesLength - 15;\n  const gradesLengthMinusSixteen = gradesLength - 16;\n  const gradesLengthMinusSeventeen = gradesLength - 17;\n  const gradesLengthMinusEighteen = gradesLength - 18;\n  const gradesLengthMinusNineteen = gradesLength - 19;\n  const gradesLengthMinusTwenty = gradesLength - 20;\n  const gradesLengthMinusTwentyOne = gradesLength - 21;\n  const gradesLengthMinusTwentyTwo = gradesLength - 22;\n  const gradesLengthMinusTwentyThree = gradesLength - 23;\n  const gradesLengthMinusTwentyFour = gradesLength - 24;\n  const gradesLengthMinusTwentyFive = gradesLength - 25;\n  const gradesLengthMinusTwentySix = gradesLength - 26;\n  const gradesLengthMinusTwentySeven = gradesLength - 27;\n  const gradesLengthMinusTwentyEight = gradesLength - 28;\n  const gradesLengthMinusTwentyNine = gradesLength - 29;\n  const gradesLengthMinusThirty = gradesLength - 30;\n  const gradesLengthMinusThirtyOne = gradesLength - 31;\n  const gradesLengthMinusThirtyTwo = gradesLength - 32;\n  const gradesLengthMinusThirtyThree = gradesLength - 33;\n  const gradesLengthMinusThirtyFour = gradesLength - 34;\n  const gradesLengthMinusThirtyFive = gradesLength - 35;\n  const gradesLengthMinusThirtySix = gradesLength - 36;\n  const gradesLengthMinusThirtySeven = gradesLength - 37;\n  const gradesLengthMinusThirtyEight = gradesLength - 38;\n  const gradesLengthMinusThirtyNine = gradesLength - 39;\n  const gradesLengthMinusForty = gradesLength - 40;\n  const gradesLengthMinusFortyOne = gradesLength - 41;\n  const gradesLengthMinusFortyTwo = gradesLength - 42;\n  const gradesLengthMinusFortyThree = gradesLength - 43;\n  const gradesLengthMinusFortyFour = gradesLength - 44;\n  const gradesLengthMinusFortyFive = gradesLength - 45;\n  const gradesLengthMinusFortySix = gradesLength - 46;\n  const gradesLengthMinusFortySeven = gradesLength - 47;\n  const gradesLengthMinusFortyEight = gradesLength - 48;\n  const gradesLengthMinusFortyNine = gradesLength - 49;\n  const gradesLengthMinusFifty = gradesLength - 50;\n  const gradesLengthMinusFiftyOne = gradesLength - 51;\n  const gradesLengthMinusFiftyTwo = gradesLength - 52;\n  const gradesLengthMinusFiftyThree = gradesLength - 53;\n  const gradesLengthMinusFiftyFour = gradesLength - 54;\n  const gradesLengthMinusFiftyFive = gradesLength - 55;\n  const gradesLengthMinusFiftySix = gradesLength - 56;\n  const gradesLengthMinusFiftySeven = gradesLength - 57;\n  const gradesLengthMinusFiftyEight = gradesLength - 58;\n  const gradesLengthMinusFiftyNine = gradesLength - 59;\n  const gradesLengthMinusSixty = gradesLength - 60;\n  const gradesLengthMinusSixtyOne = gradesLength - 61;\n  const gradesLengthMinusSixtyTwo = gradesLength - 62;\n  const gradesLengthMinusSixtyThree = gradesLength - 63;\n  const gradesLengthMinusSixtyFour = gradesLength - 64;\n  const gradesLengthMinusSixtyFive = gradesLength - 65;\n  const gradesLengthMinusSixtySix = gradesLength - 66;\n  const gradesLengthMinusSixtySeven = gradesLength - 67;\n  const gradesLengthMinusSixtyEight = gradesLength - 68;\n  const gradesLengthMinusSixtyNine = gradesLength - 69;\n  const gradesLengthMinusSeventy = gradesLength - 70;\n  const gradesLengthMinusSeventyOne = gradesLength - 71;\n  const gradesLengthMinusSeventyTwo = gradesLength - 72;\n  const gradesLengthMinusSeventyThree = gradesLength - 73;\n  const gradesLengthMinusSeventyFour = gradesLength - 74;\n  const gradesLengthMinusSeventyFive = gradesLength - 75;\n  const gradesLengthMinusSeventySix = gradesLength - 76;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  const isPrime = (number) => {\n    if (number === 1) {\n      return false;\n    }\n    if (number % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= number; i += 2) {\n      if (number % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const isPrimeLength = (length) => {\n    for (let i = 2; i < length; i++) {\n      if (isPrime(i) === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrimeLength(string.length);\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds2 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds3 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds4 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds5 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds6 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds7 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds8 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds9 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds10 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds11 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds12 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds13 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds14 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds15 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds16 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds17 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds18 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    while (j <= n) {\n      if (i === j) {\n        count++\n      }\n      j++\n    }\n  }\n  return count\n}\n\nconst startsOneEnds", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => N % 2? 1 : 0);\n  const sum = digits.reduce((acc, digit) => acc + digit, 0);\n  return `${sum}`;\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.charCodeAt(0)\n      if (newChar > 96) {\n        newWord += char\n      } else {\n        newWord += char.toUpperCase()\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  for (let i = 0; i < len; i++) {\n    col.push(lst[i].slice(0, x))\n  }\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\n/*\n  Given a 2 dimensional data, will return a list of tuples, \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  const row = []\n  const col = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    col.push(lst[i][x])\n  }\n  col.sort((a, b) => a - b)\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i].slice(x))\n  }\n  row.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\n/*\n  Given a 2 dimensional data, will return a list of tuples, \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiagonal = (lst, x) => {\n  const row = []\n  const col = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  for (let i = 0; i < len; i++) {\n    col.push(lst[i][x])\n  }\n  col.sort((a, b) => a - b)\n  return row.concat(col)\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  for (let i = 0; i < len; i++) {\n    col.push(lst[i].slice(0, x))\n  }\n  col.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getCol = (lst, x) => {\n  const row = []\n  const col = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    col.push(lst[i][x])\n  }\n  col.sort((a, b) => a - b)\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i].slice(x))\n  }\n  row.sort((a, b) => b - a)\n  return row.concat(col)\n}\n\nconst getDiagonal = (lst, x) => {\n  const row = []\n  const col = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  row.sort((a, b) => a - b)\n  for (let i = 0; i < len; i++) {\n    col.push(lst[i][x])\n  }\n  col.sort((a, b) => a - b)\n  return row.concat(col)\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const len =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sortedArray[i] + sortedArray[j];\n    if (sum % 2 === 0) {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum;\n      j--;\n    } else {\n      sortedArray[j] = sortedArray[i];\n      sortedArray[i] = sum;\n      i++;\n    }\n  }\n  return sortedArray;\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    result += alphabet.charAt(index + 2);\n  }\n  return result;\n};\n\n/*\n  Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    result += alphabet.charAt(index - 2);\n  }\n  return result;\n};\n\n/*\n  Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    result += alphabet.charAt(index + 1);\n  }\n  return result;\n};\n\n/*\n  Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    result += alphabet.charAt(index - 1);\n  }\n  return result;\n};\n\n/*\n  Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    result += alphabet.charAt(index + 3);\n  }\n  return result;\n};\n\n/*\n  Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    result += alphabet.charAt(index - 3);\n  }\n  return result;\n};\n\n/*\n  Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt4 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxCount = 1;\n  const maxList = [max];\n  const maxListIndex = 0;\n  const maxListCount = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n    if (maxCount > maxListCount) {\n      maxList = [max];\n      maxListIndex = 0;\n      maxListCount = maxCount;\n    } else if (maxCount === maxListCount) {\n      maxList[maxListIndex] = max;\n      maxListIndex++;\n    }\n  }\n  return maxList;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min) min = lst[i]\n  }\n  return min\n}\n\nconst nextSmallest = (lst)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let start = S.indexOf(\"I\");\n  while (start!== -1) {\n    let end = S.indexOf(\".\", start + 1);\n    if (end!== -1) {\n      count++;\n      start = S.indexOf(\"I\", end + 1);\n    } else {\n      end = S.indexOf(\"?\", start + 1);\n      if (end!== -1) {\n        count++;\n        start = S.indexOf(\"I\", end + 1);\n      } else {\n        end = S.indexOf(\"!\", start + 1);\n        if (end!== -1) {\n          count++;\n          start = S.indexOf(\"I\", end + 1);\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring words. A boring word will be a word that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let start = S.indexOf(\"I\");\n  while (start!== -1) {\n    let end = S.indexOf(\".\", start + 1);\n    if (end!== -1) {\n      if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n        count++;\n        start = S.indexOf(\"I\", end + 1);\n      }\n    } else {\n      end = S.indexOf(\"?\", start + 1);\n      if (end!== -1) {\n        if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n          count++;\n          start = S.indexOf(\"I\", end + 1);\n        }\n      } else {\n        end = S.indexOf(\"!\", start + 1);\n        if (end!== -1) {\n          if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n            count++;\n            start = S.indexOf(\"I\", end + 1);\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring words. A boring word will be a word that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let start = S.indexOf(\"I\");\n  while (start!== -1) {\n    let end = S.indexOf(\".\", start + 1);\n    if (end!== -1) {\n      if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n        count++;\n        start = S.indexOf(\"I\", end + 1);\n      }\n    } else {\n      end = S.indexOf(\"?\", start + 1);\n      if (end!== -1) {\n        if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n          count++;\n          start = S.indexOf(\"I\", end + 1);\n        }\n      } else {\n        end = S.indexOf(\"!\", start + 1);\n        if (end!== -1) {\n          if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n            count++;\n            start = S.indexOf(\"I\", end + 1);\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring words. A boring word will be a word that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let start = S.indexOf(\"I\");\n  while (start!== -1) {\n    let end = S.indexOf(\".\", start + 1);\n    if (end!== -1) {\n      if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n        count++;\n        start = S.indexOf(\"I\", end + 1);\n      }\n    } else {\n      end = S.indexOf(\"?\", start + 1);\n      if (end!== -1) {\n        if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n          count++;\n          start = S.indexOf(\"I\", end + 1);\n        }\n      } else {\n        end = S.indexOf(\"!\", start + 1);\n        if (end!== -1) {\n          if (S.substring(start, end + 1).indexOf(\"I\")!== -1) {\n            count++;\n            start = S.indexOf(\"I\", end + 1);\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.ex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true\n  }\n  if (x === y - z) {\n    return true\n  }\n  if (x === z - y) {\n    return true\n  }\n  if (x === z + y) {\n    return true\n  }\n  if (x === y + z / 2) {\n    return true\n  }\n  if (x === y - z / 2) {\n    return true\n  }\n  if (x === z - y / 2) {\n    return true\n  }\n  if (x === z + y / 2) {\n    return true\n  }\n  if (x === y + z / 3) {\n    return true\n  }\n  if (x === y - z / 3) {\n    return true\n  }\n  if (x === z - y / 3) {\n    return true\n  }\n  if (x === z + y / 3) {\n    return true\n  }\n  if (x === y + z / 4) {\n    return true\n  }\n  if (x === y - z / 4) {\n    return true\n  }\n  if (x === z - y / 4) {\n    return true\n  }\n  if (x === z + y / 4) {\n    return true\n  }\n  if (x === y + z / 5) {\n    return true\n  }\n  if (x === y - z / 5) {\n    return true\n  }\n  if (x === z - y / 5) {\n    return true\n  }\n  if (x === z + y / 5) {\n    return true\n  }\n  if (x === y + z / 6) {\n    return true\n  }\n  if (x === y - z / 6) {\n    return true\n  }\n  if (x === z - y / 6) {\n    return true\n  }\n  if (x === z + y / 6) {\n    return true\n  }\n  if (x === y + z / 7) {\n    return true\n  }\n  if (x === y - z / 7) {\n    return true\n  }\n  if (x === z - y / 7) {\n    return true\n  }\n  if (x === z + y / 7) {\n    return true\n  }\n  if (x === y + z / 8) {\n    return true\n  }\n  if (x === y - z / 8) {\n    return true\n  }\n  if (x === z - y / 8) {\n    return true\n  }\n  if (x === z + y / 8) {\n    return true\n  }\n  if (x === y + z / 9) {\n    return true\n  }\n  if (x === y - z / 9) {\n    return true\n  }\n  if (x === z - y / 9) {\n    return true\n  }\n  if (x === z + y / 9) {\n    return true\n  }\n  if (x === y + z / 10) {\n    return true\n  }\n  if (x === y - z / 10) {\n    return true\n  }\n  if (x === z - y / 10) {\n    return true\n  }\n  if (x === z + y / 10) {\n    return true\n  }\n  if (x === y + z / 11) {\n    return true\n  }\n  if (x === y - z / 11) {\n    return true\n  }\n  if (x === z - y / 11) {\n    return true\n  }\n  if (x === z + y / 11) {\n    return true\n  }\n  if (x === y + z / 12) {\n    return true\n  }\n  if (x === y - z / 12) {\n    return true\n  }\n  if (x === z - y / 12) {\n    return true\n  }\n  if (x === z + y / 12) {\n    return true\n  }\n  if (x === y + z / 13) {\n    return true\n  }\n  if (x === y - z / 13) {\n    return true\n  }\n  if (x === z - y / 13) {\n    return true\n  }\n  if (x === z + y / 13) {\n    return true\n  }\n  if (x === y + z / 14) {\n    return true\n  }\n  if (x === y - z / 14) {\n    return true\n  }\n  if (x === z - y / 14) {\n    return true\n  }\n  if (x === z + y / 14) {\n    return true\n  }\n  if (x === y + z / 15) {\n    return true\n  }\n  if (x === y - z / 15) {\n    return true\n  }\n  if (x === z - y / 15) {\n    return true\n  }\n  if (x === z + y / 15) {\n    return true\n  }\n  if (x === y + z / 16) {\n    return true\n  }\n  if (x === y - z / 16) {\n    return true\n  }\n  if (x === z - y / 16) {\n    return true\n  }\n  if (x === z + y / 16) {\n    return true\n  }\n  if (x === y + z / 17) {\n    return true\n  }\n  if (x === y - z / 17) {\n    return true\n  }\n  if (x === z - y / 17) {\n    return true\n  }\n  if (x === z + y / 17) {\n    return true\n  }\n  if (x === y + z / 18) {\n    return true\n  }\n  if (x === y - z / 18) {\n    return true\n  }\n  if (x === z - y /", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextNextLetter = message[i + 2];\n    if (letter === nextLetter) {\n      encoded += letter;\n    } else if (letter === nextNextLetter) {\n      encoded += letter.toUpperCase();\n    } else if (letter === nextLetter.toUpperCase()) {\n      encoded += letter.toLowerCase();\n    } else if (letter === nextLetter.toLowerCase()) {\n      encoded += letter.toUpperCase();\n    } else if (letter === nextLetter.toLowerCase()) {\n      encoded += letter.toLowerCase();\n    } else if (letter === nextNextLetter.toUpperCase()) {\n      encoded += letter.toUpperCase();\n    } else if (letter === nextNextLetter.toLowerCase()) {\n      encoded += letter.toLowerCase();\n    } else if (letter === nextNextLetter.toUpperCase()) {\n      encoded += letter.toUpperCase();\n    } else if (letter === nextNextLetter.toLowerCase()) {\n      encoded += letter.toLowerCase();\n    } else {\n      encoded += letter.toUpperCase();\n    }\n    i += 2;\n  }\n  return encoded;\n};\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let prime = isPrime(num);\n    if (prime) {\n      max = Math.max(max, num);\n    }\n  }\n  return max;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoEmptyNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoEmptyNoEmptyNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  checkDictCase,\n  checkDictCaseNoEmpty,\n  checkD", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n < 2) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply2 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply3 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply4 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply5 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply6 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply7 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply8 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.join('');\n};\n\nconst multiply9 = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of lowercase vowels in even will indice.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of consonants in even will indice.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of consonants in even will indice.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countPunctuation = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] ==='' || s[i] === ',' || s[i] === '.' || s[i] === '!' || s[i] === '?' || s[i] === ';' || s[i] === ':' || s[i] === '\\'' || s[i] === '\\\"' || s[i] === '(' || s[i] === ')' || s[i] === '[' || s[i] === ']' || s[i] === '{' || s[i] === '}' || s[i] === '+' || s[i] === '-' || s[i] === '*' || s[i] === '/' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '|' || s[i] === '~' || s[i] === '=' || s[i] === '<' || s[i] === '>' || s[i] === '@' || s[i] === '#' || s[i] === '$' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '|' || s[i] === '~' || s[i] === '=' || s[i] === '<' || s[i] === '>' || s[i] === '@' || s[i] === '#' || s[i] === '$' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '|' || s[i] === '~' || s[i] === '=' || s[i] === '<' || s[i] === '>' || s[i] === '@' || s[i] === '#' || s[i] === '$' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '|' || s[i] === '~' || s[i] === '=' || s[i] === '<' || s[i] === '>' || s[i] === '@' || s[i] === '#' || s[i] === '$' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '|' || s[i] === '~' || s[i] === '=' || s[i] === '<' || s[i] === '>' || s[i] === '@' || s[i] === '#' || s[i] === '$' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '|' || s[i] === '~' || s[i] === '=' || s[i] === '<' || s[i] === '>' || s[i] === '@' || s[i] === '#' || s[i] === '$' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '|' || s[i] === '~' || s[i] === '=' || s[i] === '<' || s[i] === '>' || s[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValueAbs = Math.abs(intValue);\n  const intValueAbsFloor = Math.floor(intValueAbs);\n  const intValueAbsCeil = Math.ceil(intValueAbs);\n  const intValueAbsDiff = Math.abs(intValueAbs - intValueAbsFloor);\n  const intValueAbsDiffCeil = Math.abs(intValueAbs - intValueAbsCeil);\n  if (intValueAbsDiff < intValueAbsDiffCeil) {\n    return intValueAbsFloor;\n  } else {\n    return intValueAbsCeil;\n  }\n};\n\n/*\n  Create a function that will take a value (string) representing a number \n  and will return the closest integer to it. If the number will be equidistant \n  from two integers, will round it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValueAbs = Math.abs(intValue);\n  const intValueAbsFloor = Math.floor(intValueAbs);\n  const intValueAbsCeil = Math.ceil(intValueAbs);\n  const intValueAbsDiff = Math.abs(intValueAbs - intValueAbsFloor);\n  const intValueAbsDiffCeil = Math.abs(intValueAbs - intValueAbsCeil);\n  if (intValueAbsDiff < intValueAbsDiffCeil) {\n    return intValueAbsFloor;\n  } else {\n    return intValueAbsCeil;\n  }\n};\n\n/*\n  Create a function that will take a value (string) representing a number \n  and will return the closest integer to it. If the number will be equidistant \n  from two integers, will round it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValueAbs = Math.abs(intValue);\n  const intValueAbsFloor = Math.floor(intValueAbs);\n  const intValueAbsCeil = Math.ceil(intValueAbs);\n  const intValueAbsDiff = Math.abs(intValueAbs - intValueAbsFloor);\n  const intValueAbsDiffCeil = Math.abs(intValueAbs - intValueAbsCeil);\n  if (intValueAbsDiff < intValueAbsDiffCeil) {\n    return intValueAbsFloor;\n  } else {\n    return intValueAbsCeil;\n  }\n};\n\n/*\n  Create a function that will take a value (string) representing a number \n  and will return the closest integer to it. If the number will be equidistant \n  from two integers, will round it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValueAbs = Math.abs(intValue);\n  const intValueAbsFloor = Math.floor(intValueAbs);\n  const intValueAbsCeil = Math.ceil(intValueAbs);\n  const intValueAbsDiff = Math.abs(intValueAbs - intValueAbsFloor);\n  const intValueAbsDiffCeil = Math.abs(intValueAbs - intValueAbsCeil);\n  if (intValueAbsDiff < intValueAbsDiffCeil) {\n    return intValueAbsFloor;\n  } else {\n    return intValueAbsCeil;\n  }\n};\n\n/*\n  Create a function that will take a value (string) representing a number \n  and will return the closest integer to it. If the number will be equidistant \n  from two integers, will round it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValueAbs = Math.abs(intValue);\n  const intValueAbsFloor = Math.floor(intValueAbs);\n  const intValueAbsCeil = Math.ceil(intValueAbs);\n  const intValue", "passed": 0, "run_status": 1}
