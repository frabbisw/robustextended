{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    const diff = sorted[i] - sorted[j];\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    if (diff < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n  will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    const diff = sorted[i] - sorted[j];\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    if (diff < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n  will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    const diff = sorted[i] - sorted[j];\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    if (diff < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n  will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    const diff = sorted[i] - sorted[j];\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    if (diff < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n  will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    const diff = sorted[i] - sorted[j];\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    if (diff < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n  will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    const diff = sorted[i] - sorted[j];\n    if (Math.abs(diff) < threshold) {\n      return true;\n    }\n    if (diff < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if in will give list of numbers, will be any two numbers closer to each other than \n  will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  let i = 0;\n  let j = len - 1;\n  while (i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_length_minus_one = paren_string_array_length - 1;\n  const paren_string_array_length_minus_two = paren_string_array_length - 2;\n  const paren_string_array_length_minus_three = paren_string_array_length - 3;\n  const paren_string_array_length_minus_four = paren_string_array_length - 4;\n  const paren_string_array_length_minus_five = paren_string_array_length - 5;\n  const paren_string_array_length_minus_six = paren_string_array_length - 6;\n  const paren_string_array_length_minus_seven = paren_string_array_length - 7;\n  const paren_string_array_length_minus_eight = paren_string_array_length - 8;\n  const paren_string_array_length_minus_nine = paren_string_array_length - 9;\n  const paren_string_array_length_minus_ten = paren_string_array_length - 10;\n  const paren_string_array_length_minus_eleven = paren_string_array_length - 11;\n  const paren_string_array_length_minus_twelve = paren_string_array_length - 12;\n  const paren_string_array_length_minus_thirteen = paren_string_array_length - 13;\n  const paren_string_array_length_minus_fourteen = paren_string_array_length - 14;\n  const paren_string_array_length_minus_fifteen = paren_string_array_length - 15;\n  const paren_string_array_length_minus_sixteen = paren_string_array_length - 16;\n  const paren_string_array_length_minus_seventeen = paren_string_array_length - 17;\n  const paren_string_array_length_minus_eighteen = paren_string_array_length - 18;\n  const paren_string_array_length_minus_nineteen = paren_string_array_length - 19;\n  const paren_string_array_length_minus_twenty = paren_string_array_length - 20;\n  const paren_string_array_length_minus_twenty_one = paren_string_array_length - 21;\n  const paren_string_array_length_minus_twenty_two = paren_string_array_length - 22;\n  const paren_string_array_length_minus_twenty_three = paren_string_array_length - 23;\n  const paren_string_array_length_minus_twenty_four = paren_string_array_length - 24;\n  const paren_string_array_length_minus_twenty_five = paren_string_array_length - 25;\n  const paren_string_array_length_minus_twenty_six = paren_string_array_length - 26;\n  const paren_string_array_length_minus_twenty_seven = paren_string_array_length - 27;\n  const paren_string_array_length_minus_twenty_eight = paren_string_array_length - 28;\n  const paren_string_array_length_minus_twenty_nine = paren_string_array_length - 29;\n  const paren_string_array_length_minus_thirty = paren_string_array_length - 30;\n  const paren_string_array_length_minus_thirty_one = paren_string_array_length - 31;\n  const paren_string_array_length_minus_thirty_two = paren_string_array_length - 32;\n  const paren_string_array_length_minus_thirty_three = paren_string_array_length - 33;\n  const paren_string_array_length_minus_thirty_four = paren_string_array_length - 34;\n  const paren_string_array_length_minus_thirty_five = paren_string_array_length - 35;\n  const paren_string_array_length_minus_thirty_six = paren_string_array_length - 36;\n  const paren_string_array_length_minus_thirty_seven = paren_string_array_length - 37;\n  const paren_string_array_length_minus_thirty_eight = paren_string_array_length - 38;\n  const paren_string_array_length_minus_thirty_nine = paren_string_array_length - 39;\n  const paren_string_array_length_minus_thirty_ten = paren_string_array_length - 40;\n  const paren_string_array_length_minus_thirty_eleven = paren_string_array_length - 41;\n  const paren_string_array_length_minus_thirty_twelve = paren_string_array_length - 42;\n  const paren_string_array_length_minus_thirty_thirteen = paren_string_array_length - 43;\n  const paren_string_array_length_minus_thirty_fourteen = paren_string_array_length - 44;\n  const paren_string_array_length_minus_thirty_fifteen = paren_string_array_length - 45;\n  const paren_string_array_length_minus_thirty_sixteen = paren_string_array_length - 46;\n  const paren_string_array_length_minus_thirty_seventeen = paren_string_array_length - 47;\n  const paren", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] === string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if string will be a palindrome*/ \nconst isPalindrome = (string) => { \n  return string == string.split('').reverse().join('');\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] === string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if string will be a palindrome*/ \nconst isPalindrome = (string) => { \n  return string == string.split('').reverse().join('');\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] === string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if string will be a palindrome*/ \nconst isPalindrome = (string) => { \n  return string == string.split('').reverse().join('');\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] === string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if string will be a palindrome*/ \nconst isPalindrome = (string) => { \n  return string == string.split('').reverse().join('');\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] === string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if string will be a pal", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [n];\n  for (let i = 1; i < n; i++) {\n    pile.push(Math.floor(Math.pow(2, i) + Math.pow(2, i - 1) + 1));\n  }\n  return pile;\n};\n\nconsole.log(makeAPile(3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  wordsArray([ \"one\", \"two\",", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum2(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum3(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum4(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum5(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum6(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum7(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum8(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum9(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum10(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum11(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum12(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum13(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum14(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum15(y, x);", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = Math.round(avg)\n  const binary = rounded.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i);\n    if (num % 2 === 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\nexport default uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(names[sortedArr[i] - 1])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(names[sortedArr[i] - 1])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(names[sortedArr[i] - 1])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(names[sortedArr[i] - 1])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(names[sortedArr[i] - 1])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(names[sortedArr[i] - 1])\n  }\n  for (let i = 0; i < reversedArrLength; i++) {\n    result.push(names[reversedArr[i] - 1])\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reversed", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f19 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f20 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f21 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f22 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f23 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f24 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f25 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f26 = (n) => {\n  const fact", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = Math.floor(b / 2);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = Math.floor(b / 2);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = Math.floor(b / 2);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = Math.floor(b / 2);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = Math.floor(b / 2);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = Math.floor(b / 2);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      b = Math.floor(b / 2);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i;\n    let b = i;\n    while (a >= 1) {\n      if (a % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      a = Math.floor(a / 2);\n    }\n    while (b <= n) {\n      if (b % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([]));\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      j--;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      j--;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      j--;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall8 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall9 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      if (flag) {\n        flag = false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nexport default stringXor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1Length = lst1.length;\n  let lst2Length = lst2.length;\n  if (lst1Length!== lst2Length) {\n    return \"NO\";\n  }\n  let lst1Index = 0;\n  let lst2Index = 0;\n  while (lst1Index < lst1Length && lst2Index < lst2Length) {\n    if (lst1[lst1Index] === lst2[lst2Index]) {\n      lst1Index++;\n      lst2Index++;\n    } else if (lst1[lst1Index] < lst2[lst2Index]) {\n      lst1Index++;\n    } else {\n      lst2Index++;\n    }\n  }\n  if (lst1Index === lst1Length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space will separate lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      for (let j = 0; j < c.length; j++) {\n        result.push(s[i + j]);\n      }\n      i += c.length - 1;\n    } else {\n      result.push(s[i]);\n    }\n  }\n  return [result.reverse().join(''), s.length === result.length];\n};\n\nconst checkPalindrome = (s, c) => {\n  const [result, isPalindrome] = reverseDelete(s, c);\n  return [result, isPalindrome];\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\ntest.forEach(t => {\n  const [s, c] = t;\n  console.log(checkPalindrome(s, c));\n});\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const oddCount = (str) => {\n      const oddCount = (str) => {\n        const oddCount = (str) => {\n          const oddCount = (str) => {\n            const oddCount = (str) => {\n              const oddCount = (str) => {\n                const oddCount = (str) => {\n                  const oddCount = (str) => {\n                    const oddCount = (str) => {\n                      const oddCount = (str) => {\n                        const oddCount = (str) => {\n                          const oddCount = (str) => {\n                            const oddCount = (str) => {\n                              const oddCount = (str) => {\n                                const oddCount = (str) => {\n                                  const oddCount = (str) => {\n                                    const oddCount = (str) => {\n                                      const oddCount = (str) => {\n                                        const oddCount = (str) => {\n                                          const oddCount = (str) => {\n                                            const oddCount = (str) => {\n                                              const oddCount = (str) => {\n                                                const oddCount = (str) => {\n                                                  const oddCount = (str) => {\n                                                    const oddCount = (str) => {\n                                                      const oddCount = (str) => {\n                                                        const oddCount = (str) => {\n                                                          const oddCount = (str) => {\n                                                           const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = nums[i];\n    if (sum > 0) {\n      minSum = Math.min(minSum, sum);\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([-1, -2, -3]));\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        count += buckets[i][j] = capacity;\n      }\n    }\n  }\n  return count;\n};\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${grid}`);\n  console.log(`bucket_capacity: ${capacity}`);\n  console.log(`expected: ${maxFill(grid, capacity)}`);\n  console.log(`actual: ${maxFill(grid, capacity)}`);\n};\n\ntest([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\ntest([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\ntest([[0,0,0], [0,0,0]], 5);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = parseInt(a, 2);\n    const bInt = parseInt(b, 2);\n    if (aInt > bInt) return 1;\n    if (aInt < bInt) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const charCount = {};\n  const charCountMap = {};\n  const charCountMap2 = {};\n  const charCountMap3 = {};\n  const charCountMap4 = {};\n  const charCountMap5 = {};\n  const charCountMap6 = {};\n  const charCountMap7 = {};\n  const charCountMap8 = {};\n  const charCountMap9 = {};\n  const charCountMap10 = {};\n  const charCountMap11 = {};\n  const charCountMap12 = {};\n  const charCountMap13 = {};\n  const charCountMap14 = {};\n  const charCountMap15 = {};\n  const charCountMap16 = {};\n  const charCountMap17 = {};\n  const charCountMap18 = {};\n  const charCountMap19 = {};\n  const charCountMap20 = {};\n  const charCountMap21 = {};\n  const charCountMap22 = {};\n  const charCountMap23 = {};\n  const charCountMap24 = {};\n  const charCountMap25 = {};\n  const charCountMap26 = {};\n  const charCountMap27 = {};\n  const charCountMap28 = {};\n  const charCountMap29 = {};\n  const charCountMap30 = {};\n  const charCountMap31 = {};\n  const charCountMap32 = {};\n  const charCountMap33 = {};\n  const charCountMap34 = {};\n  const charCountMap35 = {};\n  const charCountMap36 = {};\n  const charCountMap37 = {};\n  const charCountMap38 = {};\n  const charCountMap39 = {};\n  const charCountMap40 = {};\n  const charCountMap41 = {};\n  const charCountMap42 = {};\n  const charCountMap43 = {};\n  const charCountMap44 = {};\n  const charCountMap45 = {};\n  const charCountMap46 = {};\n  const charCountMap47 = {};\n  const charCountMap48 = {};\n  const charCountMap49 = {};\n  const charCountMap50 = {};\n  const charCountMap51 = {};\n  const charCountMap52 = {};\n  const charCountMap53 = {};\n  const charCountMap54 = {};\n  const charCountMap55 = {};\n  const charCountMap56 = {};\n  const charCountMap57 = {};\n  const charCountMap58 = {};\n  const charCountMap59 = {};\n  const charCountMap60 = {};\n  const charCountMap61 = {};\n  const charCountMap62 = {};\n  const charCountMap63 = {};\n  const charCountMap64 = {};\n  const charCountMap65 = {};\n  const charCountMap66 = {};\n  const charCountMap67 = {};\n  const charCountMap68 = {};\n  const charCountMap69 = {};\n  const charCountMap70 = {};\n  const charCountMap71 = {};\n  const charCountMap72 = {};\n  const charCountMap73 = {};\n  const charCountMap74 = {};\n  const charCountMap75 = {};\n  const charCountMap76 = {};\n  const charCountMap77 = {};\n  const charCountMap78 = {};\n  const charCountMap79 = {};\n  const charCountMap80 = {};\n  const charCountMap81 = {};\n  const charCountMap82 = {};\n  const charCountMap83 = {};\n  const charCountMap84 = {};\n  const charCountMap85 = {};\n  const charCountMap86 = {};\n  const charCountMap87 = {};\n  const charCountMap88 = {};\n  const charCountMap89 = {};\n  const charCountMap90 = {};\n  const charCountMap91 = {};\n  const charCountMap92 = {};\n  const charCountMap93 = {};\n  const charCountMap94 = {};\n  const charCountMap95 = {};\n  const charCountMap96 = {};\n  const charCountMap97 = {};\n  const charCountMap98 = {};\n  const charCountMap99 = {};\n  const charCountMap100 = {};\n  const charCountMap101 = {};\n  const charCountMap102 = {};\n  const charCountMap103 = {};\n  const charCountMap104 = {};\n  const charCountMap105 = {};\n  const charCountMap106 = {};\n  const charCountMap107 = {};\n  const charCountMap108 = {};\n  const charCountMap109 = {};\n  const charCountMap110 = {};\n  const charCountMap111 = {};\n  const charCountMap112 = {};\n  const charCountMap113 = {};\n  const charCountMap114 = {};\n  const charCountMap115 = {};\n  const charCountMap116 = {};\n  const charCountMap117 = {};\n  const charCountMap118 = {};\n  const charCountMap119 = {};\n  const charCountMap120 = {};\n  const charCountMap121 = {};\n  const charCountMap122 = {};\n  const charCountMap123 = {};\n  const charCountMap124 = {};\n  const charCountMap125 = {};\n  const charCountMap126 = {};\n  const charCountMap127 = {};\n  const charCountMap128 = {};\n  const charCountMap129 = {};\n  const charCountMap130 = {};\n  const charCountMap131 = {};\n  const charCountMap132 = {};\n  const charCountMap133 = {};\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  const closestVowel = '';\n  let closestDistance = Infinity;\n  let distance = 0;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        distance = i;\n        break;\n      }\n    }\n    if (distance!== Infinity) {\n      for (let k = 0; k < consonants.length; k++) {\n        if (distance + 1 < wordLength && word[distance + 1] === consonants[k]) {\n          closestVowel = vowels[j];\n          closestDistance = distance;\n          break;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  const closestVowel = '';\n  let closestDistance = Infinity;\n  let distance = 0;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        distance = i;\n        break;\n      }\n    }\n    if (distance!== Infinity) {\n      for (let k = 0; k < consonants.length; k++) {\n        if (distance + 1 < wordLength && word[distance + 1] === consonants[k]) {\n          closestVowel = vowels[j];\n          closestDistance = distance;\n          break;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  const closestVowel = '';\n  let closestDistance = Infinity;\n  let distance = 0;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        distance = i;\n        break;\n      }\n    }\n    if (distance!== Infinity) {\n      for (let k = 0; k < consonants.length; k++) {\n        if (distance + 1 < wordLength && word[distance + 1] === consonants[k]) {\n          closestVowel = vowels[j];\n          closestDistance = distance;\n          break;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  const closestVowel = '';\n  let closestDistance = Infinity;\n  let distance = 0;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        distance = i;\n        break;\n      }\n    }\n    if (distance!== Infinity) {\n      for (let k = 0; k < consonants.length; k++) {\n        if (distance + 1 < wordLength && word[distance + 1] === consonants[k]) {\n          closestVowel = vowels[j];\n          closestDistance = distance;\n          break;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === '(') {\n        result.push(c);\n      } else {\n        return 'No';\n      }\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nconsole.log(matchParenspassed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd'])\n  'ccc'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff'])\n  'eee'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg'])\n  'fff'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh'])\n  'hhh'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii'])\n  'iii'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj'])\n  'jjj'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk'])\n  'kkk'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll'])\n  'kkk'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm'])\n  'lll'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn'])\n  'nnn'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo'])\n  'nnn'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp'])\n  'ppp'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq'])\n  'qqq'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr'])\n  'qqq'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr','sss'])\n  'rrr'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr','sss', 'ttt'])\n  'ttt'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr','sss', 'ttt', 'uuu'])\n  'uuu'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr','sss', 'ttt', 'uuu', 'vvv'])\n  'vvv'\n  */\n\n/*\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr','sss', 'ttt', 'uuu', 'vvv', 'www'])\n  'vvv", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy2 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy3 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy4 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy5 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy6 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy7 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy8 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy9 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy10 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy11 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy12 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst maximumBy13 = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz2 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz3 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz4 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz5 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz6 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz7 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz8 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz9 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz10 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz11 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = collatz[i] * 3 + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz12 = (n) => {\n  const collatz = [1];\n  let i = 1;\n  while (i < n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 || month === 5 || month === 7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = txt.toLowerCase().split(/\\s+/);\n  const oddLetters = lowerLetters.filter(letter => letter.length % 2 === 1);\n  return [words, oddLetters];\n};\n\nconst splitWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerLetters = t", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(a => a === sorted[sorted.indexOf(a) + 1]);\n};\n\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const length = Math.abs(mid1 - mid2)\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const length = Math.abs(mid1 - mid2)\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const length = Math.abs(mid1 - mid2)\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const length = Math.abs(mid1 - mid2)\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const length = Math.abs(mid1 - mid2)\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const length = Math.abs(mid1 - mid2)\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const length = Math.abs(mid1 - mid2)\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      product *= 1;\n    } else if (arr[i] < 0) {\n      product *= -1;\n    }\n  }\n  return sum * product;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n).fill(0)\n  dp[0] = 1\n  let min = dp[0]\n  let min_index = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] < grid[i - 1][j]) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + 1)\n        if (dp[i] === k) {\n          min = dp[i]\n          min_index = i\n        }\n      }\n    }\n  }\n  return [...grid[min_index].slice(0, k - 1)]\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconsole.log(minPath(grid, 3))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a % b, b);\n};\n\nconst gcd = greatestCommonDivisor;\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\nconst lcm = leastCommonMultiple;\n\n/* Return the sum of two integers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  50\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\nconst add = sum;\n\n/* Return the difference of two integers a and b\n  >>> difference(3, 5)\n  2\n  >>> difference(25, 15)\n  10\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\nconst subtract = difference;\n\n/* Return the product of two integers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  375\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\nconst multiply = product;\n\n/* Return the quotient of two integers a and b\n  >>> quotient(3, 5)\n  1\n  >>> quotient(25, 15)\n  5\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\nconst divide = quotient;\n\n/* Return the remainder of two integers a and b\n  >>> remainder(3, 5)\n  2\n  >>> remainder(25, 15)\n  10\n  */\nconst remainder = (a, b) => {\n  return a % b;\n};\n\nconst modulo = remainder;\n\n/* Return the absolute value of an integer\n  >>> abs(3)\n  3\n  >>> abs(-3)\n  3\n  >>> abs(0)\n  0\n  >>> abs(-0)\n  0\n  >>> abs(25)\n  25\n  >>> abs(-25)\n  25\n  */\nconst abs = (a) => {\n  if (a < 0) {\n    return -a;\n  }\n  return a;\n};\n\nconst absInt = (a) => {\n  if (a < 0) {\n    return -a;\n  }\n  return a;\n};\n\nconst absFloat = (a) => {\n  if (a < 0) {\n    return -a;\n  }\n  return a;\n};\n\nconst isEven = (a) => {\n  return a % 2 === 0;\n};\n\nconst isOdd = (a) => {\n  return a % 2 === 1;\n};\n\nconst isPositive = (a) => {\n  return a > 0;\n};\n\nconst isNegative = (a) => {\n  return a < 0;\n};\n\nconst isZero = (a) => {\n  return a === 0;\n};\n\nconst isPositiveZero = (a) => {\n  return a > 0 && a === 0;\n};\n\nconst isNegativeZero = (a) => {\n  return a < 0 && a === 0;\n};\n\nconst isEvenZero = (a) => {\n  return a % 2 === 0 && a === 0;\n};\n\nconst isOddZero = (a) => {\n  return a % 2 === 1 && a === 0;\n};\n\nconst isPositiveInfinity = (a) => {\n  return a > 0 && a === Infinity;\n};\n\nconst isNegativeInfinity = (a) => {\n  return a < 0 && a === Infinity;\n};\n\nconst isZeroInfinity = (a) => {\n  return a === Infinity && a === 0;\n};\n\nconst isPositiveInfinityZero = (a) => {\n  return a > 0 && a === Infinity && a === 0;\n};\n\nconst isNegativeInfinityZero = (a) => {\n  return a < 0 && a === Infinity && a === 0;\n};\n\nconst isPositiveInfinityInfinity = (a) => {\n  return a > 0 && a === Infinity && a === Infinity;\n};\n\nconst isNegativeInfinityInfinity = (a) => {\n  return a < 0 && a === Infinity && a === Infinity;\n};\n\nconst isPositiveInfinityNegativeInfinity = (a) => {\n  return a > 0 && a === Infinity && a === -Infinity;\n};\n\nconst isNegativeInfinityNegativeInfinity = (a) => {\n  return a < 0 && a === Infinity && a === -Infinity;\n};\n\nconst isPositiveInfinityNegativeZero = (a) => {\n  return a > 0 && a === Infinity && a === -0;\n};\n\nconst isNegativeInfinityNegativeZero = (a) => {\n  return a < 0 && a === Infinity && a === -0;\n};\n\nconst isPositiveInfinityPositiveZero = (a) => {\n  return a > 0 && a === Infinity && a === 0;\n};\n\nconst isNegativeInfinityPositiveZero = (a) => {\n  return a < 0 && a === Infinity && a === 0;\n};\n\nconst isPositiveInfinityNegativeInfinity = (a) => {\n  return a > 0 && a === Infinity && a === -Infinity;\n};\n\nconst isNegativeInfinityPositiveInfinity = (a) => {\n  return a < 0 && a === Infinity && a === -Infinity;\n};\n\nconst isPositiveZeroNegativeInfinity = (a) => {\n  return a > 0 && a === 0 && a === -Infinity;\n};\n\nconst isNegativeZeroNegativeInfinity = (a) => {\n  return a < 0 && a === 0 && a === -Infinity;\n};\n\nconst isPositiveZeroPositiveInfinity = (a)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n  const stack = [];\n  const brackets = /\\[|\\]/g;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      i++;\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n      } else {\n        return false;\n      }\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter;\n};\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be a number and will be not a part of a word, \n   and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber;\n};\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be a number and will be not a part of a word, \n   and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9a-zA-Z]/);\n  return isANumber;\n};\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be a number and will be not a part of a word, \n   and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9a-zA-Z ]/);\n  return isANumber;\n};\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be a number and will be not a part of a word, \n   and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrSpaceOrPeriod = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9a-zA-Z ]/);\n  return isANumber;\n};\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be a number and will be not a part of a word, \n   and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrSpaceOrPeriodOrHyphen = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9a-zA-Z -]/);\n  return isANumber;\n};\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be a number and will be not a part of a word, \n   and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ true\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrSpaceOrPeriodOrHyphenOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9a-zA-Z - ]/);\n  return isANumber;\n};\n\n/*\n  Create a function that will return true if the last character \n   of a will give string will be a number and will be not a part of a word, \n   and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIs", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr.length) {\n    if (arr[i] <= arr[i + 1]) {\n      if (arr[i] > max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n      i++;\n    } else {\n      j = i + 1;\n      while (j < arr.length && arr[j] <= arr[i]) {\n        j++;\n      }\n      k = j - 1;\n      if (k > maxIndex) {\n        max = arr[k];\n        maxIndex = k;\n      }\n      i = j;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, return the index of the largest element in the array.\n  If there are multiple largest elements, return the index of the first one.\n  If there are no largest elements, return -1.\n  */\nconst largest = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, return the index of the smallest element in the array.\n  If there are multiple smallest elements, return the index of the first one.\n  If there are no smallest elements, return -1.\n  */\nconst smallest = (arr) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    i++;\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, return the index of the largest element in the array.\n  If there are multiple largest elements, return the index of the first one.\n  If there are no largest elements, return -1.\n  */\nconst largestIndex = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, return the index of the smallest element in the array.\n  If there are multiple smallest elements, return the index of the first one.\n  If there are no smallest elements, return -1.\n  */\nconst smallestIndex = (arr) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    i++;\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, return the index of the largest element in the array.\n  If there are multiple largest elements, return the index of the first one.\n  If there are no largest elements, return -1.\n  */\nconst largestIndexOf = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, return the index of the smallest element in the array.\n  If there are multiple smallest elements, return the index of the first one.\n  If there are no smallest elements, return -1.\n  */\nconst smallestIndexOf = (arr) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    i++;\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, return the index of the largest element in the array.\n  If there are multiple largest elements, return the index of the first one.\n  If there are no largest elements, return -1.\n  */\nconst largestIndexOf = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, return the index of the smallest element in the array.\n  If there are multiple smallest elements, return the index of the first one.\n  If there are no smallest elements, return -1.\n  */\nconst smallestIndexOf = (arr) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    i++;\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, return the index of the largest element in the array.\n  If there are multiple largest elements, return the index of the first one.\n  If there are no largest elements, return -1.\n  */\nconst largestIndexOf = (arr) => {\n  let max = -1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null) {\n      largest = lst[i];\n      smallest = lst[i];\n    } else {\n      if (lst[i] < largest) {\n        largest = lst[i];\n      } else if (lst[i] > largest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return largest === null? (null, null) : (largest, smallest);\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers2 = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null) {\n      largest = lst[i];\n      smallest = lst[i];\n    } else {\n      if (lst[i] < largest) {\n        largest = lst[i];\n      } else if (lst[i] > largest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return largest === null? (null, null) : (largest, smallest);\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers3 = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null) {\n      largest = lst[i];\n      smallest = lst[i];\n    } else {\n      if (lst[i] < largest) {\n        largest = lst[i];\n      } else if (lst[i] > largest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return largest === null? (null, null) : (largest, smallest);\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers4 = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null) {\n      largest = lst[i];\n      smallest = lst[i];\n    } else {\n      if (lst[i] < largest) {\n        largest = lst[i];\n      } else if (lst[i] > largest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return largest === null? (null, null) : (largest, smallest);\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers5 = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null) {\n      largest = lst[i];\n      smallest = lst[i];\n    } else {\n      if (lst[i] < largest) {\n        largest = lst[i];\n      } else if (lst[i] > largest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return largest === null? (null, null) : (largest, smallest);\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareTwo= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareThree= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareFour= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareFive= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareSix= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareSeven= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareEight= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareNine= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareTen= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareEleven= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }else{\n    return null;\n  }\n}\n\nconst compareTwelve= (a, b)=>{\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b){", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the will give number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*E", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst binomial = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return binomial(n - 1, k - 1) + binomial(n - 1, k);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst catalan = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return catalan(n - 1) + catalan(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst euler = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return euler(n - 1) + euler(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst harmonic = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return harmonic(n - 1) + harmonic(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst bell = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return bell(n - 1) + bell(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst lgamma = (x) => {\n  if (x === 0) {\n    return 0;\n  }\n  if (x === 1) {\n    return 1;\n  }\n  return lgamma(x - 1) + lgamma(x - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma = (x) => {\n  if (x === 0) {\n    return 1;\n  }\n  if (x === 1) {\n    return 1;\n  }\n  return gamma(x - 1) + gamma(x - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst zeta = (x) => {\n  if (x === 0) {\n    return 1;\n  }\n  if (x === 1) {\n    return 1;\n  }\n  return zeta(x - 1) + zeta(x - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst polygamma = (x, y) => {\n  if (x === 0) {\n    return 0;\n  }\n  if (x === 1) {\n    return 1;\n  }\n  if (y === 0) {\n    return 1;\n  }\n  if (y === 1) {\n    return x;\n  }\n  return polygamma(x - 1, y - 1) + polygamma(x - 1, y);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst digamma = (x) => {\n  if (x === 0) {\n    return 0;\n  }\n  if (x === 1) {\n    return 1;\n  }\n  return digamma(x - 1) + digamma(x - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst trigamma = (x) => {\n  if (x === 0) {\n    return 0;\n  }\n  if (x === 1) {\n    return 1;\n  }\n  return trigamma(x - 1) + trigamma(x - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst lanczos = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return lanczos(n - 1) + lanczos(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma_p = (n) => {\n  if (n === 0) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = string.split('');\n  for (let i = 0; i < prefix.length; i++) {\n    const prefixesOfLength = allPrefixes(prefix.slice(0, i + 1));\n    prefixes.push(...prefixesOfLength);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(...suffixesOfLength);\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.split('');\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixesOfLength = allSuffixes(suffix.slice(0, i + 1));\n    suffixes.push(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\n/*\n  Given a string text, will replace all underscores with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'');\n};\n\n/*\n  Given a string text, will replace all underscores with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpaces = (text) => {\n  return text.replace(/_+/g,'').replace(/\\s+/g, '_');\n};\n\n/*\n  Given a string text, will replace all spaces with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_+/g,'');\n};\n\n/*\n  Given a string text, will replace all underscores with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_');\n};\n\n/*\n  Given a string text, will replace all underscores with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_').replace(/_+/g,'');\n};\n\n/*\n  Given a string text, will replace all underscores with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_');\n};\n\n/*\n  Given a string text, will replace all underscores with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_');\n};\n\n/*\n  Given a string text, will replace all underscores with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s+/g, '_').replace(/_+/g,'').replace(/\\s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === -1) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 0) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 2) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 1) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 4) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 5) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 6) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 7) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 8) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 9) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 10) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 11) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 12) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 13) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 14) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 15) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 16) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 17) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 18) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 19) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 20) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 21) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 22) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 23) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 24) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 25) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 26) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 27) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 28) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 29) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 30) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 31) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 32) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 33) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 34) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 35) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 36) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 37) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 38) {\n    return 'No", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ');\n  let newWords = [];\n  let newWord = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = words.length;\n  let prime = (x) => {\n    let i = 0;\n    while (i < x) {\n      if (x % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  while (i < len) {\n    newWord = words[i];\n    if (prime(newWord.length)) {\n      newWords.push(newWord);\n    }\n    i++;\n  }\n  return newWords.join(' ');\n};\n\nconsole.log(wordsInSentence('This is a test'));\nconsole.log(wordsInSentence('lets go for swimming'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  if(x === n) return true;\n  if(x === \"0\") return false;\n  if(x === \"1\") return true;\n  if(x === \"2\") return false;\n  if(x === \"3\") return false;\n  if(x === \"4\") return false;\n  if(x === \"5\") return false;\n  if(x === \"6\") return false;\n  if(x === \"7\") return false;\n  if(x === \"8\") return false;\n  if(x === \"9\") return false;\n  if(x === \"10\") return false;\n  if(x === \"11\") return false;\n  if(x === \"12\") return false;\n  if(x === \"13\") return false;\n  if(x === \"14\") return false;\n  if(x === \"15\") return false;\n  if(x === \"16\") return false;\n  if(x === \"17\") return false;\n  if(x === \"18\") return false;\n  if(x === \"19\") return false;\n  if(x === \"20\") return false;\n  if(x === \"21\") return false;\n  if(x === \"22\") return false;\n  if(x === \"23\") return false;\n  if(x === \"24\") return false;\n  if(x === \"25\") return false;\n  if(x === \"26\") return false;\n  if(x === \"27\") return false;\n  if(x === \"28\") return false;\n  if(x === \"29\") return false;\n  if(x === \"30\") return false;\n  if(x === \"31\") return false;\n  if(x === \"32\") return false;\n  if(x === \"33\") return false;\n  if(x === \"34\") return false;\n  if(x === \"35\") return false;\n  if(x === \"36\") return false;\n  if(x === \"37\") return false;\n  if(x === \"38\") return false;\n  if(x === \"39\") return false;\n  if(x === \"40\") return false;\n  if(x === \"41\") return false;\n  if(x === \"42\") return false;\n  if(x === \"43\") return false;\n  if(x === \"44\") return false;\n  if(x === \"45\") return false;\n  if(x === \"46\") return false;\n  if(x === \"47\") return false;\n  if(x === \"48\") return false;\n  if(x === \"49\") return false;\n  if(x === \"50\") return false;\n  if(x === \"51\") return false;\n  if(x === \"52\") return false;\n  if(x === \"53\") return false;\n  if(x === \"54\") return false;\n  if(x === \"55\") return false;\n  if(x === \"56\") return false;\n  if(x === \"57\") return false;\n  if(x === \"58\") return false;\n  if(x === \"59\") return false;\n  if(x === \"60\") return false;\n  if(x === \"61\") return false;\n  if(x === \"62\") return false;\n  if(x === \"63\") return false;\n  if(x === \"64\") return false;\n  if(x === \"65\") return false;\n  if(x === \"66\") return false;\n  if(x === \"67\") return false;\n  if(x === \"68\") return false;\n  if(x === \"69\") return false;\n  if(x === \"70\") return false;\n  if(x === \"71\") return false;\n  if(x === \"72\") return false;\n  if(x === \"73\") return false;\n  if(x === \"74\") return false;\n  if(x === \"75\") return false;\n  if(x === \"76\") return false;\n  if(x === \"77\") return false;\n  if(x === \"78\") return false;\n  if(x === \"79\") return false;\n  if(x === \"80\") return false;\n  if(x === \"81\") return false;\n  if(x === \"82\") return false;\n  if(x === \"83\") return false;\n  if(x === \"84\") return false;\n  if(x === \"85\") return false;\n  if(x === \"86\") return false;\n  if(x === \"87\") return false;\n  if(x === \"88\") return false;\n  if(x === \"89\") return false;\n  if(x === \"90\") return false;\n  if(x === \"91\") return false;\n  if(x === \"92\") return false;\n  if(x === \"93\") return false;\n  if(x === \"94\") return false;\n  if(x === \"95\") return false;\n  if(x === \"96\") return false;\n  if(x === \"97\") return false;\n  if(x === \"98\") return false;\n  if(x === \"99\") return false;\n  if(x === \"100\") return false;\n  if(x === \"101\") return false;\n  if(x === \"102\") return false;\n  if(x === \"103\") return false;\n  if(x === \"104\") return false;\n  if(x === \"105\") return false;\n  if(x === \"106\") return false;\n  if(x === \"107\") return false;\n  if(x === \"108\") return false;\n  if(x === \"109\") return false;\n  if(x === \"110\") return false;\n  if(x === \"111\")", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(n => n > 10 && n % 2 === 1 && n % 3 === 1 && n % 5 === 1 && n % 7 === 1)\n  return arr.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet1 === planet || planet2 === planet) {\n      continue;\n    }\n    const distance = Math.abs(Math.sqrt(Math.pow(Math.abs(planet1.length - planet2.length), 2) + Math.pow(Math.abs(planet1.length - planet2.length), 2)));\n    if (distance <= 1) {\n      result.push(planet);\n    }\n  }\n  return result;\n};\n\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  const sorted = lst.slice();\n  const sortedLen = sorted.length;\n  const sortedSum = sorted.reduce((a, b) => a + b, 0);\n  const sortedLenSum = sortedLen * len;\n  const sortedSumLen = sortedSum * len;\n  const sortedSumLenSum = sortedSumLen * sortedLen;\n  const sortedSumLenSumSum = sortedSumLenSum * sortedLenSum;\n  const sortedSumLenSumSumSum = sortedSumLenSumSum * sortedSumLenSumSum;\n  const sortedSumLenSumSumSumSum = sortedSumLenSumSumSum * sortedSumLenSumSumSum;\n  const sortedSumLenSumSumSumSumSum = sortedSumLenSumSumSumSumSum * sortedSumLenSumSumSumSum;\n  const sortedSumLenSumSumSumSumSumSum = sortedSumLenSumSumSumSumSumSumSum * sortedSumLenSumSumSumSumSum;\n  const sortedSumLenSumSumSumSumSumSumSumSum = sortedSumLenSumSumSumSumSumSumSumSumSum * sortedSumLenSumSumSumSumSumSum;\n  const sortedSumLenSumSumSumSumSumSumSumSumSumSum = sortedSumLenSumSumSumSumSumSumSumSumSumSum * sortedSumLenSumSumSumSumSumSumSum;\n  const sortedSumLenSumSumSumSumSumSumSumSumSumSumSumSum = sortedSumLenSumSumSumSumSumSumSumSumSumSumSumSum * sortedSumLenSumSumSumSumSumSumSumSum;\n  const sortedSumLenSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = sortedSumLenSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum * sortedSumLenSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum Sum\n  return sorted.sort((a, b) => {\n    const aLen = a.length;\n    const bLen = b.length;\n    const aSum = a.reduce((a, b) => a + b, 0);\n    const bSum = b.reduce((a, b) => a + b, 0);\n    const aSumLen = aLen * aLen;\n    const bSumLen = bLen * bLen;\n    const aSumLen = aSum * aLen;\n    const bSumLen = bSum * bLen;\n    const aSumLenSum = aSumLen * aLen;\n    const bSumLenSum = bSumLen * bLen;\n    const aSumLenSum = aSumLen * aLen;\n    const bSumLenSum = bSumLen * bLen;\n    const aSumLenSumSum = aSumLenSum * aLen;\n    const bSumLenSumSum = bSumLenSum * bLen;\n    const aSumLenSumSumSum = aSumLenSumSum * aLen;\n    const bSumLenSumSumSum = bSumLenSumSum * bLen;\n    const aSumLenSumSumSumSum = aSumLenSumSumSum * aLen;\n    const bSumLenSumSumSumSum = bSumLenSumSumSumSum * bLen;\n    const aSumLenSumSumSumSumSum = aSumLenSumSumSumSumSum * aLen;\n    const bSumLenSumSumSumSumSum = bSumLenSumSumSumSumSum * bLen;\n    const aSumLenSumSumSumSumSumSum = aSumLenSumSumSumSumSumSum * aLen;\n    const bSumLenSumSumSumSumSumSum = bSumLenSumSumSumSumSumSum * bLen;\n    const aSumLenSumSumSumSumSumSumSum = aSumLenSumSumSumSumSumSumSum * aLen;\n    const bSumLenSumSumSumSumSumSumSum = bSumLenSumSumSumSumSumSumSum * bLen;\n    const aSumLenSumSumSumSumSumSumSumSum = aSumLenSumSumSumSumSumSumSumSum * aLen;\n    const bSumLenSumSumSumSumSumSumSumSumSum = bSumLenSumSumSumSumSumSumSumSum * bLen;\n    const aSumLenSumSumSumSumSumSumSumSumSumSum = aSumLenSumSumSumSumSumSumSumSumSumSumSum * aLen;\n    const bSumLenSumSumSumSumSumSumSumSumSumSumSumSum = bSumLenSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += ` ${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', 'x')\n  '0x'\n  >>> stringSequence(5, '-', 'x')\n  '0x1x2x3x4x5x'\n  */\nconst stringSequence = (n, delimiter ='', delimiter2 = 'x') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${i}${delimiter2}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', 'x', '-')\n  '0x'\n  >>> stringSequence(5, '-', 'x', '-')\n  '0x1x2x3x4x5x'\n  */\nconst stringSequence = (n, delimiter ='', delimiter2 = 'x', delimiter3 = '-') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${i}${delimiter2}${i}${delimiter3}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', 'x', '-', 'y')\n  '0x-y'\n  >>> stringSequence(5, '-', 'x', '-', 'y')\n  '0x1x2x3x4x5x-y'\n  */\nconst stringSequence = (n, delimiter ='', delimiter2 = 'x', delimiter3 = '-', delimiter4 = 'y') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${i}${delimiter2}${i}${delimiter3}${i}${delimiter4}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', 'x', '-', 'y', '-')\n  '0x-y'\n  >>> stringSequence(5, '-', 'x', '-', 'y', '-')\n  '0x1x2x3x4x5x-y'\n  */\nconst stringSequence = (n, delimiter ='', delimiter2 = 'x', delimiter3 = '-', delimiter4 = 'y', delimiter5 = '-') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${i}${delimiter2}${i}${delimiter3}${i}${delimiter4}${i}${delimiter5}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', 'x', '-', 'y', '-', 'z')\n  '0x-y-z'\n  >>> stringSequence(5, '-', 'x', '-', 'y', '-', 'z')\n  '0x1x2x3x4x5x-y-z'\n  */\nconst stringSequence = (n, delimiter ='', delimiter2 = 'x', delimiter3 = '-', delimiter4 = 'y', delimiter5 = '-', delimiter6 = 'z') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${i}${delimiter2}${i}${delimiter3}${i}${delimiter4}${i}${delimiter5}${i}${delimiter6}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', 'x', '-', 'y', '-', 'z', '-')\n  '0x-y-z'\n  >>> stringSequence(5, '-', 'x', '-', 'y', '-', 'z', '-')\n  '0x1x2x3x4x5x-y-z'\n  */\nconst stringSequence = (n, delimiter ='', delimiter2 = 'x', delimiter3 = '-', delimiter4 = 'y', delimiter5 = '-', delimiter6 = 'z', delimiter7 = '-') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${i}${delimiter2}${i}${delimiter3}${i}${delimiter4}${i}${delimiter5}${i}${delimiter6}${i}${delimiter7}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num >= 0 && typeof num === 'number'){\n      sum += Math.pow(num, 2);\n    }\n  }\n  return sum;\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1,-2, 0]));\nconsole.log(doubleTheDifference([9,-2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [scores, guesses] = game;\n  const [score, guess] = guess;\n  const [i, j] = [0, 0];\n  const [i1, j1] = [0, 0];\n  const [i2, j2] = [0, 0];\n  const [i3, j3] = [0, 0];\n  const [i4, j4] = [0, 0];\n  const [i5, j5] = [0, 0];\n  const [i6, j6] = [0, 0];\n  const [i7, j7] = [0, 0];\n  const [i8, j8] = [0, 0];\n  const [i9, j9] = [0, 0];\n  const [i10, j10] = [0, 0];\n  const [i11, j11] = [0, 0];\n  const [i12, j12] = [0, 0];\n  const [i13, j13] = [0, 0];\n  const [i14, j14] = [0, 0];\n  const [i15, j15] = [0, 0];\n  const [i16, j16] = [0, 0];\n  const [i17, j17] = [0, 0];\n  const [i18, j18] = [0, 0];\n  const [i19, j19] = [0, 0];\n  const [i20, j20] = [0, 0];\n  const [i21, j21] = [0, 0];\n  const [i22, j22] = [0, 0];\n  const [i23, j23] = [0, 0];\n  const [i24, j24] = [0, 0];\n  const [i25, j25] = [0, 0];\n  const [i26, j26] = [0, 0];\n  const [i27, j27] = [0, 0];\n  const [i28, j28] = [0, 0];\n  const [i29, j29] = [0, 0];\n  const [i30, j30] = [0, 0];\n  const [i31, j31] = [0, 0];\n  const [i32, j32] = [0, 0];\n  const [i33, j33] = [0, 0];\n  const [i34, j34] = [0, 0];\n  const [i35, j35] = [0, 0];\n  const [i36, j36] = [0, 0];\n  const [i37, j37] = [0, 0];\n  const [i38, j38] = [0, 0];\n  const [i39, j39] = [0, 0];\n  const [i40, j40] = [0, 0];\n  const [i41, j41] = [0, 0];\n  const [i42, j42] = [0, 0];\n  const [i43, j43] = [0, 0];\n  const [i44, j44] = [0, 0];\n  const [i45, j45] = [0, 0];\n  const [i46, j46] = [0, 0];\n  const [i47, j47] = [0, 0];\n  const [i48, j48] = [0, 0];\n  const [i49, j49] = [0, 0];\n  const [i50, j50] = [0, 0];\n  const [i51, j51] = [0, 0];\n  const [i52, j52] = [0, 0];\n  const [i53, j53] = [0, 0];\n  const [i54, j54] = [0, 0];\n  const [i55, j55] = [0, 0];\n  const [i56, j56] = [0, 0];\n  const [i57, j57] = [0, 0];\n  const [i58, j58] = [0, 0];\n  const [i59, j59] = [0, 0];\n  const [i60, j60] = [0, 0];\n  const [i61, j61] = [0, 0];\n  const [i62, j62] = [0, 0];\n  const [i63, j63] = [0, 0];\n  const [i64, j64] = [0, 0];\n  const [i65, j65] = [0, 0];\n  const [i66, j66] = [0, 0];\n  const [i67, j67] = [0, 0];\n  const [i68, j68] = [0, 0];\n  const [i69, j69] = [0, 0];\n  const [i70, j70] = [0, 0];\n  const [i71, j71] = [0, 0];\n  const [i72, j72] = [0, 0];\n  const [i73, j73] = [0, 0];\n  const [i74, j74] = [0, 0];\n  const [i75, j75] = [0, 0];\n  const [i76, j76] = [0, 0];\n  const [i77, j77] = [0, 0];\n  const [i78,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strength = {};\n  extensions.forEach(extension => {\n    const extension_name = extension.toLowerCase();\n    const extension_strength_cap = extension_name.toUpperCase().split('').reduce((acc, char, index) => {\n      if (index === 0) {\n        return acc + char.toUpperCase();\n      } else {\n        return acc + char.toLowerCase();\n      }\n    }, '');\n    extension_strength[extension_name] = extension_strength_cap;\n  });\n  const strongest_extension = Object.keys(extension_strength).reduce((acc, key) => {\n    if (extension_strength[key] > extension_strength[acc]) {\n      return key;\n    } else {\n      return acc;\n    }\n  }, '');\n  return `${class_name}.${strongest_extension}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check_2= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check_3= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check_4= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check_5= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check_6= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check_7= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<b_len){\n     if(a_str[a_i]!=b_str[b_i]){\n       return false;\n     }\n     a_i++;\n     b_i++;\n   }\n   return true;\n }\n \n const cycpattern_check_8= (a, b)=>{\n   let a_len=a.length, b_len=b.length;\n   let a_str=a.split(\"\"), b_str=b.split(\"\");\n   let a_i=0, b_i=0;\n   while(a_i<a_len && b_i<", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let number = parseInt(number);\n  let i = 0;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += roman[i];\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += roman[i + 1];\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += roman[i + 2];\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += roman[i + 3];\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += roman[i + 4];\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += roman[i + 5];\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += roman[i + 6];\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += roman[i + 7];\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += roman[i + 8];\n      number -= 9;\n    }\n    i += 9;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let number = parseInt(number);\n  let i = 0;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += roman[i];\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += roman[i + 1];\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += roman[i + 2];\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += roman[i + 3];\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += roman[i + 4];\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += roman[i + 5];\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += roman[i + 6];\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += roman[i + 7];\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += roman[i + 8];\n      number -= 9;\n    }\n    i += 9;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let number = parseInt(number);\n  let i = 0;\n  while (number > 0) {\n    if (number % 10 == 1) {\n      result += roman[i];\n      number -= 1;\n    } else if (number % 10 == 2) {\n      result += roman[i + 1];\n      number -= 2;\n    } else if (number % 10 == 3) {\n      result += roman[i + 2];\n      number -= 3;\n    } else if (number % 10 == 4) {\n      result += roman[i + 3];\n      number -= 4;\n    } else if (number % 10 == 5) {\n      result += roman[i + 4];\n      number -= 5;\n    } else if (number % 10 == 6) {\n      result += roman[i + 5];\n      number -= 6;\n    } else if (number % 10 == 7) {\n      result += roman[i + 6];\n      number -= 7;\n    } else if (number % 10 == 8) {\n      result += roman[i + 7];\n      number -= 8;\n    } else if (number % 10 == 9) {\n      result += roman[i + 8];\n      number -= 9;\n    }\n    i += 9;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = ['I', 'II', 'III', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst right", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  const max= words.reduce((a,b)=>{\n    return a.length>b.length?a:b;\n  },words[0]);\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst findMax = (words)=>{\n  const max = words[0];\n  return words.reduce((a,b)=>{\n    if(a.length===max.length){\n      return a.length>b.length?a:b;\n    }\n    return a.length>b.length?b:a;\n  },max);\n}\n\nconst find", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst main = () => {\n  const [number, need, remaining] = eat(5, 6, 10);\n  console.log(`${number} carrots will be eaten.`);\n  console.log(`You have ${remaining} remaining carrots.`);\n  console.log(`You will need ${need} more carrots to complete the day.`);\n}\n\nmain();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersCaseInsensitiveCaseSensitiveCaseSensitive = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  countDistinctCharactersCaseInsensitive,\n  countDistinctCharactersCaseInsensitiveCaseSensitive,\n  countDistinctCharactersCaseInsensitiveCaseSensitiveCaseSensitive\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp // TODO: divide by zero\n      )\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(Math.pow(operandOp, operand[j + 1]))\n      j += 2\n    } else {\n      throw new Error('Invalid operator')\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp // TODO: divide by zero\n      )\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(Math.pow(operandOp, operand[j + 1]))\n      j += 2\n    } else {\n      throw new Error('Invalid operator')\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp // TODO: divide by zero\n      )\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(Math.pow(operandOp, operand[j + 1]))\n      j += 2\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  let result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Given a list of integers, return the sum of the squares of the elements.\n  \n  >>> sumOfSquares([1, 2, 3, 4])\n  25\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n  72\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7])\n  105\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8])\n  144\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  181\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  220\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  251\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  282\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  313\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  344\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  375\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  396\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  417\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  438\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  469\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  500\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  521\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  542\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  563\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  584\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  605\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  626\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  647\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  668\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  689\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  710\n  >>> sumOfSquares([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that can be find in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n      start = i;\n    }\n  }\n  return string.substring(start, start + count);\n};\n\n/*\n  Find the longest substring that can be find in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n      start = i;\n    }\n  }\n  return string.substring(start, start + count);\n};\n\n/*\n  Find the longest substring that can be find in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n      start = i;\n    }\n  }\n  return string.substring(start, start + count);\n};\n\n/*\n  Find the longest substring that can be find in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n      start = i;\n    }\n  }\n  return string.substring(start, start + count);\n};\n\n/*\n  Find the longest substring that can be find in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n      start = i;\n    }\n  }\n  return string.substring(start, start + count);\n};\n\n/*\n  Find the longest substring that can be find in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n      start = i;\n    }\n  }\n  return string.substring(start, start + count);\n};\n\n/*\n  Find the longest substring that can be find in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'aa')\n  'aa'\n  >>> longestSubstring('aaaa', 'aa')\n  'aaaa'\n  >>> longestSubstring('aaaa', 'aaa')\n  'aaaa'\n  */\nconst longestSubstring = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n      start = i;\n    }\n  }\n  return string.substring(start, start + count);\n};\n\n/*\n  Find the longest substring that can be find", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.push(number)\n    })\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from largest to smallest\n  >>> sortNumbers('one two three')\n  'three two one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.push(number)\n    })\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from largest to smallest\n  >>> sortNumbersReverse('one two three')\n  'three two one'\n  */\nconst sortNumbersReverse2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.push(number)\n    })\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'three two one'\n  */\nconst sortNumbersReverse3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.push(number)\n    })\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from largest to smallest\n  >>> sortNumbersReverse('one two three')\n  'three two one'\n  */\nconst sortNumbersReverse4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.push(number)\n    })\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'three two one'\n  */\nconst sortNumbersReverse5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.push(number)\n    })\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from largest to smallest\n  >>> sortNumbersReverse('one two three')\n  'three two one'\n  */\nconst sortNumbersReverse6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.push(number)\n    })\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'three two one'\n  */\nconst sortNumbersReverse7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split(' ')\n    numberArray.forEach((number) => {\n      sortedNumbers.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal2 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal3 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal4 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal5 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal6 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal7 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal8 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal9 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal10 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal11 = (number) => {\n  let integerPart = Math.floor(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements7 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements8 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA, closestB];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements9 = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestA = sortedNumbers[0];\n  const closestB = sortedNumbers[1];\n  return [closestA", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  return [\n    (n - min) / range,\n    1 - (n - min) / range\n  ]\n}\n\nexport default rescaleToUnit\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers2 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers3 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers4 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers5 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers6 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers7 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers8 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers9 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers10 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers11 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers12 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers13 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers14 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers15 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers16 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers17 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  while (string[i]) {\n    i++\n  }\n  return i\n}\n\n/* Return index of first occurrence of string in another string\n  >>> indexOf('abc', 'cde')\n  2\n  >>> indexOf('abc', 'cde', 2)\n  5\n  >>> indexOf('abc', 'cde', 3)\n  -1\n  */\nconst indexOf = (string, subString, start) => {\n  let i = start\n  while (string[i]) {\n    if (string[i] === subString[0]) {\n      let j = 0\n      while (subString[j] === string[i + j]) {\n        j++\n      }\n      if (j === subString.length) {\n        return i\n      }\n    }\n    i++\n  }\n  return -1\n}\n\n/* Return index of last occurrence of string in another string\n  >>> lastIndexOf('abc', 'cde')\n  2\n  >>> lastIndexOf('abc', 'cde', 2)\n  5\n  >>> lastIndexOf('abc', 'cde', 3)\n  -1\n  */\nconst lastIndexOf = (string, subString, start) => {\n  let i = start\n  while (string[i]) {\n    if (string[i] === subString[0]) {\n      let j = 0\n      while (subString[j] === string[i + j]) {\n        j++\n      }\n      if (j === subString.length) {\n        return i\n      }\n    }\n    i++\n  }\n  return -1\n}\n\n/* Return true if string contains another string\n  >>> contains('abc', 'cde')\n  false\n  >>> contains('abc', 'cde', 2)\n  true\n  >>> contains('abc', 'cde', 3)\n  false\n  */\nconst contains = (string, subString, start) => {\n  return indexOf(string, subString, start)!== -1\n}\n\n/* Return true if string ends with another string\n  >>> endsWith('abc', 'cde')\n  false\n  >>> endsWith('abc', 'cde', 2)\n  true\n  >>> endsWith('abc', 'cde', 3)\n  false\n  */\nconst endsWith = (string, subString, start) => {\n  return lastIndexOf(string, subString, start) === (string.length - subString.length)\n}\n\n/* Return true if string starts with another string\n  >>> startsWith('abc', 'cde')\n  false\n  >>> startsWith('abc', 'cde', 2)\n  true\n  >>> startsWith('abc', 'cde', 3)\n  false\n  */\nconst startsWith = (string, subString, start) => {\n  return indexOf(string, subString, start) === 0\n}\n\n/* Return true if string contains another string\n  >>> contains('abc', 'cde')\n  false\n  >>> contains('abc', 'cde', 2)\n  true\n  >>> contains('abc', 'cde', 3)\n  false\n  */\nconst contains = (string, subString, start) => {\n  return indexOf(string, subString, start)!== -1\n}\n\n/* Return true if string ends with another string\n  >>> endsWith('abc', 'cde')\n  false\n  >>> endsWith('abc', 'cde', 2)\n  true\n  >>> endsWith('abc', 'cde', 3)\n  false\n  */\nconst endsWith = (string, subString, start) => {\n  return lastIndexOf(string, subString, start) === (string.length - subString.length)\n}\n\n/* Return true if string starts with another string\n  >>> startsWith('abc', 'cde')\n  false\n  >>> startsWith('abc', 'cde', 2)\n  true\n  >>> startsWith('abc', 'cde', 3)\n  false\n  */\nconst startsWith = (string, subString, start) => {\n  return indexOf(string, subString, start) === 0\n}\n\n/* Return true if string contains another string\n  >>> contains('abc', 'cde')\n  false\n  >>> contains('abc', 'cde', 2)\n  true\n  >>> contains('abc', 'cde', 3)\n  false\n  */\nconst contains = (string, subString, start) => {\n  return indexOf(string, subString, start)!== -1\n}\n\n/* Return true if string ends with another string\n  >>> endsWith('abc', 'cde')\n  false\n  >>> endsWith('abc', 'cde', 2)\n  true\n  >>> endsWith('abc', 'cde', 3)\n  false\n  */\nconst endsWith = (string, subString, start) => {\n  return lastIndexOf(string, subString, start) === (string.length - subString.length)\n}\n\n/* Return true if string starts with another string\n  >>> startsWith('abc', 'cde')\n  false\n  >>> startsWith('abc', 'cde', 2)\n  true\n  >>> startsWith('abc', 'cde', 3)\n  false\n  */\nconst startsWith = (string, subString, start) => {\n  return indexOf(string, subString, start) === 0\n}\n\n/* Return true if string contains another string\n  >>> contains('abc', 'cde')\n  false\n  >>> contains('abc', 'cde', 2)\n  true\n  >>> contains('abc', 'cde', 3)\n  false\n  */\nconst contains = (string, subString, start) => {\n  return indexOf(string, subString, start)!== -1\n}\n\n/* Return true if string ends with another string\n  >>> endsWith('abc', 'cde')\n  false\n  >>> endsWith('abc', 'cde', 2)\n  true\n  >>> endsWith('abc', 'cde', 3)\n  false\n  */\nconst endsWith = (string, subString, start) => {\n  return lastIndexOf(string, subString, start) === (string.length - subString.length)\n}\n\n/* Return true if string starts with another string\n  >>> startsWith('abc', 'cde')\n  false\n  >>> startsWith('abc', '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor > largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor(15)\n  10\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor < largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor2(15)\n  10\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor > largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor3(15)\n  10\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor < largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor4(15)\n  10\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor < largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor5(15)\n  10\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor > largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor6(15)\n  10\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor < largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor7(15)\n  10\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor > largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor8(15)\n  10\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor < largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor9(15)\n  10\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor < largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor10(15)\n  10\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      if (divisor > largest) {\n        largest = divisor;\n      }\n    }\n    divisor += 1;\n  }\n  return largest;\n};\n\n/*\n  For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor11(15", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor++\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flip", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return the longest one.\n  >>> longest('abc', 'abcd', 'bcd')\n  'bcd'\n  >>> longest('abc', 'abcd', 'bcd', 'cde')\n  'cde'\n  >>> longest('abc', 'abcd', 'bcd', 'cde', 'array')\n  'array'\n  */\nconst longest = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the shortest one.\n  >>> shortest('abc', 'abcd', 'bcd')\n  'abc'\n  >>> shortest('abc', 'abcd', 'bcd', 'cde')\n  'abc'\n  >>> shortest('abc', 'abcd', 'bcd', 'cde', 'array')\n  'abc'\n  */\nconst shortest = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length < prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the one with the most common character.\n  >>> mostCommon('abc', 'abcd', 'bcd')\n  'b'\n  >>> mostCommon('abc', 'abcd', 'bcd', 'cde')\n  'c'\n  >>> mostCommon('abc', 'abcd', 'bcd', 'cde', 'array')\n  'c'\n  */\nconst mostCommon = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the one with the fewest common characters.\n  >>> fewestCommon('abc', 'abcd', 'bcd')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde', 'array')\n  'ab'\n  */\nconst fewestCommon = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length < prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the one with the most common character.\n  >>> mostCommon('abc', 'abcd', 'bcd')\n  'b'\n  >>> mostCommon('abc', 'abcd', 'bcd', 'cde')\n  'c'\n  >>> mostCommon('abc', 'abcd', 'bcd', 'cde', 'array')\n  'c'\n  */\nconst mostCommon2 = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the one with the fewest common characters.\n  >>> fewestCommon('abc', 'abcd', 'bcd')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde', 'array')\n  'ab'\n  */\nconst fewestCommon2 = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length < prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the one with the fewest common characters.\n  >>> fewestCommon('abc', 'abcd', 'bcd')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde', 'array')\n  'ab'\n  */\nconst fewestCommon3 = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length < prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the one with the most common character.\n  >>> mostCommon('abc', 'abcd', 'bcd')\n  'b'\n  >>> mostCommon('abc', 'abcd', 'bcd', 'cde')\n  'c'\n  >>> mostCommon('abc', 'abcd', 'bcd', 'cde', 'array')\n  'c'\n  */\nconst mostCommon3 = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\n/*\n  Given a list of strings, return the one with the fewest common characters.\n  >>> fewestCommon('abc', 'abcd', 'bcd')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde')\n  'ab'\n  >>> fewestCommon('abc', 'abcd', 'bcd', 'cde', 'array')\n  'ab'\n  */\nconst fewestCommon3 = (...strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length < prev.length) {\n      return cur", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst getEven = (l) => {\n  const even = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    }\n  }\n  return even;\n};\n\n/*\n  >>> getOdd([1, 2, 3, 4, 5, 6])\n  [1, 3, 5, 6]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 3, 5, 7, 9, 10]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 3, 5, 7, 9, 10, 12]\n  */\nconst getOdd = (l) => {\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      odd.push(l[i]);\n    }\n  }\n  return odd;\n};\n\n/*\n  >>> getEvenOdd([1, 2, 3, 4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst getEvenOdd = (l) => {\n  const even = getEven(l);\n  const odd = getOdd(l);\n  return even.concat(odd);\n};\n\n/*\n  >>> getUnique([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst getUnique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  */\nconst getUnique2 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  */\nconst getUnique3 = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> getUnique([1, 2, 3, 4, 5,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n < 9) return true\n  if (n < 100) return false\n  if (n < 1000) return true\n  if (n < 10000) return false\n  if (n < 100000) return true\n  if (n < 1000000) return false\n  if (n < 10000000) return true\n  if (n < 100000000) return false\n  if (n < 1000000000) return true\n  return false\n}\n\n/*Return the number of primes less than n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let min = 0;\n  let maxIndex = 0;\n  let minIndex = 0;\n  let maxValue = 0;\n  let minValue = 0;\n  let maxIndexValue = 0;\n  let minIndexValue = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let value = xs[i];\n    if (value > max) {\n      max = value;\n      maxIndex = i;\n      maxValue = value;\n    }\n    if (value < min) {\n      min = value;\n      minIndex = i;\n      minValue = value;\n    }\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === maxValue) {\n      maxIndexValue = i;\n    }\n    if (xs[i] === minValue) {\n      minIndexValue = i;\n    }\n  }\n  if (maxIndexValue - minIndexValue === 0) {\n    return -0.5;\n  }\n  return (maxIndex + minIndex) / 2;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly= (xs, x)=>{ \n  return xs.reduce((prev, item, index)=>{ \n    return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let min = 0;\n  let maxIndex = 0;\n  let minIndex = 0;\n  let maxValue = 0;\n  let minValue = 0;\n  let maxIndexValue = 0;\n  let minIndexValue = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let value = xs[i];\n    if (value > max) {\n      max = value;\n      maxIndex = i;\n      maxValue = value;\n    }\n    if (value < min) {\n      min = value;\n      minIndex = i;\n      minValue = value;\n    }\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === maxValue) {\n      maxIndexValue = i;\n    }\n    if (xs[i] === minValue) {\n      minIndexValue = i;\n    }\n  }\n  if (maxIndexValue - minIndexValue === 0) {\n    return -0.5;\n  }\n  return (maxIndex + minIndex) / 2;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly= (xs, x)=>{ \n  return xs.reduce((prev, item, index)=>{ \n    return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let min = 0;\n  let maxIndex = 0;\n  let minIndex = 0;\n  let maxValue = 0;\n  let minValue = 0;\n  let maxIndexValue = 0;\n  let minIndexValue = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let value = xs[i];", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  const l5 = l.slice();\n  const l6 = l.slice();\n  const l7 = l.slice();\n  const l8 = l.slice();\n  const l9 = l.slice();\n  const l10 = l.slice();\n  const l11 = l.slice();\n  const l12 = l.slice();\n  const l13 = l.slice();\n  const l14 = l.slice();\n  const l15 = l.slice();\n  const l16 = l.slice();\n  const l17 = l.slice();\n  const l18 = l.slice();\n  const l19 = l.slice();\n  const l20 = l.slice();\n  const l21 = l.slice();\n  const l22 = l.slice();\n  const l23 = l.slice();\n  const l24 = l.slice();\n  const l25 = l.slice();\n  const l26 = l.slice();\n  const l27 = l.slice();\n  const l28 = l.slice();\n  const l29 = l.slice();\n  const l30 = l.slice();\n  const l31 = l.slice();\n  const l32 = l.slice();\n  const l33 = l.slice();\n  const l34 = l.slice();\n  const l35 = l.slice();\n  const l36 = l.slice();\n  const l37 = l.slice();\n  const l38 = l.slice();\n  const l39 = l.slice();\n  const l40 = l.slice();\n  const l41 = l.slice();\n  const l42 = l.slice();\n  const l43 = l.slice();\n  const l44 = l.slice();\n  const l45 = l.slice();\n  const l46 = l.slice();\n  const l47 = l.slice();\n  const l48 = l.slice();\n  const l49 = l.slice();\n  const l50 = l.slice();\n  const l51 = l.slice();\n  const l52 = l.slice();\n  const l53 = l.slice();\n  const l54 = l.slice();\n  const l55 = l.slice();\n  const l56 = l.slice();\n  const l57 = l.slice();\n  const l58 = l.slice();\n  const l59 = l.slice();\n  const l60 = l.slice();\n  const l61 = l.slice();\n  const l62 = l.slice();\n  const l63 = l.slice();\n  const l64 = l.slice();\n  const l65 = l.slice();\n  const l66 = l.slice();\n  const l67 = l.slice();\n  const l68 = l.slice();\n  const l69 = l.slice();\n  const l70 = l.slice();\n  const l71 = l.slice();\n  const l72 = l.slice();\n  const l73 = l.slice();\n  const l74 = l.slice();\n  const l75 = l.slice();\n  const l76 = l.slice();\n  const l77 = l.slice();\n  const l78 = l.slice();\n  const l79 = l.slice();\n  const l80 = l.slice();\n  const l81 = l.slice();\n  const l82 = l.slice();\n  const l83 = l.slice();\n  const l84 = l.slice();\n  const l85 = l.slice();\n  const l86 = l.slice();\n  const l87 = l.slice();\n  const l88 = l.slice();\n  const l89 = l.slice();\n  const l90 = l.slice();\n  const l91 = l.slice();\n  const l92 = l.slice();\n  const l93 = l.slice();\n  const l94 = l.slice();\n  const l95 = l.slice();\n  const l96 = l.slice();\n  const l97 = l.slice();\n  const l98 = l.slice();\n  const l99 = l.slice();\n  const l100 = l.slice();\n  const l101 = l.slice();\n  const l102 = l.slice();\n  const l103 = l.slice();\n  const l104 = l.slice();\n  const l105 = l.slice();\n  const l106 = l.slice();\n  const l107 = l.slice();\n  const l108 = l.slice();\n  const l109 = l.slice();\n  const l110 = l.slice();\n  const l111 = l.slice();\n  const l112 = l.slice();\n  const l113 = l.slice();\n  const l114 = l.slice();\n  const l115 = l.slice();\n  const l116 = l.slice();\n  const l117 = l.slice();\n  const l118 = l.slice();\n  const l119 = l.slice();\n  const l120 = l.slice();\n  const l121 = l.slice();\n  const l122 = l.slice();\n  const l123 = l.slice();\n  const l124 = l.slice();\n  const l125 = l.slice();\n  const l126 = l.slice();\n  const l127 = l.slice();\n  const l128 = l.slice();\n  const l129 = l.slice();\n  const l130 = l.slice();\n  const l131 = l.slice();\n  const l132 = l.slice();\n  const l133 = l.slice();\n  const l134 = l.slice();\n  const l135 = l.slice();\n  const l136 = l.slice();\n  const l137 = l.slice();\n  const l138 = l.slice();\n  const l139 = l.slice();\n  const l140 = l.slice();", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF2 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF3 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF4 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF5 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF6 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF7 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF8 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF9 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(f(l[i])) === -1) {\n      unique.push(f(l[i]));\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByF10 = (l, f) => {\n  const unique = [];\n  for (let i = 0; i <", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 6", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisorCount = divisors.reduce((acc, d) => {\n    return acc + (n % d === 0? 1 : 0)\n  }, 0)\n  return divisorCount\n}\n\n/*\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  1\n  >>> fizzBuzz(3)\n  2\n  >>> fizzBuzz(4)\n  2\n  >>> fizzBuzz(5)\n  2\n  >>> fizzBuzz(6)\n  3\n  >>> fizzBuzz(7)\n  3\n  >>> fizzBuzz(8)\n  3\n  >>> fizzBuzz(9)\n  4\n  >>> fizzBuzz(10)\n  4\n  >>> fizzBuzz(11)\n  4\n  >>> fizzBuzz(12)\n  5\n  >>> fizzBuzz(13)\n  5\n  >>> fizzBuzz(14)\n  5\n  >>> fizzBuzz(15)\n  5\n  >>> fizzBuzz(16)\n  6\n  >>> fizzBuzz(17)\n  6\n  >>> fizzBuzz(18)\n  6\n  >>> fizzBuzz(19)\n  6\n  >>> fizzBuzz(20)\n  7\n  >>> fizzBuzz(21)\n  7\n  >>> fizzBuzz(22)\n  7\n  >>> fizzBuzz(23)\n  7\n  >>> fizzBuzz(24)\n  7\n  >>> fizzBuzz(25)\n  7\n  >>> fizzBuzz(26)\n  8\n  >>> fizzBuzz(27)\n  8\n  >>> fizzBuzz(28)\n  8\n  >>> fizzBuzz(29)\n  8\n  >>> fizzBuzz(30)\n  8\n  >>> fizzBuzz(31)\n  8\n  >>> fizzBuzz(32)\n  9\n  >>> fizzBuzz(33)\n  9\n  >>> fizzBuzz(34)\n  9\n  >>> fizzBuzz(35)\n  9\n  >>> fizzBuzz(36)\n  9\n  >>> fizzBuzz(37)\n  9\n  >>> fizzBuzz(38)\n  9\n  >>> fizzBuzz(39)\n  9\n  >>> fizzBuzz(40)\n  10\n  >>> fizzBuzz(41)\n  10\n  >>> fizzBuzz(42)\n  10\n  >>> fizzBuzz(43)\n  10\n  >>> fizzBuzz(44)\n  10\n  >>> fizzBuzz(45)\n  10\n  >>> fizzBuzz(46)\n  10\n  >>> fizzBuzz(47)\n  10\n  >>> fizzBuzz(48)\n  10\n  >>> fizzBuzz(49)\n  10\n  >>> fizzBuzz(50)\n  11\n  >>> fizzBuzz(51)\n  11\n  >>> fizzBuzz(52)\n  11\n  >>> fizzBuzz(53)\n  11\n  >>> fizzBuzz(54)\n  11\n  >>> fizzBuzz(55)\n  11\n  >>> fizzBuzz(56)\n  11\n  >>> fizzBuzz(57)\n  11\n  >>> fizzBuzz(58)\n  11\n  >>> fizzBuzz(59)\n  11\n  >>> fizzBuzz(60)\n  12\n  >>> fizzBuzz(61)\n  12\n  >>> fizzBuzz(62)\n  12\n  >>> fizzBuzz(63)\n  12\n  >>> fizzBuzz(64)\n  12\n  >>> fizzBuzz(65)\n  12\n  >>> fizzBuzz(66)\n  12\n  >>> fizzBuzz(67)\n  12\n  >>> fizzBuzz(68)\n  12\n  >>> fizzBuzz(69)\n  12\n  >>> fizzBuzz(70)\n  12\n  >>> fizzBuzz(71)\n  12\n  >>> fizzBuzz(72)\n  12\n  >>> fizzBuzz(73)\n  12\n  >>> fizzBuzz(74)\n  12\n  >>> fizzBuzz(75)\n  12\n  >>> fizzBuzz(76)\n  12\n  >>> fizzBuzz(77)\n  12\n  >>> fizzBuzz(78)\n  12\n  >>> fizzBuzz(79)\n  13\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisorCount = divisors.reduce((acc, d) => {\n    return acc + (n % d === 0? 1 : 0)\n  }, 0)\n  return divisorCount\n}\n\n/*\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  1\n  >>> fizzBuzz(3)\n  2\n  >>> fizzBuzz(4)\n  2\n  >>> fizzBuzz(5)\n  2\n  >>> fizzBuzz(6)\n  3\n  >>> fizzBuzz(7)\n  3\n  >>> fizzBuzz(8)\n  3\n  >>> fizzBuzz(9)\n  4\n  >>> fizzBuzz(10)\n  4\n  >>> fizzBuzz(11)\n  4\n  >>> fizzBuzz(12)\n  5\n  >>> fizzBuzz(13)\n  5\n  >>> fizzBuzz(14)\n  5\n  >>> fizzBuzz(15)\n  5\n  >>> fizzBuzz(16)\n  6\n  >>> fizzBuzz(17)\n  6\n  >>> fizzBuzz(18)\n  6\n  >>> fizzBuzz(19)\n  6\n  >>> fizzBuzz(20)\n  7\n  >>> fizzBuzz(21)\n  7\n  >>> fizzBuzz(22)\n  7\n  >>> fizzBuzz(23)\n  7\n  >>> fizzBuzz(24)\n  7\n  >>> fizzBuzz(25)\n  7\n  >>> fizzBuzz(26)\n  8\n  >>> fizzBuzz(27)\n  8\n  >>> fizzBuzz(28)\n  8\n  >>> fizzBuzz(29)\n  8\n  >>> fizzBuzz(30)\n  8\n  >>> fizzBuzz", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic5= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic6= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic7= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic8= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups.push(group.slice(1)+ group[0]);\n     else \n       groups.push(group);\n  }", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 2 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib2 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib2(1)\n  2\n  >>> primeFib2(2)\n  3\n  >>> primeFib2(3)\n  5\n  >>> primeFib2(4)\n  13\n  >>> primeFib2(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 2 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib3 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib3(1)\n  2\n  >>> primeFib3(2)\n  3\n  >>> primeFib3(3)\n  5\n  >>> primeFib3(4)\n  13\n  >>> primeFib3(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 3 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib4 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib4(1)\n  2\n  >>> primeFib4(2)\n  3\n  >>> primeFib4(3)\n  5\n  >>> primeFib4(4)\n  13\n  >>> primeFib4(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 4 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib5 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib5(1)\n  2\n  >>> primeFib5(2)\n  3\n  >>> primeFib5(3)\n  5\n  >>> primeFib5(4)\n  13\n  >>> primeFib5(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 5 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib6 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib6(1)\n  2\n  >>> primeFib6(2)\n  3\n  >>> primeFib6(3)\n  5\n  >>> primeFib6(4)\n  13\n  >>> primeFib6(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 6 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib7 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib7(1)\n  2\n  >>> primeFib7(2)\n  3\n  >>> primeFib7(3)\n  5\n  >>> primeFib7(4)\n  13\n  >>> primeFib7(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 7 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib8 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib8(1)\n  2\n  >>> primeFib8(2)\n  3\n  >>> primeFib8(3)\n  5\n  >>> primeFib8(4)\n  13\n  >>> primeFib8(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 8 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib9 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib9(1)\n  2\n  >>> primeFib9(2)\n  3\n  >>> primeFib9(3)\n  5\n  >>> primeFib9(4)\n  13\n  >>> primeFib9(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  let fib = 1\n  let prime = 2\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 9 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\n/*\n  primeFib10 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  const mad = numbers.map(deviation).reduce((a, b) => a + b);\n  return mad / numbers.length;\n};\n\n/*\n  For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length > 2;\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  const car1 = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    r: 0\n  }\n  const car2 = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    r: 0\n  }\n  const cars = []\n  cars.push(car1)\n  cars.push(car2)\n  const collisions = []\n  for(let i = 0; i < n; i++){\n    cars[i].x = Math.random()*1000\n    cars[i].y = Math.random()*1000\n    cars[i].vx = Math.random()*10\n    cars[i].vy = Math.random()*10\n    cars[i].r = Math.random()*10\n  }\n  cars[0].x = 0\n  cars[0].y = 0\n  cars[0].vx = 0\n  cars[0].vy = 0\n  cars[0].r = 0\n  cars[1].x = 1000\n  cars[1].y = 0\n  cars[1].vx = 0\n  cars[1].vy = 0\n  cars[1].r = 0\n  cars[2].x = 0\n  cars[2].y = 1000\n  cars[2].vx = 0\n  cars[2].vy = 0\n  cars[2].r = 0\n  cars[3].x = 0\n  cars[3].y = 0\n  cars[3].vx = 0\n  cars[3].vy = 0\n  cars[3].r = 0\n  cars[4].x = 1000\n  cars[4].y = 1000\n  cars[4].vx = 0\n  cars[4].vy = 0\n  cars[4].r = 0\n  cars[5].x = 0\n  cars[5].y = 0\n  cars[5].vx = 0\n  cars[5].vy = 0\n  cars[5].r = 0\n  cars[6].x = 1000\n  cars[6].y = 0\n  cars[6].vx = 0\n  cars[6].vy = 0\n  cars[6].r = 0\n  cars[7].x = 0\n  cars[7].y = 1000\n  cars[7].vx = 0\n  cars[7].vy = 0\n  cars[7].r = 0\n  cars[8].x = 0\n  cars[8].y = 0\n  cars[8].vx = 0\n  cars[8].vy = 0\n  cars[8].r = 0\n  cars[9].x = 1000\n  cars[9].y = 1000\n  cars[9].vx = 0\n  cars[9].vy = 0\n  cars[9].r = 0\n  cars[10].x = 0\n  cars[10].y = 0\n  cars[10].vx = 0\n  cars[10].vy = 0\n  cars[10].r = 0\n  cars[11].x = 1000\n  cars[11].y = 0\n  cars[11].vx = 0\n  cars[11].vy = 0\n  cars[11].r = 0\n  cars[12].x = 0\n  cars[12].y = 1000\n  cars[12].vx = 0\n  cars[12].vy = 0\n  cars[12].r = 0\n  cars[13].x = 0\n  cars[13].y = 0\n  cars[13].vx = 0\n  cars[13].vy = 0\n  cars[13].r = 0\n  cars[14].x = 1000\n  cars[14].y = 1000\n  cars[14].vx = 0\n  cars[14].vy = 0\n  cars[14].r = 0\n  cars[15].x = 0\n  cars[15].y = 0\n  cars[15].vx = 0\n  cars[15].vy = 0\n  cars[15].r = 0\n  cars[16].x = 1000\n  cars[16].y = 0\n  cars[16].vx = 0\n  cars[16].vy = 0\n  cars[16].r = 0\n  cars[17].x = 0\n  cars[17].y = 1000\n  cars[17].vx = 0\n  cars[17].vy = 0\n  cars[17].r = 0\n  cars[18].x = 0\n  cars[18].y = 0\n  cars[18].vx = 0\n  cars[18].vy = 0\n  cars[18].r = 0\n  cars[19].x = 1000\n  cars[19].y = 1000\n  cars[19].vx = 0\n  cars[19].vy = 0\n  cars[19].r = 0\n  cars[20].x = 0\n  cars[20].y = 0\n  cars[20].vx = 0\n  cars[20].vy = 0\n  cars[20].r = 0\n  cars[21].x = 1000\n  cars[21].y = 0\n  cars[21].vx = 0\n  cars[21].vy = 0\n  cars[21].r = 0\n  cars[22].x = 0\n  cars[22].y = 1000\n  cars[22].vx = 0\n  cars[22].vy = 0\n  cars[22].r = 0\n  cars[23].x = 0\n  cars[23].y = 0\n  cars[23].vx = 0\n  cars[23].vy = 0\n  cars[23].r = 0\n  cars[24].x = 1000\n  cars[24].y = 1000\n  cars[24].vx = 0\n  cars[24].vy = 0\n  cars[24].r = 0\n  cars[25].x =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero8 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase(-x, base)\n  if (x < base) return String(x)\n  const result = []\n  while (x > 0) {\n    result.unshift(x % base)\n    x = Math.floor(x / base)\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('123')\n  3\n  >>> length('1234')\n  4\n  >>> length('12345')\n  5\n  >>> length('123456')\n  6\n  >>> length('1234567')\n  7\n  >>> length('12345678')\n  8\n  >>> length('123456789')\n  9\n  >>> length('1234567890')\n  10\n  >>> length('12345678901')\n  11\n  >>> length('123456789012')\n  12\n  >>> length('1234567890123')\n  13\n  >>> length('12345678901234')\n  14\n  >>> length('123456789012345')\n  15\n  >>> length('1234567890123456')\n  16\n  >>> length('12345678901234567')\n  17\n  >>> length('123456789012345678')\n  18\n  >>> length('1234567890123456789')\n  19\n  >>> length('12345678901234567890')\n  20\n  >>> length('123456789012345678901')\n  21\n  >>> length('1234567890123456789012')\n  22\n  >>> length('12345678901234567890123')\n  23\n  >>> length('123456789012345678901234')\n  24\n  >>> length('1234567890123456789012345')\n  25\n  >>> length('12345678901234567890123456')\n  26\n  >>> length('123456789012345678901234567')\n  27\n  >>> length('1234567890123456789012345678')\n  28\n  >>> length('12345678901234567890123456789')\n  29\n  >>> length('123456789012345678901234567890')\n  30\n  >>> length('1234567890123456789012345678901')\n  31\n  >>> length('12345678901234567890123456789012')\n  32\n  >>> length('123456789012345678901234567890123')\n  33\n  >>> length('1234567890123456789012345678901234')\n  34\n  >>> length('12345678901234567890123456789012345')\n  35\n  >>> length('123456789012345678901234567890123456')\n  36\n  >>> length('1234567890123456789012345678901234567')\n  37\n  >>> length('12345678901234567890123456789012345678')\n  38\n  >>> length('123456789012345678901234567890123456789')\n  39\n  >>> length('1234567890123456789012345678901234567890')\n  40\n  >>> length('12345678901234567890123456789012345678901')\n  41\n  >>> length('123456789012345678901234567890123456789012')\n  42\n  >>> length('1234567890123456789012345678901234567890123')\n  43\n  >>> length('12345678901234567890123456789012345678901234')\n  44\n  >>> length('123456789012345678901234567890123456789012345')\n  45\n  >>> length('1234567890123456789012345678901234567890123456')\n  46\n  >>> length('12345678901234567890123456789012345678901234567')\n  47\n  >>> length('123456789012345678901234567890123456789012345678')\n  48\n  >>> length('1234567890123456789012345678901234567890123456789')\n  49\n  >>> length('12345678901234567890123456789012345678901234567890')\n  50\n  >>> length('123456789012345678901234567890123456789012345678901')\n  51\n  >>> length('1234567890123456789012345678901234567890123456789012')\n  52\n  >>> length('12345678901234567890123456789012345678901234567890123')\n  53\n  >>> length('123456789012345678901234567890123456789012345678901234')\n  54\n  >>> length('1234567890123456789012345678901234567890123456789012345')\n  55\n  >>> length('12345678901234567890123456789012345678901234567890123456')\n  56\n  >>> length('123456789012345678901234567890123456789012345678901234567')\n  57\n  >>> length('1234567890123456789012345678901234567890123456789012345678')\n  58\n  >>> length('1234567890123456789", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : (a + p) % p\n}\n\n/*Return a^b mod p.\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 11)\n  8\n  >>> modp(3, 101)\n  1\n  >>> modp(3, 1101)\n  2\n  >>> modp(3, 100)\n  1\n  >>> modp(3, 0)\n  1\n  >>> modp(3, -1)\n  1\n  >>> modp(3, -2)\n  3\n  >>> modp(3, -3)\n  3\n  >>> modp(3, -4)\n  3\n  >>> modp(3, -5)\n  3\n  >>> modp(3, -6)\n  3\n  >>> modp(3, -7)\n  3\n  >>> modp(3, -8)\n  3\n  >>> modp(3, -9)\n  3\n  >>> modp(3, -10)\n  3\n  >>> modp(3, -11)\n  3\n  >>> modp(3, -12)\n  3\n  >>> modp(3, -13)\n  3\n  >>> modp(3, -14)\n  3\n  >>> modp(3, -15)\n  3\n  >>> modp(3, -16)\n  3\n  >>> modp(3, -17)\n  3\n  >>> modp(3, -18)\n  3\n  >>> modp(3, -19)\n  3\n  >>> modp(3, -20)\n  3\n  >>> modp(3, -21)\n  3\n  >>> modp(3, -22)\n  3\n  >>> modp(3, -23)\n  3\n  >>> modp(3, -24)\n  3\n  >>> modp(3, -25)\n  3\n  >>> modp(3, -26)\n  3\n  >>> modp(3, -27)\n  3\n  >>> modp(3, -28)\n  3\n  >>> modp(3, -29)\n  3\n  >>> modp(3, -30)\n  3\n  >>> modp(3, -31)\n  3\n  >>> modp(3, -32)\n  3\n  >>> modp(3, -33)\n  3\n  >>> modp(3, -34)\n  3\n  >>> modp(3, -35)\n  3\n  >>> modp(3, -36)\n  3\n  >>> modp(3, -37)\n  3\n  >>> modp(3, -38)\n  3\n  >>> modp(3, -39)\n  3\n  >>> modp(3, -40)\n  3\n  >>> modp(3, -41)\n  3\n  >>> modp(3, -42)\n  3\n  >>> modp(3, -43)\n  3\n  >>> modp(3, -44)\n  3\n  >>> modp(3, -45)\n  3\n  >>> modp(3, -46)\n  3\n  >>> modp(3, -47)\n  3\n  >>> modp(3, -48)\n  3\n  >>> modp(3, -49)\n  3\n  >>> modp(3, -50)\n  3\n  >>> modp(3, -51)\n  3\n  >>> modp(3, -52)\n  3\n  >>> modp(3, -53)\n  3\n  >>> modp(3, -54)\n  3\n  >>> modp(3, -55)\n  3\n  >>> modp(3, -56)\n  3\n  >>> modp(3, -57)\n  3\n  >>> modp(3, -58)\n  3\n  >>> modp(3, -59)\n  3\n  >>> modp(3, -60)\n  3\n  >>> modp(3, -61)\n  3\n  >>> modp(3, -62)\n  3\n  >>> modp(3, -63)\n  3\n  >>> modp(3, -64)\n  3\n  >>> modp(3, -65)\n  3\n  >>> modp(3, -66)\n  3\n  >>> modp(3, -67)\n  3\n  >>> modp(3, -68)\n  3\n  >>> modp(3, -69)\n  3\n  >>> modp(3, -70)\n  3\n  >>> modp(3, -71)\n  3\n  >>> modp(3, -72)\n  3\n  >>> modp(3, -73)\n  3\n  >>> modp(3, -74)\n  3\n  >>> modp(3, -75)\n  3\n  >>> modp(3, -76)\n  3\n  >>> modp(3, -77)\n  3\n  >>> modp(3, -78)\n  3\n  >>> modp(3, -79)\n  3\n  >>> modp(3, -80)\n  3\n  >>> modp(3, -81)\n  3\n  >>> modp(3, -82)\n  3\n  >>> modp(3, -83)\n  3\n  >>> modp(3, -84)\n  3\n  >>> modp(3, -85)\n  3\n  >>> modp(3, -86)\n  3\n  >>> modp(3, -87)\n  3\n  >>> modp(3, -88)\n  3\n  >>> modp(3, -89)\n  3\n  >>> modp(3, -90)\n  3\n  >>> modp(3, -91)\n  3\n  >>> modp(3, -92)\n  3\n  >>> modp(3, -93)\n  3\n  >>> modp(3, -94)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    index++;\n    if (index < numbers.length) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '-')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|', '!', '?')\n  [1-4-2-4-3]\n  >>> intersperse([1, 2, 3], 4, '-', '*', '+', '^', '%', '#', '&', '|',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift2= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift3= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift4= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift5= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift6= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift7= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift8= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift9= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift10= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift11= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift12= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift13= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift14= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  while (i < textLength) {\n    if (text[i] === vowels[0]) {\n      if (j < vowelsLength) {\n        if (text[j] === vowels[j]) {\n          if (k < textLength) {\n            if (text[k] === vowels[k]) {\n              if (l < textLength) {\n                if (text[l] === vowels[l]) {\n                  if (m < textLength) {\n                    if (text[m] === vowels[m]) {\n                      if (n < textLength) {\n                        if (text[n] === vowels[n]) {\n                          if (o < textLength) {\n                            if (text[o] === vowels[o]) {\n                              if (p < textLength) {\n                                if (text[p] === vowels[p]) {\n                                  if (q < textLength) {\n                                    if (text[q] === vowels[q]) {\n                                      if (r < textLength) {\n                                        if (text[r] === vowels[r]) {\n                                          if (s < textLength) {\n                                            if (text[s] === vowels[s]) {\n                                              if (t < textLength) {\n                                                if (text[t] === vowels[t]) {\n                                                  if (u < textLength) {\n                                                    if (text[u] === vowels[u]) {\n                                                      if (v < textLength) {\n                                                        if (text[v] === vowels[v]) {\n                                                          if (w < textLength) {\n                                                            if (text[w] === vowels[w]) {\n                                                              if (x < textLength) {\n                                                                if (text[x] === vowels[x]) {\n                                                                  if (y < textLength) {\n                                                                    if (text[y] === vowels[y]) {\n                                                                      if (z < textLength) {\n                                                                        if (text[z] === vowels[z]) {\n                                                                          if (a < textLength) {\n                                                                            if (text[a] === vowels[a]) {\n                                                                              if (b < textLength) {\n                                                                                if (text[b] === vowels[b]) {\n                                                                                  if (c < textLength) {\n                                                                                    if (text[c] === vowels[c]) {\n                                                                                      if (d < textLength) {\n                                                                                        if (text[d] === vowels[d]) {\n                                                                                          if (e < textLength) {\n                                                                                            if (text[e] === vowels[e]) {\n                                                                                             if (f < textLength) {\n                                                                                               if (text[f] === vowels[f]) {\n                                                                                                if (g < textLength) {\n                                                                                                  if (text[g] === vowels[g]) {\n                                                                                                    if (h < textLength) {\n                                                                                                      if (text[h] === vowels[h]) {\n                                                                                                        if (i < textLength) {\n                                                                                                          if (text[i] === vowels[i]) {\n                                                                                                            if (j < vowelsLength) {\n                                                                                                              if (text[j] === vowels[j]) {\n                                                                                                                if (k < textLength) {\n                                                                                                                } else {\n                                                                                                                }\n                                                                                                              } else {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l will be above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 50)\n  false\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 50)\n  false\n  */\nconst betweenThresholdsAndAboveThreshold = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 50)\n  false\n  */\nconst betweenThresholdsAndBelowThreshold = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 50)\n  false\n  */\nconst betweenThresholdsAndBetweenThresholds = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 50)\n  false\n  */\nconst betweenThresholdsAndBetweenThresholdsAndAboveThreshold = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l will be between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 50)\n  false\n  */\nconst betweenThresholdsAndBetweenThresholdsAndBelowThreshold = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  belowThreshold,\n  aboveThreshold,\n  betweenThresholds,\n  betweenThresholdsAndAboveThreshold,\n  betweenThresholdsAndBelowThreshold,\n  betweenThresholdsAndBetweenThresholds,\n  betweenThresholdsAndBetweenThresholdsAndAboveThreshold,\n  betweenThresholdsAndBetweenThresholdsAndBelowThreshold\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0Lower = s0.toLowerCase();\n  const s1Lower = s1.toLowerCase();\n  for (let i = 0; i < s0.length; i++) {\n    if (s0Lower[i]!== s1Lower[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  sameChars,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the number of opening brackets.\n  \n  >>> countOpeningBrackets(\"<\")\n  1\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<<><>>\")\n  3\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")\n  2\n  >>> countOpeningBrackets(\"<>\")", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n/**\n  * Return true if the list is sorted.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sorted([1, 2, 3, 4, 5])\n  * //Returns false\n  * sorted([1, 2, 5, 3, 4])\n  */\nconst sorted = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.every((x) => x === l[0]);\n};\n\n/**\n  * Return true if the list is sorted in ascending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedAsc([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedAsc([1, 2, 5, 3, 4])\n  */\nconst sortedAsc = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.every((x) => x <= l[l.length - 1]);\n};\n\n/**\n  * Return true if the list is sorted in descending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedDesc([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedDesc([1, 2, 5, 3, 4])\n  */\nconst sortedDesc = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.every((x) => x >= l[l.length - 1]);\n};\n\n/**\n  * Return true if the list is sorted in ascending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedAsc([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedAsc([1, 2, 5, 3, 4])\n  */\nconst sortedAscBy = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.every((x) => x <= l[l.length - 1]);\n};\n\n/**\n  * Return true if the list is sorted in descending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedDesc([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedDesc([1, 2, 5, 3, 4])\n  */\nconst sortedDescBy = (l) => {\n  const sorted = l.slice().sort((a, b) => b - a);\n  return sorted.every((x) => x >= l[l.length - 1]);\n};\n\n/**\n  * Return true if the list is sorted in ascending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedAscBy([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedAscBy([1, 2, 5, 3, 4])\n  */\nconst sortedAscByBy = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.every((x) => x <= l[l.length - 1]);\n};\n\n/**\n  * Return true if the list is sorted in descending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedDescBy([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedDescBy([1, 2, 5, 3, 4])\n  */\nconst sortedDescByBy = (l) => {\n  const sorted = l.slice().sort((a, b) => b - a);\n  return sorted.every((x) => x >= l[l.length - 1]);\n};\n\n/**\n  * Return true if the list is sorted in ascending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedAscByBy([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedAscByBy([1, 2, 5, 3, 4])\n  */\nconst sortedAscByByBy = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.every((x) => x <= l[l.length - 1]);\n};\n\n/**\n  * Return true if the list is sorted in descending order.\n  * @param {Array} l\n  * @return {boolean}\n  * @example\n  * //Returns true\n  * sortedDescByBy([1, 2, 3, 4, 5])\n  * //Returns false\n  * sortedDescByBy([1, 2, 5, 3, 4])\n  */\nconst sortedDescByByBy = (l) => {\n  const sorted = l.slice().sort((a, b) => b - a);\n  return sorted.every((x) => x >= l[l.length - 1]);\n};\n\nexport {\n  monotonic,\n  sorted,\n  sortedAsc,\n  sortedAscBy,\n  sortedAscByBy,\n  sortedDesc,\n  sortedDescBy,\n  sortedDescByBy,\n  sortedAscByByBy,\n  sortedDescByByBy\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_set = new Set(l1)\n  const l2_set = new Set(l2)\n  const common_set = new Set()\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      for (let j = 0; j < l2_len; j++) {\n        if (l2_set.has(l2[j])) {\n          common_set.add(l1[i])\n        }\n      }\n    }\n  }\n  return [...common_set]\n}\n\nmodule.exports = common\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(current_char);\n    } else if (current_char === ')') {\n      const last_paren = paren_stack.pop();\n      if (last_paren === '(') {\n        return paren_stack.length;\n      }\n    }\n    i++;\n  }\n  return paren_stack.length;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(current_char);\n    } else if (current_char === ')') {\n      const last_paren = paren_stack.pop();\n      if (last_paren === '(') {\n        return paren_stack.length;\n      }\n    }\n    i++;\n  }\n  return paren_stack.length;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(current_char);\n    } else if (current_char === ')') {\n      const last_paren = paren_stack.pop();\n      if (last_paren === '(') {\n        return paren_stack.length;\n      }\n    }\n    i++;\n  }\n  return paren_stack.length;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(current_char);\n    } else if (current_char === ')') {\n      const last_paren = paren_stack.pop();\n      if (last_paren === '(') {\n        return paren_stack.length;\n      }\n    }\n    i++;\n  }\n  return paren_stack.length;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(current_char);\n    } else if (current_char === ')') {\n      const last_paren = paren_stack.pop();\n      if (last_paren === '(') {\n        return paren_stack.length;\n      }\n    }\n    i++;\n  }\n  return paren_stack.length;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(current_char);\n    } else if (current_char === ')') {\n      const last_paren = paren_stack.pop();\n      if (last_paren === '(') {\n        return paren_stack.length;\n      }\n    }\n    i++;\n  }\n  return paren_stack.length;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens7 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(current_char);\n    } else if (current_char === ')') {\n      const last_paren = paren_stack.pop();\n      if (last_paren === '(')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" || brackets[i] === \")\") {\n      stack.push(brackets[i]);\n    } else if (stack.length === 0) {\n      return false;\n    } else if (stack[stack.length - 1] === \"(\" && brackets[i] === \")\") {\n      stack.pop();\n    } else if (stack[stack.length - 1] === \")\" && brackets[i] === \"(\") {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the string with all the brackets\n  replaced by their corresponding closing brackets.\n  If the string does not contain any brackets, return the string.\n  If the string contains unmatched brackets, return null.\n\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    d.push(xs[i + 1] * d[i]);\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [1, 4, 12, 20, 30, 42]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7])\n  [1, 4, 12, 20, 30, 42, 56]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 12, 20, 30, 42, 56, 84]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900, 1200]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900, 1200, 1512]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900, 1200, 1512, 2160]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900, 1200, 1512, 2160, 4320]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900, 1200, 1512, 2160, 4320, 8640]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900, 1200, 1512, 2160, 4320, 8640, 17280]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 4, 12, 20, 30, 42, 56, 84, 108, 144, 180, 240, 288, 360, 480, 720, 900, 1200, 1512, 2160, 4320, 8640,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice(shift)\n  const reversed = result.reverse()\n  return reversed.join('')\n}\n\n/*\n  Given a string, return the number of times that the string appears in the\n  input.\n  >>> count('')\n  0\n  >>> count('a')\n  1\n  >>> count('aa')\n  2\n  >>> count('aaa')\n  3\n  >>> count('aaaa')\n  4\n  >>> count('aaaaa')\n  5\n  >>> count('aaaaaa')\n  6\n  >>> count('aaaaaaa')\n  7\n  >>> count('aaaaaaaa')\n  8\n  >>> count('aaaaaaaaa')\n  9\n  >>> count('aaaaaaaaaa')\n  10\n  >>> count('aaaaaaaaaaa')\n  11\n  >>> count('aaaaaaaaaaaa')\n  12\n  >>> count('aaaaaaaaaaaaa')\n  13\n  >>> count('aaaaaaaaaaaaaa')\n  14\n  >>> count('aaaaaaaaaaaaaaa')\n  15\n  >>> count('aaaaaaaaaaaaaaaa')\n  16\n  >>> count('aaaaaaaaaaaaaaaaa')\n  17\n  >>> count('aaaaaaaaaaaaaaaaaa')\n  18\n  >>> count('aaaaaaaaaaaaaaaaaaa')\n  19\n  >>> count('aaaaaaaaaaaaaaaaaaaa')\n  20\n  >>> count('aaaaaaaaaaaaaaaaaaaaa')\n  21\n  >>> count('aaaaaaaaaaaaaaaaaaaaaa')\n  22\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaa')\n  23\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaa')\n  24\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaa')\n  25\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaa')\n  26\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  27\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  28\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  29\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  30\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  31\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  32\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  33\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  34\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  35\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  36\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  37\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  38\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  39\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  40\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  41\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  42\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  43\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  44\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  45\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  46\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  47\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  48\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  49\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  50\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  51\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  52\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  53\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  54\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  55\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  56\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  57\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  58\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  59\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  60\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  61\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  62\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  63\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  64\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  65\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  66\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  67\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  68\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  69\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  70\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  71\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  72\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  73\n  >>> count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst lowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullLowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullUpperDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullLowerUpperDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullUpperLowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullLowerUpperLowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst fullLowerUpperLowerLowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total = 0;\n   let count = 0;\n   let index = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let max_index = 0;\n  let max_frequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      max_index = i;\n      max_frequency = 1;\n    } else if (lst[i] === max) {\n      max_frequency++;\n    }\n  }\n  return max_index;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde',", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst\n  }\n  const sorted = lst.sort((a, b) => a - b)\n  const min = sorted[0]\n  const max = sorted[sorted.length - 1]\n  const sorted2 = sorted.slice(1, sorted.length - 1).sort((a, b) => b - a)\n  return [min, max].concat(sorted2)\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a * b) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return (a *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qLen = q.length;\n  const qSum = q.reduce((a, b) => a + b, 0);\n  const maxWeight = Math.pow(10, qLen) - 1;\n  return qSum <= maxWeight && qSum % qLen === 0;\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  let count = 0;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      count++;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch9 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch10 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x) === -1)\n  }\n  return lst2.filter(x => lst1.indexOf(x) === -1)\n}\n\nconst totalMatch11 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1.filter(x => lst2.indexOf(x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> false\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> true\n  */\nconst isperfectcube = (a) => {\n  return (a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(-1) ==> true\n  isperfectcube(64) ==> false\n  isperfectcube(0) ==> false\n  isperfectcube(180) ==> true\n  */\nconst isperfectperfectcube = (a) => {\n  return (a * a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectperfectcube(1) ==> true\n  isperfectperfectcube(2) ==> false\n  isperfectperfectcube(-1) ==> true\n  isperfectperfectcube(64) ==> false\n  isperfectperfectcube(0) ==> false\n  isperfectperfectcube(180) ==> true\n  */\nconst isperfectperfectperfectcube = (a) => {\n  return (a * a * a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectperfectperfectcube(1) ==> true\n  isperfectperfectperfectcube(2) ==> false\n  isperfectperfectperfectcube(-1) ==> true\n  isperfectperfectperfectcube(64) ==> false\n  isperfectperfectperfectcube(0) ==> false\n  isperfectperfectperfectcube(180) ==> true\n  */\nconst isperfectperfectperfectperfectcube = (a) => {\n  return (a * a * a * a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectperfectperfectperfectcube(1) ==> true\n  isperfectperfectperfectperfectcube(2) ==> false\n  isperfectperfectperfectperfectcube(-1) ==> true\n  isperfectperfectperfectperfectcube(64) ==> false\n  isperfectperfectperfectperfectcube(0) ==> false\n  isperfectperfectperfectperfectcube(180) ==> true\n  */\nconst isperfectperfectperfectperfectperfectcube = (a) => {\n  return (a * a * a * a * a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectperfectperfectperfectperfectcube(1) ==> true\n  isperfectperfectperfectperfectperfectcube(2) ==> false\n  isperfectperfectperfectperfectperfectcube(-1) ==> true\n  isperfectperfectperfectperfectperfectcube(64) ==> false\n  isperfectperfectperfectperfectperfectcube(0) ==> false\n  isperfectperfectperfectperfectperfectcube(180) ==> true\n  */\nconst isperfectperfectperfectperfectperfectperfectcube = (a) => {\n  return (a * a * a * a * a * a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectperfectperfectperfectperfectperfectcube(1) ==> true\n  isperfectperfectperfectperfectperfectperfectcube(2) ==> false\n  isperfectperfectperfectperfectperfectperfectcube(-1) ==> true\n  isperfectperfectperfectperfectperfectperfectcube(64) ==> false\n  isperfectperfectperfectperfectperfectperfectcube(0) ==> false\n  isperfectperfectperfectperfectperfectperfectcube(180) ==> true\n  */\nconst isperfectperfectperfectperfectperfectperfectperfectcube = (a) => {\n  return (a * a * a * a * a * a * a * a * a) === a;\n}\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a perfect cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isperfectperfectperfectperfectperfectperfectperfectcube(1) ==> true\n  isperfectperfectperfectperfectperfectperfectcube(2) ==> false\n  isperfectperfectperfectperfectperfectperfectcube(-1) ==> true\n  isperfectperfectperfectperfectperfectperfectcube(64) ==> false\n  isperfectperfectperfectperfectperfectperfectcube(0) ==> false\n  isperfectperfectperfectperfectperfectperfectcube(180) ==> true\n  */\nconst isperfectperfectperfectperfectperfectperfectperfectcube = (a) => {\n  return (a * a * a * a * a * a * a * a * a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let hex = num.split('');\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex[i], 16);\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime2 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime3 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime4 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime5 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime6 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime7 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime8 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime9 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime10 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime11 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime12 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime13 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime14 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime15 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime16 = (num) => {\n  let result = false;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n    i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryDigits = decimal.toString(2);\n  let binaryLength = binaryDigits.length;\n  let binaryLengthInBits = binaryLength * 4;\n  let binaryLengthInBytes = binaryLengthInBits / 8;\n  let binaryLengthInBytesRemainder = binaryLengthInBits % 8;\n  let binaryLengthInBytesRemainderInBits = binaryLengthInBytesRemainder * 8;\n  let binaryLengthInBytesRemainderInBitsRemainder = binaryLengthInBytesRemainderInBits % 4;\n  let binaryLengthInBytesRemainderInBitsRemainderInBits = binaryLengthInBytesRemainderInBitsRemainder * 4;\n  let binaryLengthInBytesRemainderInBitsRemainderInBitsRemainder = binaryLengthInBytesRemainderInBitsRemainderInBits % 2;\n  let binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBits = binaryLengthInBytesRemainderInBitsRemainderInBitsRemainder * 1;\n  let binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainder = binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBits;\n  let binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBits = binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainder;\n  let binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBits = binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainder;\n  let binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBits = binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBits;\n  let binaryLengthInBytesRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemainderInBitsRemain", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) {\n    return false;\n  }\n  let map = {};\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]]) {\n      count++;\n    } else {\n      map[s[i]] = 1;\n    }\n  }\n  return count >= 3 && count % 2 === 0;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const grade = grade[i]\n    const letterGrade = grade.toFixed(1)\n    const letterGradeLength = letterGrade.length\n    const letterGradeList = []\n    for (let j = 0; j < letterGradeLength; j++) {\n      const letter = letterGrade[j]\n      const letterGrade = letter.toUpperCase()\n      const letterGradeList = letterGradeList.concat(letterGrade)\n    }\n    gradeList = gradeList.concat(letterGradeList)\n  }\n  return gradeList\n}\n\nconst letterGrade = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const grade = grade[i]\n    const letterGrade = grade.toUpperCase()\n    const letterGradeList = []\n    for (let j = 0; j < letterGrade.length; j++) {\n      const letter = letterGrade[j]\n      const letterGrade = letter.toUpperCase()\n      const letterGradeList = letterGradeList.concat(letterGrade)\n    }\n    gradeList = gradeList.concat(letterGradeList)\n  }\n  return gradeList\n}\n\nconst letterGrade2 = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const grade = grade[i]\n    const letterGrade = grade.toUpperCase()\n    const letterGradeList = []\n    for (let j = 0; j < letterGrade.length; j++) {\n      const letter = letterGrade[j]\n      const letterGrade = letter.toUpperCase()\n      const letterGradeList = letterGradeList.concat(letterGrade)\n    }\n    gradeList = gradeList.concat(letterGradeList)\n  }\n  return gradeList\n}\n\nconst letterGrade3 = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const grade = grade[i]\n    const letterGrade = grade.toUpperCase()\n    const letterGradeList = []\n    for (let j = 0; j < letterGrade.length; j++) {\n      const letter = letterGrade[j]\n      const letterGrade = letter.toUpperCase()\n      const letterGradeList = letterGradeList.concat(letterGrade)\n    }\n    gradeList = gradeList.concat(letterGradeList)\n  }\n  return gradeList\n}\n\nconst letterGrade4 = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const grade = grade[i]\n    const letterGrade = grade.toUpperCase()\n    const letterGradeList = []\n    for (let j = 0; j < letterGrade.length; j++) {\n      const letter = letterGrade[j]\n      const letterGrade = letter.toUpperCase()\n      const letterGradeList = letterGradeList.concat(letterGrade)\n    }\n    gradeList = gradeList.concat(letterGradeList)\n  }\n  return gradeList\n}\n\nconst letterGrade5 = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const grade = grade[i]\n    const letterGrade = grade.toUpperCase()\n    const letterGradeList = []\n    for (let j = 0; j < letterGrade.length; j++) {\n      const letter = letterGrade[j]\n      const letterGrade = letter.toUpperCase()\n      const letterGradeList = letterGradeList.concat(letterGrade)\n    }\n    gradeList = gradeList.concat(letterGradeList)\n  }\n  return gradeList\n}\n\nconst letterGrade6 = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeList = []\n  for (let i = 0; i < gradeLength; i++) {\n    const grade = grade[i]\n    const letterGrade = grade.toUpperCase()\n    const letterGradeList = []\n    for (let j = 0; j < letterGrade.length; j++) {\n      const letter = letterGrade[j]\n      const letterGrade = letter.toUpperCase()\n      const letterGradeList = letterGradeList.concat(letterGrade)\n    }\n    gradeList = gradeList.concat(letterGradeList)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const isPrime = (number) => {\n    if (number === 1) return false\n    if (number === 2) return true\n    if (number % 2 === 0) return false\n    for (let i = 3; i * i <= number; i += 2) {\n      if (number % i === 0) return false\n    }\n    return true\n  }\n  const length = string.length\n  for (let i = 3; i < length; i += 2) {\n    if (!isPrime(i)) return false\n  }\n  return true\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds2 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds3 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds4 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds5 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds6 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds7 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds8 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds9 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds10 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds11 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds12 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds13 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds14 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds15 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds16 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOneEnds17 = (n)=>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst startsOne", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = Array.from({ length: N }, (digit) => {\n    return Math.pow(2, N - digit - 1) - 1;\n  });\n  return digits.reduce((sum, digit) => sum + digit, 0);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char.toUpperCase()\n      newWord += newChar\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByRow = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByColumn = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByColumns = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowByRows = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumns = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInDescendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInAscendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInDescendingOrderAndAscendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInDescendingOrderAndAscendingOrderInDescendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInAscendingOrderAndAscendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInAscendingOrderAndAscendingOrderInDescendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInDescendingOrderAndAscendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInDescendingOrderAndAscendingOrderInDescendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInAscendingOrderAndAscendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInAscendingOrderAndAscendingOrderInDescendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInDescendingOrderAndAscendingOrder = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowByRowsAndColumnsInDescendingOrderAndAscendingOrderInDescendingOrder = (lst, x) => {\n  let row = []\n  for", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sortedArray[i] + sortedArray[j];\n    if (sum % 2 === 0) {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum;\n      j--;\n    } else {\n      sortedArray[j] = sortedArray[i];\n      sortedArray[i] = sum;\n      i++;\n    }\n  }\n  return sortedArray;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotate = (s, i) => {\n    const n = alphabet.length\n    const l = s.length\n    const r = s.charAt(l - 1)\n    const m = alphabet.indexOf(r)\n    const n = alphabet.indexOf(s.charAt(0))\n    const k = alphabet.indexOf(s.charAt(l - 2))\n    const x = alphabet.indexOf(s.charAt(l - 1))\n    const y = alphabet.indexOf(s.charAt(1))\n    const z = alphabet.indexOf(s.charAt(2))\n    const u = alphabet.indexOf(s.charAt(l - 3))\n    const v = alphabet.indexOf(s.charAt(l - 4))\n    const w = alphabet.indexOf(s.charAt(l - 5))\n    const o = alphabet.indexOf(s.charAt(l - 6))\n    const p = alphabet.indexOf(s.charAt(l - 7))\n    const q = alphabet.indexOf(s.charAt(l - 8))\n    const t = alphabet.indexOf(s.charAt(l - 9))\n    const uu = alphabet.indexOf(s.charAt(l - 10))\n    const vv = alphabet.indexOf(s.charAt(l - 11))\n    const ww = alphabet.indexOf(s.charAt(l - 12))\n    const oo = alphabet.indexOf(s.charAt(l - 13))\n    const pp = alphabet.indexOf(s.charAt(l - 14))\n    const qq = alphabet.indexOf(s.charAt(l - 15))\n    const tt = alphabet.indexOf(s.charAt(l - 16))\n    const uuu = alphabet.indexOf(s.charAt(l - 17))\n    const vvv = alphabet.indexOf(s.charAt(l - 18))\n    const www = alphabet.indexOf(s.charAt(l - 19))\n    const ooo = alphabet.indexOf(s.charAt(l - 20))\n    const ppp = alphabet.indexOf(s.charAt(l - 21))\n    const qqq = alphabet.indexOf(s.charAt(l - 22))\n    const ttt = alphabet.indexOf(s.charAt(l - 23))\n    const uuuu = alphabet.indexOf(s.charAt(l - 24))\n    const vvvv = alphabet.indexOf(s.charAt(l - 25))\n    const wwww = alphabet.indexOf(s.charAt(l - 26))\n    const oooo = alphabet.indexOf(s.charAt(l - 27))\n    const pppp = alphabet.indexOf(s.charAt(l - 28))\n    const qqqq = alphabet.indexOf(s.charAt(l - 29))\n    const tttt = alphabet.indexOf(s.charAt(l - 30))\n    const uuuuu = alphabet.indexOf(s.charAt(l - 31))\n    const vvvvv = alphabet.indexOf(s.charAt(l - 32))\n    const wwwws = alphabet.indexOf(s.charAt(l - 33))\n    const ooooo = alphabet.indexOf(s.charAt(l - 34))\n    const pppps = alphabet.indexOf(s.charAt(l - 35))\n    const qqqqs = alphabet.indexOf(s.charAt(l - 36))\n    const tttts = alphabet.indexOf(s.charAt(l - 37))\n    const uuuuus = alphabet.indexOf(s.charAt(l - 38))\n    const vvvvvs = alphabet.indexOf(s.charAt(l - 39))\n    const wwwwss = alphabet.indexOf(s.charAt(l - 40))\n    const oooooos = alphabet.indexOf(s.charAt(l - 41))\n    const ppppps = alphabet.indexOf(s.charAt(l - 42))\n    const qqqqss = alphabet.indexOf(s.charAt(l - 43))\n    const ttttts = alphabet.indexOf(s.charAt(l - 44))\n    const uuuuues = alphabet.indexOf(s.charAt(l - 45))\n    const vvvvvs = alphabet.indexOf(s.charAt(l - 46))\n    const wwwwss = alphabet.indexOf(s.charAt(l - 47))\n    const oooooos = alphabet.indexOf(s.charAt(l - 48))\n    const ppppps = alphabet.indexOf(s.charAt(l - 49))\n    const qqqqss = alphabet.indexOf(s.charAt(l - 50))\n    const ttttts = alphabet.indexOf(s.charAt(l - 51))\n    const uuuuues = alphabet.indexOf(s.charAt(l - 52))\n    const vvvvvs = alphabet.indexOf(s.charAt(l - 53))\n    const wwwwss = alphabet.indexOf(s.charAt(l - 54))\n    const oooooos = alphabet.indexOf(s.charAt(l - 55))\n    const ppppps = alphabet.indexOf(s.charAt(l - 56))\n    const qqqqss = alphabet.indexOf(s.charAt(l - 57))\n    const ttttts = alphabet.indexOf(s.charAt(l - 58))\n    const uuuuues = alphabet.indexOf(s.charAt(l - 59))\n    const vvvvvs = alphabet.indexOf(s.charAt(l - 60))\n    const wwwwss = alphabet.indexOf(s.charAt(l - 61))\n    const oooooos = alphabet.indexOf(s.charAt(l -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, maxIndex, maxIndexInArray, maxInArray, maxInArrayIndex];\n};\n\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndexInArray = 0;\n  const maxInArray = numbers[0];\n  const maxInArrayIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxIndexInArray = i;\n      maxInArray = numbers[i];\n      maxInArrayIndex = i;\n    }\n  }\n  return [max, max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(lst.length===0) return null;\n    let min = lst[0];\n    let index = 0;\n    for(let i=1; i<lst.length; i++){\n        if(lst[i]<min){\n            min = lst[i];\n            index = i;\n        }\n    }\n    return lst[index+1];\n}\n\nconst nextSmallest = (lst)=>{\n    if(l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.startsWith('I'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('.'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring2 = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('?') || w.includes('!'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring3 = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('?') || w.includes('!') || w.includes('.'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring4 = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('?') || w.includes('!') || w.includes('.') || w.includes('.'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring5 = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('?') || w.includes('!') || w.includes('.') || w.includes('.') || w.includes('.'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring6 = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('?') || w.includes('!') || w.includes('.') || w.includes('.') || w.includes('.') || w.includes('.'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring7 = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('?') || w.includes('!') || w.includes('.') || w.includes('.') || w.includes('.') || w.includes('.') || w.includes('.'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A sentence will be a string of words, delimited by '.'. \n   Sentences will be delimited by '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored.\")\n  1\n  */\nconst isBoring8 = (S) => {\n  const words = S.split(' ')\n  const count = words.filter(w => w.includes('?') || w.includes('!') || w.includes('.') || w.includes('.') || w.includes('.') || w.includes('.') || w.includes('.') || w.includes('.'))\n  return count.length\n}\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n/*\n  Create a function that will take 3 numbers. \n  Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && x % 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const messageLength = message.length;\n  const messageArray = message.split('');\n  const messageArrayLength = messageArray.length;\n  const messageArrayLengthMinusOne = messageArrayLength - 1;\n  const messageArrayLengthMinusTwo = messageArrayLength - 2;\n  const messageArrayLengthMinusThree = messageArrayLength - 3;\n  const messageArrayLengthMinusFour = messageArrayLength - 4;\n  const messageArrayLengthMinusFive = messageArrayLength - 5;\n  const messageArrayLengthMinusSix = messageArrayLength - 6;\n  const messageArrayLengthMinusSeven = messageArrayLength - 7;\n  const messageArrayLengthMinusEight = messageArrayLength - 8;\n  const messageArrayLengthMinusNine = messageArrayLength - 9;\n  const messageArrayLengthMinusTen = messageArrayLength - 10;\n  const messageArrayLengthMinusEleven = messageArrayLength - 11;\n  const messageArrayLengthMinusTwelve = messageArrayLength - 12;\n  const messageArrayLengthMinusThirteen = messageArrayLength - 13;\n  const messageArrayLengthMinusFourteen = messageArrayLength - 14;\n  const messageArrayLengthMinusFifteen = messageArrayLength - 15;\n  const messageArrayLengthMinusSixteen = messageArrayLength - 16;\n  const messageArrayLengthMinusSeventeen = messageArrayLength - 17;\n  const messageArrayLengthMinusEighteen = messageArrayLength - 18;\n  const messageArrayLengthMinusNineteen = messageArrayLength - 19;\n  const messageArrayLengthMinusTwenty = messageArrayLength - 20;\n  const messageArrayLengthMinusTwentyOne = messageArrayLength - 21;\n  const messageArrayLengthMinusTwentyTwo = messageArrayLength - 22;\n  const messageArrayLengthMinusTwentyThree = messageArrayLength - 23;\n  const messageArrayLengthMinusTwentyFour = messageArrayLength - 24;\n  const messageArrayLengthMinusTwentyFive = messageArrayLength - 25;\n  const messageArrayLengthMinusTwentySix = messageArrayLength - 26;\n  const messageArrayLengthMinusTwentySeven = messageArrayLength - 27;\n  const messageArrayLengthMinusTwentyEight = messageArrayLength - 28;\n  const messageArrayLengthMinusTwentyNine = messageArrayLength - 29;\n  const messageArrayLengthMinusThirty = messageArrayLength - 30;\n  const messageArrayLengthMinusThirtyOne = messageArrayLength - 31;\n  const messageArrayLengthMinusThirtyTwo = messageArrayLength - 32;\n  const messageArrayLengthMinusThirtyThree = messageArrayLength - 33;\n  const messageArrayLengthMinusThirtyFour = messageArrayLength - 34;\n  const messageArrayLengthMinusThirtyFive = messageArrayLength - 35;\n  const messageArrayLengthMinusThirtySix = messageArrayLength - 36;\n  const messageArrayLengthMinusThirtySeven = messageArrayLength - 37;\n  const messageArrayLengthMinusThirtyEight = messageArrayLength - 38;\n  const messageArrayLengthMinusThirtyNine = messageArrayLength - 39;\n  const messageArrayLengthMinusForty = messageArrayLength - 40;\n  const messageArrayLengthMinusFortyOne = messageArrayLength - 41;\n  const messageArrayLengthMinusFortyTwo = messageArrayLength - 42;\n  const messageArrayLengthMinusFortyThree = messageArrayLength - 43;\n  const messageArrayLengthMinusFortyFour = messageArrayLength - 44;\n  const messageArrayLengthMinusFortyFive = messageArrayLength - 45;\n  const messageArrayLengthMinusFortySix = messageArrayLength - 46;\n  const messageArrayLengthMinusFortySeven = messageArrayLength - 47;\n  const messageArrayLengthMinusFortyEight = messageArrayLength - 48;\n  const messageArrayLengthMinusFortyNine = messageArrayLength - 49;\n  const messageArrayLengthMinusFifty = messageArrayLength - 50;\n  const messageArrayLengthMinusFiftyOne = messageArrayLength - 51;\n  const messageArrayLengthMinusFiftyTwo = messageArrayLength - 52;\n  const messageArrayLengthMinusFiftyThree = messageArrayLength - 53;\n  const messageArrayLengthMinusFiftyFour = messageArrayLength - 54;\n  const messageArrayLengthMinusFiftyFive = messageArrayLength - 55;\n  const messageArrayLengthMinusFiftySix = messageArrayLength - 56;\n  const messageArrayLengthMinusFiftySeven = messageArrayLength - 57;\n  const messageArrayLengthMinusFiftyEight = messageArrayLength - 58;\n  const messageArrayLengthMinusFiftyNine = messageArrayLength - 59;\n  const messageArrayLengthMinusSixty = messageArrayLength - 60;\n  const messageArrayLengthMinusSixtyOne = messageArrayLength - 61;\n  const messageArrayLengthMinusSixtyTwo = messageArrayLength - 62;\n  const messageArrayLengthMinusSixtyThree = messageArrayLength - 63;\n  const messageArrayLengthMinusSixtyFour = messageArrayLength - 64;\n  const messageArrayLengthMinusSixtyFive = messageArrayLength - 65;\n  const messageArrayLengthMinusSixtySix = messageArrayLength - 66;\n  const messageArrayLengthMinusSixtySeven = messageArrayLength - 67;\n  const messageArrayLengthMinusSixtyEight = messageArrayLength - 68;\n  const messageArrayLengthMinusSixtyNine = messageArrayLength - 69;\n  const messageArrayLengthMinusSeventy = messageArrayLength - 70;\n  const messageArrayLengthMinusSeventyOne = messageArrayLength - 71;\n  const messageArrayLengthMinusSeventyTwo = messageArrayLength - 72;\n  const messageArrayLengthMinusSeventyThree = messageArrayLength - 73;\n  const messageArrayLengthMinusSeventyFour = messageArrayLength - 74;\n  const messageArrayLengthMinusSeventyFive = messageArrayLength - 75;\n  const messageArrayLengthMinusSeventySix = messageArrayLength - 76;\n  const messageArrayLengthMinusSeventySeven = messageArrayLength - 77;\n  const messageArrayLengthMinusSeventyEight = messageArrayLength - 78;\n  const messageArrayLengthMinusSeventyNine = messageArrayLength -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const max = (a, b) => {\n    return a > b? a : b;\n  };\n  const sum = (a, b) => {\n    return a + b;\n  };\n  const maxPrime = (lst) => {\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (prime(lst[i])) {\n        maxPrime = max(maxPrime, lst[i]);\n      }\n    }\n    return maxPrime;\n  };\n  return maxPrime(lst);\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLowerCase = keys.every(key => key.toLowerCase() === key);\n  let isAllUpperCase = keys.every(key => key.toUpperCase() === key);\n  return isAllLowerCase || isAllUpperCase;\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLowerCase = keys.every(key => key.toLowerCase() === key);\n  let isAllUpperCase = keys.every(key => key.toUpperCase() === key);\n  return isAllLowerCase || isAllUpperCase;\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLowerCase = keys.every(key => key.toLowerCase() === key);\n  let isAllUpperCase = keys.every(key => key.toUpperCase() === key);\n  return isAllLowerCase || isAllUpperCase;\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLowerCase = keys.every(key => key.toLowerCase() === key);\n  let isAllUpperCase = keys.every(key => key.toUpperCase() === key);\n  return isAllLowerCase || isAllUpperCase;\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLowerCase = keys.every(key => key.toLowerCase() === key);\n  let isAllUpperCase = keys.every(key => key.toUpperCase() === key);\n  return isAllLowerCase || isAllUpperCase;\n}\n\n/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').reduce((acc, digit) => {\n    return acc * Math.pow(10, digit.length)\n  }, 1)\n  let b_unit = b.toString().split('').reduce((acc, digit) => {\n    return acc * Math.pow(10, digit.length)\n  }, 1)\n  return a_unit * b_unit\n}\n\n/*\n  Complete the function that will take two integers and returns \n  the sum of their unit digits. \n  will Assume the input will be always valid.\n  Examples:\n  add(148, 412) should return 16.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 0.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let a_unit = a.toString().split('').reduce((acc, digit) => {\n    return acc + Math.pow(10, digit.length)\n  }, 0)\n  let b_unit = b.toString().split('').reduce((acc, digit) => {\n    return acc + Math.pow(10, digit.length)\n  }, 0)\n  return a_unit + b_unit\n}\n\n/*\n  Complete the function that will take two integers and returns \n  the difference of their unit digits. \n  will Assume the input will be always valid.\n  Examples:\n  subtract(148, 412) should return 16.\n  subtract(19, 28) should return 72.\n  subtract(2020, 1851) should return 0.\n  subtract(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let a_unit = a.toString().split('').reduce((acc, digit) => {\n    return acc - Math.pow(10, digit.length)\n  }, 0)\n  let b_unit = b.toString().split('').reduce((acc, digit) => {\n    return acc - Math.pow(10, digit.length)\n  }, 0)\n  return a_unit - b_unit\n}\n\n/*\n  Complete the function that will take two integers and returns \n  the product of their unit digits. \n  will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply_unit = (a, b) => {\n  let a_unit = a.toString().split('').reduce((acc, digit) => {\n    return acc * Math.pow(10, digit.length)\n  }, 1)\n  let b_unit = b.toString().split('').reduce((acc, digit) => {\n    return acc * Math.pow(10, digit.length)\n  }, 1)\n  return a_unit * b_unit\n}\n\n/*\n  Complete the function that will take two integers and returns \n  the sum of their unit digits. \n  will Assume the input will be always valid.\n  Examples:\n  add(148, 412) should return 16.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 0.\n  add(14,-15) should return 20.\n  */\nconst add_unit = (a, b) => {\n  let a_unit = a.toString().split('').reduce((acc, digit) => {\n    return acc + Math.pow(10, digit.length)\n  }, 0)\n  let b_unit = b.toString().split('').reduce((acc, digit) => {\n    return acc + Math.pow(10, digit.length)\n  }, 0)\n  return a_unit + b_unit\n}\n\n/*\n  Complete the function that will take two integers and returns \n  the difference of their unit digits. \n  will Assume the input will be always valid.\n  Examples:\n  subtract(148, 412) should return 16.\n  subtract(19, 28) should return 72.\n  subtract(2020, 1851) should return 0.\n  subtract(14,-15) should return 20.\n  */\nconst subtract_unit = (a, b) => {\n  let a_unit = a.toString().split('').reduce((acc, digit) => {\n    return acc - Math.pow(10, digit.length)\n  }, 0)\n  let b_unit = b.toString().split('').reduce((acc, digit) => {\n    return acc - Math.pow(10, digit.length)\n  }, 0)\n  return a_unit - b_unit\n}\n\n/*\n  Complete the function that will take two integers and returns \n  the product of their unit digits. \n  will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply_unit_2 = (a, b) => {\n  let a_unit = a.toString().split('').reduce((acc, digit) => {\n    return acc * Math.pow(10, digit.length)\n  }, 1)\n  let b_unit = b.toString().split('').reduce((acc, digit) => {\n    return acc * Math.pow(10, digit.length)\n  }, 1)\n  return a_unit * b_unit\n}\n\n/*\n  Complete the function that will take two integers and returns \n  the sum of their unit digits. \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper9 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper10 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper11 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper12 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper13 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper14 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper15 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper16 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper17 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper18 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper19 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper20 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intValue = parseInt(value);\n  let intValue2 = parseInt(value);\n  let intValue3 = parseInt(value);\n  let intValue4 = parseInt(value);\n  let intValue5 = parseInt(value);\n  let intValue6 = parseInt(value);\n  let intValue7 = parseInt(value);\n  let intValue8 = parseInt(value);\n  let intValue9 = parseInt(value);\n  let intValue10 = parseInt(value);\n  let intValue11 = parseInt(value);\n  let intValue12 = parseInt(value);\n  let intValue13 = parseInt(value);\n  let intValue14 = parseInt(value);\n  let intValue15 = parseInt(value);\n  let intValue16 = parseInt(value);\n  let intValue17 = parseInt(value);\n  let intValue18 = parseInt(value);\n  let intValue19 = parseInt(value);\n  let intValue20 = parseInt(value);\n  let intValue21 = parseInt(value);\n  let intValue22 = parseInt(value);\n  let intValue23 = parseInt(value);\n  let intValue24 = parseInt(value);\n  let intValue25 = parseInt(value);\n  let intValue26 = parseInt(value);\n  let intValue27 = parseInt(value);\n  let intValue28 = parseInt(value);\n  let intValue29 = parseInt(value);\n  let intValue30 = parseInt(value);\n  let intValue31 = parseInt(value);\n  let intValue32 = parseInt(value);\n  let intValue33 = parseInt(value);\n  let intValue34 = parseInt(value);\n  let intValue35 = parseInt(value);\n  let intValue36 = parseInt(value);\n  let intValue37 = parseInt(value);\n  let intValue38 = parseInt(value);\n  let intValue39 = parseInt(value);\n  let intValue40 = parseInt(value);\n  let intValue41 = parseInt(value);\n  let intValue42 = parseInt(value);\n  let intValue43 = parseInt(value);\n  let intValue44 = parseInt(value);\n  let intValue45 = parseInt(value);\n  let intValue46 = parseInt(value);\n  let intValue47 = parseInt(value);\n  let intValue48 = parseInt(value);\n  let intValue49 = parseInt(value);\n  let intValue50 = parseInt(value);\n  let intValue51 = parseInt(value);\n  let intValue52 = parseInt(value);\n  let intValue53 = parseInt(value);\n  let intValue54 = parseInt(value);\n  let intValue55 = parseInt(value);\n  let intValue56 = parseInt(value);\n  let intValue57 = parseInt(value);\n  let intValue58 = parseInt(value);\n  let intValue59 = parseInt(value);\n  let intValue60 = parseInt(value);\n  let intValue61 = parseInt(value);\n  let intValue62 = parseInt(value);\n  let intValue63 = parseInt(value);\n  let intValue64 = parseInt(value);\n  let intValue65 = parseInt(value);\n  let intValue66 = parseInt(value);\n  let intValue67 = parseInt(value);\n  let intValue68 = parseInt(value);\n  let intValue69 = parseInt(value);\n  let intValue70 = parseInt(value);\n  let intValue71 = parseInt(value);\n  let intValue72 = parseInt(value);\n  let intValue73 = parseInt(value);\n  let intValue74 = parseInt(value);\n  let intValue75 = parseInt(value);\n  let intValue76 = parseInt(value);\n  let intValue77 = parseInt(value);\n  let intValue78 = parseInt(value);\n  let intValue79 = parseInt(value);\n  let intValue80 = parseInt(value);\n  let intValue81 = parseInt(value);\n  let intValue82 = parseInt(value);\n  let intValue83 = parseInt(value);\n  let intValue84 = parseInt(value);\n  let intValue85 = parseInt(value);\n  let intValue86 = parseInt(value);\n  let intValue87 = parseInt(value);\n  let intValue88 = parseInt(value);\n  let intValue89 = parseInt(value);\n  let intValue90 = parseInt(value);\n  let intValue91 = parseInt(value);\n  let intValue92 = parseInt(value);\n  let intValue93 = parseInt(value);\n  let intValue94 = parseInt(value);\n  let intValue95 = parseInt(value);\n  let intValue96 = parseInt(value);\n  let intValue97 = parseInt(value);\n  let intValue98 = parseInt(value);\n  let intValue99 = parseInt(value);\n  let intValue100 = parseInt(value);\n  let intValue101 = parseInt(value);\n  let intValue102 = parseInt(value);\n  let intValue103 = parseInt(value);\n  let intValue104 = parseInt(value);\n  let intValue105 = parseInt(value);\n  let intValue106 = parseInt(value);\n  let intValue107 = parseInt(value);\n  let intValue108 = parseInt(value);\n  let intValue109 = parseInt(value);\n  let intValue110 = parseInt(value);\n  let intValue111 = parseInt(value);\n  let intValue112 = parseInt(value);\n  let intValue113 = parseInt(value);\n  let intValue114 = parseInt(value);\n  let intValue", "passed": 0, "run_status": 2}
