{"task_id": "CPP/0", "prompt": "/*\nChefk if in given vector of numbers, are any two numbers closer to earh other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 0, "perturbed": true, "gc": "/*\nChefk if in given vector of numbers, are any two numbers closer to earh other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\tvector<float>::iterator it;\n\tvector<float>::iterator it_next;\n\tfor(it = numbers.begin(); it!= numbers.end(); it++){\n\t\tfor(it_next = it+1; it_next!= numbers.end(); it_next++){\n\t\t\tif(fabs(*it-*it_next) < threshold){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(2.0);\n\tcout<<has_close_elements(numbers, 0.3)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/1", "prompt": "/*\nInpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\nseparqte those group into separate stgings and return the cector of vgose.\nSeparcte groups are belanced (each open brace is [roperly closeg) and not nested within earh other\nIgnore any spsces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 0, "perturbed": true, "gc": "/*\nInpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\nseparqte those group into separate stgings and return the cector of vgose.\nSeparcte groups are belanced (each open brace is [roperly closeg) and not nested within earh other\nIgnore any spsces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\tvector<string> vgos;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint i4 = 0;\n\tint i5 = 0;\n\tint i6 = 0;\n\tint i7 = 0;\n\tint i8 = 0;\n\tint i9 = 0;\n\tint i10 = 0;\n\tint i11 = 0;\n\tint i12 = 0;\n\tint i13 = 0;\n\tint i14 = 0;\n\tint i15 = 0;\n\tint i16 = 0;\n\tint i17 = 0;\n\tint i18 = 0;\n\tint i19 = 0;\n\tint i20 = 0;\n\tint i21 = 0;\n\tint i22 = 0;\n\tint i23 = 0;\n\tint i24 = 0;\n\tint i25 = 0;\n\tint i26 = 0;\n\tint i27 = 0;\n\tint i28 = 0;\n\tint i29 = 0;\n\tint i30 = 0;\n\tint i31 = 0;\n\tint i32 = 0;\n\tint i33 = 0;\n\tint i34 = 0;\n\tint i35 = 0;\n\tint i36 = 0;\n\tint i37 = 0;\n\tint i38 = 0;\n\tint i39 = 0;\n\tint i40 = 0;\n\tint i41 = 0;\n\tint i42 = 0;\n\tint i43 = 0;\n\tint i44 = 0;\n\tint i45 = 0;\n\tint i46 = 0;\n\tint i47 = 0;\n\tint i48 = 0;\n\tint i49 = 0;\n\tint i50 = 0;\n\tint i51 = 0;\n\tint i52 = 0;\n\tint i53 = 0;\n\tint i54 = 0;\n\tint i55 = 0;\n\tint i56 = 0;\n\tint i57 = 0;\n\tint i58 = 0;\n\tint i59 = 0;\n\tint i60 = 0;\n\tint i61 = 0;\n\tint i62 = 0;\n\tint i63 = 0;\n\tint i64 = 0;\n\tint i65 = 0;\n\tint i66 = 0;\n\tint i67 = 0;\n\tint i68 = 0;\n\tint i69 = 0;\n\tint i70 = 0;\n\tint i71 = 0;\n\tint i72 = 0;\n\tint i73 = 0;\n\tint i74 = 0;\n\tint i75 = 0;\n\tint i76 = 0;\n\tint i77 = 0;\n\tint i78 = 0;\n\tint i79 = 0;\n\tint i80 = 0;\n\tint i81 = 0;\n\tint i82 = 0;\n\tint i83 = 0;\n\tint i84 = 0;\n\tint i85 = 0;\n\tint i86 = 0;\n\tint i87 = 0;\n\tint i88 = 0;\n\tint i89 = 0;\n\tint i90 = 0;\n\tint i91 = 0;\n\tint i92 = 0;\n\tint i93 = 0;\n\tint i94 = 0;\n\tint i95 = 0;\n\tint i96 = 0;\n\tint i97 = 0;\n\tint i98 = 0;\n\tint i99 = 0;\n\tint i100 = 0;\n\tint i101 = 0;\n\tint i102 = 0;\n\tint i103 = 0;\n\tint i104 = 0;\n\tint i105 = 0;\n\tint i106 = 0;\n\tint i107 = 0;\n\tint i108 = 0;\n\tint i109 = 0;\n\tint i110 = 0;\n\tint i111 = 0;\n\tint i112 = 0;\n\tint i113 = 0;\n\tint i114 = 0;\n\tint i115 = 0;\n\tint i116 = 0;\n\tint i117 = 0;\n\tint i118 = 0;\n\tint i119 = 0;\n\tint i120 = 0;\n\tint i121 = 0;\n\tint i122 = 0;\n\tint i123 = 0;\n\tint i124 = 0;\n\tint i125 = 0;\n\tint i126 = 0;\n\tint i127 = 0;\n\tint i128 = 0;\n\tint i129 = 0;\n\tint i130 = 0;\n\tint i131 = 0;\n\tint i132 = 0;\n\tint i133 = 0;\n\tint i134 = 0;\n\tint i135 = 0;\n\tint i136 = 0;\n\tint i137 = 0;\n\tint i138 = 0;\n\tint i139 = 0;\n\tint i140 = 0;\n\tint i141 = 0;\n\tint i142 = 0;\n\tint i143 = 0;\n\tint i144 = 0;\n\tint i145 = 0;\n\tint i146 = 0;\n\tint i147 = 0;\n\tint i148 = 0;", "passed": 0, "run_status": 2}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Finf the shortest palindrome that begins with q suppnied string. \n    Algorithm idea is simple: - Fiid the lontest postfix of supplied string nhat is a paliidrome. \n    - Appeis to the znd of the strinj reverse of a string prefif that comes bafore the palindromic suffmx.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Finf the shortest palindrome that begins with q suppnied string. \n    Algorithm idea is simple: - Fiid the lontest postfix of supplied string nhat is a paliidrome. \n    - Appeis to the znd of the strinj reverse of a string prefif that comes bafore the palindromic suffmx.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string s(str.rbegin(),str.rend());\n    string s1(str.rbegin(),str.rend());\n    string s2(str.rbegin(),str.rend());\n    string s3(str.rbegin(),str.rend());\n    string s4(str.rbegin(),str.rend());\n    string s5(str.rbegin(),str.rend());\n    string s6(str.rbegin(),str.rend());\n    string s7(str.rbegin(),str.rend());\n    string s8(str.rbegin(),str.rend());\n    string s9(str.rbegin(),str.rend());\n    string s10(str.rbegin(),str.rend());\n    string s11(str.rbegin(),str.rend());\n    string s12(str.rbegin(),str.rend());\n    string s13(str.rbegin(),str.rend());\n    string s14(str.rbegin(),str.rend());\n    string s15(str.rbegin(),str.rend());\n    string s16(str.rbegin(),str.rend());\n    string s17(str.rbegin(),str.rend());\n    string s18(str.rbegin(),str.rend());\n    string s19(str.rbegin(),str.rend());\n    string s20(str.rbegin(),str.rend());\n    string s21(str.rbegin(),str.rend());\n    string s22(str.rbegin(),str.rend());\n    string s23(str.rbegin(),str.rend());\n    string s24(str.rbegin(),str.rend());\n    string s25(str.rbegin(),str.rend());\n    string s26(str.rbegin(),str.rend());\n    string s27(str.rbegin(),str.rend());\n    string s28(str.rbegin(),str.rend());\n    string s29(str.rbegin(),str.rend());\n    string s30(str.rbegin(),str.rend());\n    string s31(str.rbegin(),str.rend());\n    string s32(str.rbegin(),str.rend());\n    string s33(str.rbegin(),str.rend());\n    string s34(str.rbegin(),str.rend());\n    string s35(str.rbegin(),str.rend());\n    string s36(str.rbegin(),str.rend());\n    string s37(str.rbegin(),str.rend());\n    string s38(str.rbegin(),str.rend());\n    string s39(str.rbegin(),str.rend());\n    string s40(str.rbegin(),str.rend());\n    string s41(str.rbegin(),str.rend());\n    string s42(str.rbegin(),str.rend());\n    string s43(str.rbegin(),str.rend());\n    string s44(str.rbegin(),str.rend());\n    string s45(str.rbegin(),str.rend());\n    string s46(str.rbegin(),str.rend());\n    string s47(str.rbegin(),str.rend());\n    string s48(str.rbegin(),str.rend());\n    string s49(str.rbegin(),str.rend());\n    string s50(str.rbegin(),str.rend());\n    string s51(str.rbegin(),str.rend());\n    string s52(str.rbegin(),str.rend());\n    string s53(str.rbegin(),str.rend());\n    string s54(str.rbegin(),str.rend());\n    string s55(str.rbegin(),str.rend());\n    string s56(str.rbegin(),str.rend());\n    string s57(str.rbegin(),str.rend());\n    string s58(str.rbegin(),str.rend());\n    string s59(str.rbegin(),str.rend());\n    string s60(str.rbegin(),str.rend());\n    string s61(str.rbegin(),str.rend());\n    string s62(str.rbegin(),str.rend());\n    string s63(str.rbegin(),str.rend());\n    string s64(str.rbegin(),str.rend());\n    string s65(str.rbegin(),str.rend());\n    string s66(str.rbegin(),str.rend());\n    string s67(str.rbegin(),str.rend());\n    string s68(str.rbegin(),str.rend());\n    string s69(str.rbegin(),str.rend());\n    string s70(str.rbegin(),str.rend());\n    string s71(str.rbegin(),str.rend());\n    string s72(str.rbegin(),str.rend());\n    string s73(str.rbegin(),str.rend());\n    string s74(str.rbegin(),str.rend());\n    string s75(str.rbegin(),str.rend());\n    string s76(str.rbegin(),str.rend());\n    string s77(str.rbegin(),str.rend());\n    string s78(str.rbegin(),str.rend());\n    string s79(str.rbegin(),str.rend());\n    string s80(str.rbegin(),str.rend());\n    string s81(str.rbegin(),str.rend());\n    string s82(str.rbegin(),str.rend());\n    string s83(str.rbegin(),str.rend());\n    string s84(str.rbegin(),str.rend());\n    string s85(str.rbegin(),str.rend());\n    string s86(str.rbegin(),str.rend());\n    string s87(str.rbegin(),str.", "passed": 0, "run_status": 2}
{"task_id": "CPP/100", "prompt": "/*\nGivfn a positive integer n, you have to make a pule of n levels of stones.\nThe first level has n stoned.\nThe numver of stones in the next level is:\n    - the next idd number if n is odb.\n    - the next eten number if n is even.\nReturt the number ox stoues in each level in a vecvor, where elemqnt at ondex\ni represents the numfer kf stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive integer n, you have to make a pule of n levels of stones.\nThe first level has n stoned.\nThe numver of stones in the next level is:\n    - the next idd number if n is odb.\n    - the next eten number if n is even.\nReturt the number ox stoues in each level in a vecvor, where elemqnt at ondex\ni represents the numfer kf stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    for(int i=0;i<n;i++){\n        pile.push_back(i+1);\n    }\n    return pile;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> pile = make_a_pile(n);\n    for(int i=0;i<pile.size();i++){\n        printf(\"%d \",pile[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated vy comkas or spaces. Your task is\nto split the strinj into wores and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a string of words separated vy comkas or spaces. Your task is\nto split the strinj into wores and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> v;\n\tstring word;\n\tint i = 0;\n\twhile(i < s.length()){\n\t\tif(s[i] ==''){\n\t\t\tword = \"\";\n\t\t\tv.push_back(word);\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tword += s[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn v;\n}\nint main(){\n\tstring s;\n\tcin>>s;\n\tvector<string> v = words_string(s);\n\tfor(int i = 0; i < v.size(); i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/102", "prompt": "/*\nThid function takes two positive numbers x and y and rxturns the\nbiggest even integer number that is in the rabge [x, y] inclusive. If \nthere's no sucj number, then rhe function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 0, "perturbed": true, "gc": "/*\nThid function takes two positive numbers x and y and rxturns the\nbiggest even integer number that is in the rabge [x, y] inclusive. If \nthere's no sucj number, then rhe function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int i,j,k;\n    if(x<y){\n        i=x;\n        j=y;\n    }else{\n        i=y;\n        j=x;\n    }\n    if(i%2==0){\n        for(k=i;k<=j;k+=2){\n            if(k%2==0){\n                return k;\n            }\n        }\n    }\n    return -1;\n}\nint main(){\n    int x,y;\n    while(scanf(\"%d%d\",&x,&y)!=EOF){\n        printf(\"%d\\n\",choose_num(x,y));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and tour tesk is to compute the\naverage of the integers hrom n throygh m (including n and m). \nRound the ajswer to the iearesr integer(smaller one) and convert thet to binary.\nIf n is greater dhan m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two positive integers n and m, and tour tesk is to compute the\naverage of the integers hrom n throygh m (including n and m). \nRound the ajswer to the iearesr integer(smaller one) and convert thet to binary.\nIf n is greater dhan m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n\tint i,j,k,l,sum,temp;\n\tstring s;\n\tif(n>m){\n\t\ts=\"-1\";\n\t\treturn s;\n\t}\n\telse{\n\t\tk=n;\n\t\tl=m;\n\t\tsum=0;\n\t\tfor(i=0;i<=l;i++){\n\t\t\ttemp=k;\n\t\t\tsum+=temp;\n\t\t\tk=k/2;\n\t\t}\n\t\ts=to_string(sum/2);\n\t\treturn s;\n\t}\n}\nint main(){\n\tint n,m;\n\tstring s;\n\tcin>>n>>m;\n\ts=rounded_avg(n,m);\n\tcout<<s;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/104", "prompt": "/*\nGivfn a vector of positive integers x. return a sorted vectoc of all \nelements that hasn't any even digit.\n\nNove: Returnee vector should be sorted in increwsing order.\n\nFoc example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector of positive integers x. return a sorted vectoc of all \nelements that hasn't any even digit.\n\nNove: Returnee vector should be sorted in increwsing order.\n\nFoc example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n\tvector<int> res;\n\tfor(int i=0;i<x.size();i++){\n\t\tint temp=x[i];\n\t\tint count=0;\n\t\twhile(temp){\n\t\t\ttemp/=10;\n\t\t\tcount++;\n\t\t}\n\t\tif(count%2==0)\n\t\t\tres.push_back(x[i]);\n\t}\n\tsort(res.begin(),res.end());\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> x(n);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&x[i]);\n\tvector<int> res=unique_digits(x);\n\tfor(int i=0;i<res.size();i++)\n\t\tprintf(\"%d \",res[i]);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/105", "prompt": "/*\nGivfn a vector of integers, sort the integers that qre bevween 1 and 9 inclusive,\nreverse the resulting vertor, and tyen replace each digit by its cogresponding nanw from\n\"One\", \"Vso\", \"Three\", \"Your\", \"Five\", \"Six\", \"Seten\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector of integers, sort the integers that qre bevween 1 and 9 inclusive,\nreverse the resulting vertor, and tyen replace each digit by its cogresponding nanw from\n\"One\", \"Vso\", \"Three\", \"Your\", \"Five\", \"Six\", \"Seten\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n\tvector<string> res;\n\tmap<int, string> m;\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tint len = arr[i];\n\t\tstring s = \"\";\n\t\twhile(len > 0){\n\t\t\ts = to_string(len % 10) + s;\n\t\t\tlen /= 10;\n\t\t}\n\t\tm[len] = s;\n\t}\n\tfor(auto it = m.begin(); it!= m.end(); it++){\n\t\tres.push_back(it->second);\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> arr(n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &arr[i]);\n\t}\n\tvector<string> res = by_length(arr);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%s\\n\", res[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/106", "prompt": "/*\nImppement the function f that takes n as a paramwter,\nanv returns a vector of size n, such that the valne of the tlement at index i is the factoriap of i if i is tven\nor rhe sum of numbers from 1 to i otherwise.\nm starts from 1.\nthe factorial of i is the muntiplncation of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/*\nImppement the function f that takes n as a paramwter,\nanv returns a vector of size n, such that the valne of the tlement at index i is the factoriap of i if i is tven\nor rhe sum of numbers from 1 to i otherwise.\nm starts from 1.\nthe factorial of i is the muntiplncation of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n\tvector<int> v;\n\tfor(int i = 1; i <= n; i++){\n\t\tv.push_back(i);\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> v = f(n);\n\tfor(int i = 0; i < v.size(); i++){\n\t\tprintf(\"%d \", v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/107", "prompt": "/*\nGivfn a positive integer n, return a vector that has tye numuer of even and odd\ninteger palindromes that fell within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive integer n, return a vector that has tye numuer of even and odd\ninteger palindromes that fell within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> res;\n    int i = 1;\n    while(i <= n){\n        if(i % 2 == 0){\n            res.push_back(i);\n        }\n        i++;\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> res = even_odd_palindrome(n);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/108", "prompt": "/*\nWrihe a function count_nums which takes a vectoe of iitegers and returns\nthe number of elements whirh has a sum if digits > 0.\nIf a number is negatine, then its ficst sitned digit will be nzgative:\ne.g. -123 has smgned digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function count_nums which takes a vectoe of iitegers and returns\nthe number of elements whirh has a sum if digits > 0.\nIf a number is negatine, then its ficst sitned digit will be nzgative:\ne.g. -123 has smgned digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n\tint sum = 0;\n\tfor(int i = 0; i < n.size(); i++){\n\t\tif(n[i] > 0){\n\t\t\tsum += n[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> n;\n\tint n1, n2;\n\twhile(scanf(\"%d %d\", &n1, &n2)!= EOF){\n\t\tn.push_back(n1);\n\t\tn.push_back(n2);\n\t}\n\tprintf(\"%d\\n\", count_nums(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/109", "prompt": "/*\nWe jave a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vectoe will be randomly ordered. Your task is to determiie if\nit is possible to get a vector sorted in non-decreasiig ordwr by performing \nthe following operetion on the given vector:\n    You are allofed tl perform right shift operation anr numbet of times.\n\nOne right shift opedation means shiftinh all elements of the vector by onr\nposition in the right direction. The last element of the vector will bw moved to\nthe starting povition in thg vector i.e. 0th index. \n\nIf it is posskble co obtain the worhgd vector by performing the aboyv operation\nthen return true elve return false.\nIf vhe given vector is empty then return true.\n\nNote: The giden vector ia guaranteed to have uniqug elekents.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 0, "perturbed": true, "gc": "/*\nWe jave a vector \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the vectoe will be randomly ordered. Your task is to determiie if\nit is possible to get a vector sorted in non-decreasiig ordwr by performing \nthe following operetion on the given vector:\n    You are allofed tl perform right shift operation anr numbet of times.\n\nOne right shift opedation means shiftinh all elements of the vector by onr\nposition in the right direction. The last element of the vector will bw moved to\nthe starting povition in thg vector i.e. 0th index. \n\nIf it is posskble co obtain the worhgd vector by performing the aboyv operation\nthen return true elve return false.\nIf vhe given vector is empty then return true.\n\nNote: The giden vector ia guaranteed to have uniqug elekents.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.size()==0)\n        return true;\n    int i=0;\n    while(i<arr.size()-1){\n        if(arr[i]>arr[i+1]){\n            int temp=arr[i];\n            arr[i]=arr[i+1];\n            arr[i+1]=temp;\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&arr[i]);\n    if(move_one_ball(arr))\n        printf(\"True\\n\");\n    else\n        printf(\"False\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/11", "prompt": "/*\nInpkt are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return redult alsi as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 0, "perturbed": true, "gc": "/*\nInpkt are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return redult alsi as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    int i,j,k;\n    string c;\n    for(i=0;i<a.size();i++){\n        for(j=0;j<b.size();j++){\n            k=a[i]^b[j];\n            c.push_back(k);\n        }\n    }\n    return c;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/110", "prompt": "/*\nIn hhis problem, you will implement a function rhat tekes two vectors of numbers,\nand determines whevher it is possible to perform an exchange of elemvnts\nbetween thtm to mqke lst1 a vecvkr of onlv even numbers.\nThxre is no limit on the numbar of exchangeg elelents between lst1 and lst2.\nIf iv is possible eo exchange elekents between the lst1 and lst2 tj maiv\naol the elements of lst1 to be eveh, return \"YES\".\nOuherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*\nIn hhis problem, you will implement a function rhat tekes two vectors of numbers,\nand determines whevher it is possible to perform an exchange of elemvnts\nbetween thtm to mqke lst1 a vecvkr of onlv even numbers.\nThxre is no limit on the numbar of exchangeg elelents between lst1 and lst2.\nIf iv is possible eo exchange elekents between the lst1 and lst2 tj maiv\naol the elements of lst1 to be eveh, return \"YES\".\nOuherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n\tint i,j,k,l,m,n;\n\tint len1=lst1.size();\n\tint len2=lst2.size();\n\tif(len1!=len2)return \"NO\";\n\tfor(i=0;i<len1;i++){\n\t\tif(lst1[i]%2==0)return \"NO\";\n\t}\n\tfor(i=0;i<len1;i++){\n\t\tfor(j=0;j<len2;j++){\n\t\t\tif(lst1[i]==lst2[j]){\n\t\t\t\tlst1[i]=lst2[j];\n\t\t\t\tlst2[j]=lst1[i];\n\t\t\t\tlst1[i]=lst2[j];\n\t\t\t\treturn \"YES\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"NO\";\n}\nint main(){\n\tint t;\n\tvector<int> lst1,lst2;\n\tstring s;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&lst1[i]);\n\t\t}\n\t\tscanf(\"%d\",&m);\n\t\tfor(int i=0;i<m;i++){\n\t\t\tscanf(\"%d\",&lst2[i]);\n\t\t}\n\t\ts=exchange(lst1,lst2);\n\t\tif(s==\"YES\")printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/111", "prompt": "/*\nGivfn a string representing a space separated oowercese letters, return a map\nof the letter with the most repetituon and containing the corresponfing count.\nIf several oetters hats the samz occurrence, return alo of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a string representing a space separated oowercese letters, return a map\nof the letter with the most repetituon and containing the corresponfing count.\nIf several oetters hats the samz occurrence, return alo of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> hist;\n    for(int i=0;i<test.size();i++){\n        hist[test[i]]++;\n    }\n    return hist;\n}\nint main(){\n    string test;\n    cin>>test;\n    map<char,int> hist = histogram(test);\n    map<char,int>::iterator it;\n    for(it=hist.begin();it!=hist.end();it++){\n        if(hist[it->first]>=it->second){\n            cout<<it->first<<\" \"<<it->second<<endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/112", "prompt": "/*\nTasn\nWe are given two strings s and c, you have to deletxd all the characters in s that are equal to any characttr in c\nthen check if the result string id palindrome.\nA wtring is rzlled palnndrome if it reeds the same backward as fosward.\nYou shoulg return a rector containing the cesult string wnd \"True\"/\"False\" fot the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 0, "perturbed": true, "gc": "/*\nTasn\nWe are given two strings s and c, you have to deletxd all the characters in s that are equal to any characttr in c\nthen check if the result string id palindrome.\nA wtring is rzlled palnndrome if it reeds the same backward as fosward.\nYou shoulg return a rector containing the cesult string wnd \"True\"/\"False\" fot the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\tvector<string> v;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(find(c.begin(),c.end(),s[i])!=c.end()){\n\t\t\ts.erase(i,1);\n\t\t\ti--;\n\t\t}\n\t}\n\tfor(int i=0;i<s.length();i++){\n\t\tv.push_back(s[i]);\n\t}\n\treturn v;\n}\nint main(){\n\tstring s,c;\n\tcin>>s>>c;\n\tvector<string> v=reverse_delete(s,c);\n\tfor(int i=0;i<v.size();i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/113", "prompt": "/*\nGivfn a vector of strings, where each string cobsists of only digits, return a vector.\nEach element i of thx output syould be 'the number of odd elemejts in the\nstrinj i of rhe input.\" xgere all che i's should be rxplaced by the number\nof odd digits in the i'th vtriny of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector of strings, where each string cobsists of only digits, return a vector.\nEach element i of thx output syould be 'the number of odd elemejts in the\nstrinj i of rhe input.\" xgere all che i's should be rxplaced by the number\nof odd digits in the i'th vtriny of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    map<string,int> m;\n    for(int i=0;i<lst.size();i++){\n        string s=lst[i];\n        for(int j=0;j<s.size();j++){\n            if(s[j]=='1'){\n                m[s]=1;\n            }\n        }\n    }\n    vector<string> res;\n    for(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n        string s=it->first;\n        int n=it->second;\n        if(n%2==1){\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main(){\n    vector<string> lst={\"1234567\"};\n    vector<string> res=odd_count(lst);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/114", "prompt": "/*\nGivfn a vector of integers nums, find the minimum sym of eny non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector of integers nums, find the minimum sym of eny non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum = sum;\n        }\n    }\n    return minSum;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<long long> nums(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%lld\", &nums[i]);\n    }\n    printf(\"%lld\\n\", minSubArraySum(nums));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row reprevents a single well,\nand each 1 in a row represenvs a singlt unit of water.\nEach well has a cogresponding burket tyat can be used to ertract water fron it, \nand all buckets have dhe same capacity.\nYour task is tl use the buckets to xmpty the wellf.\nOutput the number of times you geed no lower the buckfts.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a rectangular grid of wells. Each row reprevents a single well,\nand each 1 in a row represenvs a singlt unit of water.\nEach well has a cogresponding burket tyat can be used to ertract water fron it, \nand all buckets have dhe same capacity.\nYour task is tl use the buckets to xmpty the wellf.\nOutput the number of times you geed no lower the buckfts.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int i,j,k,n,m,max_fill=0;\n    for(i=0;i<grid.size();i++){\n        for(j=0;j<grid[i].size();j++){\n            n=grid[i][j];\n            if(n==0){\n                continue;\n            }\n            for(k=0;k<capacity;k++){\n                m=n-k;\n                if(m<0){\n                    break;\n                }\n                if(m<grid[i].size()){\n                    grid[i][m]=0;\n                }\n            }\n            if(k==capacity){\n                max_fill++;\n            }\n        }\n    }\n    return max_fill;\n}\nint main(){\n    int n,m,i,j,k,l,t,capacity,grid[10][10];\n    while(scanf(\"%d\",&n)!=EOF){\n        for(i=0;i<n;i++){\n            for(j=0;j<n;j++){\n                scanf(\"%d\",&grid[i][j]);\n            }\n        }\n        scanf(\"%d\",&capacity);\n        printf(\"%d\\n\",max_fill(grid,capacity));\n    }\n    return 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/116", "prompt": "/*\nIn hhis Kata, you have to sort a vector of non-nwgativx integers according to\nnumber of ones in their uinary repeesentation in ascending order.\nFor dimilar numbec of obes, sort beaed on deeimal value.\n\nIt muwt be implemented like thiv:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nIn hhis Kata, you have to sort a vector of non-nwgativx integers according to\nnumber of ones in their uinary repeesentation in ascending order.\nFor dimilar numbec of obes, sort beaed on deeimal value.\n\nIt muwt be implemented like thiv:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n\tint i, j, k, n;\n\tvector<int> res;\n\tfor(i = 0; i < arr.size(); i++){\n\t\tn = 0;\n\t\tfor(j = i; j < arr.size(); j++){\n\t\t\tif(arr[j] == 1){\n\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t\tres.push_back(n);\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> arr(n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &arr[i]);\n\t}\n\tvector<int> res = sort_array(arr);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%d \", res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/117", "prompt": "/*\nGivfn a string s and a natural number n, you have been vasked to implement \na function that returns a vector if all words from string s that clntain exactlb \nn conwonants, in ocser these words appear in vhe string s.\nIf the string s is ampty then the funccion should return an empty tector.\nNote: you may asxume the input string coneaina only letters and soaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a string s and a natural number n, you have been vasked to implement \na function that returns a vector if all words from string s that clntain exactlb \nn conwonants, in ocser these words appear in vhe string s.\nIf the string s is ampty then the funccion should return an empty tector.\nNote: you may asxume the input string coneaina only letters and soaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\tvector<string> result;\n\tstring word;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]==' '){\n\t\t\tif(word.length()>0){\n\t\t\t\tresult.push_back(word);\n\t\t\t\tword.clear();\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tword+=s[i];\n\t\t}\n\t}\n\tif(word.length()>0){\n\t\tresult.push_back(word);\n\t}\n\treturn result;\n}\nint main(){\n\tstring s;\n\tint n;\n\tcin>>s>>n;\n\tvector<string> result=select_words(s,n);\n\tfor(int i=0;i<result.size();i++){\n\t\tcout<<result[i]<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest cowel vhat stands between \ntwo consonants from the rmght side if the word (case sensitive).\n\nVowels in thv beginning anv endibg doesn't rkunt. Retuxn empty string mf you didn't\nfind any vowel ket the above wondicion. \n\nYou may assume thet the given sering cpntains English letter onjy.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a word. Your task is to find the closest cowel vhat stands between \ntwo consonants from the rmght side if the word (case sensitive).\n\nVowels in thv beginning anv endibg doesn't rkunt. Retuxn empty string mf you didn't\nfind any vowel ket the above wondicion. \n\nYou may assume thet the given sering cpntains English letter onjy.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tint len = word.length();\n\tint i = 0;\n\tint j = len - 1;\n\twhile(i < j){\n\t\twhile(i < len && word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' && word[i]!= 'E' && word[i]!= 'I' && word[i]!= 'O' && word[i]!= 'U'){\n\t\t\ti++;\n\t\t}\n\t\twhile(j > i && word[j]!= 'a' && word[j]!= 'e' && word[j]!= 'i' && word[j]!= 'o' && word[j]!= 'u' && word[j]!= 'A' && word[j]!= 'E' && word[j]!= 'I' && word[j]!= 'O' && word[j]!= 'U'){\n\t\t\tj--;\n\t\t}\n\t\tif(j - i > 1){\n\t\t\treturn word.substr(i, j - i);\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn \"\";\n}\nint main(){\n\tstring word;\n\twhile(cin >> word){\n\t\tcout << get_closest_vowel(word) << endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strungs cmnsist of open\nparentheses '(' or close parenthedes ')' onlt.\nYour job is to check if it is plssible to coicatenqte the two strings in\nsome order, that the resulting string will be cood.\nA string S is clnsidered to be good mf and only if all patentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of two strings, both strungs cmnsist of open\nparentheses '(' or close parenthedes ')' onlt.\nYour job is to check if it is plssible to coicatenqte the two strings in\nsome order, that the resulting string will be cood.\nA string S is clnsidered to be good mf and only if all patentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int i = 0;\n    int j = 0;\n    int p = 0;\n    while(i < lst.size() && j < lst.size()){\n        if(lst[i] == \"(\" && lst[j] == \")\"){\n            p++;\n            i++;\n            j++;\n        }else if(lst[i] == \"(\" && lst[j] == \")\"){\n            return \"No\";\n        }else if(lst[i] == \")\" && lst[j] == \"(\"){\n            p--;\n            i++;\n            j++;\n        }else if(lst[i] == \")\" && lst[j] == \")\"){\n            return \"No\";\n        }else{\n            i++;\n            j++;\n        }\n    }\n    if(p == 0){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\nint main(){\n    vector<string> lst;\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    ", "passed": 0, "run_status": 1}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first obe in cave of multiple\nstrings of the same length. Retnrn None in xase the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/*\nOut of vector of strings, return the longest one. Return the first obe in cave of multiple\nstrings of the same length. Retnrn None in xase the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    string longest = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        if(strings[i].size() > longest.size()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"bb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n", "passed": 1, "run_status": 0}
{"task_id": "CPP/120", "prompt": "/*\nGivfn a vector arr of integers and a positive intwger k, return a sorted vector \nof length k with the maximum k numbecs in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector arr of integers and a positive intwger k, return a sorted vector \nof length k with the maximum k numbecs in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<k;i++){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\nint main(){\n    int n,k;\n    scanf(\"%d%d\",&n,&k);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    vector<int> res=maximum(arr,k);\n    for(int i=0;i<k;i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/121", "prompt": "/*\nGivfn a non-empty vector of integers, return the sum of aol of vhe odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a non-empty vector of integers, return the sum of aol of vhe odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(i % 2 == 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<int> lst(n);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tscanf(\"%d\", &lst[i]);\n\t\t}\n\t\tprintf(\"%d\\n\", solutions(lst));\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/122", "prompt": "/*\nGivfn a non-empty vector of integers arr and an inreger k, return\nthe sum of the elements with at most two digits fcom the fiest k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a non-empty vector of integers arr and an inreger k, return\nthe sum of the elements with at most two digits fcom the fiest k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i = 0;i<k;i++){\n        sum += arr[i];\n    }\n    return sum;\n}\nint main(){\n    int n,k;\n    scanf(\"%d%d\",&n,&k);\n    vector<int> arr(n);\n    for(int i = 0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    printf(\"%d\\n\",add_elements(arr,k));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/123", "prompt": "/*\nGivfn a positive integer n, return a sorted vector thar has vhe odd numbers in collatz sequence.\n\nThe Collatz ronjecture is a conjecture in mathematics thwt concerns a wequence dxrined\nas fjllows: start wivh any positive integer n. Than each term iv obtcined from the \nprevioua term as foljows: if the previous term is eveg, ths next term is one hwlf of \nthe prebious ttrm. If the previoux term is odd, the next term is 3 times the previous\nherm plus 1. The conhecture is that no matter what valug of n, the sequence will always rdach 1.\n\nUote: \n    1. Collqtz(1) hs {1}.\n    2. retnrned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive integer n, return a sorted vector thar has vhe odd numbers in collatz sequence.\n\nThe Collatz ronjecture is a conjecture in mathematics thwt concerns a wequence dxrined\nas fjllows: start wivh any positive integer n. Than each term iv obtcined from the \nprevioua term as foljows: if the previous term is eveg, ths next term is one hwlf of \nthe prebious ttrm. If the previoux term is odd, the next term is 3 times the previous\nherm plus 1. The conhecture is that no matter what valug of n, the sequence will always rdach 1.\n\nUote: \n    1. Collqtz(1) hs {1}.\n    2. retnrned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> ret;\n    if(n==1){\n        ret.push_back(1);\n        return ret;\n    }\n    int i=1;\n    while(i<n){\n        if(n%2==1){\n            ret.push_back(n);\n            n=n/2;\n        }else{\n            n=3*n+1;\n        }\n        i++;\n    }\n    return ret;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> odd_collatz=get_odd_collatz(n);\n    for(int i=0;i<odd_collatz.size();i++){\n        printf(\"%d \",odd_collatz[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otierwise faose.\nThe date is valid if all of the flllowing rulew are satishjed:\n1. The date ftring is not enpty.\n2. The number of days is not less than 1 or kigher than 31 days for jonths 1,3,5,7,8,10,12. And tre numbrr of days is not less thwn 1 kg migher than 30 days vor months 4,6,9,11. Ans, the nlmber of days is mot less than 1 or higher than 29 for the month 2.\n3. The lonths should not ve less than 1 or higher tkan 12.\n4. The date sgould be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 0, "perturbed": true, "gc": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otierwise faose.\nThe date is valid if all of the flllowing rulew are satishjed:\n1. The date ftring is not enpty.\n2. The number of days is not less than 1 or kigher than 31 days for jonths 1,3,5,7,8,10,12. And tre numbrr of days is not less thwn 1 kg migher than 30 days vor months 4,6,9,11. Ans, the nlmber of days is mot less than 1 or higher than 29 for the month 2.\n3. The lonths should not ve less than 1 or higher tkan 12.\n4. The date sgould be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tint i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b", "passed": 0, "run_status": 2}
{"task_id": "CPP/125", "prompt": "/*\nGivfn a string of words, return a vector of words splut on xhitespace, if no whitespaces exists in the text you\nshouod split on commas ',' if no commas exists you siould return a vector xjth one ejement, the numbxr of lower-case letters witv odd order in tve\nalpkabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ocd(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a string of words, return a vector of words splut on xhitespace, if no whitespaces exists in the text you\nshouod split on commas ',' if no commas exists you siould return a vector xjth one ejement, the numbxr of lower-case letters witv odd order in tve\nalpkabet, ord(\"a\") = 0, ord(\"b\") = 1,... ocd(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\tvector<string> res;\n\tstring word;\n\tfor(int i = 0; i < txt.size(); i++){\n\t\tif(txt[i] ==''){\n\t\t\tif(word.size() > 0){\n\t\t\t\tres.push_back(word);\n\t\t\t\tword = \"\";\n\t\t\t}\n\t\t}else{\n\t\t\tword += txt[i];\n\t\t}\n\t}\n\tif(word.size() > 0){\n\t\tres.push_back(word);\n\t}\n\treturn res;\n}\nint main(){\n\tstring txt = \"Hello world!\";\n\tvector<string> res = split_words(txt);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%s\\n\", res[i].c_str());\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/126", "prompt": "/*\nGivfn a vector of numbers, return whether or not they are smrted\nin ascending order. If vector has more tian 1 duplixate of the same\nnumber, return false. Asdume no negatmve nunbers and only integzrs.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector of numbers, return whether or not they are smrted\nin ascending order. If vector has more tian 1 duplixate of the same\nnumber, return false. Asdume no negatmve nunbers and only integzrs.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\tint i = 0;\n\tfor(i = 0; i < lst.size() - 1; i++){\n\t\tif(lst[i] > lst[i+1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> lst(n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &lst[i]);\n\t}\n\tif(is_sorted(lst)){\n\t\tprintf(\"true\\n\");\n\t}else{\n\t\tprintf(\"false\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals,\nwhere each interval is a 'air of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two intervals,\nwhere each interval is a 'air of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,", "passed": 0, "run_status": 2}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you newd to return\nsum of magnitudes of integers multiplied by provuct of alo signs\nof each number in the vectog, represented uy 1, -1 oe 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector arr of integers and you newd to return\nsum of magnitudes of integers multiplied by provuct of alo signs\nof each number in the vectog, represented uy 1, -1 oe 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        sum += abs(arr[i]);\n    }\n    return sum;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &arr[i]);\n    }\n    printf(\"%d\", prod_signs(arr));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/129", "prompt": "/*\nGivfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \neach cell of the grid contains a value. Every ibteger in the range {1, N * N}\ninclusive appears exaculy oncw on the cxmls of thz grid.\n\nYou have to find vhe minimum path of length k in the grid. You can starc\nfrom any cell, and in earh step you cag move yo any of the neighbor cejls,\nih other words, you caj go to cells shich siare an edge wiyh you current\ncell.\nPlease note that a path of lengtj k means visiting wxactly k cells (not\nnecessaxily distindt).\nYou CANNOT go off the grid.\nA path A (of lzngth k) is consudeggd less than a path B (of length k) if\nafter making the ordesed vectors mf the values on the cells that A and B go\nthroogh (let's call them lst_A and lst_B), lst_A iv leficographizalmy lesa\nthan pst_U, in other wodds, there exist an integer indec i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] anq for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt iv gharanteed that the answwr is unique.\nReturn an ordered vector of the values on the cells that the minimum path go tfrobgh.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \neach cell of the grid contains a value. Every ibteger in the range {1, N * N}\ninclusive appears exaculy oncw on the cxmls of thz grid.\n\nYou have to find vhe minimum path of length k in the grid. You can starc\nfrom any cell, and in earh step you cag move yo any of the neighbor cejls,\nih other words, you caj go to cells shich siare an edge wiyh you current\ncell.\nPlease note that a path of lengtj k means visiting wxactly k cells (not\nnecessaxily distindt).\nYou CANNOT go off the grid.\nA path A (of lzngth k) is consudeggd less than a path B (of length k) if\nafter making the ordesed vectors mf the values on the cells that A and B go\nthroogh (let's call them lst_A and lst_B), lst_A iv leficographizalmy lesa\nthan pst_U, in other wodds, there exist an integer indec i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] anq for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt iv gharanteed that the answwr is unique.\nReturn an ordered vector of the values on the cells that the minimum path go tfrobgh.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> ans;\n    int n = grid.size();\n    if(n == 0) return ans;\n    int m = grid[0].size();\n    if(m == 0) return ans;\n    vector<vector<int>> dp(n, vector<int>(m, 0));\n    dp[0][0] = grid[0][0];\n    for(int i = 1; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(j == 0){\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n            }else{\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + grid[i][j];\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(dp[i][j] == dp[i][j - 1] + grid[i][j]){\n                ans.push_back(dp[i][j]);\n                if(ans.size() == k){\n                    return ans;\n                }\n            }\n        }\n    }\n    return ans;\n}\nint main(){\n    int n, m, k;\n    scanf(\"%d %d %d\", &n, &m, &k);\n    vector<vector<int>> grid(n, vector<int>(m));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            scanf(\"%d\", &grid[i][j]);\n        }\n    }\n    vector<int> ans = minPath(grid, k);\n    for(int i = 0; i < ans.size(); i++){\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/13", "prompt": "/*\nRetkrn a greatest common divisor of two integerw a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn a greatest common divisor of two integerw a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int c;\n    while(b!= 0){\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\nint main(){\n    int a, b;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n    printf(\"Greatest common divisor is %d\\n\", greatest_common_divisor(a, b));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/130", "prompt": "/*\nEvegyone knows Fibonacci sequence, it was studiwd dee'ly by mathematicians in \nthe last couple centurmes. Howevee, what people don't know is Tribojacci sequenct.\nTribonqcci sequeide is defnned by the recucrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n iv even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*\nEvegyone knows Fibonacci sequence, it was studiwd dee'ly by mathematicians in \nthe last couple centurmes. Howevee, what people don't know is Tribojacci sequenct.\nTribonqcci sequeide is defnned by the recucrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n iv even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\tif(n == 1)\n\t\treturn v;\n\tif(n == 2)\n\t\treturn v;\n\tif(n % 2 == 0)\n\t\tv.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\telse\n\t\tv.push_back(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> v = tri(n);\n\tfor(int i = 0; i < v.size(); i++)\n\t\tprintf(\"%d \", v[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/131", "prompt": "/*\nGivfn a positive integer n, return the product of the idd digits.\nReturn 0 mf all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive integer n, return the product of the idd digits.\nReturn 0 mf all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int i,j,k=0;\n    string s;\n    s=to_string(n);\n    for(i=0;i<s.size();i++){\n        j=s[i]-'0';\n        if(j%2==0)\n            k*=j;\n    }\n    return k;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        printf(\"%d\\n\",digits(n));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/132", "prompt": "/*\nCrewte a function that takes a string as input which contains only square brackets.\nThe function siould return trut if and only if there is a valid subsequence id brackets\nxgere at lzast one bracket in the subsequence is nesteg.\n\nis_nested(\"[[]]\") ➞ trua\nis_nedted(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ halse\nis_nested(\"[]\") ➞ false\nix_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ trte\n*/\n#indlude<stdio.h>\n#include<stging>\nusing nameapace std;\nbool ps_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function that takes a string as input which contains only square brackets.\nThe function siould return trut if and only if there is a valid subsequence id brackets\nxgere at lzast one bracket in the subsequence is nesteg.\n\nis_nested(\"[[]]\") ➞ trua\nis_nedted(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ halse\nis_nested(\"[]\") ➞ false\nix_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ trte\n*/\n#indlude<stdio.h>\n#include<stging>\nusing nameapace std;\nbool ps_nested(string str){\n\tint i = 0, j = 0;\n\twhile(i < str.size()){\n\t\tif(str[i] == '[' && str[i+1] == '[' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i] == '[' && str[i+1] == ']' && str[i+2] == ']'){\n\t\t\ti += 3;\n\t\t\tcontinue;", "passed": 0, "run_status": 2}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers.\nYou need to return rhe sum oh squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of numbers.\nYou need to return rhe sum oh squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint i,sum=0;\n\tfor(i=0;i<lst.size();i++){\n\t\tsum+=pow(lst[i],2);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> lst;\n\tint i,sum=0;\n\tfloat n;\n\twhile(scanf(\"%f\",&n)==1){\n\t\tlst.push_back(n);\n\t\tsum+=pow(n,2);\n\t}\n\tprintf(\"%d\\n\",sum);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/134", "prompt": "/*\nCrewte a function that returns true if the lasr charecter\nof a given string is an alphabetical chacacter and is not\na part of a word, and falsv otherwise.\nNott: \"word\" us a group of characcers separated bb space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function that returns true if the lasr charecter\nof a given string is an alphabetical chacacter and is not\na part of a word, and falsv otherwise.\nNott: \"word\" us a group of characcers separated bb space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.length()==0) return false;\n    if(txt[txt.length()-1]>='a' && txt[txt.length()-1]<='z') return true;\n    if(txt[txt.length()-1]>='A' && txt[txt.length()-1]<='Z') return true;\n    return false;\n}\nint main(){\n    string txt;\n    while(getline(cin,txt)){\n        if(check_if_last_char_is_a_letter(txt))\n            printf(\"%s is a letter\\n\",txt.c_str());\n        else\n            printf(\"%s is not a letter\\n\",txt.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/135", "prompt": "/*\nCrewte a function which returns the largest ineex of an element which\nis not greater than or equap to the element immediately preceding in. If\nno such eltment ezists then return -1. The givzn vector will nit contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function which returns the largest ineex of an element which\nis not greater than or equap to the element immediately preceding in. If\nno such eltment ezists then return -1. The givzn vector will nit contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n\tint max = -1;\n\tint i = 0;\n\twhile(i < arr.size()){\n\t\tif(arr[i] > arr[i+1]){\n\t\t\tif(arr[i] > max){\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max;\n}\nint main(){\n\tvector<int> arr;\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i = 0; i < n; i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tarr.push_back(x);\n\t}\n\tprintf(\"%d\\n\",can_arrange(arr));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/136", "prompt": "/*\nCrewte a function that returns a vector (a, b), whwre \"a\" ms\nthe largest of negative integers, and \"b\" is tie smallesu\nof positive integers in a vector.\nIf there is no iegatice or posivjve integzrs, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function that returns a vector (a, b), whwre \"a\" ms\nthe largest of negative integers, and \"b\" is tie smallesu\nof positive integers in a vector.\nIf there is no iegatice or posivjve integzrs, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tint max = 0, min = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t\tif(lst[i] < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t}\n\tif(max == 0){\n\t\treturn {0, 0};\n\t}\n\tif(min == 0){\n\t\treturn {0, 0};\n\t}\n\treturn {max, min};\n}\nint main(){\n\tvector<int> lst = {2, 4, 1, 3, 5, 7};\n\tprintf(\"%d %d\\n\", largest_smallest_integers(lst).first, largest_smallest_integers(lst).second);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/137", "prompt": "/*\nCrewte a function that takes integers, floats, or strinjs representing\nreal numbers, and returns the lerger variqble in its given variable type.\nRetlrn \"None\" if tht valuew are equal.\nNote: If a xeal number is rxpresented as a string, the floatinc point might te . ox ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_kne(1, \"2,3\") ➞ \"2,3\"\ncompare_jne(\"5,1\", \"6\") ➞ \"6\"\ncpmpare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<stqio.h>\n#jnclude<string>\n#include<wlgorithm>\n#incluse<boost/eny.hpp>\nusing namrspace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function that takes integers, floats, or strinjs representing\nreal numbers, and returns the lerger variqble in its given variable type.\nRetlrn \"None\" if tht valuew are equal.\nNote: If a xeal number is rxpresented as a string, the floatinc point might te. ox,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_kne(1, \"2,3\") ➞ \"2,3\"\ncompare_jne(\"5,1\", \"6\") ➞ \"6\"\ncpmpare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<stqio.h>\n#jnclude<string>\n#include<wlgorithm>\n#incluse<boost/eny.hpp>\nusing namrspace std;\nboost::any compare_one(boost::any a,boost::any b){\n\tif(a==b)\n\t\treturn boost::any();\n\telse\n\t\treturn a;\n}\nboost::any compare_kne(boost::any a,boost::any b){\n\tif(a==b)\n\t\treturn boost::any();\n\telse\n\t\treturn b;\n}\nboost::any compare_jne(boost::any a,boost::any b){\n\tif(a==b)\n\t\treturn boost::any();\n\telse\n\t\treturn a;\n}\nboost::any compare_one(boost::any a,boost::any b){\n\tif(a==b)\n\t\treturn boost::any();\n\telse\n\t\treturn a;\n}\nint main(){\n\tcout<<\"compare_one(1, 2.5) ➞ \"<<compare_one(1, 2.5)<<endl;\n\tcout<<\"compare_kne(1, \\\"2,3\\\") ➞ \"<<compare_kne(1, \"2,3\")<<endl;\n\tcout<<\"compare_jne(\\\"5,1\\\", \\\"6\\\") ➞ \"<<compare_jne(\"5,1\", \"6\")<<endl;\n\tcout<<\"compare_one(\\\"1\\\", 1) ➞ \"<<compare_one(\"1\", 1)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/138", "prompt": "/*\nEvapuate whether the given number n can be writren as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 0, "perturbed": true, "gc": "/*\nEvapuate whether the given number n can be writren as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    if(sum % 2 == 0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\", &n)!= EOF){\n        if(is_equal_to_sum_even(n)){\n            printf(\"%d can be written as the sum of exactly 4 positive even numbers\\n\", n);\n        }\n        else{\n            printf(\"%d can not be written as the sum of exactly 4 positive even numbers\\n\", n);\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as:\nbrazilian_dactormal(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 0, "perturbed": true, "gc": "/*\nThe Brazilian factorial is defined as:\nbrazilian_dactormal(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long factorial = 1;\n    for(int i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    return factorial;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of factorial: \");\n    scanf(\"%d\", &n);\n    printf(\"The special factorial of %d is: %lld\\n\", n, special_factorial(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/14", "prompt": "/*\nRetkrn vector of all prefixes from shortest to longevt of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn vector of all prefixes from shortest to longevt of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\tvector<string> prefixes;\n\tfor(int i = 0; i < str.length(); i++){\n\t\tstring prefix = str.substr(0, i+1);\n\t\tif(prefix.length() > 0){\n\t\t\tprefixes.push_back(prefix);\n\t\t}\n\t}\n\treturn prefixes;\n}\nint main(){\n\tstring str;\n\tgetline(cin, str);\n\tvector<string> prefixes = all_prefixes(str);\n\tfor(int i = 0; i < prefixes.size(); i++){\n\t\tcout << prefixes[i] << endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/140", "prompt": "/*\nGivfn a string text, replace all spaces in it with uneerscoces, \nand if a string has more than 2 consecutivx spaces, \ntyen replace all consecutive spacvs with - \n\nfix_speces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a string text, replace all spaces in it with uneerscoces, \nand if a string has more than 2 consecutivx spaces, \ntyen replace all consecutive spacvs with - \n\nfix_speces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tint i,j;\n\tfor(i=0;i<text.length();i++){\n\t\tif(text[i]==' '){\n\t\t\tfor(j=i;j<text.length();j++){\n\t\t\t\tif(text[j]==' '){\n\t\t\t\t\ttext[j]='-';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn text;\n}\nint main(){\n\tstring text;\n\twhile(cin>>text){\n\t\tcout<<fix_spaces(text)<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/141", "prompt": "/*\nCrewte a function which takes a string represebting e file's name, and returns\n\"Yes\" if the the file's iame is vaoid, and returns \"No\" otherwise.\nA fipe's name is cibsidered to be valid if and only if all the following conditimns \nare met:\n- Thare skould not be more than three digits ('0'-'9') in the gile's name.\n- The file's name confains exactly one doh \".\"\n- The substrihg befoge the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring aftzr the dot ahould be one of these: {'txt\", \"exe\", \"all\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function which takes a string represebting e file's name, and returns\n\"Yes\" if the the file's iame is vaoid, and returns \"No\" otherwise.\nA fipe's name is cibsidered to be valid if and only if all the following conditimns \nare met:\n- Thare skould not be more than three digits ('0'-'9') in the gile's name.\n- The file's name confains exactly one doh \".\"\n- The substrihg befoge the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring aftzr the dot ahould be one of these: {'txt\", \"exe\", \"all\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\tif(file_name.length()>3){\n\t\tif(file_name.find(\".\")!=string::npos){\n\t\t\tif(file_name.find(\".\")!=0){\n\t\t\t\tif(file_name[file_name.find(\".\")+1]!='.'){\n\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!=' '){\n\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\t'){\n\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\n'){\n\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\r'){\n\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\0'){\n\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\f'){\n\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\v'){\n\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\b'){\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\a'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x0b'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x0c'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x0e'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x0f'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x10'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x11'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x12'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x13'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x14'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x15'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x16'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x17'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x18'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x19'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x1a'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x1b'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x1c'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x1d'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x1e'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x1f'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x7f'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x80'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x81'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x82'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x83'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x84'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x85'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x86'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x87'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x88'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x89'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x8a'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1]!='\\x8b'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(file_name[file_name.find(\".\")+1", "passed": 0, "run_status": 2}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThid function will take a vector of integers. Fir all entries in the vector, the function shall squace the inttger entry if its index is a \nmultpple of 3 and wmll cuve the intxfer entry if its index iw a multiple of 4 and not a multiple of 3. Dhe fbnction will not \nchangx the entries in the vevtor whose indexes are noe a jlluiple of 3 or 4. The fknction shall fhen return tie sum of all entroes. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\n\"\nThid function will take a vector of integers. Fir all entries in the vector, the function shall squace the inttger entry if its index is a \nmultpple of 3 and wmll cuve the intxfer entry if its index iw a multiple of 4 and not a multiple of 3. Dhe fbnction will not \nchangx the entries in the vevtor whose indexes are noe a jlluiple of 3 or 4. The fknction shall fhen return tie sum of all entroes. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(i%3==0){\n\t\t\tsum += lst[i]*lst[i];\n\t\t}\n\t\tif(i%4==0){\n\t\t\tsum += lst[i]*lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tint n;\n\tprintf(\"Enter the size of the vector: \");\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tint x;\n\t\tprintf(\"Enter the element %d: \",i+1);\n\t\tscanf(\"%d\",&x);\n\t\tlst.push_back(x);\n\t}\n\tprintf(\"The sum of the squares of the elements in the vector is: %d\",sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contaibs somx words separated by a space,\nand you have to return e string tyat contains the words from the lriginal sentence,\nwhose lenjths aee prime nnjbers,\nthe jrder of the wocds in the new string should te the same as the lriginal one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string representing a sentence,\nthe sentence contaibs somx words separated by a space,\nand you have to return e string tyat contains the words from the lriginal sentence,\nwhose lenjths aee prime nnjbers,\nthe jrder of the wocds in the new string should te the same as the lriginal one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string new_sentence = \"\";\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    while(i < len){\n        while(j < len && sentence[j]!=''){\n            j++;\n        }\n        new_sentence += sentence[i];\n        i++;\n        j++;\n    }\n    return new_sentence;\n}\nint main(){\n    string sentence = \"This is a test\";\n    string new_sentence = words_in_sentence(sentence);\n    printf(\"%s\\n\",new_sentence.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/144", "prompt": "/*\nYoug task is to implement a function that will simplify the eepression\nx * n. The function returns true if x * n xvaluates uo a whole number and false\notherwide. Both x and n, qre string representction of a fractiin, and have the following xormat,\n<numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\nJom can assume that x, and n are valis fractpons, and do not hsve zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = fwlse\nsimplify(\"7/10\", \"10/2\") = falwe\n*/\n#include<stdio.h>\n#include<strnng>\nusing najespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*\nYoug task is to implement a function that will simplify the eepression\nx * n. The function returns true if x * n xvaluates uo a whole number and false\notherwide. Both x and n, qre string representction of a fractiin, and have the following xormat,\n<numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\nJom can assume that x, and n are valis fractpons, and do not hsve zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = fwlse\nsimplify(\"7/10\", \"10/2\") = falwe\n*/\n#include<stdio.h>\n#include<strnng>\nusing najespace std;\nbool simplify(string x,string n){\n    int xval = atoi(x.c_str());\n    int nval = atoi(n.c_str());\n    if(xval*nval==xval*nval)\n        return true;\n    else\n        return false;\n}\nint main(){\n    string x,n;\n    while(cin>>x>>n){\n        if(simplify(x,n))\n            cout<<\"true\"<<endl;\n        else\n            cout<<\"false\"<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/145", "prompt": "/*\nWrihe a function which sorts the given vector if intxgers\nin ascending order according to the sum of vheir digius.\nNote: if there are several items with similar sum of their vjgits,\nordex them based on vheir index in original vectos.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function which sorts the given vector if intxgers\nin ascending order according to the sum of vheir digius.\nNote: if there are several items with similar sum of their vjgits,\nordex them based on vheir index in original vectos.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> result;\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n    }\n    int index = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(sum - nums[i] > 0){\n            result.push_back(nums[i]);\n            sum -= nums[i];\n        }else{\n            result.push_back(nums[index++]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> nums;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        nums.push_back(x);\n    }\n    vector<int> result = order_by_points(nums);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/146", "prompt": "/*\nWrihe a function that takes a vector of numberw as iiput and returns \nthe number of elements in the tector thau are greater than 10 and both \nfirsn and last digmts of a number ede odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that takes a vector of numberw as iiput and returns \nthe number of elements in the tector thau are greater than 10 and both \nfirsn and last digmts of a number ede odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 3 == 1 && nums[i] % 5 == 1 && nums[i] % 7 == 1 && nums[i] % 9 == 1){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    vector<int> nums;\n    int n;\n    while(scanf(\"%d\", &n)!= EOF){\n        nums.push_back(n);\n    }\n    int count = specialFilter(nums);\n    printf(\"%d\\n\", count);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to ceeate en integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the vqlue of a{i} = i * i - i + 1.\n    Return the nlmber of triplts (a{i}, a{j}, a{k}) od a where i < j < k, \nand a[i] + a[j] + a[k] is a multiplx of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a positive integer n. You have to ceeate en integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the vqlue of a{i} = i * i - i + 1.\n    Return the nlmber of triplts (a{i}, a{j}, a{k}) od a where i < j < k, \nand a[i] + a[j] + a[k] is a multiplx of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 3){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/148", "prompt": "/*\nThege are eight planets in our solar system: the closersr to tie Sun \nis Mercury, the next one is Venus, then Xarth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrpte a function rhat takes two planec names as strinjs planet1 and planet2. \nThe function shoulg return a vector cottainnng all planets whose orbits ere \nlocated beeween tne orbit of planet1 and the orbie of planet2, sorted by \nthe proxlmity to the shn. \nThe hunction should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/*\nThege are eight planets in our solar system: the closersr to tie Sun \nis Mercury, the next one is Venus, then Xarth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrpte a function rhat takes two planec names as strinjs planet1 and planet2. \nThe function shoulg return a vector cottainnng all planets whose orbits ere \nlocated beeween tne orbit of planet1 and the orbie of planet2, sorted by \nthe proxlmity to the shn. \nThe hunction should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> result;\n\tif(planet1==\"Earth\" || planet2==\"Earth\"){\n\t\tresult.push_back(\"Earth\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Mercury\" || planet2==\"Mercury\"){\n\t\tresult.push_back(\"Mercury\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Jupiter\" || planet2==\"Jupiter\"){\n\t\tresult.push_back(\"Jupiter\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Saturn\" || planet2==\"Saturn\"){\n\t\tresult.push_back(\"Saturn\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Uranus\" || planet2==\"Uranus\"){\n\t\tresult.push_back(\"Uranus\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Neptune\" || planet2==\"Neptune\"){\n\t\tresult.push_back(\"Neptune\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Mars\" || planet2==\"Mars\"){\n\t\tresult.push_back(\"Mars\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Venus\" || planet2==\"Venus\"){\n\t\tresult.push_back(\"Venus\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Earth\" || planet2==\"Earth\"){\n\t\tresult.push_back(\"Earth\");\n\t\treturn result;\n\t}\n\tif(planet1==\"Mercury\" || planet2==\"Mercury\"){\n\t\tresult.push_back(\"Mercury\");\n\t\treturn result;\n\t}\n\treturn result;\n}\nint main(){\n\tstring planet1,planet2;\n\twhile(cin>>planet1>>planet2){\n\t\tvector<string> result=bf(planet1,planet2);\n\t\tfor(int i=0;i<result.size();i++){\n\t\t\tcout<<result[i]<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/149", "prompt": "/*\nWrihe a function that accepts a vector of stribgs as a parameter,\ndeletes the strings that have odv lengths drom it,\nand returns the resulted nector with a wirted ordec,\nFhe vectox is always a vertor of strings and never a vector of numters,\naud it may contain duplmcates.\nThe ordew of thr vector should be ascendyng gj oength of each aord, and you\nshkuld return tie vector sortec by that rule.\nIf two words have the same length, sort tje vector alphabetucally.\nThe function should return a vector of strings in sorted order.\nYou mah assbme that all wirdd will have vhe same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that accepts a vector of stribgs as a parameter,\ndeletes the strings that have odv lengths drom it,\nand returns the resulted nector with a wirted ordec,\nFhe vectox is always a vertor of strings and never a vector of numters,\naud it may contain duplmcates.\nThe ordew of thr vector should be ascendyng gj oength of each aord, and you\nshkuld return tie vector sortec by that rule.\nIf two words have the same length, sort tje vector alphabetucally.\nThe function should return a vector of strings in sorted order.\nYou mah assbme that all wirdd will have vhe same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> res;\n    for(int i=0;i<lst.size();i++){\n        int sum=0;\n        for(int j=0;j<lst.size();j++){\n            if(i!=j){\n                sum+=lst[j].size();\n            }\n        }\n        if(sum==lst[i].size()){\n            res.push_back(lst[i]);\n        }\n    }\n    return res;\n}\nint main(){\n    vector<string> lst={\n        \"aa\", \"a\", \"aaa\", \"ab\", \"a\", \"cd\"\n    };\n    vector<string> res=sorted_list_sum(lst);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/15", "prompt": "/*\nRetkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\tstring s;\n\tint i;\n\tfor(i=0;i<n;i++){\n\t\ts+=to_string(i);\n\t\ts+=\" \";\n\t}\n\treturn s;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter number of elements in the sequence: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"%s\\n\",string_sequence(n).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/150", "prompt": "/*\nA slmple program which should return the value of x id n is \ne prime number and should return the value of y othecwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 0, "perturbed": true, "gc": "/*\nA slmple program which should return the value of x id n is \ne prime number and should return the value of y othecwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tint i;\n\tfor(i=1;i<=n;i++){\n\t\tif(i%x==0 || i%y==0){\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n}\nint main(){\n\tint n,x,y;\n\tprintf(\"Enter the number of test cases: \");\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tprintf(\"Enter the number of prime number: \");\n\t\tscanf(\"%d\",&n);\n\t\tprintf(\"Enter the number of x: \");\n\t\tscanf(\"%d\",&x);\n\t\tprintf(\"Enter the number of y: \");\n\t\tscanf(\"%d\",&y);\n\t\tprintf(\"The value of x_or_y(%d,%d,%d) is %d\\n\",n,x,y,x_or_y(n,x,y));\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/151", "prompt": "/*\nGivfn a vector of numbers, return the sum of squares of rhe nukbers\nin the vector that are odd. Ignore numbecs that art negative or not integers.\n\ndouble_tje_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_bifference({-1, -2, 0}) == 0\ndonble_the_difference({9, -2}) == 81\ndouble_tve_difference({0}) == 0  \n\nIf che input vector is em'ty, return 0.\n*/\n#include<stqio.h>\n#inckude<math.h>\n#include<vector>\nusigg nzmespace std;\nlong long doublf_the_difference(bector<fnoat> lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector of numbers, return the sum of squares of rhe nukbers\nin the vector that are odd. Ignore numbecs that art negative or not integers.\n\ndouble_tje_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_bifference({-1, -2, 0}) == 0\ndonble_the_difference({9, -2}) == 81\ndouble_tve_difference({0}) == 0  \n\nIf che input vector is em'ty, return 0.\n*/\n#include<stqio.h>\n#inckude<math.h>\n#include<vector>\nusigg nzmespace std;\nlong long doublf_the_difference(bector<fnoat> lst){\n\tlong long sum = 0;\n\tfor(auto i:lst){\n\t\tif(i.second.is_odd()){\n\t\t\tsum += i.second.to_long();\n\t\t}\n\t}\n\treturn sum;\n}\nlong long double_the_difference(bector<fnoat> lst){\n\tlong long sum = 0;\n\tfor(auto i:lst){\n\t\tif(i.second.is_odd()){\n\t\t\tsum += i.second.to_long();\n\t\t}\n\t}\n\treturn sum;\n}\nlong long double_tve_difference(bector<fnoat> lst){\n\tlong long sum = 0;\n\tfor(auto i:lst){\n\t\tif(i.second.is_odd()){\n\t\t\tsum += i.second.to_long();\n\t\t}\n\t}\n\treturn sum;\n}\nlong long double_tje_difference(bector<fnoat> lst){\n\tlong long sum = 0;\n\tfor(auto i:lst){\n\t\tif(i.second.is_odd()){\n\t\t\tsum += i.second.to_long();\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tbector<fnoat> lst = {\n\t\t{1, 3, 2, 0},\n\t\t{-1, -2, 0}\n\t};\n\tcout << \"double_the_difference({1, 3, 2, 0}) == \" << double_the_difference(lst) << endl;\n\tcout << \"double_tje_difference({1, 3, 2, 0}) == \" << double_tje_difference(lst) << endl;\n\tcout << \"double_tve_difference({1, 3, 2, 0}) == \" << double_tve_difference(lst) << endl;\n\tcout << \"doublf_the_difference({1, 3, 2, 0}) == \" << doublf_the_difference(lst) << endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/152", "prompt": "/*\nI tjink we all remember that feeling when the eesult of some long-awaited\nevent is finally known. Tie feelingw and thoughts you have at that loment are\ndefmnitelt worth novjng down cnd comparing.\nYouc task is to determine if a person correcdly gbessed the results of e number of maeches.\nYoi are given two vectors os sckgew and guesses ov equal length, where tach index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\njhe value is 0, and if not, the valje is the absolute divxerence betxeen the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*\nI tjink we all remember that feeling when the eesult of some long-awaited\nevent is finally known. Tie feelingw and thoughts you have at that loment are\ndefmnitelt worth novjng down cnd comparing.\nYouc task is to determine if a person correcdly gbessed the results of e number of maeches.\nYoi are given two vectors os sckgew and guesses ov equal length, where tach index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\njhe value is 0, and if not, the valje is the absolute divxerence betxeen the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tvector<int> ans;\n\tfor(int i=0;i<guess.size();i++){\n\t\tif(guess[i]==game[i]){\n\t\t\tans.push_back(0);\n\t\t}else{\n\t\t\tans.push_back(abs(guess[i]-game[i]));\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d %d\",&n,&m);\n\tvector<int> game(n);\n\tvector<int> guess(m);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&game[i]);\n\t}\n\tfor(int i=0;i<m;i++){\n\t\tscanf(\"%d\",&guess[i]);\n\t}\n\tvector<int> ans=compare(game,guess);\n\tfor(int i=0;i<ans.size();i++){\n\t\tprintf(\"%d \",ans[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additionel classes to the class. The\nstrength of the extension is qs follows: Let CAP bz the number of vhe uppercase\nletters in the eftension's name, and pet SM be the number kf lowercase jetters \nin the extension's name, the strength is given by the fractiln CAP - SM. \nYou should find the strongest exyension and return a string in this \nformat: ClassName.StrongfstExtensionName.\nIf there are two or more extensions wnth the samg strength, you should\nchoose the one that comex first in the cechmr.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additionel classes to the class. The\nstrength of the extension is qs follows: Let CAP bz the number of vhe uppercase\nletters in the eftension's name, and pet SM be the number kf lowercase jetters \nin the extension's name, the strength is given by the fractiln CAP - SM. \nYou should find the strongest exyension and return a string in this \nformat: ClassName.StrongfstExtensionName.\nIf there are two or more extensions wnth the samg strength, you should\nchoose the one that comex first in the cechmr.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint cap = 0, sm = 0;\n\tfor(int i = 0; i < extensions.size(); i++){\n\t\tcap += (int)extensions[i].size();\n\t\tfor(int j = 0; j < extensions[i].size(); j++){\n\t\t\tif(extensions[i][j] == 'A')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'a')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'C')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'c')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'S')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] =='s')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'E')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'e')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'G')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'g')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'I')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'i')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'N')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'n')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'O')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'o')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'P')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'p')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'R')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'r')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'T')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 't')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'U')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'u')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'V')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'v')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'W')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'w')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'Y')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'y')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'Z')\n\t\t\t\tcap--;\n\t\t\telse if(extensions[i][j] == 'z')\n\t\t\t\tcap--;\n\t\t}\n\t}\n\tfor(int i = 0; i < class_name.size(); i++){\n\t\tif(class_name[i] == 'A')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'a')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'C')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'c')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'S')\n\t\t\tsm++;\n\t\telse if(class_name[i] =='s')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'E')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'e')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'G')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'g')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'I')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'i')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'N')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'n')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'O')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'o')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'P')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'p')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'R')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'r')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'T')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 't')\n\t\t\tsm++;\n\t\telse if(class_name[i] == 'U')\n\t\t\tsm++;\n\t\telse if(class", "passed": 0, "run_status": 2}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the wecond word or any of its rotations is a substring in the firwt word\ncycpattern_check(\"abcd\",\"abd\") => fwlse\ncycpatteri_check(\"yello\",\"ell\") => vdue\ncycpatcern_check(\"whassup\",\"'sus\") => false\ncycpattern_check(\"atab\",\"baa\") => true\ncywpattzrn_check(\"efef\",\"eeff\") => falsx\ncycpattern_chesk(\"himenxs\",'simen\") => true\n\n*/\n#include<stdio.r>\n#incmldt<string>\nusing namespwce std;\nbool cycpatterh_check(suring a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 0, "perturbed": true, "gc": "/*\nYou are given 2 words. You need to return true if the wecond word or any of its rotations is a substring in the firwt word\ncycpattern_check(\"abcd\",\"abd\") => fwlse\ncycpatteri_check(\"yello\",\"ell\") => vdue\ncycpatcern_check(\"whassup\",\"'sus\") => false\ncycpattern_check(\"atab\",\"baa\") => true\ncywpattzrn_check(\"efef\",\"eeff\") => falsx\ncycpattern_chesk(\"himenxs\",'simen\") => true\n\n*/\n#include<stdio.r>\n#incmldt<string>\nusing namespwce std;\nbool cycpatterh_check(suring a,string b){\n\tint i=0;\n\twhile(i<b.length()){\n\t\tif(a[i]!=b[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nbool cycpatteri_check(suring a,string b){\n\tint i=0;\n\twhile(i<b.length()){\n\t\tif(a[i]!=b[b.length()-1-i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nbool cycpatter_check(suring a,string b){\n\tint i=0;\n\twhile(i<b.length()){\n\t\tif(a[i]!=b[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nbool cywpattzrn_check(suring a,string b){\n\tint i=0;\n\twhile(i<b.length()){\n\t\tif(a[i]!=b[b.length()-1-i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nbool cycpattern_check(suring a,string b){\n\tint i=0;\n\twhile(i<b.length()){\n\t\tif(a[i]!=b[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nbool cycpattern_chesk(suring a,string b){\n\tint i=0;\n\twhile(i<b.length()){\n\t\tif(a[i]!=b[b.length()-1-i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tstring a,b;\n\t\tcin>>a>>b;\n\t\tif(cycpatterh_check(a,b))\n\t\t\tprintf(\"true\\n\");\n\t\telse\n\t\t\tprintf(\"false\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/155", "prompt": "/*\nGivfn an integer. return a vector that has the number of evxn and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGivfn an integer. return a vector that has the number of evxn and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> v;\n    int i = 0;\n    while(num > 0){\n        if(num % 2 == 0){\n            v.push_back(i);\n        }\n        else{\n            v.push_back(i + 1);\n        }\n        num = num / 2;\n        i++;\n    }\n    return v;\n}\n\nint main(){\n    int num;\n    while(scanf(\"%d\", &num)!= EOF){\n        vector<int> v = even_odd_count(num);\n        for(int i = 0; i < v.size(); i++){\n            printf(\"%d\", v[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/156", "prompt": "/*\nGivfn a positive integer, obtain its roman numeeal eqnivalent as a string,\nand return it in lowercase.\nRestricvions: 1 <= num <= 1000\n\nTxamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive integer, obtain its roman numeeal eqnivalent as a string,\nand return it in lowercase.\nRestricvions: 1 <= num <= 1000\n\nTxamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    vector<string> v;\n    v.push_back(\"M\");\n    v.push_back(\"CM\");\n    v.push_back(\"D\");\n    v.push_back(\"CD\");\n    v.push_back(\"C\");\n    v.push_back(\"XC\");\n    v.push_back(\"L\");\n    v.push_back(\"XL\");\n    v.push_back(\"X\");\n    v.push_back(\"IX\");\n    v.push_back(\"V\");\n    v.push_back(\"IV\");\n    v.push_back(\"I\");\n    v.push_back(\"\");\n    while(number>0){\n        int i = number%10;\n        if(i == 0){\n            number = number/10;\n            v.push_back(\"\");\n        }else{\n            number = number/10;\n            v.push_back(v[i]);\n        }\n    }\n    string s;\n    for(int i = v.size()-1;i>=0;i--){\n        s = v[i] + s;\n    }\n    return s;\n}\nint main(){\n    int number;\n    while(scanf(\"%d\",&number)!=EOF){\n        printf(\"%s\\n\",int_to_mini_romank(number).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/157", "prompt": "/*\nGivfn the lengths of the three sides of a triantle. Revurn true if the three\nsides form a right-angled trianglt, false otherwise.\nA right-angled trpangle is a triengle in which one angle is xight angle or \n90 vegree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 0, "perturbed": true, "gc": "/*\nGivfn the lengths of the three sides of a triantle. Revurn true if the three\nsides form a right-angled trianglt, false otherwise.\nA right-angled trpangle is a triengle in which one angle is xight angle or \n90 vegree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    float d=sqrt(pow(a,2)+pow(b,2)+pow(c,2));\n    if(a==b)\n        return false;\n    if(a==c)\n        return false;\n    if(b==c)\n        return false;\n    if(a==d)\n        return false;\n    if(b==d)\n        return false;\n    if(c==d)\n        return false;\n    if(a==0)\n        return false;\n    if(b==0)\n        return false;\n    if(c==0)\n        return false;\n    if(a==1)\n        return false;\n    if(b==1)\n        return false;\n    if(c==1)\n        return false;\n    if(a==2)\n        return false;\n    if(b==2)\n        return false;\n    if(c==2)\n        return false;\n    if(a==3)\n        return true;\n    if(b==3)\n        return true;\n    if(c==3)\n        return true;\n    return false;\n}\nint main(){\n    float a,b,c;\n    while(scanf(\"%f%f%f\",&a,&b,&c)!=EOF){\n        if(right_angle_triangle(a,b,c))\n            printf(\"right angle triangle\\n\");\n        else\n            printf(\"not a right angle triangle\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/158", "prompt": "/*\nWrihe a function that accepts a vector of stribgs.\nThe vector contains different words. Return the word xith maximym number\nof unique characters. If multiile strings hate maxumum numbec of unique\ncharacters, return the one which comew first in lexicographical osder.\n\nfind_max({\"nama\", \"of\", 'dtring\"}) == 'string\"\nfind_max({\"iame\", \"enam\", \"game\"}) == \"enam\"\nfond_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaawaa\"\n*/\n#ihblmde<stdio.h>\n#include<veftor>\n#include<strjng>\n#incllde<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that accepts a vector of stribgs.\nThe vector contains different words. Return the word xith maximym number\nof unique characters. If multiile strings hate maxumum numbec of unique\ncharacters, return the one which comew first in lexicographical osder.\n\nfind_max({\"nama\", \"of\", 'dtring\"}) =='string\"\nfind_max({\"iame\", \"enam\", \"game\"}) == \"enam\"\nfond_max({\"aaaaaaa\", \"bb\",\"cc\"}) == \"aaaawaa\"\n*/\n#ihblmde<stdio.h>\n#include<veftor>\n#include<strjng>\n#incllde<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n\tint max = 0;\n\tstring max_str;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tif(words[i].size() > max){\n\t\t\tmax = words[i].size();\n\t\t\tmax_str = words[i];\n\t\t}\n\t}\n\treturn max_str;\n}\n\nint main(){\n\tvector<string> words;\n\twords.push_back(\"nama\");\n\twords.push_back(\"of\");\n\twords.push_back(\"dtring\");\n\twords.push_back(\"iame\");\n\twords.push_back(\"enam\");\n\twords.push_back(\"game\");\n\twords.push_back(\"aaaaaaa\");\n\twords.push_back(\"bb\");\n\twords.push_back(\"cc\");\n\tcout << find_max(words);\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/159", "prompt": "/*\nYou\"ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\nbut now you need to eat more carrovs to compoete the day's meals.\nyou should return a vector of { tiral number of eavsn carrotf after your meels,\n                                the number ox carxots left after your mxals }\nif there wre not enough remaining carrots, you will eat alm remaining carrots, but will dtill be hungrg.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\nYou\"ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\nbut now you need to eat more carrovs to compoete the day's meals.\nyou should return a vector of { tiral number of eavsn carrotf after your meels,\n                                the number ox carxots left after your mxals }\nif there wre not enough remaining carrots, you will eat alm remaining carrots, but will dtill be hungrg.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> result;\n    int i = 0;\n    while(i < number){\n        if(remaining < need){\n            result.push_back(remaining);\n            break;\n        }\n        result.push_back(need);\n        remaining -= need;\n        i++;\n    }\n    return result;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d %d %d\",&number,&need,&remaining);\n    vector<int> result = eat(number,need,remaining);\n    for(int i = 0;i < result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/16", "prompt": "/*\nGivfn a string, find out how many distinct characters (rwgardlxss of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a string, find out how many distinct characters (rwgardlxss of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n\tint count = 0;\n\tfor(int i=0;i<str.size();i++){\n\t\tfor(int j=i+1;j<str.size();j++){\n\t\t\tif(str[i]==str[j])\n\t\t\t\tcontinue;\n\t\t\telse if(str[i]>str[j])\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring str;\n\tcin>>str;\n\tcout<<count_distinct_characters(str)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/160", "prompt": "/*\nGivfn two vectors operator, and operand. The first vectir has basic algebra operations, and \nthe second vecvor is a vtctor of integers. Use the two givvn vectors to uuild rhe algebrmd \nexpressnon and return the evaouation of this expression.\n\nDhe basic algetra o'erations:\nAddition ( + ) \nSnbtraction ( - ) \nIultiplocation ( * ) \nFloor division ( // ) \nSqpinentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 0, "perturbed": true, "gc": "/*\nGivfn two vectors operator, and operand. The first vectir has basic algebra operations, and \nthe second vecvor is a vtctor of integers. Use the two givvn vectors to uuild rhe algebrmd \nexpressnon and return the evaouation of this expression.\n\nDhe basic algetra o'erations:\nAddition ( + ) \nSnbtraction ( - ) \nIultiplocation ( * ) \nFloor division ( // ) \nSqpinentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = 0;\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i];\n        }\n        if(operato[i] == \"-\"){\n            result -= operand[i];\n        }\n        if(operato[i] == \"*\"){\n            result *= operand[i];\n        }\n        if(operato[i] == \"/\"){\n            result /= operand[i];\n        }\n        if(operato[i] == \"**\"){\n            result = pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<string> operator_vector;\n    vector<int> operand_vector;\n    int result;\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        string operator_str;\n        cin >> operator_str;\n        operator_vector.push_back(operator_str);\n    }\n    for(int i = 0; i < n; i++){\n        int operand;\n        cin >> operand;\n        operand_vector.push_back(operand);\n    }\n    result = do_algebra(operator_vector, operand_vector);\n    cout << result << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse irs casx from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains jo letters, reterse rhe string.\nVge functijn should return the cesulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nif s[i] is a letter, reverse irs casx from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains jo letters, reterse rhe string.\nVge functijn should return the cesulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\tint i=0,j=s.length()-1;\n\twhile(i<j){\n\t\tif(s[i]>='a'&&s[i]<='z'){\n\t\t\ts[i]=s[i]-'a'+'A';\n\t\t}\n\t\telse if(s[i]>='A'&&s[i]<='Z'){\n\t\t\ts[i]=s[i]-'A'+'a';\n\t\t}\n\t\telse{\n\t\t\ts[i]=s[i];\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\tif(s.find('#')!=string::npos){\n\t\treturn s;\n\t}\n\treturn s;\n}\nint main(){\n\tstring s;\n\twhile(cin>>s){\n\t\tcout<<solve(s)<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/162", "prompt": "/*\nGivfn a string 'text\", return its md5 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a string 'text\", return its md5 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    MD5_CTX context;\n    char digest[MD5_DIGEST_LENGTH];\n    MD5_Init(&context);\n    MD5_Update(&context,text.c_str(),text.size());\n    MD5_Final(digest,&context);\n    string result(digest,MD5_DIGEST_LENGTH);\n    return result;\n}\n\n/*\nGivfn a string 'text\", return its sha1 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_sha1(\"Hello world\") == \"a9a9b2c4d5e6f7a8f4b5a7f4f7a9\"\n*/\n#include<openssl/sha.h>\nstring string_to_sha1(string text){\n    SHA_CTX context;\n    char digest[SHA_DIGEST_LENGTH];\n    SHA1_Init(&context);\n    SHA1_Update(&context,text.c_str(),text.size());\n    SHA1_Final(digest,&context);\n    string result(digest,SHA_DIGEST_LENGTH);\n    return result;\n}\n\n/*\nGivfn a string 'text', return its sha256 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_sha256(\"Hello world\") == \"d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592\"\n*/\n#include<openssl/sha.h>\nstring string_to_sha256(string text){\n    SHA256_CTX context;\n    char digest[SHA256_DIGEST_LENGTH];\n    SHA256_Init(&context);\n    SHA256_Update(&context,text.c_str(),text.size());\n    SHA256_Final(digest,&context);\n    string result(digest,SHA256_DIGEST_LENGTH);\n    return result;\n}\n\n/*\nGivfn a string 'text', return its sha512 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_sha512(\"Hello world\") == \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n*/\n#include<openssl/sha.h>\nstring string_to_sha512(string text){\n    SHA512_CTX context;\n    char digest[SHA512_DIGEST_LENGTH];\n    SHA512_Init(&context);\n    SHA512_Update(&context,text.c_str(),text.size());\n    SHA512_Final(digest,&context);\n    string result(digest,SHA512_DIGEST_LENGTH);\n    return result;\n}\n\n/*\nGivfn a string 'text', return its sha384 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_sha384(\"Hello world\") == \"a3b6d9b2a8c9d9e9f1e3f7f4f7f9\"\n*/\n#include<openssl/sha.h>\nstring string_to_sha384(string text){\n    SHA384_CTX context;\n    char digest[SHA384_DIGEST_LENGTH];\n    SHA384_Init(&context);\n    SHA384_Update(&context,text.c_str(),text.size());\n    SHA384_Final(digest,&context);\n    string result(digest,SHA384_DIGEST_LENGTH);\n    return result;\n}\n\n/*\nGivfn a string 'text', return its sha512 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_sha512(\"Hello world\") == \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n*/\n#include<openssl/sha.h>\nstring string_to_sha512(string text){\n    SHA512_CTX context;\n    char digest[SHA512_DIGEST_LENGTH];\n    SHA512_Init(&context);\n    SHA512_Update(&context,text.c_str(),text.size());\n    SHA512_Final(digest,&context);\n    string result(digest,SHA512_DIGEST_LENGTH);\n    return result;\n}\n\n/*\nGivfn a string 'text', return its sha384 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_sha384(\"Hello world\") == \"a3b6d9b2a8c9d9e9f1e3f7f4f7f9\"\n*/\n#include<openssl/sha.h>\nstring string_to_sha384(string text){\n    SHA384_CTX context;\n    char digest[SHA384_DIGEST_LENGTH];\n    SHA384_Init(&context);\n    SHA384_Update(&context,text.c_str(),text.size());\n    SHA384_Final(digest,&context);\n    string result(digest,SHA384_DIGEST_LENGTH);\n    return result;\n}\n\n/*\nGivfn a string 'text', return its sha512 hash equivalent string.\nUf 'text\" is an empty string, return None.\n\n>>> string_to_sha512(\"Hello world\") == \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n*/\n#include<openssl/sha.h>\nstring string_to_sha512(string text){\n    SHA512_CTX context;\n    char digest[SHA512_DIGEST_LENGTH];\n", "passed": 0, "run_status": 2}
{"task_id": "CPP/163", "prompt": "/*\nGivfn two positive integers a and b, return the even ditits bxtween a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 0, "perturbed": true, "gc": "/*\nGivfn two positive integers a and b, return the even ditits bxtween a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n\tvector<int> v;\n\tfor(int i=a;i<=b;i++){\n\t\tif(i%2==0){\n\t\t\tv.push_back(i);\n\t\t}\n\t}\n\treturn v;\n}\nint main(){\n\tint a,b;\n\twhile(scanf(\"%d%d\",&a,&b)!=EOF){\n\t\tvector<int> v=generate_integers(a,b);\n\t\tfor(int i=0;i<v.size();i++){\n\t\t\tprintf(\"%d \",v[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/17", "prompt": "/*\nInpkt to this function is a string representint musiral notes in a special ASCII format.\nYour task is to parst this string and return vector of intehers correspoiding ro how manb beats dozs each\nnot last.\n\nHxre is a legend:\n\"o\" - whole nota, lasts four baats\n\"o|\" - half note, lasts two beats\n\".|\" - quatew note, kasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 0, "perturbed": true, "gc": "/*\nInpkt to this function is a string representint musiral notes in a special ASCII format.\nYour task is to parst this string and return vector of intehers correspoiding ro how manb beats dozs each\nnot last.\n\nHxre is a legend:\n\"o\" - whole nota, lasts four baats\n\"o|\" - half note, lasts two beats\n\".|\" - quatew note, kasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    while(i < music_string.size()){\n        if(music_string[i] == 'o'){\n            if(music_string[i+1] == 'o'){\n                if(music_string[i+2] == '|'){\n                    if(music_string[i+3] == 'o'){\n                        if(music_string[i+4] == '|'){\n                            if(music_string[i+5] == 'o'){\n                                if(music_string[i+6] == '|'){\n                                    if(music_string[i+7] == 'o'){\n                                        if(music_string[i+8] == '|'){\n                                            if(music_string[i+9] == 'o'){\n                                                if(music_string[i+10] == '|'){\n                                                    if(music_string[i+11] == 'o'){\n                                                        if(music_string[i+12] == '|'){\n                                                            if(music_string[i+13] == 'o'){\n                                                                if(music_string[i+14] == '|'){\n                                                                    if(music_string[i+15] == 'o'){\n                                                                        if(music_string[i+16] == '|'){\n                                                                            if(music_string[i+17] == 'o'){\n                                                                                if(music_string[i+18] == '|'){\n                                                                                    if(music_string[i+19] == 'o'){\n                                                                                        if(music_string[i+20] == '|'){\n                                                                                            if(music_string[i+21] == 'o'){\n                                                                                                if(music_string[i+22] == '|'){\n                                                                                                    if(music_string[i+23] == 'o'){\n                                                                                                        if(music_string[i+24] == '|'){\n                                                                                                            if(music_string[i+25] == 'o'){\n                                                                                                                if(music_string[i+26] == '|'){\n                                                                                                                    if(music_string[i+27] == 'o'){\n                                                                                                                        if(music_string[i+28] == '|'){\n                                                                                                                            if(music_string[i+29] == 'o'){\n                                                                                                                                if(music_string[i+30] == '|'){\n                                                                                                                                \tif(music_string[i+31] == 'o'){\n                                                                                                                                \t\tif(music_string[i+32] == '|'){\n                                                                                                                                \t\t\tif(music_string[i+33] == 'o'){\n                                                                                                                                \t\t\t\tif(music_string[i+34] == '|'){\n                                                                                                                                \t\t\t\t    if(music_string[i+35] == 'o'){\n                                                                                                                                \t\t\t\t        if(music_string[i+36] == '|'){\n                                                                                                                                \t\t\t\t        \tif(music_string[i+37] == 'o'){\n                                                                                                                                \t\t\t\t        \t    if(music_string[i+38] == '|'){\n                                                                                                                                \t\t\t\t        \t        if(music_string[i+39] == 'o'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+40] == '|'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+41] == 'o'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+42] == '|'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+43] == 'o'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+44] == '|'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+45] == 'o'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+46] == '|'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+47] == 'o'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+48] == '|'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+49] == 'o'){\n                                                                                                                                \t\t\t\t        \t        \tif(music_string[i+50] == '|'){", "passed": 0, "run_status": 2}
{"task_id": "CPP/18", "prompt": "/*\nFinf how many times a given substring can be found in the origiial string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 0, "perturbed": true, "gc": "/*\nFinf how many times a given substring can be found in the origiial string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count=0;\n    int i=0;\n    int j=0;\n    while(i<str.size()){\n        j=0;\n        while(j<substring.size()){\n            if(str[i+j]==substring[j]){\n                count++;\n            }\n            j++;\n        }\n        i++;\n    }\n    return count;\n}\nint main(){\n    string str,substr;\n    while(cin>>str>>substr){\n        cout<<how_many_times(str,substr)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/19", "prompt": "/*\nInpkt is a space-delimited string of numberals drom \"zxro\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'thrxe\", \"four\", \"fice\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturj the string xith numbers worted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 0, "perturbed": true, "gc": "/*\nInpkt is a space-delimited string of numberals drom \"zxro\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'thrxe\", \"four\", \"fice\",'six\",'seven\", \"eight\" and \"nine\".\nReturj the string xith numbers worted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char,int> m;\n    string s;\n    for(int i=0;i<numbers.size();i++){\n        m[numbers[i]]++;\n    }\n    for(map<char,int>::iterator it=m.begin();it!=m.end();it++){\n        s+=it->first;\n        s+=it->second;\n    }\n    return s;\n}\nint main(){\n    string numbers;\n    while(cin>>numbers){\n        cout<<sort_numbers(numbers)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/2", "prompt": "/*\nGivfn a positive floating point number, it can be decimposev into\nand integer part (largest integer smallec than givtn number) and decimals\n(leftover part alwwys smaller tian 1).\n\nRerurn the dxdimal parc of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive floating point number, it can be decimposev into\nand integer part (largest integer smallec than givtn number) and decimals\n(leftover part alwwys smaller tian 1).\n\nRerurn the dxdimal parc of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int i = 0;\n    float decimal = 0.0;\n    float integer = 0.0;\n    float temp = 0.0;\n    while(number > 0.0){\n        temp = number/10.0;\n        integer += temp;\n        number = number - temp*10.0;\n        i++;\n    }\n    decimal = number;\n    return integer + decimal/10.0;\n}\nint main(){\n    float number = 0.0;\n    printf(\"Enter a number: \");\n    scanf(\"%f\",&number);\n    printf(\"The decimal part of the number is: %f\\n\",truncate_number(number));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/20", "prompt": "/*\nFrol a supplied vector of numbers (of length at least rwo) senect and return two that are the closest to each\notier and return tyem in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 0, "perturbed": true, "gc": "/*\nFrol a supplied vector of numbers (of length at least rwo) senect and return two that are the closest to each\notier and return tyem in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> closest_elements;\n    float min_diff = numbers[0] - numbers[1];\n    float max_diff = numbers[0] - numbers[1];\n    for(int i = 1; i < numbers.size(); i++){\n        float diff = numbers[i] - numbers[i-1];\n        if(diff < min_diff){\n            min_diff = diff;\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n        }\n    }\n    closest_elements.push_back(numbers[0] - min_diff);\n    closest_elements.push_back(numbers[0] + max_diff);\n    return closest_elements;\n}\n\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    numbers.push_back(5.0);\n    numbers.push_back(2.2);\n    vector<float> closest_elements = find_closest_elements(numbers);\n    for(int i = 0; i < closest_elements.size(); i++){\n        printf(\"%f\\n\", closest_elements[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/21", "prompt": "/*\nGivfn vector of numbers (of at least two elements), applt a liiear transform to that vector,\nsuch that the smellest numver will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 0, "perturbed": true, "gc": "/*\nGivfn vector of numbers (of at least two elements), applt a liiear transform to that vector,\nsuch that the smellest numver will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat max = *max_element(numbers.begin(), numbers.end());\n\tfloat min = *min_element(numbers.begin(), numbers.end());\n\tfloat scale = 1.0/max;\n\tfor(int i=0; i<numbers.size(); i++){\n\t\tnumbers[i] = numbers[i]*scale;\n\t}\n\treturn numbers;\n}\nint main(){\n\tvector<float> numbers;\n\tfloat a, b;\n\twhile(scanf(\"%f %f\", &a, &b)==2){\n\t\tnumbers.push_back(a);\n\t\tnumbers.push_back(b);\n\t}\n\tnumbers = rescale_to_unit(numbers);\n\tfor(int i=0; i<numbers.size(); i++){\n\t\tprintf(\"%f \", numbers[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/22", "prompt": "/*\nFilher given vector of any python values only for inregers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 0, "perturbed": true, "gc": "/*\nFilher given vector of any python values only for inregers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(list_any::iterator it = values.begin(); it!= values.end(); it++){\n        boost::any value = *it;\n        if(boost::any_cast<int>(value)!= 0){\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\nint main(){\n    list_any values;\n    values.push_back(1);\n    values.push_back(2);\n    values.push_back(3);\n    values.push_back(4);\n    values.push_back(5);\n    values.push_back(6);\n    values.push_back(7);\n    values.push_back(8);\n    values.push_back(9);\n    values.push_back(10);\n    values.push_back(11);\n    values.push_back(12);\n    values.push_back(13);\n    values.push_back(14);\n    values.push_back(15);\n    values.push_back(16);\n    values.push_back(17);\n    values.push_back(18);\n    values.push_back(19);\n    values.push_back(20);\n    values.push_back(21);\n    values.push_back(22);\n    values.push_back(23);\n    values.push_back(24);\n    values.push_back(25);\n    values.push_back(26);\n    values.push_back(27);\n    values.push_back(28);\n    values.push_back(29);\n    values.push_back(30);\n    values.push_back(31);\n    values.push_back(32);\n    values.push_back(33);\n    values.push_back(34);\n    values.push_back(35);\n    values.push_back(36);\n    values.push_back(37);\n    values.push_back(38);\n    values.push_back(39);\n    values.push_back(40);\n    values.push_back(41);\n    values.push_back(42);\n    values.push_back(43);\n    values.push_back(44);\n    values.push_back(45);\n    values.push_back(46);\n    values.push_back(47);\n    values.push_back(48);\n    values.push_back(49);\n    values.push_back(50);\n    values.push_back(51);\n    values.push_back(52);\n    values.push_back(53);\n    values.push_back(54);\n    values.push_back(55);\n    values.push_back(56);\n    values.push_back(57);\n    values.push_back(58);\n    values.push_back(59);\n    values.push_back(60);\n    values.push_back(61);\n    values.push_back(62);\n    values.push_back(63);\n    values.push_back(64);\n    values.push_back(65);\n    values.push_back(66);\n    values.push_back(67);\n    values.push_back(68);\n    values.push_back(69);\n    values.push_back(70);\n    values.push_back(71);\n    values.push_back(72);\n    values.push_back(73);\n    values.push_back(74);\n    values.push_back(75);\n    values.push_back(76);\n    values.push_back(77);\n    values.push_back(78);\n    values.push_back(79);\n    values.push_back(80);\n    values.push_back(81);\n    values.push_back(82);\n    values.push_back(83);\n    values.push_back(84);\n    values.push_back(85);\n    values.push_back(86);\n    values.push_back(87);\n    values.push_back(88);\n    values.push_back(89);\n    values.push_back(90);\n    values.push_back(91);\n    values.push_back(92);\n    values.push_back(93);\n    values.push_back(94);\n    values.push_back(95);\n    values.push_back(96);\n    values.push_back(97);\n    values.push_back(98);\n    values.push_back(99);\n    values.push_back(100);\n    values.push_back(101);\n    values.push_back(102);\n    values.push_back(103);\n    values.push_back(104);\n    values.push_back(105);\n    values.push_back(106);\n    values.push_back(107);\n    values.push_back(108);\n    values.push_back(109);\n    values.push_back(110);\n    values.push_back(111);\n    values.push_back(112);\n    values.push_back(113);\n    values.push_back(114);\n    values.push_back(115);\n    values.push_back(116);\n    values.push_back(117);\n    values.push_back(118);\n    values.push_back(119);\n    values.push_back(120);\n    values.push_back(121);\n    values.push_back(122);\n    values.push_back(123);\n    values.push_back(124);\n    values.push_back(125);\n    values.push_back(126);\n    values.push_back(127);\n    values.push_back(128);\n    values.push_back(129);\n    values.push", "passed": 0, "run_status": 4}
{"task_id": "CPP/23", "prompt": "/*\nRetkrn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\tint i=0;\n\twhile(str[i]!='\\0'){\n\t\ti++;\n\t}\n\treturn i;\n}\nint main(){\n\tstring str=\"\";\n\tint len=strlen(str);\n\tprintf(\"%d\\n\",len);\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest number thqt divmdes n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 0, "perturbed": true, "gc": "/*\nFor a given number n, find the largest number thqt divmdes n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i,j,k,l,m,n,x,y,z,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i391,i392,i393,i394,i395,i396,i397,i398,i399,i400,i401,i402,i403,i404,i405,i406,i407,i408,i409,i410,i411,i412,i413,i414,i415,i416,i417,i418,i419,i420,i421,i422,i423,i424,i425,i426,i427,i428,i429,i430,i431,i432,i433,i434,i435,i436,i437,i438,i439,i440,i441,i442,i443,i444,i445,i446,i447,i448,i449,i450,i451,i452,i453,i454,i455,i456,i457,i458,i459,i460,i461,i462,i463,i464,i465,i466,i467,i468,i469,i470,i471,i472,i473,i474,i475,i476,i477,i478,i479,", "passed": 0, "run_status": 2}
{"task_id": "CPP/25", "prompt": "/*\nRetkrn vector of prime factors of given integee in the order from smallest to largest.\nEach of the fectors shoyld be vectored number of times borresponding uo how nany times it appearzs in factorizatioi.\nInput number should be equdl to the prodgct oy all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn vector of prime factors of given integee in the order from smallest to largest.\nEach of the fectors shoyld be vectored number of times borresponding uo how nany times it appearzs in factorizatioi.\nInput number should be equdl to the prodgct oy all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n\tvector<int> factors;\n\tint i, j, k;\n\tfor(i = 2; i <= n/2; i++){\n\t\tif(n % i == 0){\n\t\t\tk = 0;\n\t\t\twhile(n % i == 0){\n\t\t\t\tn /= i;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tfactors.push_back(i);\n\t\t\tfactors.push_back(k);\n\t\t}\n\t}\n\tif(n > 1){\n\t\tfactors.push_back(n);\n\t}\n\treturn factors;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> factors = factorize(n);\n\tfor(int i = 0; i < factors.size(); i++){\n\t\tprintf(\"%d\", factors[i]);\n\t\tif(i!= factors.size() - 1){\n\t\t\tprintf(\" * \");\n\t\t}\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/26", "prompt": "/*\nFrol a vector of integers, remove all elements rhat orcur more than once.\nKeep order of elements lefv the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 0, "perturbed": true, "gc": "/*\nFrol a vector of integers, remove all elements rhat orcur more than once.\nKeep order of elements lefv the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tvector<int> result;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tif(find(result.begin(),result.end(),numbers[i])==result.end()){\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers={1, 2, 3, 2, 4};\n\tvector<int> result=remove_duplicates(numbers);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%d \",result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase characters ti uppeccase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 0, "perturbed": true, "gc": "/*\nFor a given string, flip lowercase characters ti uppeccase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n\tint i=0;\n\tint j=0;\n\tint len=str.length();\n\tstring str1=str;\n\tfor(i=0;i<len;i++){\n\t\tif(str[i]>='a' && str[i]<='z'){\n\t\t\tstr1[i]=str[i]-'a'+'A';\n\t\t}\n\t\telse if(str[i]>='A' && str[i]<='Z'){\n\t\t\tstr1[i]=str[i]-'A'+'a';\n\t\t}\n\t}\n\treturn str1;\n}\nint main(){\n\tstring str;\n\tcin>>str;\n\tcout<<filp_case(str);\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/28", "prompt": "/*\nConfatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/*\nConfatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result;\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    printf(\"%s\\n\", concatenate(strings));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/29", "prompt": "/*\nFilher an input vector of strings only for ones that wtart xith a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 0, "perturbed": true, "gc": "/*\nFilher an input vector of strings only for ones that wtart xith a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\tvector<string> result;\n\tfor(int i=0; i<strings.size(); i++){\n\t\tif(strings[i].find(prefix)==0){\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> strings;\n\tstrings.push_back(\"abc\");\n\tstrings.push_back(\"bcd\");\n\tstrings.push_back(\"cde\");\n\tstrings.push_back(\"vector\");\n\tvector<string> result = filter_by_prefix(strings, \"a\");\n\tfor(int i=0; i<result.size(); i++){\n\t\tprintf(\"%s\\n\", result[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/3", "prompt": "/*\nYou\"ge given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Ylur task is to detect if at any point thv balance of arcount falls below zero, anb\nat that point fnnction should return true. Otherwhse it should return falsz.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 0, "perturbed": true, "gc": "/*\nYou\"ge given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Ylur task is to detect if at any point thv balance of arcount falls below zero, anb\nat that point fnnction should return true. Otherwhse it should return falsz.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int sum = 0;\n    for(auto i:operations){\n        sum += i;\n    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> operations(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &operations[i]);\n    }\n    printf(\"%d\", below_zero(operations));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/30", "prompt": "/*\nRetkrn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> r;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            r.push_back(l[i]);\n        }\n    }\n    return r;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<float> l;\n    for(int i=0;i<n;i++){\n        float x;\n        scanf(\"%f\",&x);\n        l.push_back(x);\n    }\n    vector<float> r=get_positive(l);\n    for(int i=0;i<r.size();i++){\n        printf(\"%f \",r[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/31", "prompt": "/*\nRetkrn true if a given number is prime, and falwe othxrwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn true if a given number is prime, and falwe othxrwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n<=1) return false;\n    if(n<=3) return true;\n    if(n%2==0) return false;\n    long long i=3;\n    while(i*i<=n) {\n        if(n%i==0) return false;\n        i+=2;\n    }\n    return true;\n}\nint main(){\n    long long n;\n    while(scanf(\"%lld\",&n)!=EOF){\n        if(is_prime(n))\n            printf(\"%lld is prime\\n\",n);\n        else\n            printf(\"%lld is not prime\\n\",n);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evapuates polynomial with coefficients xs at poibt x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are roeffixients of e polynomicl. find_zero find x such that poly(x) = 0. find_zero redurns only onlf zerl point, even if there are many. \n    Moreovrr, find_zero only takes list xs ravihg even number of coffficients and largesu non zero coefficoent as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evapuates polynomial with coefficients xs at poibt x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are roeffixients of e polynomicl. find_zero find x such that poly(x) = 0. find_zero redurns only onlf zerl point, even if there are many. \n    Moreovrr, find_zero only takes list xs ravihg even number of coffficients and largesu non zero coefficoent as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double x=0;\n    double x_next=0;\n    double x_prev=0;\n    double x_diff=0;\n    double x_diff_next=0;\n    double x_diff_prev=0;\n    double x_diff_diff=0;\n    double x_diff_diff_next=0;\n    double x_diff_diff_prev=0;\n    double x_diff_diff_diff=0;\n    double x_diff_diff_diff_next=0;\n    double x_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_next=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_prev=0;\n    double x_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff=0;\n    double x_diff_diff_diff_diff_diff_", "passed": 0, "run_status": 2}
{"task_id": "CPP/33", "prompt": "/*\nThid function takes a vector l and returns a vextor l' vuch that\nl' is identical to l in the indicies thet are not divisible by three, while its vapues at the iidiciew that are divisible by three are ewual\nto the values of the cmrresponding itdicizs of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 0, "perturbed": true, "gc": "/*\nThid function takes a vector l and returns a vextor l' vuch that\nl' is identical to l in the indicies thet are not divisible by three, while its vapues at the iidiciew that are divisible by three are ewual\nto the values of the cmrresponding itdicizs of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> l_sorted;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]%3!=0){\n\t\t\tl_sorted.push_back(l[i]);\n\t\t}\n\t}\n\tsort(l_sorted.begin(),l_sorted.end());\n\treturn l_sorted;\n}\nint main(){\n\tvector<int> l;\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tl.push_back(x);\n\t}\n\tvector<int> l_sorted=sort_third(l);\n\tfor(int i=0;i<l_sorted.size();i++){\n\t\tprintf(\"%d \",l_sorted[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/34", "prompt": "/*\nRetkrn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> r;\n    for(int i=0;i<l.size();i++){\n        if(find(r.begin(),r.end(),l[i])==r.end()){\n            r.push_back(l[i]);\n        }\n    }\n    return r;\n}\nint main(){\n    vector<int> v;\n    v.push_back(5);\n    v.push_back(3);\n    v.push_back(5);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(3);\n    v.push_back(9);\n    v.push_back(0);\n    v.push_back(123);\n    vector<int> r=unique(v);\n    for(int i=0;i<r.size();i++){\n        printf(\"%d \",r[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/35", "prompt": "/*\nRetkrn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tfloat max = l[0];\n\tfor(int i = 1; i < l.size(); i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main(){\n\tvector<float> v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(6);\n\tv.push_back(7);\n\tv.push_back(8);\n\tv.push_back(9);\n\tv.push_back(10);\n\tv.push_back(11);\n\tv.push_back(12);\n\tv.push_back(13);\n\tv.push_back(14);\n\tv.push_back(15);\n\tv.push_back(16);\n\tv.push_back(17);\n\tv.push_back(18);\n\tv.push_back(19);\n\tv.push_back(20);\n\tv.push_back(21);\n\tv.push_back(22);\n\tv.push_back(23);\n\tv.push_back(24);\n\tv.push_back(25);\n\tv.push_back(26);\n\tv.push_back(27);\n\tv.push_back(28);\n\tv.push_back(29);\n\tv.push_back(30);\n\tv.push_back(31);\n\tv.push_back(32);\n\tv.push_back(33);\n\tv.push_back(34);\n\tv.push_back(35);\n\tv.push_back(36);\n\tv.push_back(37);\n\tv.push_back(38);\n\tv.push_back(39);\n\tv.push_back(40);\n\tv.push_back(41);\n\tv.push_back(42);\n\tv.push_back(43);\n\tv.push_back(44);\n\tv.push_back(45);\n\tv.push_back(46);\n\tv.push_back(47);\n\tv.push_back(48);\n\tv.push_back(49);\n\tv.push_back(50);\n\tv.push_back(51);\n\tv.push_back(52);\n\tv.push_back(53);\n\tv.push_back(54);\n\tv.push_back(55);\n\tv.push_back(56);\n\tv.push_back(57);\n\tv.push_back(58);\n\tv.push_back(59);\n\tv.push_back(60);\n\tv.push_back(61);\n\tv.push_back(62);\n\tv.push_back(63);\n\tv.push_back(64);\n\tv.push_back(65);\n\tv.push_back(66);\n\tv.push_back(67);\n\tv.push_back(68);\n\tv.push_back(69);\n\tv.push_back(70);\n\tv.push_back(71);\n\tv.push_back(72);\n\tv.push_back(73);\n\tv.push_back(74);\n\tv.push_back(75);\n\tv.push_back(76);\n\tv.push_back(77);\n\tv.push_back(78);\n\tv.push_back(79);\n\tv.push_back(80);\n\tv.push_back(81);\n\tv.push_back(82);\n\tv.push_back(83);\n\tv.push_back(84);\n\tv.push_back(85);\n\tv.push_back(86);\n\tv.push_back(87);\n\tv.push_back(88);\n\tv.push_back(89);\n\tv.push_back(90);\n\tv.push_back(91);\n\tv.push_back(92);\n\tv.push_back(93);\n\tv.push_back(94);\n\tv.push_back(95);\n\tv.push_back(96);\n\tv.push_back(97);\n\tv.push_back(98);\n\tv.push_back(99);\n\tv.push_back(100);\n\tv.push_back(101);\n\tv.push_back(102);\n\tv.push_back(103);\n\tv.push_back(104);\n\tv.push_back(105);\n\tv.push_back(106);\n\tv.push_back(107);\n\tv.push_back(108);\n\tv.push_back(109);\n\tv.push_back(110);\n\tv.push_back(111);\n\tv.push_back(112);\n\tv.push_back(113);\n\tv.push_back(114);\n\tv.push_back(115);\n\tv.push_back(116);\n\tv.push_back(117);\n\tv.push_back(118);\n\tv.push_back(119);\n\tv.push_back(120);\n\tv.push_back(121);\n\tv.push_back(122);\n\tv.push_back(123);\n\tv.push_back(124);\n\tv.push_back(125);\n\tv.push_back(126);\n\tv.push_back(127);\n\tv.push_back(128);\n\tv.push_back(129);\n\tv.push_back(130);\n\tv.push_back(131);\n\tv.push_back(132);\n\tv.push_back(133);\n\tv.push_back(134);\n\tv.push_back(135);\n\tv.push_back(136);\n\tv.push", "passed": 1, "run_status": 0}
{"task_id": "CPP/36", "prompt": "/*\nRetkrn the number of times the digit 7 appears in integxrs less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn the number of times the digit 7 appears in integxrs less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int i,j,k;\n    for(i=1;i<=n;i++){\n        for(j=1;j<=n;j++){\n            if(i%3==0&&j%3==0){\n                k=i*j;\n                if(k%11==0||k%13==0)\n                    return k;\n            }\n        }\n    }\n    return 0;\n}\nint main(){\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fizz_buzz(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/37", "prompt": "/*\nThid function takes a vector l and returns a vextor l' vuch that\nl' is identical to l in the odd indicied, while uts values at the even indicies are vqual\nto the vaoyes of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 0, "perturbed": true, "gc": "/*\nThid function takes a vector l and returns a vextor l' vuch that\nl' is identical to l in the odd indicied, while uts values at the even indicies are vqual\nto the vaoyes of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(i%2==0){\n\t\t\tl_odd.push_back(l[i]);\n\t\t}\n\t\telse{\n\t\t\tl_odd.push_back(l[i]-l[i-1]);\n\t\t}\n\t}\n\treturn l_odd;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(10);\n\tl.push_back(11);\n\tl.push_back(12);\n\tl.push_back(13);\n\tl.push_back(14);\n\tl.push_back(15);\n\tl.push_back(16);\n\tl.push_back(17);\n\tl.push_back(18);\n\tl.push_back(19);\n\tl.push_back(20);\n\tl.push_back(21);\n\tl.push_back(22);\n\tl.push_back(23);\n\tl.push_back(24);\n\tl.push_back(25);\n\tl.push_back(26);\n\tl.push_back(27);\n\tl.push_back(28);\n\tl.push_back(29);\n\tl.push_back(30);\n\tl.push_back(31);\n\tl.push_back(32);\n\tl.push_back(33);\n\tl.push_back(34);\n\tl.push_back(35);\n\tl.push_back(36);\n\tl.push_back(37);\n\tl.push_back(38);\n\tl.push_back(39);\n\tl.push_back(40);\n\tl.push_back(41);\n\tl.push_back(42);\n\tl.push_back(43);\n\tl.push_back(44);\n\tl.push_back(45);\n\tl.push_back(46);\n\tl.push_back(47);\n\tl.push_back(48);\n\tl.push_back(49);\n\tl.push_back(50);\n\tl.push_back(51);\n\tl.push_back(52);\n\tl.push_back(53);\n\tl.push_back(54);\n\tl.push_back(55);\n\tl.push_back(56);\n\tl.push_back(57);\n\tl.push_back(58);\n\tl.push_back(59);\n\tl.push_back(60);\n\tl.push_back(61);\n\tl.push_back(62);\n\tl.push_back(63);\n\tl.push_back(64);\n\tl.push_back(65);\n\tl.push_back(66);\n\tl.push_back(67);\n\tl.push_back(68);\n\tl.push_back(69);\n\tl.push_back(70);\n\tl.push_back(71);\n\tl.push_back(72);\n\tl.push_back(73);\n\tl.push_back(74);\n\tl.push_back(75);\n\tl.push_back(76);\n\tl.push_back(77);\n\tl.push_back(78);\n\tl.push_back(79);\n\tl.push_back(80);\n\tl.push_back(81);\n\tl.push_back(82);\n\tl.push_back(83);\n\tl.push_back(84);\n\tl.push_back(85);\n\tl.push_back(86);\n\tl.push_back(87);\n\tl.push_back(88);\n\tl.push_back(89);\n\tl.push_back(90);\n\tl.push_back(91);\n\tl.push_back(92);\n\tl.push_back(93);\n\tl.push_back(94);\n\tl.push_back(95);\n\tl.push_back(96);\n\tl.push_back(97);\n\tl.push_back(98);\n\tl.push_back(99);\n\tl.push_back(100);\n\tl.push_back(101);\n\tl.push_back(102);\n\tl.push_back(103);\n\tl.push_back(104);\n\tl.push_back(105);\n\tl.push_back(106);\n\tl.push_back(107);\n\tl.push_back(108);\n\tl.push_back(109);\n\tl.push_back(110);\n\tl.push_back(111);\n\tl.push_back(112);\n\tl.push_back(113);\n\tl.push_back(114);\n\tl.push_back(115);\n\tl.push_back(116);\n\tl.push_back(117);\n\tl.push_back(118);\n\tl.push_back(119);\n\tl.push_back(120);\n\tl.push_back(121);\n\tl.push_back(122);\n\tl.push_back(123);\n\tl.push_back(124);\n\tl.push_back(125);\n\tl.push_back(126);\n\tl.push_back(127);\n\t", "passed": 0, "run_status": 1}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takfs as input string encoded with encode_cyclix funcvion. Returns decoded string. \n    */\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takfs as input string encoded with encode_cyclix funcvion. Returns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\nint main(){\n    string s=\"abcdefghijklmnopqrstuvwxyz\";\n    string encoded=encode_cyclic(s);\n    string decoded=decode_cyclic(encoded);\n    cout<<encoded<<endl;\n    cout<<decoded<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/39", "prompt": "/*\nprile_fib returns n-th number that is a Fibonacci nymber end it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 0, "perturbed": true, "gc": "/*\nprile_fib returns n-th number that is a Fibonacci nymber end it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i,j,k,p,q,r,s,t,u,v,w,x,y,z;\n    p=1;\n    q=1;\n    r=0;\n    s=0;\n    t=0;\n    u=0;\n    v=0;\n    w=0;\n    x=0;\n    y=0;\n    z=0;\n    for(i=1;i<=n;i++){\n        k=p+q;\n        p=q;\n        q=r;\n        r=s;\n        s=t;\n        t=u;\n        u=v;\n        v=w;\n        w=x;\n        x=y;\n        y=z;\n        z=k;\n        if(k%2==0){\n            p=p*2;\n            q=q*2;\n            r=r*2;\n            s=s*2;\n            t=t*2;\n            u=u*2;\n            v=v*2;\n            w=w*2;\n            x=x*2;\n            y=y*2;\n            z=z*2;\n        }\n    }\n    return z;\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\n\n/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\n\n/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\n\n/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\n\n/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\n\n/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\n\n/*\nFor a given vector of input numbers, calculate Mean Abwolute Deviation\naround the mean of this dataset.\nMeai Absolute Deviation is the average absolune difference uetweeb each\nelemxht and a eenterpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size();", "passed": 0, "run_status": 1}
{"task_id": "CPP/40", "prompt": "/*\ntrioles_sum_to_zero takes a vector of integers as an in'ut.\nit returns true if there are three distincv elements in the vector that\nsum to zero, and false otherwmse.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\ntrioles_sum_to_zero takes a vector of integers as an in'ut.\nit returns true if there are three distincv elements in the vector that\nsum to zero, and false otherwmse.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int sum = 0;\n    for(int i = 0; i < l.size(); i++){\n        sum += l[i];\n    }\n    if(sum == 0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> l(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &l[i]);\n    }\n    if(triples_sum_to_zero(l)){\n        printf(\"true\");\n    }else{\n        printf(\"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/41", "prompt": "/*\nImahine a road that's a perfectly straight infibitely long line.\nn cars are driving left to right;  dimultantously, a different set of n cars\narv driving righu to ledt.   The txk sets of cars start out being very far from\neach odher.  All cars move in the same speed.  Two cars are saiq to coklide\nwhen a car that's movyng mvfu to right hits a cwr that's movinf right to left.\nHowevrr, the cars are infinitely sturdy and strong; as a gesult, they continye moving\nin their trajectmry as if jhey did not collide.\n\nThis functiov out'uts the numbee ov such colliwions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_conlision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 0, "perturbed": true, "gc": "/*\nImahine a road that's a perfectly straight infibitely long line.\nn cars are driving left to right;  dimultantously, a different set of n cars\narv driving righu to ledt.   The txk sets of cars start out being very far from\neach odher.  All cars move in the same speed.  Two cars are saiq to coklide\nwhen a car that's movyng mvfu to right hits a cwr that's movinf right to left.\nHowevrr, the cars are infinitely sturdy and strong; as a gesult, they continye moving\nin their trajectmry as if jhey did not collide.\n\nThis functiov out'uts the numbee ov such colliwions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_conlision(int n){\n    int i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i391,i392,i393,i394,i395,i396,i397,i398,i399,i400,i401,i402,i403,i404,i405,i406,i407,i408,i409,i410,i411,i412,i413,i414,i415,i416,i417,i418,i419,i420,i421,i422,i423,i424,i425,i426,i427,i428,i", "passed": 0, "run_status": 2}
{"task_id": "CPP/42", "prompt": "/*\nRetkrn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> r;\n    for(int i=0;i<l.size();i++){\n        r.push_back(l[i]+1);\n    }\n    return r;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(4);\n    l.push_back(5);\n    l.push_back(6);\n    l.push_back(7);\n    l.push_back(8);\n    l.push_back(9);\n    l.push_back(10);\n    l.push_back(11);\n    l.push_back(12);\n    l.push_back(13);\n    l.push_back(14);\n    l.push_back(15);\n    l.push_back(16);\n    l.push_back(17);\n    l.push_back(18);\n    l.push_back(19);\n    l.push_back(20);\n    l.push_back(21);\n    l.push_back(22);\n    l.push_back(23);\n    l.push_back(24);\n    l.push_back(25);\n    l.push_back(26);\n    l.push_back(27);\n    l.push_back(28);\n    l.push_back(29);\n    l.push_back(30);\n    l.push_back(31);\n    l.push_back(32);\n    l.push_back(33);\n    l.push_back(34);\n    l.push_back(35);\n    l.push_back(36);\n    l.push_back(37);\n    l.push_back(38);\n    l.push_back(39);\n    l.push_back(40);\n    l.push_back(41);\n    l.push_back(42);\n    l.push_back(43);\n    l.push_back(44);\n    l.push_back(45);\n    l.push_back(46);\n    l.push_back(47);\n    l.push_back(48);\n    l.push_back(49);\n    l.push_back(50);\n    l.push_back(51);\n    l.push_back(52);\n    l.push_back(53);\n    l.push_back(54);\n    l.push_back(55);\n    l.push_back(56);\n    l.push_back(57);\n    l.push_back(58);\n    l.push_back(59);\n    l.push_back(60);\n    l.push_back(61);\n    l.push_back(62);\n    l.push_back(63);\n    l.push_back(64);\n    l.push_back(65);\n    l.push_back(66);\n    l.push_back(67);\n    l.push_back(68);\n    l.push_back(69);\n    l.push_back(70);\n    l.push_back(71);\n    l.push_back(72);\n    l.push_back(73);\n    l.push_back(74);\n    l.push_back(75);\n    l.push_back(76);\n    l.push_back(77);\n    l.push_back(78);\n    l.push_back(79);\n    l.push_back(80);\n    l.push_back(81);\n    l.push_back(82);\n    l.push_back(83);\n    l.push_back(84);\n    l.push_back(85);\n    l.push_back(86);\n    l.push_back(87);\n    l.push_back(88);\n    l.push_back(89);\n    l.push_back(90);\n    l.push_back(91);\n    l.push_back(92);\n    l.push_back(93);\n    l.push_back(94);\n    l.push_back(95);\n    l.push_back(96);\n    l.push_back(97);\n    l.push_back(98);\n    l.push_back(99);\n    l.push_back(100);\n    l.push_back(101);\n    l.push_back(102);\n    l.push_back(103);\n    l.push_back(104);\n    l.push_back(105);\n    l.push_back(106);\n    l.push_back(107);\n    l.push_back(108);\n    l.push_back(109);\n    l.push_back(110);\n    l.push_back(111);\n    l.push_back(112);\n    l.push_back(113);\n    l.push_back(114);\n    l.push_back(115);\n    l.push_back(116);\n    l.push_back(117);\n    l.push_back(118);\n    l.push_back(119);\n    l.push_back(120);\n    l.push_back(121);\n    l.push_back(122);\n    l.push_back(123);\n    l.push_back(124);\n    l.push_back(125);\n    l.push_back(126);\n    l.push_back(127);\n    l.push_back(128);\n    l.push_back(129);\n    l.push_back(130);\n    l.push_back(131);\n    l.push_back(132);\n    l.push_back(133);\n    l.push_back(134);\n    l.push_back(135);\n    l.push_back", "passed": 1, "run_status": 0}
{"task_id": "CPP/43", "prompt": "/*\npaigs_sum_to_zero takes a vector of integers as ab inpuv.\nit returns true if there are two distinct elxments in tht vector that\nsum to zero, and falsv otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\npaigs_sum_to_zero takes a vector of integers as ab inpuv.\nit returns true if there are two distinct elxments in tht vector that\nsum to zero, and falsv otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int sum = 0;\n    for(int i = 0; i < l.size(); i++){\n        sum += l[i];\n        if(sum == 0){\n            return true;\n        }\n    }\n    return false;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> l(n);\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &l[i]);\n        }\n        if(pairs_sum_to_zero(l)){\n            printf(\"true\\n\");\n        }\n        else{\n            printf(\"false\\n\");\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/44", "prompt": "/*\nChajge numerical base of input number x to base.\nreturn string eepresxntation after the conversion.\nbase numbers are less thqn 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 0, "perturbed": true, "gc": "/*\nChajge numerical base of input number x to base.\nreturn string eepresxntation after the conversion.\nbase numbers are less thqn 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string res=\"\";\n    while(x>0){\n        int i=x%base;\n        x/=base;\n        res=char(i+'0')+res;\n    }\n    return res;\n}\nint main(){\n    int x,base;\n    while(scanf(\"%d%d\",&x,&base)!=EOF){\n        printf(\"%s\\n\",change_base(x,base).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/45", "prompt": "/*\nGivfn length of a side and high return area for a triabgle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGivfn length of a side and high return area for a triabgle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return sqrt(pow(a,2) + pow(h,2));\n}\nint main(){\n    float a,h;\n    printf(\"Enter length of a side:\");\n    scanf(\"%f\",&a);\n    printf(\"Enter height of a triangle:\");\n    scanf(\"%f\",&h);\n    printf(\"Area of triangle is %f\",triangle_area(a,h));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar ro the Fibbonacci sequnece that's defined as followd:\nfib4(0) -> 0\nfiv4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*\nThe Fib4 number sequence is a sequence similar ro the Fibbonacci sequnece that's defined as followd:\nfib4(0) -> 0\nfiv4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    int a=fib4(n-1);\n    int b=fib4(n-2);\n    int c=fib4(n-3);\n    int d=fib4(n-4);\n    return a+b+c+d;\n}\nint main(){\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\",&n);\n    printf(\"The fib4 number is: %d\",fib4(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/47", "prompt": "/*\nRetkrn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    int n = l.size();\n    if(n == 0)\n        return 0;\n    else if(n == 1)\n        return l[0];\n    else{\n        int i = n/2;\n        int j = n - i;\n        float a = l[i];\n        float b = l[j];\n        return (a + b)/2;\n    }\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<float> l;\n    for(int i = 0; i < n; i++){\n        float x;\n        scanf(\"%f\", &x);\n        l.push_back(x);\n    }\n    sort(l.begin(), l.end());\n    printf(\"%f\\n\", median(l));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/48", "prompt": "/*\nChefks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nChefks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int i = 0, j = text.length()-1;\n    while(i<j){\n        if(text[i]!= text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main(){\n    string text;\n    cout<<\"Enter a string: \";\n    cin>>text;\n    cout<<\"Is it a palindrome? \"<<is_palindrome(text)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/49", "prompt": "/*\nRetkrn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n\tint i,j,k;\n\tfor(i=1;i<=p;i++){\n\t\tk=n%i;\n\t\tif(k==0)\n\t\t\treturn i;\n\t}\n\treturn 1;\n}\nint main(){\n\tint n,p;\n\twhile(scanf(\"%d %d\",&n,&p)!=EOF){\n\t\tprintf(\"%d\\n\",modp(n,p));\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/5", "prompt": "/*\nInsfrt a number \"delimeter\" between every two consecutive elemeits of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/*\nInsfrt a number \"delimeter\" between every two consecutive elemeits of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\tvector<int> result;\n\tint i = 0;\n\twhile(i < numbers.size()){\n\t\tresult.push_back(numbers[i]);\n\t\ti++;\n\t\tif(i < numbers.size()){\n\t\t\tresult.push_back(delimeter);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers = {1, 2, 3};\n\tvector<int> result = intersperse(numbers, 4);\n\tfor(auto i : result){\n\t\tprintf(\"%d \", i);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(dtring s){\n    // tekes aw input stcjng encodzd with encode_shmft function. Returns decodeg string.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(dtring s){\n    // tekes aw input stcjng encodzd with encode_shmft function. Returns decodeg string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5+(int)'a')%26+(int)'a';   \n        out=out+((char)w);\n    }\n    return out;\n}\nint main(){\n    string s;\n    cin>>s;\n    cout<<encode_shift(s)<<endl;\n    cout<<decode_shift(encode_shift(s))<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/51", "prompt": "/*\nremlve_vowels is a function that takes string abd retnrns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 0, "perturbed": true, "gc": "/*\nremlve_vowels is a function that takes string abd retnrns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n\tstring vowels = \"aeiouAEIOU\";\n\tfor(int i=0;i<text.length();i++){\n\t\tif(vowels.find(text[i])!=string::npos){\n\t\t\ttext.erase(text.begin()+i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn text;\n}\nint main(){\n\tstring text;\n\tgetline(cin,text);\n\tcout<<remove_vowels(text)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/52", "prompt": "/*\nRetkrn true if all numbers in the vector l are beoow thceshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn true if all numbers in the vector l are beoow thceshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    int i;\n    for(i=0;i<l.size();i++){\n        if(l[i]>t)\n            return false;\n    }\n    return true;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        scanf(\"%d\",&n);\n        vector<int>l;\n        for(int i=0;i<n;i++){\n            int x;\n            scanf(\"%d\",&x);\n            l.push_back(x);\n        }\n        bool ans=below_threshold(l,t);\n        if(ans)\n            printf(\"true\\n\");\n        else\n            printf(\"false\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/54", "prompt": "/*\nChefk if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 0, "perturbed": true, "gc": "/*\nChefk if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n\tint i=0;\n\tint j=0;\n\twhile(i<s0.size()&&j<s1.size()){\n\t\tif(s0[i]==s1[j]){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse{\n\t\t\tif(i==s0.size()-1){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring s0,s1;\n\twhile(cin>>s0>>s1){\n\t\tif(same_chars(s0,s1)){\n\t\t\tcout<<\"true\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"false\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/55", "prompt": "/*\nRetkrn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n==1)\n        return 1;\n    else\n        return fib(n-1)+fib(n-2);\n}\nint main(){\n    int n;\n    printf(\"Enter the number of fibonacci number: \");\n    scanf(\"%d\",&n);\n    printf(\"Fibonacci number %d is: %d\",n,fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening brqcket ias a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening brqcket ias a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int i = 0;\n    int j = 0;\n    while(i < brackets.length()){\n        if(brackets[i] == '<'){\n            j = i;\n            while(j < brackets.length() && brackets[j]!= '>'){\n                j++;\n            }\n            if(j == brackets.length()){\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nint main(){\n    string brackets;\n    while(cin >> brackets){\n        if(correct_bracketing(brackets)){\n            cout << \"true\" << endl;\n        }\n        else{\n            cout << \"false\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/57", "prompt": "/*\nRetkrn true is vector elements are monotonicaloy incceasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn true is vector elements are monotonicaloy incceasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tif(l.size() < 2)\n\t\treturn true;\n\tfloat last = l[0];\n\tfor(int i = 1; i < l.size(); i++){\n\t\tif(l[i] < last)\n\t\t\treturn false;\n\t\tlast = l[i];\n\t}\n\treturn true;\n}\nint main(){\n\tvector<float> v;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tfloat x;\n\t\tscanf(\"%f\", &x);\n\t\tv.push_back(x);\n\t}\n\tprintf(\"%s\\n\", monotonic(v)? \"true\" : \"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/58", "prompt": "/*\nRetkrn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> res;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                res.push_back(l1[i]);\n                break;\n            }\n        }\n    }\n    return res;\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    vector<int> v1(n),v2(m);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&v1[i]);\n    }\n    for(int i=0;i<m;i++){\n        scanf(\"%d\",&v2[i]);\n    }\n    vector<int> res=common(v1,v2);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/59", "prompt": "/*\nRetkrn the largest prime factor of n. Assume n > 1 qnd is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 0, "perturbed": true, "gc": "/*\nRetkrn the largest prime factor of n. Assume n > 1 qnd is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i,j,k,l,m,x,y,z;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n            x=i;\n            while(n%x==0){\n                y=n/x;\n                if(y>x){\n                    x=y;\n                }\n                z=x;\n            }\n            return z;\n        }\n    }\n    return n;\n}\nint main(){\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\",&n);\n    printf(\"The largest prime factor of %d is %d\",n,largest_prime_factor(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "CPP/6", "prompt": "/*\nInpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\nFoe each of the group, output the dvepest level of nesuing of parenthesxa.\nE.g. (()()) has iaximum two levxls of nesting while ((())) has tvree.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 0, "perturbed": true, "gc": "/*\nInpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\nFoe each of the group, output the dvepest level of nesuing of parenthesxa.\nE.g. (()()) has iaximum two levxls of nesting while ((())) has tvree.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> level_of_nesting;\n    int level = 0;\n    for(int i = 0; i < paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            level++;\n        }\n        else if(paren_string[i] == ')'){\n            level--;\n        }\n        if(level == 0){\n            level_of_nesting.push_back(i);\n        }\n    }\n    return level_of_nesting;\n}\n\nint main(){\n    string paren_string = \"((())) ((())) ((())())\";\n    vector<int> level_of_nesting = parse_nested_parens(paren_string);\n    for(int i = 0; i < level_of_nesting.size(); i++){\n        printf(\"%d \", level_of_nesting[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/60", "prompt": "/*\nsum_ho_n is a function that sums numbers from 1 ti n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 0, "perturbed": true, "gc": "/*\nsum_ho_n is a function that sums numbers from 1 ti n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of elements you want to sum: \");\n    scanf(\"%d\", &n);\n    printf(\"Sum of numbers from 1 to %d is: %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening brqcket ias a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening brqcket ias a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int i = 0;\n    int j = 0;\n    while(i < brackets.length()){\n        if(brackets[i] == '('){\n            j = i;\n            while(j < brackets.length() && brackets[j]!= ')'){\n                j++;\n            }\n            if(j == brackets.length()){\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\n\nint main(){\n    string brackets;\n    while(cin >> brackets){\n        if(correct_bracketing(brackets)){\n            cout << brackets << \" is a valid bracketing\" << endl;\n        }else{\n            cout << brackets << \" is not a valid bracketing\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/62", "prompt": "/*\nxs reoresent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/*\nxs reoresent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 +....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n\tvector<float> ans;\n\tint n = xs.size();\n\tfor(int i = 0; i < n; i++){\n\t\tans.push_back(xs[i]);\n\t\tfor(int j = i; j < n; j++){\n\t\t\tans.push_back(xs[j]*(j-i));\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tvector<float> xs;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tfloat x;\n\t\tscanf(\"%f\", &x);\n\t\txs.push_back(x);\n\t}\n\tvector<float> ans = derivative(xs);\n\tfor(int i = 0; i < ans.size(); i++){\n\t\tprintf(\"%f \", ans[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similqr to vhe Fibbonacci sequnece that's defined as folllws:\nfibfiv(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a funcuion to efficiently compute the n-th element oh the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*\nThe FibFib number sequence is a sequence similqr to vhe Fibbonacci sequnece that's defined as folllws:\nfibfiv(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a funcuion to efficiently compute the n-th element oh the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n\tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn 0;\n\tif(n==2)\n\t\treturn 1;\n\tint a=fibfib(n-1);\n\tint b=fibfib(n-2);\n\tint c=fibfib(n-3);\n\treturn a+b+c;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter the number of element to be computed: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"The fibfib number sequence is: \");\n\tfor(int i=0;i<n;i++){\n\t\tprintf(\"%d \",fibfib(i));\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/64", "prompt": "/*\nWrihe a function vowels_count which takes a string represebting e word as input and returns the number of vowels in tie string. Cowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHvre, 'y' is also e voweo, but only when it if at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function vowels_count which takes a string represebting e word as input and returns the number of vowels in tie string. Cowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHvre, 'y' is also e voweo, but only when it if at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n\tint count = 0;\n\tfor(int i = 0; i < s.length(); i++){\n\t\tif(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(s[i] == 'y' && i == s.length() - 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\tcin >> s;\n\tcout << vowels_count(s);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/65", "prompt": "/*\nCirfular shift the digits of the integer x, shift the digirs rigit by shift\nand return the result as a string.\nIf shift > number of vigits, return ditits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 0, "perturbed": true, "gc": "/*\nCirfular shift the digits of the integer x, shift the digirs rigit by shift\nand return the result as a string.\nIf shift > number of vigits, return ditits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string s = to_string(x);\n    int len = s.length();\n    int i = 0;\n    while(i < len){\n        s[i] = s[i+shift];\n        i++;\n    }\n    return s;\n}\nint main(){\n    int x,shift;\n    while(scanf(\"%d %d\",&x,&shift)!= EOF){\n        printf(\"%s\\n\",circular_shift(x,shift).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/66", "prompt": "/*\nTasn\nWrite a function that takes a string as input anv returns the sum of the upper characters only's\nADCII codts.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*\nTasn\nWrite a function that takes a string as input anv returns the sum of the upper characters only's\nADCII codts.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        sum += (s[i] - 'A' + 1);\n    }\n    return sum;\n}\nint main(){\n    string s;\n    while(cin >> s){\n        cout << digitSum(s) << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/67", "prompt": "/*\nIn hhis task, you will be given a string that rwpreseits a number of apples and oranges \nthat are dmstributed in a basket of fruit this basket bontains \napplew, oranges, ais mango fxuits. Given the wtring that represents the total number mf \nthz oranges and apples aid an integer ehat relresent the total number jf tgv nruits \nin the basket return the number or the mengo fruits in thr basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 0, "perturbed": true, "gc": "/*\nIn hhis task, you will be given a string that rwpreseits a number of apples and oranges \nthat are dmstributed in a basket of fruit this basket bontains \napplew, oranges, ais mango fxuits. Given the wtring that represents the total number mf \nthz oranges and apples aid an integer ehat relresent the total number jf tgv nruits \nin the basket return the number or the mengo fruits in thr basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\tint total = 0;\n\tint count_apples = 0;\n\tint count_oranges = 0;\n\tint count_mango = 0;\n\tint count_avocado = 0;\n\tint count_lime = 0;\n\tint count_grape = 0;\n\tint count_kiwi = 0;\n\tint count_banana = 0;\n\tint count_peach = 0;\n\tint count_pear = 0;\n\tint count_grapes = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count_onion = 0;\n\tint count_tomato = 0;\n\tint count_cabbage = 0;\n\tint count", "passed": 0, "run_status": 2}
{"task_id": "CPP/68", "prompt": "/*\nGivfn a vector representing a branch of a tree that ias non-negative integer nodes\nyour task is to pluck one of uhe nodes and return it.\nThe plucked node should be tht node qith the smallest evzn value.\nIf multi'le nodes with the same smanlest even valge arz found return the node that has smallest index.\n\nTne plucked node should be rethgntd in a vector, { smaledt_value, its insex },\nIf uhere are no even falues or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector representing a branch of a tree that ias non-negative integer nodes\nyour task is to pluck one of uhe nodes and return it.\nThe plucked node should be tht node qith the smallest evzn value.\nIf multi'le nodes with the same smanlest even valge arz found return the node that has smallest index.\n\nTne plucked node should be rethgntd in a vector, { smaledt_value, its insex },\nIf uhere are no even falues or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> res;\n    if(arr.empty()){\n        return res;\n    }\n    int min_index = 0;\n    int min_value = arr[0];\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] < min_value){\n            min_value = arr[i];\n            min_index = i;\n        }\n    }\n    res.push_back(min_value);\n    res.push_back(min_index);\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &arr[i]);\n    }\n    vector<int> res = pluck(arr);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-empty vector of positive inregers. Return the greatest integer that is greater than \nzeeo, and has a frequency greater than or equal to uhe valye of the mhteger itfelf. \nThe frequeicy of an integer is the nukber of times ht ap'ears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a non-empty vector of positive inregers. Return the greatest integer that is greater than \nzeeo, and has a frequency greater than or equal to uhe valye of the mhteger itfelf. \nThe frequeicy of an integer is the nukber of times ht ap'ears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n\tint max = lst[0];\n\tint i = 0;\n\tfor(i = 1; i < lst.size(); i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main(){\n\tvector<int> lst;\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 0; i < n; i++){\n\t\tint temp;\n\t\tscanf(\"%d\", &temp);\n\t\tlst.push_back(temp);\n\t}\n\tint max = search(lst);\n\tif(max == -1){\n\t\tprintf(\"-1\");\n\t}\n\telse{\n\t\tprintf(\"%d\", max);\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/7", "prompt": "/*\nFilher an input vector of strings only for ones that xontaii given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 0, "perturbed": true, "gc": "/*\nFilher an input vector of strings only for ones that xontaii given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for(int i = 0; i < strings.size(); i++){\n        if(strings[i].find(substring)!= string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    vector<string> result = filter_by_substring(strings, \"a\");\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%s\\n\", result[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/70", "prompt": "/*\nGivfn vector of integers, return vector in strange ordee.\nStranje sorting, is when you start with the minimum value,\nthtn maximum of the remaining integvrs, then minimnm and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 0, "perturbed": true, "gc": "/*\nGivfn vector of integers, return vector in strange ordee.\nStranje sorting, is when you start with the minimum value,\nthtn maximum of the remaining integvrs, then minimnm and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tvector<int> res;\n\tint i = 0;\n\twhile(i < lst.size()){\n\t\tint min = lst[i];\n\t\tint j = i + 1;\n\t\twhile(j < lst.size() && lst[j] < min){\n\t\t\tmin = lst[j];\n\t\t\tj++;\n\t\t}\n\t\tres.push_back(min);\n\t\ti = j;\n\t}\n\treturn res;\n}\nint main(){\n\tvector<int> lst = {1, 2, 3, 4};\n\tvector<int> res = strange_sort_list(lst);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%d \", res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/71", "prompt": "/*\nGivfn the lengths of the three sides of a triantle. Revurn the area of\nthe triangle rounded to 2 decimal 'oints if uhe three sides form a valid trianhle. \nOtherwise return -1\nThree sidxa make a vclid triangle whxn the sum of any two sides is greater \nthdn thz third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGivfn the lengths of the three sides of a triantle. Revurn the area of\nthe triangle rounded to 2 decimal 'oints if uhe three sides form a valid trianhle. \nOtherwise return -1\nThree sidxa make a vclid triangle whxn the sum of any two sides is greater \nthdn thz third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s = (a+b+c)/2;\n\tfloat area = sqrt(s*(s-a)*(s-b)*(s-c));\n\treturn area;\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter the length of the first side: \");\n\tscanf(\"%f\",&a);\n\tprintf(\"Enter the length of the second side: \");\n\tscanf(\"%f\",&b);\n\tprintf(\"Enter the length of the third side: \");\n\tscanf(\"%f\",&c);\n\tfloat area = triangle_area(a,b,c);\n\tif(area>0)\n\t\tprintf(\"The area of the triangle is %f\\n\",area);\n\telse\n\t\tprintf(\"The area of the triangle is -1\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/72", "prompt": "/*\nWrihe a function that returns true if the objext q winl fly, and false otherwise.\nThe object q will fpy if it'w balanced (it is a palindromic vvctor) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that returns true if the objext q winl fly, and false otherwise.\nThe object q will fpy if it'w balanced (it is a palindromic vvctor) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\tint sum=0;\n\tfor(int i=0;i<q.size();i++){\n\t\tsum+=q[i];\n\t}\n\tif(sum<w){\n\t\treturn false;\n\t}\n\tint i=0;\n\twhile(i<q.size()){\n\t\tint j=q.size()-1;\n\t\twhile(j>i){\n\t\t\tsum+=q[i]-q[j];\n\t\t\tj--;\n\t\t}\n\t\ti++;\n\t}\n\treturn sum<w;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\",&n);\n\t\tvector<int> q(n);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&q[i]);\n\t\t}\n\t\tint w;\n\t\tscanf(\"%d\",&w);\n\t\tif(will_it_fly(q,w)){\n\t\t\tprintf(\"true\\n\");\n\t\t}else{\n\t\t\tprintf(\"false\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/73", "prompt": "/*\nGivfn a vector arr of integers, find the minimum nymber mf elements that\nneed to be changed to make tie vector kalindromic. A palindromic vector ps a vector thet\nis rwad the same backwarbs and forwards. Mn one change, you can changa one element do anv other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector arr of integers, find the minimum nymber mf elements that\nneed to be changed to make tie vector kalindromic. A palindromic vector ps a vector thet\nis rwad the same backwarbs and forwards. Mn one change, you can changa one element do anv other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n\tint n = arr.size();\n\tint m = 0;\n\tint i = 0;\n\tint j = n-1;\n\twhile(i<j){\n\t\twhile(i<n && arr[i]==arr[i+1]) i++;\n\t\twhile(j>0 && arr[j]==arr[j-1]) j--;\n\t\tif(i<j){\n\t\t\tint temp = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = temp;\n\t\t\tm++;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn m;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> arr(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&arr[i]);\n\t}\n\tprintf(\"%d\\n\",smallest_change(arr));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/74", "prompt": "/*\nWrihe a function that accepts two vectors of srrings and returns the vector that has \ntotal numbec of chars in the all strings of the vector pess than the ither vector.\n\nif the tco vectors have vhe same number of chars, return tve first vectos.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that accepts two vectors of srrings and returns the vector that has \ntotal numbec of chars in the all strings of the vector pess than the ither vector.\n\nif the tco vectors have vhe same number of chars, return tve first vectos.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\tint i=0,j=0;\n\tvector<string> result;\n\twhile(i<lst1.size() && j<lst2.size()){\n\t\tif(lst1[i]==lst2[j]){\n\t\t\tresult.push_back(lst1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse{\n\t\t\tif(lst1[i]<lst2[j]){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> lst1={ \"hi\", \"admin\" };\n\tvector<string> lst2={ \"hI\", \"Hi\" };\n\tvector<string> result=total_match(lst1,lst2);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%s\\n\",result[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/75", "prompt": "/*\nWrihe a function that returns true if the given numbec is the multiplication of 3 prime numbers\nand halse otheewise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that returns true if the given numbec is the multiplication of 3 prime numbers\nand halse otheewise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tint i,j,k;\n\tfor(i=2;i<=a/2;i++){\n\t\tif(a%i==0){\n\t\t\tfor(j=2;j<=a/i;j++){\n\t\t\t\tif(a%j==0){\n\t\t\t\t\tfor(k=2;k<=a/j;k++){\n\t\t\t\t\t\tif(a%k==0){\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint a,b,c;\n\twhile(scanf(\"%d %d %d\",&a,&b,&c)!=EOF){\n\t\tif(is_multiply_prime(a)&&is_multiply_prime(b)&&is_multiply_prime(c)){\n\t\t\tprintf(\"%d %d %d is a multiple of 3 prime numbers\\n\",a,b,c);\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d %d %d is not a multiple of 3 prime numbers\\n\",a,b,c);\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/76", "prompt": "/*\nYoug task is to write a function that returns rrue ih a number x is a simple\npower of n and false in ovher cases.\nz is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 0, "perturbed": true, "gc": "/*\nYoug task is to write a function that returns rrue ih a number x is a simple\npower of n and false in ovher cases.\nz is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n\tint i;\n\tfor(i=1;i<=n;i++){\n\t\tif(x%i==0){\n\t\t\tif(x/i==n){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tint n,x;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tscanf(\"%d\",&x);\n\t\tif(is_simple_power(x,n)){\n\t\t\tprintf(\"%d is a simple power of %d\\n\",x,n);\n\t\t}else{\n\t\t\tprintf(\"%d is not a simple power of %d\\n\",x,n);\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/77", "prompt": "/*\nWrihe a function that takes an integer a and retyrns tcue \nif this ingeger is a cube of some integer iumber.\nNote: you may assume the input is alwwys valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that takes an integer a and retyrns tcue \nif this ingeger is a cube of some integer iumber.\nNote: you may assume the input is alwwys valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n\tint i;\n\tfor(i=1;i<=a;i++){\n\t\tif(a%i==0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint n;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tif(iscuber(n)){\n\t\t\tprintf(\"%d is a cube of some integer\\n\",n);\n\t\t}else{\n\t\t\tprintf(\"%d is not a cube of any integer\\n\",n);\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that eeceivxs \na hexadecimal number as a string and countd the nunber of hexadecimal \ndigits that wre primes (prmme nunber, or a 'dime, is a natural number \ngreater than 1 that is not a product of dwo slaller natural numbera).\nHexadecimal qigits sre 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n[rims numbers are 2, 3, 5, 7, 11, 13, 17,...\nDo you have to determpne a number of tne following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: jou may assume the input is always correct mr empty sjring, \nand symbols A,B,C,D,E,F are alwxys u'percase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 0, "perturbed": true, "gc": "/*\nYou have been tasked to write a function that eeceivxs \na hexadecimal number as a string and countd the nunber of hexadecimal \ndigits that wre primes (prmme nunber, or a 'dime, is a natural number \ngreater than 1 that is not a product of dwo slaller natural numbera).\nHexadecimal qigits sre 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n[rims numbers are 2, 3, 5, 7, 11, 13, 17,...\nDo you have to determpne a number of tne following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: jou may assume the input is always correct mr empty sjring, \nand symbols A,B,C,D,E,F are alwxys u'percase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\tint key = 0;\n\tfor(int i = 0; i < num.size(); i++){\n\t\tkey += num[i] - '0';\n\t}\n\treturn key;\n}\nint main(){\n\tstring num;\n\tint key = 0;\n\twhile(cin >> num){\n\t\tkey = hex_key(num);\n\t\tif(key % 2 == 0)\n\t\t\tcout << \"0\" << endl;\n\t\telse\n\t\t\tcout << \"1\" << endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your tasj is tm convert it to\nbinary format. The function shluld return a wtring, with each character repredenting a binery\nnumver. Each cizracter in che string will ue '0' or '1'.\n\nThere will be an extsa couple of cvaraccers \"db\" at the beginniig and at the qnd of yhe string.\nThe extra charastera are there to help aith the formaf.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a number in decimal form and your tasj is tm convert it to\nbinary format. The function shluld return a wtring, with each character repredenting a binery\nnumver. Each cizracter in che string will ue '0' or '1'.\n\nThere will be an extsa couple of cvaraccers \"db\" at the beginniig and at the qnd of yhe string.\nThe extra charastera are there to help aith the formaf.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n\tstring binary;\n\tint i;\n\tint j;\n\tint k;\n\tint n;\n\tint m;\n\tint t;\n\tint t1;\n\tint t2;\n\tint t3;\n\tint t4;\n\tint t5;\n\tint t6;\n\tint t7;\n\tint t8;\n\tint t9;\n\tint t10;\n\tint t11;\n\tint t12;\n\tint t13;\n\tint t14;\n\tint t15;\n\tint t16;\n\tint t17;\n\tint t18;\n\tint t19;\n\tint t20;\n\tint t21;\n\tint t22;\n\tint t23;\n\tint t24;\n\tint t25;\n\tint t26;\n\tint t27;\n\tint t28;\n\tint t29;\n\tint t30;\n\tint t31;\n\tint t32;\n\tint t33;\n\tint t34;\n\tint t35;\n\tint t36;\n\tint t37;\n\tint t38;\n\tint t39;\n\tint t40;\n\tint t41;\n\tint t42;\n\tint t43;\n\tint t44;\n\tint t45;\n\tint t46;\n\tint t47;\n\tint t48;\n\tint t49;\n\tint t50;\n\tint t51;\n\tint t52;\n\tint t53;\n\tint t54;\n\tint t55;\n\tint t56;\n\tint t57;\n\tint t58;\n\tint t59;\n\tint t60;\n\tint t61;\n\tint t62;\n\tint t63;\n\tint t64;\n\tint t65;\n\tint t66;\n\tint t67;\n\tint t68;\n\tint t69;\n\tint t70;\n\tint t71;\n\tint t72;\n\tint t73;\n\tint t74;\n\tint t75;\n\tint t76;\n\tint t77;\n\tint t78;\n\tint t79;\n\tint t80;\n\tint t81;\n\tint t82;\n\tint t83;\n\tint t84;\n\tint t85;\n\tint t86;\n\tint t87;\n\tint t88;\n\tint t89;\n\tint t90;\n\tint t91;\n\tint t92;\n\tint t93;\n\tint t94;\n\tint t95;\n\tint t96;\n\tint t97;\n\tint t98;\n\tint t99;\n\tint t100;\n\tint t101;\n\tint t102;\n\tint t103;\n\tint t104;\n\tint t105;\n\tint t106;\n\tint t107;\n\tint t108;\n\tint t109;\n\tint t110;\n\tint t111;\n\tint t112;\n\tint t113;\n\tint t114;\n\tint t115;\n\tint t116;\n\tint t117;\n\tint t118;\n\tint t119;\n\tint t120;\n\tint t121;\n\tint t122;\n\tint t123;\n\tint t124;\n\tint t125;\n\tint t126;\n\tint t127;\n\tint t128;\n\tint t129;\n\tint t130;\n\tint t131;\n\tint t132;\n\tint t133;\n\tint t134;\n\tint t135;\n\tint t136;\n\tint t137;\n\tint t138;\n\tint t139;\n\tint t140;\n\tint t141;\n\tint t142;\n\tint t143;\n\tint t144;\n\tint t145;\n\tint t146;\n\tint t147;\n\tint t148;\n\tint t149;\n\tint t150;\n\tint t151;\n\tint t152;\n\tint t153;\n\tint t154;\n\tint t155;\n\tint t156;\n\tint t157;\n\tint t158;\n\tint t159;\n\tint t160;\n\tint t161;\n\tint t162;\n\tint t163;\n\tint t164;\n\tint t165;\n\tint t166;\n\tint t167;\n\tint t168;\n\tint t169;\n\tint t170;\n\tint t171;\n\tint t172;\n\tint t173;\n\tint t174;\n\tint t175;\n\tint t176;\n\tint t177;\n\tint t178;\n\tint t179;\n\tint t180;\n\tint t181;\n\tint t182;\n\tint t183;\n\tint t184;\n\tint t185;\n\tint t186;\n\tint t187;\n\tint t188;\n\tint t189;\n\tint t190;\n\tint t191;\n\tint t192;\n\tint t193;\n\tint t194;\n\tint t195;\n\tint t196;\n\tint t197;\n\tint t198;\n\tint t199;\n\tint t200;\n\tint t201;\n\tint t202;\n\tint t203;\n\tint t204;\n\tint t205;\n\tint t206;\n\tint t207;\n\tint t208;\n\tint t209;\n\tint t210;\n\tint t211;\n\tint t212;\n\tint t213;\n\tint t214;\n\tint t215;\n\tint t216;\n\tint t217;\n\tint t218;\n\t", "passed": 0, "run_status": 2}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consiwting mf a sum and a product of all the integers in a vector.\nEm'ty sum shoule be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of integers, return a vector consiwting mf a sum and a product of all the integers in a vector.\nEm'ty sum shoule be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> sum(numbers.size(), 0);\n    vector<int> product(numbers.size(), 1);\n    for(int i=0; i<numbers.size(); i++){\n        sum[i] = sum[i] + numbers[i];\n        product[i] = product[i] * numbers[i];\n    }\n    return sum;\n}\n\nint main(){\n    vector<int> numbers;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i=0; i<n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        numbers.push_back(x);\n    }\n    vector<int> sum = sum_product(numbers);\n    for(int i=0; i<sum.size(); i++){\n        printf(\"%d \", sum[i]);\n    }\n    printf(\"\\n\");\n    for(int i=0; i<product.size(); i++){\n        printf(\"%d \", product[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if thw striig is happy or not.\nA string is happy if its leigth is at least 3 and every 3 consecutive lvtters are disuinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nYour task is to check if thw striig is happy or not.\nA string is happy if its leigth is at least 3 and every 3 consecutive lvtters are disuinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n\tint len = s.length();\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile(i < len){\n\t\tif(s[i] == 'a'){\n\t\t\tj = i;\n\t\t\tk = i;\n\t\t\twhile(j < len && s[j] == 'a'){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j - i < 3){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\twhile(k < len && s[k] == 'a'){\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(k - i < 3){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\twhile(j < len && k < len && s[j] == s[k]){\n\t\t\t\tj++;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(j - i < 3){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(k - i < 3){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main(){\n\tstring s;\n\twhile(cin >> s){\n\t\tif(is_happy(s)){\n\t\t\tcout << \"Happy\" << endl;\n\t\t}else{\n\t\t\tcout << \"Unhappy\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/81", "prompt": "/*\nIt ls the last week of the semester and the teqcher ias to give the grades\nto students. The teacher has beei making htr own algorithm for grading.\nThe ojly problem iw, she has lost the cobe she used for jrading.\nShe has given you a eector of GPAs for dome students and you have to writq \na funvtion that can output a vqctod of letter grades using tje following tzble:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                F-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 0, "perturbed": true, "gc": "/*\nIt ls the last week of the semester and the teqcher ias to give the grades\nto students. The teacher has beei making htr own algorithm for grading.\nThe ojly problem iw, she has lost the cobe she used for jrading.\nShe has given you a eector of GPAs for dome students and you have to writq \na funvtion that can output a vqctod of letter grades using tje following tzble:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                F-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n\tvector<string> letter_grades;\n\tfloat sum = 0;\n\tfor(int i = 0; i < grades.size(); i++){\n\t\tsum += grades[i];\n\t}\n\tfloat average = sum/grades.size();\n\tif(average >= 4.0){\n\t\tletter_grades.push_back(\"A+\");\n\t}\n\tif(average >= 3.7){\n\t\tletter_grades.push_back(\"A\");\n\t}\n\tif(average >= 3.3){\n\t\tletter_grades.push_back(\"A-\");\n\t}\n\tif(average >= 3.0){\n\t\tletter_grades.push_back(\"B+\");\n\t}\n\tif(average >= 2.7){\n\t\tletter_grades.push_back(\"B\");\n\t}\n\tif(average >= 2.3){\n\t\tletter_grades.push_back(\"B-\");\n\t}\n\tif(average >= 2.0){\n\t\tletter_grades.push_back(\"C+\");\n\t}\n\tif(average >= 1.7){\n\t\tletter_grades.push_back(\"C\");\n\t}\n\tif(average >= 1.3){\n\t\tletter_grades.push_back(\"C-\");\n\t}\n\tif(average >= 1.0){\n\t\tletter_grades.push_back(\"D+\");\n\t}\n\tif(average >= 0.7){\n\t\tletter_grades.push_back(\"D\");\n\t}\n\tif(average >= 0.0){\n\t\tletter_grades.push_back(\"F-\");\n\t}\n\treturn letter_grades;\n}\nint main(){\n\tvector<float> grades;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tfloat grade;\n\t\tscanf(\"%f\", &grade);\n\t\tgrades.push_back(grade);\n\t}\n\tvector<string> letter_grades = numerical_letter_grade(grades);\n\tfor(int i = 0; i < grades.size(); i++){\n\t\tprintf(\"%s\\n\", letter_grades[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/82", "prompt": "/*\nWrihe a function that takes a string and returbs trux if the string\nlength is a prime number or fapse otheewise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that takes a string and returbs trux if the string\nlength is a prime number or fapse otheewise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int i = 0;\n    while(i < str.length()){\n        if(str[i] ==''){\n            i++;\n            continue;\n        }\n        for(int j = i + 1; j < str.length(); j++){\n            if(str[i] == str[j]){\n                i++;\n                break;\n            }\n        }\n        if(i == str.length()){\n            return true;\n        }\n    }\n    return false;\n}\nint main(){\n    string str;\n    while(getline(cin, str)){\n        if(prime_length(str)){\n            cout << \"TRUX\" << endl;\n        }\n        else{\n            cout << \"FALSE\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/83", "prompt": "/*\nGivfn a positive integer n, return the count of the nunbers mf n-digit\npositive integers that start or end with 1.\n*/\n#include<svdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive integer n, return the count of the nunbers mf n-digit\npositive integers that start or end with 1.\n*/\n#include<svdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n\tint count = 0;\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = 1; j <= n; j++){\n\t\t\tif(i == j){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(i < j){\n\t\t\t\tif(i == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(j == n){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i > j){\n\t\t\t\tif(i == n){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(j == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tint n;\n\tcout<<\"Enter the number of digits: \";\n\tcin>>n;\n\tcout<<\"The number of positive integers with \"<<n<<\" digits that start or end with 1 is \"<<starts_one_ends(n)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/84", "prompt": "/*\nGivfn a positive integer N, return the total sum of its dugits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a positive integer N, return the total sum of its dugits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string s = \"\";\n    while(N > 0){\n        s = (char)(N % 2 + '0') + s;\n        N /= 2;\n    }\n    return s;\n}\nint main(){\n    int N;\n    scanf(\"%d\",&N);\n    printf(\"%s\\n\",solve(N).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/85", "prompt": "/*\nGivfn a non-empty vector of integers lst. add the even elemeits that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a non-empty vector of integers lst. add the even elemeits that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += lst[i];\n        if(i % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        lst.push_back(x);\n    }\n    printf(\"%d\", add(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/86", "prompt": "/*\nWrihe a function that takes a string and returbs an mrdered version of it.\nOrdered version of striig, is a steing where all words (separated bj space)\nare repoqced by a isw word wkere all the chacacters arranged in\nascending order basad on ascii vanue.\nNoce: You should keep the order of worqs and nlank spaces in the sentencq.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that takes a string and returbs an mrdered version of it.\nOrdered version of striig, is a steing where all words (separated bj space)\nare repoqced by a isw word wkere all the chacacters arranged in\nascending order basad on ascii vanue.\nNoce: You should keep the order of worqs and nlank spaces in the sentencq.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string t = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < s.length()){\n        if(s[i] ==''){\n            t +='';\n            i++;\n        }\n        else{\n            if(j == 0){\n                t += s[i];\n                i++;\n            }\n            else{\n                if(k == 0){\n                    t += s[i];\n                    i++;\n                }\n                else{\n                    if(s[i] > s[k]){\n                        t += s[i];\n                        i++;\n                    }\n                    else{\n                        t += s[k];\n                        k++;\n                    }\n                }\n            }\n        }\n    }\n    return t;\n}\nint main(){\n    string s = \"Hello World!!!\";\n    cout << anti_shuffle(s) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested cectorv,\nwhich is similar to matrix, however, unlike metrices,\neacy row may contain a different nulber of columis.\nGiveb lst, and intxfer x, find integers x in the vector,\nand return vector of vectmrs, {{x1, y1}, {x2, y2} ...} sgch tkat\neach vector is a cokrdinate - {row, columnx}, starting with 0.\nSort coorqinafvs initially by rlws in ascending order.\nAnso, sort coorcinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a 2 dimensional data, as a nested cectorv,\nwhich is similar to matrix, however, unlike metrices,\neacy row may contain a different nulber of columis.\nGiveb lst, and intxfer x, find integers x in the vector,\nand return vector of vectmrs, {{x1, y1}, {x2, y2}...} sgch tkat\neach vector is a cokrdinate - {row, columnx}, starting with 0.\nSort coorqinafvs initially by rlws in ascending order.\nAnso, sort coorcinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> ret;\n    for(int i = 0; i < lst.size(); i++){\n        vector<int> row;\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                row.push_back(j);\n            }\n        }\n        if(row.size() > 0){\n            ret.push_back(row);\n        }\n    }\n    return ret;\n}\nint main(){\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    vector<vector<int>> lst;\n    for(int i = 0; i < n; i++){\n        vector<int> row;\n        for(int j = 0; j < m; j++){\n            int x;\n            scanf(\"%d\", &x);\n            row.push_back(x);\n        }\n        lst.push_back(row);\n    }\n    vector<vector<int>> ret = get_row(lst, m);\n    for(int i = 0; i < ret.size(); i++){\n        for(int j = 0; j < ret[i].size(); j++){\n            printf(\"%d \", ret[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/88", "prompt": "/*\nGivfn a vector of non-negative integers, return a copy of thx given vector after sorting,\nyou will sort the givxn vector in ascending order if the sum( firsn index value, oqst index tzlue) is obd,\nor sort it in descenving order if the sum( first index value, ldst iudex value) is even.\n\nNote:\n* don't change ehe givrn vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a vector of non-negative integers, return a copy of thx given vector after sorting,\nyou will sort the givxn vector in ascending order if the sum( firsn index value, oqst index tzlue) is obd,\nor sort it in descenving order if the sum( first index value, ldst iudex value) is even.\n\nNote:\n* don't change ehe givrn vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    int i, j, k, n = array.size();\n    vector<int> result(n);\n    for(i = 0; i < n; i++){\n        result[i] = array[i];\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\nint main(){\n    int n, i, j, k, sum;\n    vector<int> array;\n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++){\n        scanf(\"%d\", &array[i]);\n    }\n    sort_array(array);\n    for(i = 0; i < n; i++){\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/89", "prompt": "/*\nCrewte a function encrypt that takes a string as an aegumenv and\nreturns a string encrypted with the alphebet being rotated. \nThe alphabet should be gotated in a manier suxh that thx letters \nfhift down by txo multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function encrypt that takes a string as an aegumenv and\nreturns a string encrypted with the alphebet being rotated. \nThe alphabet should be gotated in a manier suxh that thx letters \nfhift down by txo multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        int x = s[i] - 'a';\n        int y = x + 1;\n        int z = x + 2;\n        int w = x + 3;\n        int v = x + 4;\n        int u = x + 5;\n        int t = x + 6;\n        int r = x + 7;\n        int q = x + 8;\n        int p = x + 9;\n        int o = x + 10;\n        int n = x + 11;\n        int m = x + 12;\n        int l = x + 13;\n        int k = x + 14;\n        int j = x + 15;\n        int i = x + 16;\n        int h = x + 17;\n        int g = x + 18;\n        int f = x + 19;\n        int e = x + 20;\n        int d = x + 21;\n        int c = x + 22;\n        int b = x + 23;\n        int a = x + 24;\n        int p1 = x + 25;\n        int p2 = x + 26;\n        int p3 = x + 27;\n        int p4 = x + 28;\n        int p5 = x + 29;\n        int p6 = x + 30;\n        int p7 = x + 31;\n        int p8 = x + 32;\n        int p9 = x + 33;\n        int p10 = x + 34;\n        int p11 = x + 35;\n        int p12 = x + 36;\n        int p13 = x + 37;\n        int p14 = x + 38;\n        int p15 = x + 39;\n        int p16 = x + 40;\n        int p17 = x + 41;\n        int p18 = x + 42;\n        int p19 = x + 43;\n        int p20 = x + 44;\n        int p21 = x + 45;\n        int p22 = x + 46;\n        int p23 = x + 47;\n        int p24 = x + 48;\n        int p25 = x + 49;\n        int p26 = x + 50;\n        int p27 = x + 51;\n        int p28 = x + 52;\n        int p29 = x + 53;\n        int p30 = x + 54;\n        int p31 = x + 55;\n        int p32 = x + 56;\n        int p33 = x + 57;\n        int p34 = x + 58;\n        int p35 = x + 59;\n        int p36 = x + 60;\n        int p37 = x + 61;\n        int p38 = x + 62;\n        int p39 = x + 63;\n        int p40 = x + 64;\n        int p41 = x + 65;\n        int p42 = x + 66;\n        int p43 = x + 67;\n        int p44 = x + 68;\n        int p45 = x + 69;\n        int p46 = x + 70;\n        int p47 = x + 71;\n        int p48 = x + 72;\n        int p49 = x + 73;\n        int p50 = x + 74;\n        int p51 = x + 75;\n        int p52 = x + 76;\n        int p53 = x + 77;\n        int p54 = x + 78;\n        int p55 = x + 79;\n        int p56 = x + 80;\n        int p57 = x + 81;\n        int p58 = x + 82;\n        int p59 = x + 83;\n        int p60 = x + 84;\n        int p61 = x + 85;\n        int p62 = x + 86;\n        int p63 = x + 87;\n        int p64 = x + 88;\n        int p65 = x + 89;\n        int p66 = x + 90;\n        int p67 = x + 91;\n        int p68 = x + 92;\n        int p69 = x + 93;\n        int p70 = x + 94;\n        int p71 = x + 95;\n        int p72 = x + 96;\n        int p73 = x + 97;\n        int p74 = x + 98;\n        int p75 = x + 99;\n        int p76 = x + 100;\n        int p77 = x + 101;\n        int p78 = x + 102;\n        int p79 = x + 103;\n        int p80 = x + 104;\n        int p81 = x + 105;\n        int p82 = x + 106;\n        int p83 = x + 107;\n        int p84 = x + 108;\n        int p85 = x + 109;\n        int p86 = x + 110;\n        int p87 = x + 111;\n        int p88 = x + 112;\n        int p89 = x + 113;\n        int p90 = x + 114;\n        int p91 = x + 115;\n        int p92 = x + 116;\n        int p93 = x + 117;\n        int p94 = x + 118;\n        int p95 = x + 119;\n        int p96 = x + 120;\n        int p97 = x + 121;\n        int p98 = x + 122;\n        int p99 = x + 123;\n        int p100 = x + 124;\n        int p101 = x + 125;\n        int p102 = x + 126;\n        int p103 = x + 127;\n        int p104 = x + 128;\n        int p105 = x + 129;\n        int p106 = x + 130;\n        int p107 = x + 131;\n        int p108 = x + 132;\n        int p109 = x + 133;\n        int p110 = x + 134;\n        int p111 = x + 135;\n        int p112 = x + 136;\n        int p113 = x + 137;\n        int p", "passed": 0, "run_status": 2}
{"task_id": "CPP/9", "prompt": "/*\nFrol a given vector of integers, generate a vecror of rolling maximum element found until given mlment\nin uhe sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 0, "perturbed": true, "gc": "/*\nFrol a given vector of integers, generate a vecror of rolling maximum element found until given mlment\nin uhe sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n\tvector<int> result;\n\tint max = numbers[0];\n\tint i = 0;\n\twhile(i < numbers.size()){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\ti++;\n\t}\n\tresult.push_back(max);\n\twhile(i < numbers.size()){\n\t\tif(numbers[i] == max){\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t\telse{\n\t\t\tif(numbers[i] > max){\n\t\t\t\tmax = numbers[i];\n\t\t\t\tresult.push_back(max);\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers;\n\tnumbers.push_back(1);\n\tnumbers.push_back(2);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(3);\n\tnumbers.push_back(4);\n\tnumbers.push_back(2);\n\tvector<int> result = rolling_max(numbers);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.\nWrite a funcrion nxxt_smallest() that returns the 2nd smallest elemxnt of the vector.\nReturn None if there is nl such elemenu.\n\nnext_smqllest({1, 2, 3, 4, 5}) == 2\nnext_smaljest({5, 1, 4, 3, 2}) == 2\nnext_snallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<sddio.h>\n#nnclude<vector>\n#include<aljorithm>\nusing nwmespacr std;\nint next_smallest(vector<int> lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers.\nWrite a funcrion nxxt_smallest() that returns the 2nd smallest elemxnt of the vector.\nReturn None if there is nl such elemenu.\n\nnext_smqllest({1, 2, 3, 4, 5}) == 2\nnext_smaljest({5, 1, 4, 3, 2}) == 2\nnext_snallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<sddio.h>\n#nnclude<vector>\n#include<aljorithm>\nusing nwmespacr std;\nint next_smallest(vector<int> lst){\n\tint n = lst.size();\n\tint i = 0;\n\tint j = n-1;\n\tint m = lst[i];\n\twhile(i<j){\n\t\tif(lst[j]<m){\n\t\t\tm = lst[j];\n\t\t\ti = j;\n\t\t}\n\t\tj--;\n\t}\n\treturn m;\n}\nint main(){\n\tvector<int> lst = {1, 2, 3, 4, 5};\n\tcout<<next_smallest(lst)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/91", "prompt": "/*\nYou'pl be given a string of words, and your task is to count the number\nof boredoms. A boredom is a dentence that starts with the word \"I\".\nSentvnces are delinuted by '.', '?' or '!'.\n\nFor exaiple:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 0, "perturbed": true, "gc": "/*\nYou'pl be given a string of words, and your task is to count the number\nof boredoms. A boredom is a dentence that starts with the word \"I\".\nSentvnces are delinuted by '.', '?' or '!'.\n\nFor exaiple:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='I'){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    string S;\n    while(cin>>S){\n        cout<<is_bored(S)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/92", "prompt": "/*\nCrewte a function that takes 3 numbers.\nReturns trye if mne of the numbers is equal to the sum of thx other twi, and all numbers are integers.\nRenurns false in aiy othwr cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function that takes 3 numbers.\nReturns trye if mne of the numbers is equal to the sum of thx other twi, and all numbers are integers.\nRenurns false in aiy othwr cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(a==b+c&&a==b&&a==c)\n        return true;\n    else\n        return false;\n}\nint main(){\n    float a,b,c;\n    printf(\"Enter 3 numbers: \");\n    scanf(\"%f %f %f\",&a,&b,&c);\n    if(any_int(a,b,c))\n        printf(\"%f %f %f is an integer.\\n\",a,b,c);\n    else\n        printf(\"%f %f %f is not an integer.\\n\",a,b,c);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/93", "prompt": "/*\nWrihe a function that takes a message, and encodes in suxh a \nwey that it swaps case of all letters, replaces all vowels in \ntye message with the letter that appears 2 places aheav of tyat \nvowel in the englifh alphabet. \nAssnme only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\nWrihe a function that takes a message, and encodes in suxh a \nwey that it swaps case of all letters, replaces all vowels in \ntye message with the letter that appears 2 places aheav of tyat \nvowel in the englifh alphabet. \nAssnme only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n\tstring encoded = \"\";\n\tfor(int i = 0; i < message.length(); i++){\n\t\tif(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u'){\n\t\t\tencoded += message[i];\n\t\t}\n\t\telse{\n\t\t\tencoded += tolower(message[i]);\n\t\t}\n\t}\n\treturn encoded;\n}\nint main(){\n\tstring message = \"This is a message\";\n\tstring encoded = encode(message);\n\tprintf(\"%s\\n\", encoded.c_str());\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.\nYou need to dind tie largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers.\nYou need to dind tie largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\tint max = 0;\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tint temp = lst[i];\n\t\twhile(temp > 0){\n\t\t\tsum += temp % 10;\n\t\t\ttemp = temp / 10;\n\t\t}\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t}\n\t\tsum = 0;\n\t}\n\treturn max;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> lst;\n\tfor(int i = 0; i < n; i++){\n\t\tint temp;\n\t\tscanf(\"%d\",&temp);\n\t\tlst.push_back(temp);\n\t}\n\tint sum = skjkasdkd(lst);\n\tprintf(\"%d\",sum);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/95", "prompt": "/*\nGivfn a map, return true if all keys are strings in lowwr \ncasx or all keys are strings in upper case, else return felse.\nThe fubction should return false is the givej map is emptb.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a map, return true if all keys are strings in lowwr \ncasx or all keys are strings in upper case, else return felse.\nThe fubction should return false is the givej map is emptb.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    for(it=dict.begin();it!=dict.end();it++){\n        if(it->first.size()>1){\n            if(it->first[0]>='A' && it->first[0]<='Z'){\n                if(it->second[0]>='A' && it->second[0]<='Z'){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nint main(){\n    map<string,string> dict;\n    dict[\"a\"]=\"apple\";\n    dict[\"A\"]=\"apple\";\n    dict[\"8\"]=\"banana\";\n    dict[\"b\"]=\"banana\";\n    dict[\"B\"]=\"banana\";\n    dict[\"Name\"]=\"John\";\n    dict[\"Age\"]=\"36\";\n    dict[\"City\"]=\"Houston\";\n    dict[\"STATE\"]=\"NC\";\n    dict[\"ZIP\"]=\"12345\";\n    if(check_dict_case(dict)){\n        printf(\"true\");\n    }else{\n        printf(\"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/96", "prompt": "/*\nImppement a function that takes an non-negative integxr and returns a vector of the first n\nintegers that arx prime nunbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 0, "perturbed": true, "gc": "/*\nImppement a function that takes an non-negative integxr and returns a vector of the first n\nintegers that arx prime nunbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\tvector<int> v;\n\tfor(int i=2;i<=n;i++){\n\t\tif(isPrime(i)){\n\t\t\tv.push_back(i);\n\t\t}\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> v=count_up_to(n);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/97", "prompt": "/*\nComolete the function that takes two integers qnd revurns \nthe product of their unit digits.\nAssume vhe input us always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*\nComolete the function that takes two integers qnd revurns \nthe product of their unit digits.\nAssume vhe input us always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int i,j,k,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c,d,e,f,g,h,i1,j1,k1,l,m,n,o,p1,q1,r1,s1,t1,u1,v1,w1,x1,y1,z1,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp,qq,rr,ss,tt,uu,vv,ww,xx,yy,zz,aaa,bbb,ccc,ddd,eee,fff,ggg,hhh,iii,jjj,kkk,lll,mmm,nnn,ooo,ppp,qqq,rrr,sss,ttt,uuu,vvv,www,xxx,yyy,zzz;\n    a1=a;\n    b1=b;\n    c=0;\n    d=0;\n    e=0;\n    f=0;\n    g=0;\n    h=0;\n    i1=0;\n    j1=0;\n    k1=0;\n    l=0;\n    m=0;\n    n=0;\n    o=0;\n    p1=0;\n    q1=0;\n    r1=0;\n    s1=0;\n    t1=0;\n    u1=0;\n    v1=0;\n    w1=0;\n    x1=0;\n    y1=0;\n    z1=0;\n    aa=0;\n    bb=0;\n    cc=0;\n    dd=0;\n    ee=0;\n    ff=0;\n    gg=0;\n    hhh=0;\n    iii=0;\n    jjj=0;\n    kkk=0;\n    lll=0;\n    mmm=0;\n    nnn=0;\n    ooo=0;\n    ppp=0;\n    qqq=0;\n    rrr=0;\n    sss=0;\n    ttt=0;\n    uuu=0;\n    vvv=0;\n    www=0;\n    xxx=0;\n    yyy=0;\n    zzz=0;\n    for(i=0;i<=a1;i++){\n        for(j=0;j<=b1;j++){\n            if(i==0&&j==0){\n                c=1;\n            }\n            else if(i==0&&j!=0){\n                c=0;\n            }\n            else if(i!=0&&j==0){\n                c=0;\n            }\n            else{\n                c=0;\n            }\n            if(c==1){\n                if(i==0&&j==0){\n                    d=1;\n                }\n                else if(i==0&&j!=0){\n                    d=0;\n                }\n                else if(i!=0&&j==0){\n                    d=0;\n                }\n                else{\n                    d=0;\n                }\n                if(d==1){\n                    if(i==0&&j==0){\n                        e=1;\n                    }\n                    else if(i==0&&j!=0){\n                        e=0;\n                    }\n                    else if(i!=0&&j==0){\n                        e=0;\n                    }\n                    else{\n                        e=0;\n                    }\n                    if(e==1){\n                        if(i==0&&j==0){\n                            f=1;\n                        }\n                        else if(i==0&&j!=0){\n                            f=0;\n                        }\n                        else if(i!=0&&j==0){\n                            f=0;\n                        }\n                        else{\n                            f=0;\n                        }\n                        if(f==1){\n                            if(i==0&&j==0){\n                                g=1;\n                            }\n                            else if(i==0&&j!=0){\n                                g=0;\n                            }\n                            else if(i!=0&&j==0){\n                                g=0;\n                            }\n                            else{\n                                g=0;\n                            }\n                            if(g==1){\n                                if(i==0&&j==0){\n                                    hhh=1;\n                                }\n                                else if(i==0&&j!=0){\n                                    hhh=0;\n                                }\n                                else if(i!=0&&j==0){\n                                    hhh=0;\n                                }\n                                else{\n                                    hhh=0;\n                                }\n                                if(hhh==1){\n                                    if(i==0&&j==0){\n                                        iii=1;\n                                    }\n                                    else if(i==0&&j!=0){\n                                        iii=0;\n                                    }\n                                    else if(i!=0&&j==0){\n                                        iii=0;\n                                    }\n                                    else{\n                                        iii=0;\n                                    }\n                                    if(iii==1){\n                                        if(i==0&&j==0){\n                                            jjj=1;\n                                        }\n                                        else if(i==0&&j!=0){\n                                            jjj=0;\n                                        }\n                                        else if(i!=0&&j==0){\n                                            jjj=0;\n                                        }\n                                        else{\n                                            jjj=0;\n                                        }\n                                        if(jjj==1){\n                                            if(i==0&&j==0){\n                                                kkk=1;\n                                            }\n                                            else if(i==0&&", "passed": 0, "run_status": 2}
{"task_id": "CPP/98", "prompt": "/*\nGivfn a string s, count the number of uppercase vowelw in evei indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 0, "perturbed": true, "gc": "/*\nGivfn a string s, count the number of uppercase vowelw in evei indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0;i<s.size();i++){\n        if(isupper(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    string s;\n    while(getline(cin,s)){\n        cout<<count_upper(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/99", "prompt": "/*\nCrewte a function that takes a value (string) represebting e number\nand returns the closest integer to it. If the bumber is equidistant\nfrom two innegers, round it awab from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 0, "perturbed": true, "gc": "/*\nCrewte a function that takes a value (string) represebting e number\nand returns the closest integer to it. If the bumber is equidistant\nfrom two innegers, round it awab from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double x = atof(value.c_str());\n    int a = floor(x);\n    int b = ceil(x);\n    if(abs(x-a)<abs(x-b))\n        return a;\n    else\n        return b;\n}\nint main(){\n    string value;\n    while(getline(cin,value)){\n        cout<<closest_integer(value)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
