{"task_id": "JavaScript/0", "prompt": "/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIVe = numbers.filter(n => n >= threshold);\n  const arE = numbers.filter(n => n <= threshold);\n  return gIVe.length === arE.length;\n};\n\n/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoS", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let closed_brackets = 0;\n  let current_string = '';\n  let current_char = '';\n  let current_index = 0;\n  let open_brackets_string = '';\n  let closed_brackets_string = '';\n  let open_brackets_index = 0;\n  let closed_brackets_index = 0;\n  while (current_index < paren_string.length) {\n    current_char = paren_string[current_index];\n    if (current_char === '(') {\n      open_brackets++;\n      open_brackets_string += current_char;\n      current_index++;\n    } else if (current_char === ')') {\n      closed_brackets++;\n      closed_brackets_string += current_char;\n      current_index++;\n    } else if (current_char ==='') {\n      if (open_brackets === 0) {\n        current_string += current_char;\n      } else if (closed_brackets === 0) {\n        current_group = [current_string];\n        groups.push(current_group);\n        current_string = '';\n      } else if (open_brackets === closed_brackets) {\n        current_group.push(current_string);\n        current_string = '';\n      } else {\n        current_string += current_char;\n      }\n    } else {\n      current_string += current_char;\n    }\n    current_index++;\n  }\n  if (open_brackets!== closed_brackets) {\n    throw new Error(`Brackets mismatch: ${open_brackets} open and ${closed_brackets} closed`);\n  }\n  return groups;\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest2 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest3 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest4 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest5 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest6 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest7 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest8 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest9 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest10 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest11 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest12 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest13 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest14 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n};\n\n/**\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsTest15 = () => {\n  expect(separateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindromicSubstring = '';\n  let longestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringLengthOfLongestPalindromicSubstring = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstring = '';\n  let longestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringLengthOfLongestPalindromicSubstring = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstring = '';\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLengthOfLongestPalindromicSubstring = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstring = '';\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLengthOfLongestPalindromicSubstring = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstring = '';\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLengthOfLongestPalindromicSubstring = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstring = '';\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLengthOfLongestPalindromicSubstring = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringLength = 0;\n  let longestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstringOfLongestPalindromicSubstring", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n    } else {\n      pile.push(pile[pile.length - 1] + 1);\n    }\n  }\n  return pile;\n};\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n    } else {\n      pile.push(pile[pile.length - 1] + 1);\n    }\n  }\n  return pile;\n};\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n    } else {\n      pile.push(pile[pile.length - 1] + 1);\n    }\n  }\n  return pile;\n};\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n    } else {\n      pile.push(pile[pile.length - 1] + 1);\n    }\n  }\n  return pile;\n};\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n    } else {\n      pile.push(pile[pile.length - 1] + 1);\n    }\n  }\n  return pile;\n};\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n    } else {\n      pile.push(pile[pile.length - 1] + 1);\n    }\n  }\n  return pile;\n};\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, fi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x\n}\n\n/*\n  THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return 1\n  }\n  return x", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  const nums = Array.from({ length: m }, (_, i) => i + 1);\n  const numsSum = nums.reduce((acc, cur) => acc + cur, 0);\n  const numsAvg = nums.reduce((acc, cur) => acc + cur) / nums.length;\n  return numsSum / numsAvg;\n};\n\n// 🚨 Do NOT change any of the code below this line 👇\n\nconst inputFileName = process.argv[2];\nconst outputFileName = process.argv[3];\n\nconst inputFileContents = fs.readFileSync(inputFileName);\nconst inputArray = inputFileContents.toString().split(\"\\n\");\n\nconst inputArrayWithComments = inputArray.map(line => {\n  const [,, nums] = line.match(/(\\d+)/g);\n  return nums;\n});\n\nconst inputArrayWithCommentsSorted = inputArrayWithComments.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUnique = inputArrayWithCommentsSorted.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSorted = inputArrayWithCommentsSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUnique = inputArrayWithCommentsSortedUniqueSorted.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUnique = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUnique.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUnique = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUnique.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.sort((a, b) => a - b);\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = inputArrayWithCommentsSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};\n\n/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};\n\n/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};\n\n/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};\n\n/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};\n\n/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};\n\n/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};\n\n/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigitsList = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (uniqueDigitsList.length < digit) {\n      uniqueDigitsList = uniqueDigitsList\n       .concat(digit);\n    } else {\n      uniqueDigitsList = uniqueDigitsList\n       .filter(y => y!== digit);\n    }\n  }\n  return uniqueDigitsList;\n};", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength9 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength10 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength11 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength12 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength13 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength14 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength15 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength16 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (item!== len) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nconst byLength17 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  arr.sort((a, b) => b - a)\n  const reversed = arr.reverse()\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    const item = reversed[i]\n    if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return acc + cur;\n    return acc;\n  }, 0);\n  return nums;\n};\n\n/*\n  wriTe a fuNCtioN sumNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> sumNums([]) == 0\n  >>> sumNums([-1, 11, -11]) == -1\n  >>> sumNums([1, 1, 2]) == 3\n  */\nconst sumNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return acc + cur;\n    return acc;\n  }, 0);\n  return nums;\n};\n\n/*\n  wriTe a fuNCtioN avgNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS an average oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> avgNums([]) == 0\n  >>> avgNums([-1, 11, -11]) == -1\n  >>> avgNums([1, 1, 2]) == 3\n  */\nconst avgNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return acc + cur;\n    return acc;\n  }, 0);\n  return nums / arr.length;\n};\n\n/*\n  wriTe a fuNCtioN minNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a minimum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> minNums([]) == 0\n  >>> minNums([-1, 11, -11]) == -1\n  >>> minNums([1, 1, 2]) == 3\n  */\nconst minNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return cur;\n    return acc;\n  }, 0);\n  return nums;\n};\n\n/*\n  wriTe a fuNCtioN maxNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a maximum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> maxNums([]) == 0\n  >>> maxNums([-1, 11, -11]) == -1\n  >>> maxNums([1, 1, 2]) == 3\n  */\nconst maxNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return cur;\n    return acc;\n  }, 0);\n  return nums;\n};\n\n/*\n  wriTe a fuNCtioN sumNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> sumNums([]) == 0\n  >>> sumNums([-1, 11, -11]) == -1\n  >>> sumNums([1, 1, 2]) == 3\n  */\nconst sumNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return acc + cur;\n    return acc;\n  }, 0);\n  return nums;\n};\n\n/*\n  wriTe a fuNCtioN avgNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS an average oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> avgNums([]) == 0\n  >>> avgNums([-1, 11, -11]) == -1\n  >>> avgNums([1, 1, 2]) == 3\n  */\nconst avgNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return acc + cur;\n    return acc;\n  }, 0);\n  return nums / arr.length;\n};\n\n/*\n  wriTe a fuNCtioN minNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a minimum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> minNums([]) == 0\n  >>> minNums([-1, 11, -11]) == -1\n  >>> minNums([1, 1, 2]) == 3\n  */\nconst minNums = (arr) => {\n  const nums = arr.reduce((acc, cur) => {\n    if (cur > 0) return cur;\n    return acc;\n  }, 0);\n  return nums;\n};\n\n/*\n  wriTe a fuNCtioN maxNums whIch TA", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2], ..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2],..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  \n  let n = arr.length;\n  \n  if(n === 0) return true;\n  \n  for(let i = 0; i < n; i++) {\n    \n    let temp = arr[i];\n    \n    for(let j = i; j < n; j++) {\n      \n      if(arr[j] > temp) {\n        \n        arr[j] = temp;\n        \n        for(let k = j; k < n; k++) {\n          \n          arr[k] = arr[k + 1];\n          \n        }\n        \n        arr[n] = temp;\n        \n        break;\n        \n      }\n      \n    }\n    \n  }\n  \n  return false;\n  \n};\n\n/*\n  \n  Write a function that takes an array of numbers and returns true if the\n  array contains no duplicates, otherwise return false.\n  \n  You may assume that the array does not contain any duplicate numbers.\n  \n  Examples:\n  \n  duplicates([1, 1, 2, 3]) → true\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicates([1, 2, 3, 1]) → false\n  duplicate", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ^ b.charCodeAt(i)\n    );\n  }\n  return resUt;\n};\n\n/**\n * stringXor2 XOR two strings a and b. inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor2('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ^ b.charCodeAt(i)\n    );\n  }\n  return resUt;\n};\n\n/**\n * stringXor3 XOR three strings a and b and c. inpUt are Three stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor3('010', '110', '001')\n  '100'\n  */\nconst stringXor3 = (a, b, c, d) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ^ b.charCodeAt(i) ^ c.charCodeAt(i)\n    );\n  }\n  return resUt;\n};\n\n/**\n * stringXor4 XOR four strings a and b and c and d. inpUt are Four stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor4('010', '110', '001', '011')\n  '100'\n  */\nconst stringXor4 = (a, b, c, d, e) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const dLen = d.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ^ b.charCodeAt(i) ^ c.charCodeAt(i) ^ d.charCodeAt(i)\n    );\n  }\n  return resUt;\n};\n\n/**\n * stringXor5 XOR five strings a and b and c and d and e. inpUt are Five stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor5('010', '110', '001', '011', '100')\n  '100'\n  */\nconst stringXor5 = (a, b, c, d, e, f) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const dLen = d.length;\n  const eLen = e.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ^ b.charCodeAt(i) ^ c.charCodeAt(i) ^ d.charCodeAt(i) ^ e.charCodeAt(i)\n    );\n  }\n  return resUt;\n};\n\n/**\n * stringXor6 XOR six strings a and b and c and d and e and f. inpUt are Six stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor6('010', '110', '001', '011', '100', '010')\n  '100'\n  */\nconst stringXor6 = (a, b, c, d, e, f, g) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const dLen = d.length;\n  const eLen = e.length;\n  const fLen = f.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ^ b.charCodeAt(i) ^ c.charCodeAt(i) ^ d.charCodeAt(i) ^ e.charCodeAt(i) ^ f.charCodeAt(i)\n    );\n  }\n  return resUt;\n};\n\n/**\n * stringXor7 XOR seven strings a and b and c and d and e and f and g. inpUt are Seven stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor7('010', '110', '001', '011', '100', '010', '011')\n  '100'\n  */\nconst stringXor7 = (a, b, c, d, e, f, g, h) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const dLen = d.length;\n  const eLen = e.length;\n  const fLen = f.length;\n  const gLen = g.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ^ b.charCodeAt(i) ^ c.charCodeAt(i) ^ d.charCodeAt(i) ^ e.charCodeAt(i) ^ f.charCodeAt(i) ^ g.charCodeAt(i)\n    );\n  }\n  return resUt;\n};\n\n/**\n * stringXor8 XOR eight strings a and b and c and d and e and f and g and h. inpUt are Eight stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor8('010', '110', '001', '011', '100', '010', '011', '010')\n  '100'\n  */\nconst stringXor8 = (a, b, c, d, e, f, g, h, i) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const dLen = d.length;\n  const eLen = e.length;\n  const fLen = f.length;\n  const gLen = g.length;\n  const hLen = h.length;\n  let resUt = '';\n  for (let i = 0; i < aLen; i++) {\n    resUt += String.fromCharCode(\n      a.charCodeAt(i) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  let exchanged = false;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] > lst2[j]) {\n      exchanged = true;\n      lst1[i] = lst1[i] - 1;\n      lst1[i] = lst1[i] + 1;\n      lst2[j] = lst2[j] - 1;\n      lst2[j] = lst2[j] + 1;\n    } else if (lst1[i] < lst2[j]) {\n      exchanged = true;\n      lst1[i] = lst1[i] + 1;\n      lst1[i] = lst1[i] - 1;\n      lst2[j] = lst2[j] + 1;\n      lst2[j] = lst2[j] - 1;\n    } else {\n      exchanged = true;\n      lst1[i] = lst1[i] + 1;\n      lst1[i] = lst1[i] - 1;\n      lst2[j] = lst2[j] + 1;\n      lst2[j] = lst2[j] - 1;\n    }\n    i++;\n    j++;\n  }\n  if (i < lst1.length) {\n    return \"NO\";\n  }\n  if (j < lst2.length) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perFORM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  let exchanged = false;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] > lst2[j]) {\n      exchanged = true;\n      lst1[i] = lst1[i] - 1;\n      lst1[i] = lst1[i] + 1;\n      lst2[j] = lst2[j] - 1;\n      lst2[j] = lst2[j] + 1;\n    } else if (lst1[i] < lst2[j]) {\n      exchanged = true;\n      lst1[i] = lst1[i] + 1;\n      lst1[i] = lst1[i] - 1;\n      lst2[j] = lst2[j] + 1;\n      lst2[j] = lst2[j] - 1;\n    } else {\n      exchanged = true;\n      lst1[i] = lst1[i] + 1;\n      lst1[i] = lst1[i] - 1;\n      lst2[j] = lst2[j] + 1;\n      lst2[j] = lst2[j] - 1;\n    }\n    i++;\n    j++;\n  }\n  if (i < lst1.length) {\n    return \"NO\";\n  }\n  if (j < lst2.length) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perFORM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  let exchanged = false;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] > lst2[j]) {\n      exchanged = true;\n      lst1[i] = lst1[i] - 1;\n      lst1[i] = lst1[i] + 1;\n      lst2[j] = lst2[j] - 1;\n      lst2[j] = lst2[j] + 1;\n    } else if (lst1[i] < lst2[j]) {\n      exchanged = true;\n      lst1[i] = lst1[i] + 1;\n      lst1[i] = lst1[i] - 1;\n      lst2[j] = lst2[j] + 1;\n      lst2[j] = lst2[j] - 1;\n    } else {\n      exchanged = true;\n      lst1[i] = lst1[i] + 1;\n      lst1[i] = lst1[i] - 1;\n      lst2[j] = lst2[j] + 1;\n      lst2[j] = lst2[j] - 1;\n    }\n    i++;\n    j++;\n  }\n  if (i < lst1.length) {\n    return \"NO\";\n  }\n  if (j < lst2.length) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perFORM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testArr = test.split(' ');\n  const histogram = {};\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n};\n\n/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testArr = test.split(' ');\n  const histogram = {};\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n};\n\n/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testArr = test.split(' ');\n  const histogram = {};\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n};\n\n/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testArr = test.split(' ');\n  const histogram = {};\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n};\n\n/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testArr = test.split(' ');\n  const histogram = {};\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n};\n\n/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testArr = test.split(' ');\n  const histogram = {};\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n};\n\n/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (i === s.length && j === c.length) {\n    return result.join('');\n  }\n  return result;\n};\n\n/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (i === s.length && j === c.length) {\n    return result.join('');\n  }\n  return result;\n};\n\n/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (i === s.length && j === c.length) {\n    return result.join('');\n  }\n  return result;\n};\n\n/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (i === s.length && j === c.length) {\n    return result.join('');\n  }\n  return result;\n};\n\n/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (i === s.length && j === c.length) {\n    return result.join('');\n  }\n  return result;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = lst.reduce((acc, cur) => {\n    const num = parseInt(cur, 10);\n    if (num % 2 === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return odds.map((num) => `the number of odd elements ${num} of the ${num} input.`);\n};\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = lst.reduce((acc, cur) => {\n    const num = parseInt(cur, 10);\n    if (num % 2 === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return odds.map((num) => `the number of odd elements ${num} of the ${num} input.`);\n};\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = lst.reduce((acc, cur) => {\n    const num = parseInt(cur, 10);\n    if (num % 2 === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return odds.map((num) => `the number of odd elements ${num} of the ${num} input.`);\n};\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = lst.reduce((acc, cur) => {\n    const num = parseInt(cur, 10);\n    if (num % 2 === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return odds.map((num) => `the number of odd elements ${num} of the ${num} input.`);\n};\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = lst.reduce((acc, cur) => {\n    const num = parseInt(cur, 10);\n    if (num % 2 === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return odds.map((num) => `the number of odd elements ${num} of the ${num} input.`);\n};\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4]) == 10\n  sumOfSubArrays([-1, -2, -3]) == 3\n  */\nconst sumOfSubArrays = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2) == 6\n  sumOfSubArrays([-1, -2, -3], 2) == 3\n  */\nconst sumOfSubArrays = (nums, sum) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 2) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 2) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 3) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 3) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2, sum3) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 4) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 4) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2, sum3, sum4) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 5) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 5) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2, sum3, sum4, sum5) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 6) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 6) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2, sum3, sum4, sum5, sum6) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 7) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 7) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2, sum3, sum4, sum5, sum6, sum7) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 8) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 8) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2, sum3, sum4, sum5, sum6, sum7, sum8) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4], 2, 9) == 6\n  sumOfSubArrays([-1, -2, -3], 2, 9) == 3\n  */\nconst sumOfSubArrays = (nums, sum, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill2 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill3 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  return words.slice(0, n).join(\" \");\n};\n\n// ===================================================================\n// === THE MAIN PROGRAM ===\n// ===================================================================\n\nconst main = () => {\n  const input = readLines(process.stdin);\n  const n = parseInt(input[0]);\n  const s = input[1];\n  const result = selectWords(s, n);\n  console.log(result);\n};\n\n// ===================================================================\n// === THE MAIN FUNCTION ===\n// ===================================================================\nmain();\n\n/*\n  Challenge 1\n  ------------\n  Write a program that reads a string and an integer n and prints out the \n  first n words in the string that have exactly n letters.\n  Examples:\n  Input:\n  Hello World\n  3\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  4\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  5\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  6\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  7\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  8\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  9\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  10\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  11\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  12\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  13\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  14\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  15\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  16\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  17\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  18\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  19\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  20\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  21\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  22\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  23\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  24\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  25\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  26\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  27\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  28\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  29\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  30\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  31\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  32\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  33\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  34\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  35\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  36\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  37\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  38\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  39\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  40\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  41\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  42\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  43\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  44\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  45\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  46\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  47\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  48\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  49\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  50\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  51\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  52\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  53\n  Output:\n  Hello\n  World\n  \n  Input:\n  Hello World\n  54\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\");\n  let vowelsArrLen = vowelsArr.length;\n  let vowelsArrIndex = 0;\n  let vowelsArrIndexMax = vowelsArrLen - 1;\n  let vowelsArrIndexMin = 0;\n  let vowelsArrIndexMinMax = vowelsArrLen - 2;\n  let vowelsArrIndexMaxMin = vowelsArrLen - 3;\n  let vowelsArrIndexMinMaxMin = vowelsArrLen - 4;\n  let vowelsArrIndexMaxMinMax = vowelsArrLen - 5;\n  let vowelsArrIndexMinMaxMinMax = vowelsArrLen - 6;\n  let vowelsArrIndexMaxMinMaxMin = vowelsArrLen - 7;\n  let vowelsArrIndexMinMaxMinMaxMin = vowelsArrLen - 8;\n  let vowelsArrIndexMaxMinMaxMinMax = vowelsArrLen - 9;\n  let vowelsArrIndexMinMaxMinMaxMinMax = vowelsArrLen - 10;\n  let vowelsArrIndexMaxMinMaxMinMaxMin = vowelsArrLen - 11;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMin = vowelsArrLen - 12;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMax = vowelsArrLen - 13;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 14;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMin = vowelsArrLen - 15;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 16;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 17;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 18;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArrLen - 19;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 20;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 21;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 22;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 23;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 24;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 25;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 26;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 27;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 28;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 29;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 30;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 31;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 32;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 33;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 34;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 35;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 36;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 37;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 38;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 39;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 40;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 41;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 42;\n  let vowelsArrIndexMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrLen - 43;\n  let vowelsArrIndexMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst[0]\n  const lst2 = lst[1]\n  const open = str.indexOf('(')\n  const close = str.indexOf(')')\n  const open2 = lst2[0].indexOf('(')\n  const close2 = lst2[0].indexOf(')')\n  const open3 = lst2[1].indexOf('(')\n  const close3 = lst2[1].indexOf(')')\n  if (open === -1 || close === -1 || open2 === -1 || close2 === -1 || open3 === -1 || close3 === -1) {\n    return 'No'\n  }\n  if (open > close && open2 > close2 && open3 > close3) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\n/* You Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst[0]\n  const lst2 = lst[1]\n  const open = str.indexOf('(')\n  const close = str.indexOf(')')\n  const open2 = lst2[0].indexOf('(')\n  const close2 = lst2[0].indexOf(')')\n  const open3 = lst2[1].indexOf('(')\n  const close3 = lst2[1].indexOf(')')\n  if (open === -1 || close === -1 || open2 === -1 || close2 === -1 || open3 === -1 || close3 === -1) {\n    return 'No'\n  }\n  if (open > close && open2 > close2 && open3 > close3) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\n/* You Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst[0]\n  const lst2 = lst[1]\n  const open = str.indexOf('(')\n  const close = str.indexOf(')')\n  const open2 = lst2[0].indexOf('(')\n  const close2 = lst2[0].indexOf(')')\n  const open3 = lst2[1].indexOf('(')\n  const close3 = lst2[1].indexOf(')')\n  if (open === -1 || close === -1 || open2 === -1 || close2 === -1 || open3 === -1 || close3 === -1) {\n    return 'No'\n  }\n  if (open > close && open2 > close2 && open3 > close3) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\n/* You Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst[0]\n  const lst2 = lst[1]\n  const open = str.indexOf('(')\n  const close = str.indexOf(')')\n  const open2 = lst2[0].indexOf('(')\n  const close2 = lst2[0].indexOf(')')\n  const open3 = lst2[1].indexOf('(')\n  const close3 = lst2[1].indexOf(')')\n  if (open === -1 || close === -1 || open2 === -1 || close2 === -1 || open3 === -1 || close3 === -1) {\n    return 'No'\n  }\n  if (open > close && open2 > close2 && open3 > close3) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\n/* You Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     if (strings[i].length > longest.length) {\n//       longest = strings[i];\n//     }\n//   }\n//   return longest;\n// };\n\n// const longest = (strings) => {\n//   let longest = strings[0];\n//   for (let i = 1; i < strings.length; i++) {\n//     ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const res = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === max) {\n      res.push(max);\n    }\n  }\n  return res;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const res = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === min) {\n      res.push(min);\n    }\n  }\n  return res;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The average of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst average = (arr, k) => {\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    res.push(sum / k);\n  }\n  return res;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The sum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sum = (arr, k) => {\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    res.push(sum);\n  }\n  return res;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The product of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-16, -24]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst product = (arr, k) => {\n  const res = [];\n  let product = 1;\n  for (let i = 0; i < k; i++) {\n    product *= arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    res.push(product);\n  }\n  return res;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The sum of k numbers in arr divided by k.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst averageDividedByK = (arr, k) => {\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    res.push(sum / k);\n  }\n  return res;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The sum of k numbers in arr divided by k.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sumDividedByK = (arr, k) => {\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    res.push(sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const result = arr.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  return result.slice(0, k);\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let colLatz = [];\n  let returNEd = [];\n  let currentTerm = 1;\n  let previousTerm = 1;\n  let currentTerm2 = 0;\n  let previousTerm2 = 0;\n  let currentTerm3 = 1;\n  let previousTerm3 = 1;\n  let currentTerm4 = 1;\n  let previousTerm4 = 1;\n  let currentTerm5 = 1;\n  let previousTerm5 = 1;\n  let currentTerm6 = 0;\n  let previousTerm6 = 0;\n  let currentTerm7 = 1;\n  let previousTerm7 = 1;\n  let currentTerm8 = 1;\n  let previousTerm8 = 1;\n  let currentTerm9 = 1;\n  let previousTerm9 = 1;\n  let currentTerm10 = 1;\n  let previousTerm10 = 1;\n  let currentTerm11 = 1;\n  let previousTerm11 = 1;\n  let currentTerm12 = 1;\n  let previousTerm12 = 1;\n  let currentTerm13 = 1;\n  let previousTerm13 = 1;\n  let currentTerm14 = 1;\n  let previousTerm14 = 1;\n  let currentTerm15 = 1;\n  let previousTerm15 = 1;\n  let currentTerm16 = 1;\n  let previousTerm16 = 1;\n  let currentTerm17 = 1;\n  let previousTerm17 = 1;\n  let currentTerm18 = 1;\n  let previousTerm18 = 1;\n  let currentTerm19 = 1;\n  let previousTerm19 = 1;\n  let currentTerm20 = 1;\n  let previousTerm20 = 1;\n  let currentTerm21 = 1;\n  let previousTerm21 = 1;\n  let currentTerm22 = 1;\n  let previousTerm22 = 1;\n  let currentTerm23 = 1;\n  let previousTerm23 = 1;\n  let currentTerm24 = 1;\n  let previousTerm24 = 1;\n  let currentTerm25 = 1;\n  let previousTerm25 = 1;\n  let currentTerm26 = 1;\n  let previousTerm26 = 1;\n  let currentTerm27 = 1;\n  let previousTerm27 = 1;\n  let currentTerm28 = 1;\n  let previousTerm28 = 1;\n  let currentTerm29 = 1;\n  let previousTerm29 = 1;\n  let currentTerm30 = 1;\n  let previousTerm30 = 1;\n  let currentTerm31 = 1;\n  let previousTerm31 = 1;\n  let currentTerm32 = 1;\n  let previousTerm32 = 1;\n  let currentTerm33 = 1;\n  let previousTerm33 = 1;\n  let currentTerm34 = 1;\n  let previousTerm34 = 1;\n  let currentTerm35 = 1;\n  let previousTerm35 = 1;\n  let currentTerm36 = 1;\n  let previousTerm36 = 1;\n  let currentTerm37 = 1;\n  let previousTerm37 = 1;\n  let currentTerm38 = 1;\n  let previousTerm38 = 1;\n  let currentTerm39 = 1;\n  let previousTerm39 = 1;\n  let currentTerm40 = 1;\n  let previousTerm40 = 1;\n  let currentTerm21 = 1;\n  let previousTerm21 = 1;\n  let currentTerm22 = 1;\n  let previousTerm22 = 1;\n  let currentTerm23 = 1;\n  let previousTerm23 = 1;\n  let currentTerm24 = 1;\n  let previousTerm24 = 1;\n  let currentTerm25 = 1;\n  let previousTerm25 = 1;\n  let currentTerm26 = 1;\n  let previousTerm26 = 1;\n  let currentTerm27 = 1;\n  let previousTerm27 = 1;\n  let currentTerm28 = 1;\n  let previousTerm28 = 1;\n  let currentTerm29 = 1;\n  let previousTerm29 = 1;\n  let currentTerm30 = 1;\n  let previousTerm30 = 1;\n  let currentTerm31 = 1;\n  let previousTerm31 = 1;\n  let currentTerm32 = 1;\n  let previousTerm32 = 1;\n  let currentTerm33 = 1;\n  let previousTerm33 = 1;\n  let currentTerm34 = 1;\n  let previousTerm34 = 1;\n  let currentTerm35 = 1;\n  let previousTerm35 = 1;\n  let currentTerm36 = 1;\n  let previousTerm36 = 1;\n  let currentTerm37 = 1;\n  let previousTerm37 = 1;\n  let currentTerm38 = 1;\n  let previousTerm38 = 1;\n  let currentTerm39 = 1;\n  let previousTerm39 = 1;\n  let currentTerm40 = 1;\n  let previousTerm40 = 1;\n  let currentTerm21 = 1;\n  let previousTerm21 = 1;\n  let currentTerm22 = 1;\n  let previousTerm22 = 1;\n  let currentTerm23 = 1;\n  let previousTerm23 = 1;\n  let currentTerm24 = 1;\n  let previousTerm24 = 1;\n  let currentTerm25 = 1;\n  let previousTerm25 = 1;\n  let currentTerm26 = 1;\n  let previousTerm26 = 1;\n  let currentTerm27 = 1;\n  let previousTerm27 = 1;\n  let currentTerm28 = 1;\n  let previousTerm28 = 1;\n  let currentTerm29 = 1;\n  let previousTerm29 = 1;\n  let currentTerm30 = 1;\n  let previousTerm30 = 1;\n  let currentTerm31 = 1;\n  let previousTerm31 = 1;\n  let currentTerm32 = 1;\n  let previousTerm32 = 1;\n  let currentTerm33 = 1;\n  let previousTerm33 = 1;\n  let currentTerm34 = 1;\n  let previousTerm34 = 1;\n  let currentTerm35 = 1;\n  let previousTerm35 = 1;\n  let currentTerm36 = 1;\n  let previousTerm36 = 1;\n  let currentTerm37 = 1;\n  let previousTerm37 = 1;\n  let currentTerm38 = 1;\n  let previousTerm38 = 1;\n  let currentTerm39 = 1;\n  let previousTerm39 = 1;\n  let currentTerm40 = 1;\n  let previousTerm40 = 1;\n  let currentTerm21 = 1;\n  let previousTerm21 = 1;\n  let currentTerm22 = 1;\n  let previousTerm22 = 1;\n  let currentTerm23 = 1;\n  let previousTerm23 = 1;\n  let currentTerm24 = 1;\n  let previousTerm24 = 1;\n  let currentTerm25 = 1;\n  let previousTerm25 = 1;\n  let currentTerm26 = 1;\n  let previousTerm26 = 1;\n  let currentTerm27 = 1;\n  let previousTerm27 = 1;\n  let currentTerm28 = 1;\n  let previousTerm28 = 1;\n  let currentTerm29 = 1;\n  let previousTerm29 = 1;\n  let currentTerm30 = 1;\n  let previousTerm30 = 1;\n  let currentTerm31 = 1;\n  let previousTerm31 = 1;\n  let currentTerm32 = 1;\n  let previousTerm32 = 1;\n  let currentTerm33 = 1;\n  let previousTerm33 = 1;\n  let currentTerm34 = 1;\n  let previousTerm34 = 1;\n  let currentTerm35 = 1;\n  let previousTerm35 = 1;\n  let currentTerm36 = 1;\n  let previousTerm36 = 1;\n  let currentTerm37 = 1;\n  let previousTerm37 = 1;\n  let currentTerm38 = 1;\n  let previousTerm38 = 1;\n  let currentTerm39", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArray2 = date.split('/');\n  const dateArray3 = date.split('.');\n  const dateArray4 = date.split('/');\n  const dateArray5 = date.split('-');\n  const dateArray6 = date.split('/');\n  const dateArray7 = date.split('.');\n  const dateArray8 = date.split('/');\n  const dateArray9 = date.split('-');\n  const dateArray10 = date.split('/');\n  const dateArray11 = date.split('.');\n  const dateArray12 = date.split('/');\n  const dateArray13 = date.split('-');\n  const dateArray14 = date.split('/');\n  const dateArray15 = date.split('.');\n  const dateArray16 = date.split('/');\n  const dateArray17 = date.split('-');\n  const dateArray18 = date.split('/');\n  const dateArray19 = date.split('.');\n  const dateArray20 = date.split('/');\n  const dateArray21 = date.split('-');\n  const dateArray22 = date.split('/');\n  const dateArray23 = date.split('.');\n  const dateArray24 = date.split('/');\n  const dateArray25 = date.split('-');\n  const dateArray26 = date.split('/');\n  const dateArray27 = date.split('.');\n  const dateArray28 = date.split('/');\n  const dateArray29 = date.split('-');\n  const dateArray30 = date.split('/');\n  const dateArray31 = date.split('.');\n  const dateArray32 = date.split('/');\n  const dateArray33 = date.split('-');\n  const dateArray34 = date.split('/');\n  const dateArray35 = date.split('.');\n  const dateArray36 = date.split('/');\n  const dateArray37 = date.split('-');\n  const dateArray38 = date.split('/');\n  const dateArray39 = date.split('.');\n  const dateArray40 = date.split('/');\n  const dateArray41 = date.split('-');\n  const dateArray42 = date.split('/');\n  const dateArray43 = date.split('.');\n  const dateArray44 = date.split('/');\n  const dateArray45 = date.split('-');\n  const dateArray46 = date.split('/');\n  const dateArray47 = date.split('.');\n  const dateArray48 = date.split('/');\n  const dateArray49 = date.split('-');\n  const dateArray50 = date.split('/');\n  const dateArray51 = date.split('.');\n  const dateArray52 = date.split('/');\n  const dateArray53 = date.split('-');\n  const dateArray54 = date.split('/');\n  const dateArray55 = date.split('.');\n  const dateArray56 = date.split('/');\n  const dateArray57 = date.split('-');\n  const dateArray58 = date.split('/');\n  const dateArray59 = date.split('.');\n  const dateArray60 = date.split('/');\n  const dateArray61 = date.split('-');\n  const dateArray62 = date.split('/');\n  const dateArray63 = date.split('.');\n  const dateArray64 = date.split('/');\n  const dateArray65 = date.split('-');\n  const dateArray66 = date.split('/');\n  const dateArray67 = date.split('.');\n  const dateArray68 = date.split('/');\n  const dateArray69 = date.split('-');\n  const dateArray70 = date.split('/');\n  const dateArray71 = date.split('.');\n  const dateArray72 = date.split('/');\n  const dateArray73 = date.split('-');\n  const dateArray74 = date.split('/');\n  const dateArray75 = date.split('.');\n  const dateArray76 = date.split('/');\n  const dateArray77 = date.split('-');\n  const dateArray78 = date.split('/');\n  const dateArray79 = date.split('.');\n  const dateArray80 = date.split('/');\n  const dateArray81 = date.split('-');\n  const dateArray82 = date.split('/');\n  const dateArray83 = date.split('.');\n  const dateArray84 = date.split('/');\n  const dateArray85 = date.split('-');\n  const dateArray86 = date.split('/');\n  const dateArray87 = date.split('.');\n  const dateArray88 = date.split('/');\n  const dateArray89 = date.split('-');\n  const dateArray90 = date.split('/');\n  const dateArray91 = date.split('.');\n  const dateArray92 = date.split('/');\n  const dateArray93 = date.split('-');\n  const dateArray94 = date.split('/');\n  const dateArray95 = date.split('.');\n  const dateArray96 = date.split('/');\n  const dateArray97 = date.split('-');\n  const dateArray98 = date.split('/');\n  const dateArray99 = date.split('.');\n  const dateArray100 = date.split('/');\n  const dateArray101 = date.split('-');\n  const dateArray102 = date.split('/');\n  const dateArray103 = date.split('.');\n  const dateArray104 = date.split('/');\n  const dateArray105 = date.split('-');\n  const dateArray106 = date.split('/');\n  const dateArray107 = date.split('.');\n  const dateArray108 = date.split('/');\n  const dateArray109 = date.split('-');\n  const dateArray110 = date.split('/');\n  const dateArray111 = date.split('.');\n  const dateArray112 = date.split('/');\n  const dateArray113 = date.split('-');\n  const dateArray114 = date.split('/');\n  const dateArray115 = date.split('.');\n  const dateArray116 = date.split('/');\n  const dateArray117 = date.split('-');\n  const dateArray118 = date.split('/');\n  const dateArray119 = date.split('.');\n  const date", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1, ... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1,... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const splitted = txt.split(/(\\s)/);\n  return splitted.filter(Boolean);\n};\n\n/**\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String -> String\n * splitWordsOnCommas :: String ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true;\n  const first = lst[0];\n  const last = lst[lst.length - 1];\n  for (let i = 1; i < lst.length - 1; i++) {\n    if (lst[i] < first || lst[i] > last) return false;\n  }\n  return true;\n};\n\n/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true;\n  const first = lst[0];\n  const last = lst[lst.length - 1];\n  for (let i = 1; i < lst.length - 1; i++) {\n    if (lst[i] < first || lst[i] > last) return false;\n  }\n  return true;\n};\n\n/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true;\n  const first = lst[0];\n  const last = lst[lst.length - 1];\n  for (let i = 1; i < lst.length - 1; i++) {\n    if (lst[i] < first || lst[i] > last) return false;\n  }\n  return true;\n};\n\n/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true;\n  const first = lst[0];\n  const last = lst[lst.length - 1];\n  for (let i = 1; i < lst.length - 1; i++) {\n    if (lst[i] < first || lst[i] > last) return false;\n  }\n  return true;\n};\n\n/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true;\n  const first = lst[0];\n  const last = lst[lst.length - 1];\n  for (let i = 1; i < lst.length - 1; i++) {\n    if (lst[i] < first || lst[i] > last) return false;\n  }\n  return true;\n};\n\n/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true;\n  const first = lst[0];\n  const last = lst[lst.length - 1];\n  for (let i = 1; i < lst.length - 1; i++) {\n    if (lst[i] < first || lst[i] > last) return false;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let interval1Start = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End = interval2[1];\n  if (interval1Start > interval2Start) {\n    interval1Start = interval2Start;\n  }\n  if (interval1End < interval2End) {\n    interval1End = interval2End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End) {\n    return \"YES\";\n  }\n  if (interval2Start === interval2End) {\n    return \"YES\";\n  }\n  let intersectionStart = Math.max(interval1Start, interval2Start);\n  let intersectionEnd = Math.min(interval1End, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return \"YES\";\n  }\n  if (isPrime(intersectionStart - intersectionEnd)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n/*\n  Given two intervals, determine whether their intersection is a prime number.\n  Example, interval1 = (1, 3) and interval2 = (2, 4) the intersection is (2, 3)\n  which its length is 1, which is not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n*/\nconst isPrime = (interval1, interval2) => {\n  let interval1Start = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End = interval2[1];\n  if (interval1Start > interval2Start) {\n    interval1Start = interval2Start;\n  }\n  if (interval1End < interval2End) {\n    interval1End = interval2End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return false;\n  }\n  if (interval1Start === interval1End) {\n    return true;\n  }\n  if (interval2Start === interval2End) {\n    return true;\n  }\n  let intersectionStart = Math.max(interval1Start, interval2Start);\n  let intersectionEnd = Math.min(interval1End, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return true;\n  }\n  if (isPrime(intersectionStart - intersectionEnd)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given two intervals, determine whether their intersection is a prime number.\n  Example, interval1 = (1, 3) and interval2 = (2, 4) the intersection is (2, 3)\n  which its length is 1, which is not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n*/\nconst isPrime = (interval1, interval2) => {\n  let interval1Start = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End = interval2[1];\n  if (interval1Start > interval2Start) {\n    interval1Start = interval2Start;\n  }\n  if (interval1End < interval2End) {\n    interval1End = interval2End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return false;\n  }\n  if (interval1Start === interval1End) {\n    return true;\n  }\n  if (interval2Start === interval2End) {\n    return true;\n  }\n  let intersectionStart = Math.max(interval1Start, interval2Start);\n  let intersectionEnd = Math.min(interval1End, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return true;\n  }\n  if (isPrime(intersectionStart - intersectionEnd)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given two intervals, determine whether their intersection is a prime number.\n  Example, interval1 = (1, 3) and interval2 = (2, 4) the intersection is (2, 3)\n  which its length is 1, which is not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n*/\nconst isPrime = (interval1, interval2) => {\n  let interval1Start = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End = interval2[1];\n  if (interval1Start > interval2Start) {\n    interval1Start = interval2Start;\n  }\n  if (interval1End < interval2End) {\n    interval1End = interval2End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return false;\n  }\n  if (interval1Start === interval1End) {\n    return true;\n  }\n  if (interval2Start === interval2End) {\n    return true;\n  }\n  let intersectionStart = Math.max(interval1Start, interval2Start);\n  let intersectionEnd = Math.min(interval1End, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return true;\n  }\n  if (isPrime(intersectionStart - intersectionEnd)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given two intervals, determine whether their intersection is a prime number.\n  Example, interval1 = (1, 3) and interval2 = (2, 4) the intersection is (2, 3)\n  which its length is 1, which is not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n*/\nconst isPrime = (interval1, interval2) => {\n  let interval1Start = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End = interval2[1];\n  if (interval1Start > interval2Start) {\n    interval1Start = interval2Start;\n  }\n  if (interval1End < interval2End) {\n    interval1End = interval2End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return false;\n  }\n  if (interval1Start === interval1End) {\n    return true;\n  }\n  if (interval2Start === interval2End) {\n    return true;\n  }\n  let intersectionStart = Math.max(interval1Start, interval2Start);\n  let intersectionEnd = Math.min(interval1End, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return true;\n  }\n  if (isPrime(intersectionStart - intersectionEnd)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given two intervals, determine whether their intersection is a prime number.\n  Example, interval1 = (1, 3) and interval2 = (2, 4) the intersection", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sign = sign * arr[i]\n  }\n  return sign\n}\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const path = [];\n  const visited = [];\n  const visitedCopy = [...visited];\n  const pathCopy = [...path];\n  const minPathCopy = [...path];\n\n  const minPath = (grid, k) => {\n    const N = grid.length;\n    const gridCopy = [...grid];\n    const path = [];\n    const visited = [];\n    const visitedCopy = [...visited];\n    const pathCopy = [...path];\n    const minPathCopy = [...path];\n\n    for (let i = 0; i < N; i++) {\n      visitedCopy.push(i);\n      pathCopy.push(i);\n    }\n\n    for (let i = 0; i < N; i++) {\n      const currentCell = gridCopy[i];\n      const currentCellIndex = currentCell[0];\n      const currentCellValue = currentCell[1];\n\n      for (let j = 0; j < N; j++) {\n        const nextCell = gridCopy[j];\n        const nextCellIndex = nextCell[0];\n        const nextCellValue = nextCell[1];\n\n        if (currentCellIndex === nextCellIndex) {\n          continue;\n        }\n\n        const currentCellIsVisited = visitedCopy.includes(currentCellIndex);\n        const nextCellIsVisited = visitedCopy.includes(nextCellIndex);\n\n        if (currentCellIsVisited || nextCellIsVisited) {\n          continue;\n        }\n\n        const currentCellIsNotVisited =!visitedCopy.includes(currentCellIndex);\n        const nextCellIsNotVisited =!visitedCopy.includes(nextCellIndex);\n\n        if (currentCellIsNotVisited && nextCellIsNotVisited) {\n          continue;\n        }\n\n        const currentCellIsLessThanNextCell = currentCellValue < nextCellValue;\n\n        if (currentCellIsLessThanNextCell) {\n          visitedCopy.push(currentCellIndex);\n          pathCopy.push(currentCellIndex);\n          minPathCopy.push(currentCellValue);\n        }\n      }\n    }\n\n    if (minPathCopy.length < k) {\n      return minPathCopy;\n    }\n\n    return minPathCopy.slice(0, k);\n  };\n\n  return minPath(gridCopy, k);\n};\n\nconst minPath2 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const path = [];\n  const visited = [];\n  const visitedCopy = [...visited];\n  const pathCopy = [...path];\n  const minPathCopy = [...path];\n\n  const minPath = (grid, k) => {\n    const N = grid.length;\n    const gridCopy = [...grid];\n    const path = [];\n    const visited = [];\n    const visitedCopy = [...visited];\n    const pathCopy = [...path];\n    const minPathCopy = [...path];\n\n    for (let i = 0; i < N; i++) {\n      visitedCopy.push(i);\n      pathCopy.push(i);\n    }\n\n    for (let i = 0; i < N; i++) {\n      const currentCell = gridCopy[i];\n      const currentCellIndex = currentCell[0];\n      const currentCellValue = currentCell[1];\n\n      for (let j = 0; j < N; j++) {\n        const nextCell = gridCopy[j];\n        const nextCellIndex = nextCell[0];\n        const nextCellValue = nextCell[1];\n\n        if (currentCellIndex === nextCellIndex) {\n          continue;\n        }\n\n        const currentCellIsVisited = visitedCopy.includes(currentCellIndex);\n        const nextCellIsVisited = visitedCopy.includes(nextCellIndex);\n\n        if (currentCellIsVisited || nextCellIsVisited) {\n          continue;\n        }\n\n        const currentCellIsNotVisited =!visitedCopy.includes(currentCellIndex);\n        const nextCellIsNotVisited =!visitedCopy.includes(nextCellIndex);\n\n        if (currentCellIsNotVisited && nextCellIsNotVisited) {\n          continue;\n        }\n\n        const currentCellIsLessThanNextCell = currentCellValue < nextCellValue;\n\n        if (currentCellIsLessThanNextCell) {\n          visitedCopy.push(currentCellIndex);\n          pathCopy.push(currentCellIndex);\n          minPathCopy.push(currentCellValue);\n        }\n      }\n    }\n\n    if (minPathCopy.length < k) {\n      return minPathCopy;\n    }\n\n    return minPathCopy.slice(0, k);\n  };\n\n  return minPath(gridCopy, k);\n};\n\nconst minPath3 = (grid, k) => {\n  const N = grid.length;\n  const gridCopy = [...grid];\n  const path = [];\n  const visited = [];\n  const visitedCopy = [...visited];\n  const pathCopy = [...path];\n  const minPathCopy = [...path];\n\n  const minPath = (grid, k) => {\n    const N = grid.length;\n    const gridCopy = [...grid];\n    const path = [];\n    const visited = [];\n    const visitedCopy = [...visited];\n    const pathCopy = [...path];\n    const minPathCopy = [...path];\n\n    for (let i = 0; i < N; i++) {\n      visitedCopy.push(i);\n      pathCopy.push(i);\n    }\n\n    for (let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())\n * leastCommonMultiple(7, new Set())\n * leastCommonMultiple(7, new WeakMap())\n * leastCommonMultiple(7, new WeakSet())\n *\n * @param {any} a The first value.\n * @param {any} b The second value.\n * @returns {any} The least common multiple of a and b.\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())\n * leastCommonMultiple(7, new Set())\n * leastCommonMultiple(7, new WeakMap())\n * leastCommonMultiple(7, new WeakSet())\n *\n * @param {any} a The first value.\n * @param {any} b The second value.\n * @returns {any} The least common multiple of a and b.\n */\nconst leastCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())\n * leastCommonMultiple(7, new Set())\n * leastCommonMultiple(7, new WeakMap())\n * leastCommonMultiple(7, new WeakSet())\n *\n * @param {any} a The first value.\n * @param {any} b The second value.\n * @returns {any} The least common multiple of a and b.\n */\nconst leastCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())\n * leastCommonMultiple(7, new Set())\n * leastCommonMultiple(7, new WeakMap())\n * leastCommonMultiple(7, new WeakSet())\n *\n * @param {any} a The first value.\n * @param {any} b The second value.\n * @returns {any} The least common multiple of a and b.\n */\nconst leastCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())\n * leastCommonMultiple(7, new Set())\n * leastCommonMultiple(7, new WeakMap())\n * leastCommonMultiple(7, new WeakSet())\n *\n * @param {any} a The first value.\n * @param {any} b The second value.\n * @returns {any} The least common multiple of a and b.\n */\nconst leastCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())\n * leastCommonMultiple(7, new Set())\n * leastCommonMultiple(7, new WeakMap())\n * leastCommonMultiple(7, new WeakSet())\n *\n * @param {any} a The first value.\n * @param {any} b The second value.\n * @returns {any} The least common multiple of a and b.\n */\nconst leastCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())\n * leastCommonMultiple(7, new Set())\n * leastCommonMultiple(7, new WeakMap())\n * leastCommonMultiple(7, new WeakSet())\n *\n * @param {any} a The first value.\n * @param {any} b The second value.\n * @returns {any} The least common multiple of a and b.\n */\nconst leastCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b.\n * If no common multiple exists, then return null.\n *\n * Examples:\n * leastCommonMultiple(7, 3)\n * leastCommonMultiple(7, 6)\n * leastCommonMultiple(7, 9)\n * leastCommonMultiple(7, 0)\n * leastCommonMultiple(7, null)\n * leastCommonMultiple(7, undefined)\n * leastCommonMultiple(7, [])\n * leastCommonMultiple(7, {})\n * leastCommonMultiple(7, new Map())", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let triArr = [];\n  let triNum = 1;\n  for (let i = 1; i <= n; i++) {\n    triArr.push(triNum);\n    triNum += (i / 2);\n  }\n  return triArr;\n};\n\n// TESTS\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(15));\nconsole.log(tri(20));\nconsole.log(tri(25));\nconsole.log(tri(30));\nconsole.log(tri(35));\nconsole.log(tri(50));\nconsole.log(tri(100));\nconsole.log(tri(200));\nconsole.log(tri(300));\nconsole.log(tri(400));\nconsole.log(tri(500));\nconsole.log(tri(600));\nconsole.log(tri(700));\nconsole.log(tri(800));\nconsole.log(tri(900));\nconsole.log(tri(1000));\nconsole.log(tri(1100));\nconsole.log(tri(1200));\nconsole.log(tri(1300));\nconsole.log(tri(1400));\nconsole.log(tri(1500));\nconsole.log(tri(1600));\nconsole.log(tri(1700));\nconsole.log(tri(1800));\nconsole.log(tri(1900));\nconsole.log(tri(2000));\nconsole.log(tri(2100));\nconsole.log(tri(2200));\nconsole.log(tri(2300));\nconsole.log(tri(2400));\nconsole.log(tri(2500));\nconsole.log(tri(2600));\nconsole.log(tri(2700));\nconsole.log(tri(2800));\nconsole.log(tri(2900));\nconsole.log(tri(3000));\nconsole.log(tri(3100));\nconsole.log(tri(3200));\nconsole.log(tri(3300));\nconsole.log(tri(3400));\nconsole.log(tri(3500));\nconsole.log(tri(3600));\nconsole.log(tri(3700));\nconsole.log(tri(3800));\nconsole.log(tri(3900));\nconsole.log(tri(4100));\nconsole.log(tri(4200));\nconsole.log(tri(4300));\nconsole.log(tri(4400));\nconsole.log(tri(4500));\nconsole.log(tri(4600));\nconsole.log(tri(4700));\nconsole.log(tri(4800));\nconsole.log(tri(4900));\nconsole.log(tri(5000));\nconsole.log(tri(5100));\nconsole.log(tri(5200));\nconsole.log(tri(5300));\nconsole.log(tri(5400));\nconsole.log(tri(5500));\nconsole.log(tri(5600));\nconsole.log(tri(5700));\nconsole.log(tri(5800));\nconsole.log(tri(5900));\nconsole.log(tri(6000));\nconsole.log(tri(6100));\nconsole.log(tri(6200));\nconsole.log(tri(6300));\nconsole.log(tri(6400));\nconsole.log(tri(6500));\nconsole.log(tri(6600));\nconsole.log(tri(6700));\nconsole.log(tri(6800));\nconsole.log(tri(6900));\nconsole.log(tri(7000));\nconsole.log(tri(7100));\nconsole.log(tri(7200));\nconsole.log(tri(7300));\nconsole.log(tri(7400));\nconsole.log(tri(7500));\nconsole.log(tri(7600));\nconsole.log(tri(7700));\nconsole.log(tri(7800));\nconsole.log(tri(7900));\nconsole.log(tri(8000));\nconsole.log(tri(8100));\nconsole.log(tri(8200));\nconsole.log(tri(8300));\nconsole.log(tri(8400));\nconsole.log(tri(8500));\nconsole.log(tri(8600));\nconsole.log(tri(8700));\nconsole.log(tri(8800));\nconsole.log(tri(8900));\nconsole.log(tri(9000));\nconsole.log(tri(9100));\nconsole.log(tri(9200));\nconsole.log(tri(9300));\nconsole.log(tri(9400));\nconsole.log(tri(9500));\nconsole.log(tri(9600));\nconsole.log(tri(9700));\nconsole.log(tri(9800));\nconsole.log(tri(9900));\nconsole.log(tri(10000));\nconsole.log(tri(11000));\nconsole.log(tri(12000));\nconsole.log(tri(13000));\nconsole.log(tri(14000));\nconsole.log(tri(15000));\nconsole.log(tri(16000));\nconsole.log(tri(17000));\nconsole.log(tri(18000));\nconsole.log(tri(19000));\nconsole.log(tri(20000));\nconsole.log(tri(21000));\nconsole.log(tri(22000));\nconsole.log(tri(23000));\nconsole.log(tri(24000));\nconsole.log(tri(25000));\nconsole.log(tri(26000));\nconsole.log(tri(27000));\nconsole.log(tri(28000));\nconsole.log(tri(29000));\nconsole.log(tri(3000));\nconsole.log(tri(31000));\nconsole.log(tri(32000));\nconsole.log(tri(33000));\nconsole.log(tri(34000));\nconsole.log(tri(35000));\nconsole.log(tri(36000));\nconsole.log(tri(37000));\nconsole.log(tri(38000));\nconsole.log(tri(39000));\nconsole.log(tri(41000));\nconsole.log(tri(42000));\nconsole.log(tri(43000));\nconsole.log(tri(44000));\nconsole.log(tri(45000));\nconsole.log(tri(46000));\nconsole.log(tri(47000));\nconsole.log(tri(48000));\nconsole.log(tri(49000));\nconsole.log(tri(5000));\nconsole.log(tri(51000));\nconsole.log(tri(52000));\nconsole.log(tri(53000));\nconsole.log(tri(54000));\nconsole.log(tri(55000));\nconsole.log(tri(56000));\nconsole.log(tri(57000));\nconsole.log(tri(58000));\nconsole.log(tri(59000));\nconsole.log(tri(6000));\nconsole.log(tri(61000));\nconsole.log(tri(62000));\nconsole.log(tri(63000));\nconsole.log(tri(64000));\nconsole.log(tri(65000));\nconsole.log(tri(66000));\nconsole.log(tri(67000));\nconsole.log(tri(68000));\nconsole.log(tri(69000));\nconsole.log(tri(7000));\nconsole.log(tri(71000));\nconsole.log(tri(72000));\nconsole.log(tri(73000));\nconsole.log(tri(74000));\nconsole.log(tri(75000));\nconsole.log(tri(76000));\nconsole.log(tri(77000));\nconsole.log(tri(78000));\nconsole.log(tri(79000));\nconsole.log(tri(8000));\nconsole.log(tri(81000));\nconsole.log(tri(82000));\nconsole.log(tri(83000));\nconsole.log(tri(84000));\nconsole.log(tri(85000));\nconsole.log(tri(86000));\nconsole.log(tri(87000));\nconsole.log(tri(88000));\nconsole.log(tri(89000));\nconsole.log(tri(9000));\nconsole.log(tri(91000));\nconsole.log(tri(92000));\nconsole.log(tri(9300", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddEvenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst evenOddEvenOddEvenOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*GIveN a posITive IntEgeR n, return The pRoDUCT OF ThE EVEN digits.\n  REtuRN 0 if all digits aR", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  const regexpassed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ce", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === min) {\n    return -1;\n  }\n  return max - min;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch2 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch3 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch4 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch5 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch6 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch7 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch8 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch9 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index if the target is\n * found. If not, return the index where it would be if it were inserted in the\n * sorted array.\n * @param {Array} arr - sorted array\n * @param {any} target - target value\n * @return {number} - index\n */\nconst binarySearch10 = (arr, target) => {\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = lst.reduce(\n    (acc, cur) => (cur > acc? cur : acc),\n    Number.MAX_SAFE_INTEGER\n  );\n  return [smallest, largest];\n};\n\n/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = lst.reduce(\n    (acc, cur) => (cur > acc? cur : acc),\n    Number.MAX_SAFE_INTEGER\n  );\n  return [smallest, largest];\n};\n\n/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = lst.reduce(\n    (acc, cur) => (cur > acc? cur : acc),\n    Number.MAX_SAFE_INTEGER\n  );\n  return [smallest, largest];\n};\n\n/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = lst.reduce(\n    (acc, cur) => (cur > acc? cur : acc),\n    Number.MAX_SAFE_INTEGER\n  );\n  return [smallest, largest];\n};\n\n/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = lst.reduce(\n    (acc, cur) => (cur > acc? cur : acc),\n    Number.MAX_SAFE_INTEGER\n  );\n  return [smallest, largest];\n};\n\n/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = lst.reduce(\n    (acc, cur) => (cur > acc? cur : acc),\n    Number.MAX_SAFE_INTEGER\n  );\n  return [smallest, largest];\n};\n\n/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = lst.reduce(\n    (acc, cur) => (cur > acc? cur : acc),\n    Number.MAX_SAFE_INTEGER\n  );\n  return [smallest, largest];\n};\n\n/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE . Or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n  if (a === b) return nULl;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\n/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareTwo(1, 2.5) ➞ -1\n  compareTwo(1, \"2,3\") ➞ -1\n  compareTwo(\"5,1\", \"6\") ➞ 1\n  compareTwo(\"1\", 1) ➞ 0\n  */\ncoNst compareTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\n/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareThree(1, 2.5) ➞ 1\n  compareThree(1, \"2,3\") ➞ 1\n  compareThree(\"5,1\", \"6\") ➞ 1\n  compareThree(\"1\", 1) ➞ 0\n  */\ncoNst compareThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n\n/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareFour(1, 2.5) ➞ 1\n  compareFour(1, \"2,3\") ➞ 1\n  compareFour(\"5,1\", \"6\") ➞ 1\n  compareFour(\"1\", 1) ➞ 0\n  */\ncoNst compareFour = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n\n/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareFive(1, 2.5) ➞ 1\n  compareFive(1, \"2,3\") ➞ 1\n  compareFive(\"5,1\", \"6\") ➞ 1\n  compareFive(\"1\", 1) ➞ 0\n  */\ncoNst compareFive = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n\n/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareSix(1, 2.5) ➞ 1\n  compareSix(1, \"2,3\") ➞ 1\n  compareSix(\"5,1\", \"6\") ➞ 1\n  compareSix(\"1\", 1) ➞ 0\n  */\ncoNst compareSix = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n\n/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareSeven(1, 2.5) ➞ 1\n  compareSeven(1, \"2,3\") ➞ 1\n  compareSeven(\"5,1\", \"6\") ➞ 1\n  compareSeven(\"1\", 1) ➞ 0\n  */\ncoNst compareSeven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  return sumOdd === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumOdd === n && sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumOdd === n && sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumOdd === n && sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenEvenOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumOdd === n && sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenEvenEvenOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumOdd === n && sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenEvenEvenEvenOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumOdd === n && sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEvenEvenEvenEvenEvenOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 1) && curr\n  }, 0)\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    return acc + (i % 2 === 0) && curr\n  }, 0)\n  return sumOdd === n && sumEven === n\n}\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive odd nuMBers\n  Example\n  isEqualToSumOdd(4) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter.\n  \n  Examples:\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  >>> factorial(-1)\n  1\n  >>> factorial(0)\n  1\n*/\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the fibonacci number of\n  a number given as a parameter.\n  \n  Examples:\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(-1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(5)\n  5\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  Write a function that will calculate the fibonacci number\n  of a number given as a parameter.\n  \n  Examples:\n  >>> fibonacciRecursive(10)\n  55\n  >>> fibonacciRecursive(100)\n  354224848179261915075\n  >>> fibonacciRecursive(-1)\n  1\n  >>> fibonacciRecursive(0)\n  0\n*/\nconst fibonacciRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/')\n  ['ab', 'abc']\n  */\nconst allPrefixesWithTrailingSlash = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/def')\n  ['ab', 'abc', 'abc/', 'abc/def']\n  */\nconst allPrefixesWithTrailingSlashAndSubstring = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/def/ghi')\n  ['ab', 'abc', 'abc/', 'abc/def', 'abc/def/ghi']\n  */\nconst allPrefixesWithTrailingSlashAndSubstringAndSubstring = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/def/ghi/jkl')\n  ['ab', 'abc', 'abc/', 'abc/def', 'abc/def/ghi', 'abc/def/ghi/', 'abc/def/ghi/jkl', 'abc/def/ghi/jkl/']\n  */\nconst allPrefixesWithTrailingSlashAndSubstringAndSubstringAndSubstring = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/def/ghi/jkl/mno')\n  ['ab', 'abc', 'abc/', 'abc/def', 'abc/def/ghi', 'abc/def/ghi/', 'abc/def/ghi/jkl', 'abc/def/ghi/jkl/', 'abc/def/ghi/jkl/mno']\n  */\nconst allPrefixesWithTrailingSlashAndSubstringAndSubstringAndSubstringAndSubstring = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/def/ghi/jkl/mno/pqr')\n  ['ab', 'abc', 'abc/', 'abc/def', 'abc/def/ghi', 'abc/def/ghi/', 'abc/def/ghi/jkl', 'abc/def/ghi/jkl/', 'abc/def/ghi/jkl/mno', 'abc/def/ghi/jkl/mno/', 'abc/def/ghi/jkl/mno/pqr']\n  */\nconst allPrefixesWithTrailingSlashAndSubstringAndSubstringAndSubstringAndSubstringAndSubstring = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/def/ghi/jkl/mno/pqr//stu')\n  ['ab', 'abc', 'abc/', 'abc/def', 'abc/def/ghi', 'abc/def/ghi/', 'abc/def/ghi/jkl', 'abc/def/ghi/jkl/', 'abc/def/ghi/jkl/mno', 'abc/def/ghi/jkl/mno/', 'abc/def/ghi/jkl/mno/pqr', 'abc/def/ghi/jkl/mno/pqr//', 'abc/def/ghi/jkl/mno/pqr//stu']\n  */\nconst allPrefixesWithTrailingSlashAndSubstringAndSubstringAndSubstringAndSubstringAndSubstringAndSubstring = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"/\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* retUrn list of ALl prEfiXes FRoM sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc/def/ghi/jkl/mno/pqr//stu//vwx')\n  ['ab', 'abc', 'abc/', 'abc/def', 'abc/def/ghi', 'abc/def/ghi/', 'abc/def/g", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with + \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixPlusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"+\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixMinusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"-\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with + \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixPlusPlusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"++\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixMinusMinusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"--\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with + \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixPlusPlusPlusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"++\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixMinusMinusMinusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"---\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with + \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixPlusPlusMinusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"+++\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixMinusPlusSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"-++\");\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with + \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixPlusMinusSpaces = (text) => {\n  const regex = /\\s+", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // console.log('fileNameCheck', file_name)\n  const regex = /^[a-z][a-z0-9]*\\.[a-z][a-z]+$/i\n  const match = file_name.match(regex)\n  if (match && match.length > 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // console.log('fileNameCheck', file_name)\n  const regex = /^[a-z][a-z0-9]*\\.[a-z][a-z]+$/i\n  const match = file_name.match(regex)\n  if (match && match.length > 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // console.log('fileNameCheck', file_name)\n  const regex = /^[a-z][a-z0-9]*\\.[a-z][a-z]+$/i\n  const match = file_name.match(regex)\n  if (match && match.length > 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // console.log('fileNameCheck', file_name)\n  const regex = /^[a-z][a-z0-9]*\\.[a-z][a-z]+$/i\n  const match = file_name.match(regex)\n  if (match && match.length > 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that will take a list of numbers and return the sum of the squares of the numbers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumOfSquaresOfNumbers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that will take a list of numbers and return the sum of the numbers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumOfNumbers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that will take a list of numbers and return the product of the numbers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst productOfNumbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are even, false if any number in the list is odd\n  \n  Examples:\n  For lst = [1,2,3] the output should be true\n  For lst = []  the output should be false\n  For lst = [-1,-5,2,-1,-5]  the output should be false\n  */\nconst isEven = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are odd, false if any number in the list is even\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the output should be true\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isOdd = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 3, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be true\n  For lst = []  the output should be false\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isDivisibleBy3 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 5, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the output should be true\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isDivisibleBy5 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 7, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the output should be true\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isDivisibleBy7 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 11, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the output should be true\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isDivisibleBy11 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 13, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the output should be true\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isDivisibleBy13 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 17, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the output should be true\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isDivisibleBy17 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 19, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the output should be true\n  For lst = [-1,-5,2,-1,-5]  the output should be true\n  */\nconst isDivisibleBy19 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will take a list of numbers and return true if all numbers in the list are divisible by 21, false if any number in the list is not\n  \n  Examples:\n  For lst = [1,2,3] the output should be false\n  For lst = []  the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordsInSentence = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      wordsInSentence.push(sentence[i - 1]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordsInSentence = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      wordsInSentence.push(sentence[i - 1]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordsInSentence = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      wordsInSentence.push(sentence[i - 1]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordsInSentence = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      wordsInSentence.push(sentence[i - 1]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordsInSentence = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      wordsInSentence.push(sentence[i - 1]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordsInSentence = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      wordsInSentence.push(sentence[i - 1]);", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n  x = x.replace(/\\s+/g, '');\n  n = n.replace(/\\s+/g, '');\n  let xNum = parseInt(x, 10);\n  let nNum = parseInt(n, 10);\n  if (xNum === 0 && nNum === 0) {\n    return true;\n  }\n  if (xNum === 0) {\n    return false;\n  }\n  if (nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  let xDenominator = parseInt(x.split('/')[1], 10);\n  let nDenominator = parseInt(n.split('/')[1], 10);\n  if (xDenominator === nDenominator) {\n    return true;\n  }\n  if (xDenominator < nDenominator) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n  x = x.replace(/\\s+/g, '');\n  n = n.replace(/\\s+/g, '');\n  let xNum = parseInt(x, 10);\n  let nNum = parseInt(n, 10);\n  if (xNum === 0 && nNum === 0) {\n    return true;\n  }\n  if (xNum === 0) {\n    return false;\n  }\n  if (nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  let xDenominator = parseInt(x.split('/')[1], 10);\n  let nDenominator = parseInt(n.split('/')[1], 10);\n  if (xDenominator === nDenominator) {\n    return true;\n  }\n  if (xDenominator < nDenominator) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n  x = x.replace(/\\s+/g, '');\n  n = n.replace(/\\s+/g, '');\n  let xNum = parseInt(x, 10);\n  let nNum = parseInt(n, 10);\n  if (xNum === 0 && nNum === 0) {\n    return true;\n  }\n  if (xNum === 0) {\n    return false;\n  }\n  if (nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  let xDenominator = parseInt(x.split('/')[1], 10);\n  let nDenominator = parseInt(n.split('/')[1], 10);\n  if (xDenominator === nDenominator) {\n    return true;\n  }\n  if (xDenominator < nDenominator) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n  x = x.replace(/\\s+/g, '');\n  n = n.replace(/\\s+/g, '');\n  let xNum = parseInt(x, 10);\n  let nNum = parseInt(n, 10);\n  if (xNum === 0 && nNum === 0) {\n    return true;\n  }\n  if (xNum === 0) {\n    return false;\n  }\n  if (nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  let xDeno", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const maxElem = Math.max.apply(null, nums);\n  const minElem = Math.min.apply(null, nums);\n  const mid = Math.floor((maxElem + minElem) / 2);\n  const sortedNums = nums.sort((a, b) => {\n    if (a === mid) {\n      return -1;\n    }\n    if (b === mid) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedNums;\n};\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const maxElem = Math.max.apply(null, nums);\n  const minElem = Math.min.apply(null, nums);\n  const mid = Math.floor((maxElem + minElem) / 2);\n  const sortedNums = nums.sort((a, b) => {\n    if (a === mid) {\n      return -1;\n    }\n    if (b === mid) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedNums;\n};\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const maxElem = Math.max.apply(null, nums);\n  const minElem = Math.min.apply(null, nums);\n  const mid = Math.floor((maxElem + minElem) / 2);\n  const sortedNums = nums.sort((a, b) => {\n    if (a === mid) {\n      return -1;\n    }\n    if (b === mid) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedNums;\n};\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const maxElem = Math.max.apply(null, nums);\n  const minElem = Math.min.apply(null, nums);\n  const mid = Math.floor((maxElem + minElem) / 2);\n  const sortedNums = nums.sort((a, b) => {\n    if (a === mid) {\n      return -1;\n    }\n    if (b === mid) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedNums;\n};\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const maxElem = Math.max.apply(null, nums);\n  const minElem = Math.min.apply(null, nums);\n  const mid = Math.floor((maxElem + minElem) / 2);\n  const sortedNums = nums.sort((a, b) => {\n    if (a === mid) {\n      return -1;\n    }\n    if (b === mid) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedNums;\n};\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const maxElem = Math.max.apply(null, nums);\n  const minElem = Math.min.apply(null, nums);\n  const mid = Math.floor((maxElem + minElem) / 2);\n  const sortedNums = nums.sort((a, b) => {\n    if (a === mid) {\n      return -1;\n    }\n    if (b === mid) {\n      return 1;\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const firstNum = nums[0];\n  const lastNum = nums[nums.length - 1];\n  const firstNumIndex = nums.indexOf(firstNum);\n  const lastNumIndex = nums.indexOf(lastNum);\n  const firstAndLastNumsAreInARange = firstNumIndex >= 0 && lastNumIndex >= 0;\n  const firstAndLastNumsAreInARangeButNotBoth = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirst = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLastAndFirstIsNotLast = firstAndLastNumsAreInARange && firstNumIndex < lastNumIndex && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum && firstNum!== lastNum && lastNum!== firstNum;\n  const firstAndLastNumsAreInARangeButNotBothButFirstIsNotLastButLastIsNotFirstAndFirst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if ((i < j && j < k) || (j < i && i < k)) {\n          a[i] += a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVE TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if ((i < j && j < k) || (j < i && i < k)) {\n          a[i] += a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVE TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if ((i < j && j < k) || (j < i && i < k)) {\n          a[i] += a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVE TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if ((i < j && j < k) || (j < i && i < k)) {\n          a[i] += a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVE TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if ((i < j && j < k) || (j < i && i < k)) {\n          a[i] += a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVE TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (planet1 === planet2) {\n    return [];\n  }\n  const planet1Name = planet1.toLowerCase();\n  const planet2Name = planet2.toLowerCase();\n  const planet1Index = planet1Name.indexOf(\"e\");\n  const planet2Index = planet2Name.indexOf(\"e\");\n  const planet1Index = planet1Index === -1? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === -1? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet1Index);\n  const planet2Name = planet2Name.slice(0, planet2Index);\n  const planet1Index = planet1Index === planet1Name.length? 0 : planet1Index;\n  const planet2Index = planet2Index === planet2Name.length? 0 : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? 0 : planet1Index;\n  const planet2Index = planet2Index === 0? 0 : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? 0 : planet1Index;\n  const planet2Index = planet2Index === 0? 0 : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? 0 : planet1Index;\n  const planet2Index = planet2Index === 0? 0 : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index === 0? planet1Name.length : planet1Index;\n  const planet2Index = planet2Index === 0? planet2Name.length : planet2Index;\n  const planet1Name = planet1Name.slice(0, planet2Index);\n  const planet2Name = planet2Name.slice(0, planet1Index);\n  const planet1Index = planet1Index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = lst;\n  sortedList.sort();\n  return sortedList;\n};\n\n/*\n  Given a list and a number n, return a list of all numbers in the list\n  that are less than or equal to n.\n  For example:\n  list_less_than([2, 7, 4, 8, 10], 7) => [4, 8]\n  list_less_than([2, 7, 4, 8, 10], 2) => []\n  list_less_than([2, 7, 4, 8, 10], 0) => []\n  list_less_than([2, 7, 4, 8, 10], 9) => []\n  list_less_than([2, 7, 4, 8, 10], 1) => []\n  list_less_than([2, 7, 4, 8, 10], 10) => []\n  list_less_than([2, 7, 4, 8, 10], 11) => []\n  list_less_than([2, 7, 4, 8, 10], 12) => []\n  list_less_than([2, 7, 4, 8, 10], 13) => []\n  list_less_than([2, 7, 4, 8, 10], 14) => []\n  list_less_than([2, 7, 4, 8, 10], 15) => []\n  list_less_than([2, 7, 4, 8, 10], 16) => []\n  list_less_than([2, 7, 4, 8, 10], 17) => []\n  list_less_than([2, 7, 4, 8, 10], 18) => []\n  list_less_than([2, 7, 4, 8, 10], 19) => []\n  list_less_than([2, 7, 4, 8, 10], 20) => []\n  list_less_than([2, 7, 4, 8, 10], 21) => []\n  list_less_than([2, 7, 4, 8, 10], 22) => []\n  list_less_than([2, 7, 4, 8, 10], 23) => []\n  list_less_than([2, 7, 4, 8, 10], 24) => []\n  list_less_than([2, 7, 4, 8, 10], 25) => []\n  list_less_than([2, 7, 4, 8, 10], 26) => []\n  list_less_than([2, 7, 4, 8, 10], 27) => []\n  list_less_than([2, 7, 4, 8, 10], 28) => []\n  list_less_than([2, 7, 4, 8, 10], 29) => []\n  list_less_than([2, 7, 4, 8, 10], 30) => []\n  list_less_than([2, 7, 4, 8, 10], 31) => []\n  list_less_than([2, 7, 4, 8, 10], 32) => []\n  list_less_than([2, 7, 4, 8, 10], 33) => []\n  list_less_than([2, 7, 4, 8, 10], 34) => []\n  list_less_than([2, 7, 4, 8, 10], 35) => []\n  list_less_than([2, 7, 4, 8, 10], 36) => []\n  list_less_than([2, 7, 4, 8, 10], 37) => []\n  list_less_than([2, 7, 4, 8, 10], 38) => []\n  list_less_than([2, 7, 4, 8, 10], 39) => []\n  list_less_than([2, 7, 4, 8, 10], 40) => []\n  list_less_than([2, 7, 4, 8, 10], 41) => []\n  list_less_than([2, 7, 4, 8, 10], 42) => []\n  list_less_than([2, 7, 4, 8, 10], 43) => []\n  list_less_than([2, 7, 4, 8, 10], 44) => []\n  list_less_than([2, 7, 4, 8, 10], 45) => []\n  list_less_than([2, 7, 4, 8, 10], 46) => []\n  list_less_than([2, 7, 4, 8, 10], 47) => []\n  list_less_than([2, 7, 4, 8, 10], 48) => []\n  list_less_than([2, 7, 4, 8, 10], 49) => []\n  list_less_than([2, 7, 4, 8, 10], 50) => []\n  list_less_than([2, 7, 4, 8, 10], 51) => []\n  list_less_than([2, 7, 4, 8, 10], 52) => []\n  list_less_than([2, 7, 4, 8, 10], 53) => []\n  list_less_than([2, 7, 4, 8, 10], 54) => []\n  list_less_than([2, 7, 4, 8, 10], 55) => []\n  list_less_than([2, 7, 4, 8, 10], 56) => []\n  list_less_than([2, 7, 4, 8, 10], 57) => []\n  list_less_than([2, 7, 4, 8, 10], 58) => []\n  list_less_than([2, 7, 4, 8, 10], 59) => []\n  list_less_than([2, 7, 4, 8, 10], 60) => []\n  list_less_than([2, 7, 4, 8, 10], 61) => []\n  list_less_than([2, 7, 4, 8, 10], 62) => []\n  list_less_than([2, 7, 4, 8, 10], 63) => []\n  list_less_than([2, 7, 4, 8, 10], 64) => []\n  list_less_than([2, 7, 4, 8, 10], 65) => []\n  list_less_than([2, 7, 4, 8, 10], 66) => []\n  list_less_than([2, 7, 4, 8, 10], 67) => []\n  list_less_than([2, 7, 4, 8, 10], 68) => []\n  list_less_than([2, 7, 4, 8, 10], 69) => []\n  list_less_than([2, 7, 4, 8, 10], 70) => []\n  list_less_than([2, 7, 4, 8, 10], 71) => []\n  list_less_than([2, 7, 4, 8, 10], 72) => []\n  list_less_than([2, 7, 4, 8, 10], 73) => []\n  list_less_than([2, 7, 4, 8, 10], 74) => []\n  list_less_than([2, 7, 4, 8, 10], 75) => []\n  list_less_than([2, 7, 4, 8, 10], 76) => []\n  list_less_than([2, 7, 4, 8, 10], 77) => []\n  list_less_than([2, 7, 4, 8, 10], 78) => []\n  list_less_than([2, 7, 4, 8, 10], 79) => []\n  list_less_than([2, 7, 4, 8, 10], 80) => []\n  list_less_than([2, 7, 4, 8, 10], 81) => []\n  list_less_than([2, 7, 4, 8, 10], 82) => []\n  list_less_than([2, 7, 4, 8, 10], 83", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retUrn = '';\n  for (let i = 0; i < n; i++) {\n    retUrn += `${i} `;\n  }\n  return retUrn;\n};\n\n/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * -1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in TH", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  const score = [];\n  let index = 0;\n  let scoreIndex = 0;\n  let gameIndex = 0;\n  let guessIndex = 0;\n  let gameScore = 0;\n  let guessScore = 0;\n  let gameScoreIndex = 0;\n  let guessScoreIndex = 0;\n  let gameScoreIndex2 = 0;\n  let guessScoreIndex2 = 0;\n  let gameScoreIndex3 = 0;\n  let guessScoreIndex3 = 0;\n  let gameScoreIndex4 = 0;\n  let guessScoreIndex4 = 0;\n  let gameScoreIndex5 = 0;\n  let guessScoreIndex5 = 0;\n  let gameScoreIndex6 = 0;\n  let guessScoreIndex6 = 0;\n  let gameScoreIndex7 = 0;\n  let guessScoreIndex7 = 0;\n  let gameScoreIndex8 = 0;\n  let guessScoreIndex8 = 0;\n  let gameScoreIndex9 = 0;\n  let guessScoreIndex9 = 0;\n  let gameScoreIndex10 = 0;\n  let guessScoreIndex10 = 0;\n  let gameScoreIndex11 = 0;\n  let guessScoreIndex11 = 0;\n  let gameScoreIndex12 = 0;\n  let guessScoreIndex12 = 0;\n  let gameScoreIndex13 = 0;\n  let guessScoreIndex13 = 0;\n  let gameScoreIndex14 = 0;\n  let guessScoreIndex14 = 0;\n  let gameScoreIndex15 = 0;\n  let guessScoreIndex15 = 0;\n  let gameScoreIndex16 = 0;\n  let guessScoreIndex16 = 0;\n  let gameScoreIndex17 = 0;\n  let guessScoreIndex17 = 0;\n  let gameScoreIndex18 = 0;\n  let guessScoreIndex18 = 0;\n  let gameScoreIndex19 = 0;\n  let guessScoreIndex19 = 0;\n  let gameScoreIndex20 = 0;\n  let guessScoreIndex20 = 0;\n  let gameScoreIndex21 = 0;\n  let guessScoreIndex21 = 0;\n  let gameScoreIndex22 = 0;\n  let guessScoreIndex22 = 0;\n  let gameScoreIndex23 = 0;\n  let guessScoreIndex23 = 0;\n  let gameScoreIndex24 = 0;\n  let guessScoreIndex24 = 0;\n  let gameScoreIndex25 = 0;\n  let guessScoreIndex25 = 0;\n  let gameScoreIndex26 = 0;\n  let guessScoreIndex26 = 0;\n  let gameScoreIndex27 = 0;\n  let guessScoreIndex27 = 0;\n  let gameScoreIndex28 = 0;\n  let guessScoreIndex28 = 0;\n  let gameScoreIndex29 = 0;\n  let guessScoreIndex29 = 0;\n  let gameScoreIndex30 = 0;\n  let guessScoreIndex30 = 0;\n  let gameScoreIndex31 = 0;\n  let guessScoreIndex31 = 0;\n  let gameScoreIndex32 = 0;\n  let guessScoreIndex32 = 0;\n  let gameScoreIndex33 = 0;\n  let guessScoreIndex33 = 0;\n  let gameScoreIndex34 = 0;\n  let guessScoreIndex34 = 0;\n  let gameScoreIndex35 = 0;\n  let guessScoreIndex35 = 0;\n  let gameScoreIndex36 = 0;\n  let guessScoreIndex36 = 0;\n  let gameScoreIndex37 = 0;\n  let guessScoreIndex37 = 0;\n  let gameScoreIndex38 = 0;\n  let guessScoreIndex38 = 0;\n  let gameScoreIndex39 = 0;\n  let guessScoreIndex39 = 0;\n  let gameScoreIndex40 = 0;\n  let guessScoreIndex40 = 0;\n  let gameScoreIndex41 = 0;\n  let guessScoreIndex41 = 0;\n  let gameScoreIndex42 = 0;\n  let guessScoreIndex42 = 0;\n  let gameScoreIndex43 = 0;\n  let guessScoreIndex43 = 0;\n  let gameScoreIndex44 = 0;\n  let guessScoreIndex44 = 0;\n  let gameScoreIndex45 = 0;\n  let guessScoreIndex45 = 0;\n  let gameScoreIndex46 = 0;\n  let guessScoreIndex46 = 0;\n  let gameScoreIndex47 = 0;\n  let guessScoreIndex47 = 0;\n  let gameScoreIndex48 = 0;\n  let guessScoreIndex48 = 0;\n  let gameScoreIndex49 = 0;\n  let guessScoreIndex49 = 0;\n  let gameScoreIndex50 = 0;\n  let guessScoreIndex50 = 0;\n  let gameScoreIndex51 = 0;\n  let guessScoreIndex51 = 0;\n  let gameScoreIndex52 = 0;\n  let guessScoreIndex52 = 0;\n  let gameScoreIndex53 = 0;\n  let guessScoreIndex53 = 0;\n  let gameScoreIndex54 = 0;\n  let guessScoreIndex54 = 0;\n  let gameScoreIndex55 = 0;\n  let guessScoreIndex55 = 0;\n  let gameScoreIndex56 = 0;\n  let guessScoreIndex56 = 0;\n  let gameScoreIndex57 = 0;\n  let guessScoreIndex57 = 0;\n  let gameScoreIndex58 = 0;\n  let guessScoreIndex58 = 0;\n  let gameScoreIndex59 = 0;\n  let guessScoreIndex59 = 0;\n  let gameScoreIndex60 = 0;\n  let guessScoreIndex60 = 0;\n  let gameScoreIndex61 = 0;\n  let guessScoreIndex61 = 0;\n  let gameScoreIndex62 = 0;\n  let guessScoreIndex62 = 0;\n  let gameScoreIndex63 = 0;\n  let guessScoreIndex63 = 0;\n  let gameScoreIndex64 = 0;\n  let guessScoreIndex64 = 0;\n  let gameScoreIndex65 = 0;\n  let guessScoreIndex65 = 0;\n  let gameScoreIndex66 = 0;\n  let guessScoreIndex66 = 0;\n  let gameScoreIndex67 = 0;\n  let guessScoreIndex67 = 0;\n  let gameScoreIndex68 = 0;\n  let guessScoreIndex68 = 0;\n  let gameScoreIndex69 = 0;\n  let guessScoreIndex69 = 0;\n  let gameScoreIndex70 = 0;\n  let guessScoreIndex70 = 0;\n  let gameScoreIndex71 = 0;\n  let guessScoreIndex71 = 0;\n  let gameScoreIndex72 = 0;\n  let guessScoreIndex72 = 0;\n  let gameScoreIndex73 = 0;\n  let guessScoreIndex73 = 0;\n  let gameScoreIndex74 = 0;\n  let guessScoreIndex74 = 0;\n  let gameScoreIndex75 = 0;\n  let guessScoreIndex75 = 0;\n  let gameScoreIndex76 = 0;\n  let guessScoreIndex76 = 0;\n  let gameScoreIndex77 = 0;\n  let guessScoreIndex77 = 0;\n  let gameScoreIndex78 = 0;\n  let guessScoreIndex78 = 0;\n  let gameScoreIndex79 = 0;\n  let guessScoreIndex79 = 0;\n  let gameScoreIndex80 = 0;\n  let guessScoreIndex80 = 0;\n  let gameScoreIndex81 = 0;\n  let guessScoreIndex81 = 0;\n  let gameScoreIndex82 = 0;\n  let guessScoreIndex82 = 0;\n  let gameScoreIndex83 = 0;\n  let guessScoreIndex83 = 0;\n  let gameScoreIndex84 = 0;\n  let guessScoreIndex84 = 0;\n  let gameScoreIndex85", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let best_extension = extensions[0];\n  let best_strength = -1;\n\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const strength = extension.split(class_name)[1];\n    if (strength > best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name and a list of the extensions, return the list of\n  the possible ways to extend the class with each of the given extensions.\n  Each element of the returned list should be the class name with each\n  of the given extensions added to the end.\n  Example:\n  given'my_class' and ['AA', 'Be', 'CC'], return ['my_class.AA','my_class.Be','my_class.CC']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ','my_class.KK']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ','my_class.KK','my_class.LL']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ','my_class.KK','my_class.LL','my_class.MM']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ','my_class.KK','my_class.LL','my_class.MM','my_class.NN']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ','my_class.KK','my_class.LL','my_class.MM','my_class.NN','my_class.OO']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ','my_class.KK','my_class.LL','my_class.MM','my_class.NN','my_class.OO','my_class.PP']\n  given'my_class' and ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ'], return ['my_class.AA','my_class.Be','my_class.CC','my_class.DD','my_class.EE','my_class.FF','my_class.GG','my_class.HH','my_class.II','my_class.JJ','my_class.KK','my_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = bArr[aIndex];\n  let bSubStr = aArr[bIndex];\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aSubStr === bSubStr) {\n      aIndex++;\n      bIndex++;\n      aSubStr = bArr[aIndex];\n      bSubStr = aArr[bIndex];\n    } else if (aSubStr < bSubStr) {\n      aIndex++;\n      aSubStr = aArr[aIndex];\n    } else {\n      bIndex++;\n      bSubStr = bArr[bIndex];\n    }\n  }\n  return (aIndex === aLen || bIndex === bLen);\n};\n\n/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = bArr[aIndex];\n  let bSubStr = aArr[bIndex];\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aSubStr === bSubStr) {\n      aIndex++;\n      bIndex++;\n      aSubStr = bArr[aIndex];\n      bSubStr = aArr[bIndex];\n    } else if (aSubStr < bSubStr) {\n      aIndex++;\n      aSubStr = aArr[aIndex];\n    } else {\n      bIndex++;\n      bSubStr = bArr[bIndex];\n    }\n  }\n  return (aIndex === aLen || bIndex === bLen);\n};\n\n/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = bArr[aIndex];\n  let bSubStr = aArr[bIndex];\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aSubStr === bSubStr) {\n      aIndex++;\n      bIndex++;\n      aSubStr = bArr[aIndex];\n      bSubStr = aArr[bIndex];\n    } else if (aSubStr < bSubStr) {\n      aIndex++;\n      aSubStr = aArr[aIndex];\n    } else {\n      bIndex++;\n      bSubStr = bArr[bIndex];\n    }\n  }\n  return (aIndex === aLen || bIndex === bLen);\n};\n\n/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = bArr[aIndex];\n  let bSubStr = aArr[bIndex];\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aSubStr === bSubStr) {\n      aIndex++;\n      bIndex++;\n      aSubStr = bArr[aIndex];\n      bSubStr = aArr[bIndex];\n    } else if (aSubStr < bSubStr) {\n      aIndex++;\n      aSubStr = aArr[aIndex];\n    } else {\n      bIndex++;\n      bSubStr = bArr[bIndex];\n    }\n  }\n  return (aIndex === aLen || bIndex === bLen);\n};\n\n/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      even", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = intToRoman(number)\n  const miniRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toUpperCase())\n  return miniRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in upperCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToUpperRoman(19) == 'XIX'\n  >>> intToUpperRoman(152) == 'CLII'\n  >>> intToUpperRoman(426) == 'CDXXVI'\n  */\nconst intToUpperRoman = (number) => {\n  const roman = intToRoman(number)\n  const upperRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toUpperCase())\n  return upperRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCase, with '-' instead of 'I'.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToLowerRoman(19) == 'xix'\n  >>> intToLowerRoman(152) == 'clii'\n  >>> intToLowerRoman(426) == 'cdxxvi'\n  */\nconst intToLowerRoman = (number) => {\n  const roman = intToRoman(number)\n  const lowerRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toLowerCase())\n  return lowerRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in upperCase, with '-' instead of 'I'.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToUpperRoman(19) == 'XIX'\n  >>> intToUpperRoman(152) == 'CLII'\n  >>> intToUpperRoman(426) == 'CDXXVI'\n  */\nconst intToUpperRoman = (number) => {\n  const roman = intToRoman(number)\n  const upperRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toUpperCase())\n  return upperRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCase, with '-' instead of 'I'.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToLowerRoman(19) == 'xix'\n  >>> intToLowerRoman(152) == 'clii'\n  >>> intToLowerRoman(426) == 'cdxxvi'\n  */\nconst intToLowerRoman = (number) => {\n  const roman = intToRoman(number)\n  const lowerRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toLowerCase())\n  return lowerRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in upperCase, with '-' instead of 'I'.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToUpperRoman(19) == 'XIX'\n  >>> intToUpperRoman(152) == 'CLII'\n  >>> intToUpperRoman(426) == 'CDXXVI'\n  */\nconst intToUpperRoman = (number) => {\n  const roman = intToRoman(number)\n  const upperRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toUpperCase())\n  return upperRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCase, with '-' instead of 'I'.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToLowerRoman(19) == 'xix'\n  >>> intToLowerRoman(152) == 'clii'\n  >>> intToLowerRoman(426) == 'cdxxvi'\n  */\nconst intToLowerRoman = (number) => {\n  const roman = intToRoman(number)\n  const lowerRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toLowerCase())\n  return lowerRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in upperCase, with '-' instead of 'I'.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToUpperRoman(19) == 'XIX'\n  >>> intToUpperRoman(152) == 'CLII'\n  >>> intToUpperRoman(426) == 'CDXXVI'\n  */\nconst intToUpperRoman = (number) => {\n  const roman = intToRoman(number)\n  const upperRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toUpperCase())\n  return upperRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCase, with '-' instead of 'I'.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToLowerRoman(19) == 'xix'\n  >>> intToLowerRoman(152) == 'clii'\n  >>> intToLowerRoman(426) == 'cdxxvi'\n  */\nconst intToLowerRoman = (number) => {\n  const roman = intToRoman(number)\n  const lowerRoman = roman.replace(/^([a-z])/, (_, letter) => letter.toLowerCase())\n  return lowerRoman\n}\n\n/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in upperCase, with ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  180 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  270 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  360 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  900 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  1800 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  2700 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  3600 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\" ,\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  let maxWord = words[0];\n  let maxCount = 1;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxCount) {\n      maxWord = words[i];\n      maxCount = words[i].length;\n    }\n  }\n  return maxWord;\n};\n\n/*\n  findMin([\"name\", \"OF\", \"sTrIng\"]) === \"sTrIng\"\n  findMin([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findMin([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findMin = (words) => {\n  let minWord = words[0];\n  let minCount = 1;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < minCount) {\n      minWord = words[i];\n      minCount = words[i].length;\n    }\n  }\n  return minWord;\n};\n\n/*\n  findWord([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWord([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWord([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWord = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax(words);\n  return minWord === maxWord? minWord : \"\";\n};\n\n/*\n  findWords([\"name\", \"OF\", \"sTrIng\"]) === \"name\"\n  findWords([\"name\", \"Enam\", \"Game\"]) === \"Enam\"\n  findWords([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"aaaaaaa\"\n*/\ncoNsT findWords = (words) => {\n  let minWord = findMin(words);\n  let maxWord = findMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if(number > 1000 || need > 1000 || remaining > 1000) return 0;\n  if(number < 0 || need < 0 || remaining < 0) return 0;\n  if(number === 0 && need === 0 && remaining === 0) return 0;\n  if(number === 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return 0;\n  if(number > 0 && need > 0 && remaining > 0) return 0;\n  if(number > 0 && need > 0 && remaining === 0) return 0;\n  if(number > 0 && need === 0 && remaining > 0) return 0;\n  if(number > 0 && need === 0 && remaining === 0) return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, char) => {\n    acc[char] = acc[char]? acc[char] + 1 : 1;\n    return acc;\n  }, {});\n  return Object.keys(charsCount).length;\n};\n\n// TESTS\n\n// TEST 1: GivEn a string, fiND out How ManY DistInCT chARAcTErs doES it Consist of\n// >>> countDistinctCharacters('xyzXYZ')\n// 3\n// >>> countDistinctCharacters('Jerry')\n// 4\n// >>> countDistinctCharacters('JerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerry", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.slice(0, operandIndex + 1);\n    stack.push(operator);\n\n    if (operator === '+') {\n      result.push(stack.pop() + stack.pop());\n    } else if (operator === '-') {\n      result.push(stack.pop() - stack.pop());\n    } else if (operator === '*') {\n      result.push(stack.pop() * stack.pop());\n    } else if (operator === '/') {\n      result.push(stack.pop() / stack.pop());\n    } else if (operator === '**') {\n      result.push(Math.pow(stack.pop(), stack.pop()));\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const stack = [];\n  let index = 0;\n\n  while (index < operand.length) {\n    const operatorIndex = operator.indexOf(operand[index]);\n    const operator = operator[operatorIndex];\n    const operand = operand.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = s;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === '#'){\n      newS = s.replace('#', '');\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n      newS = newS + s[i];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMP", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a must be less than b')\n  }\n  const result = []\n  const oneToA = a\n  const oneToB = b\n  while (oneToA < oneToB) {\n    result.push(oneToA)\n    oneToA++\n  }\n  return result\n}\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DI", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic2 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic3 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic4 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic5 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic6 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic7 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic8 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic9 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic10 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic11 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic12 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;\n    } else if (music_string === '.|' || music_string === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_list2;\n};\n\nconst parseMusic13 = music_string => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music_string => {\n    if (music_string === 'o' || music_string === 'O') {\n      return 4;\n    } else if (music_string === 'o|' || music_string === 'o|') {\n      return 2;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.match(new RegExp(substring, 'g')) || []\n  return times.length\n}\n\n// How many times a substring appears in a string\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe', 'sIx', 'seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* inpUt is a sPAce-dEliMitED ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const isFloat = Number.isFinite(number);\n  const isInt = Number.isInteger(number);\n  const isPositive = number > 0;\n\n  if (isFloat && isInt) {\n    return number;\n  }\n\n  if (isFloat &&!isInt) {\n    return number / 1;\n  }\n\n  if (!isFloat && isInt) {\n    return number - 1;\n  }\n\n  if (!isFloat &&!isInt) {\n    return number;\n  }\n\n  return number;\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toDecimalString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const decimalIndex = numberString.indexOf('.');\n\n  if (decimalIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, decimalIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toHexString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const hexIndex = numberString.indexOf('#');\n\n  if (hexIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, hexIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toOctalString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const octalIndex = numberString.indexOf('o');\n\n  if (octalIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, octalIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toBinaryString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const binaryIndex = numberString.indexOf('b');\n\n  if (binaryIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, binaryIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiIndex = numberString.indexOf('a');\n\n  if (asciiIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiHexString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiHexIndex = numberString.indexOf('a');\n\n  if (asciiHexIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiHexIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiOctalString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiOctalIndex = numberString.indexOf('a');\n\n  if (asciiOctalIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiOctalIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiBinaryString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiBinaryIndex = numberString.indexOf('a');\n\n  if (asciiBinaryIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiBinaryIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiHexOrOctalString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiHexOrOctalIndex = numberString.indexOf('a');\n\n  if (asciiHexOrOctalIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiHexOrOctalIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiOctalOrBinaryString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiOctalOrBinaryIndex = numberString.indexOf('a');\n\n  if (asciiOctalOrBinaryIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiOctalOrBinaryIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiHexOrBinaryString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiHexOrBinaryIndex = numberString.indexOf('a');\n\n  if (asciiHexOrBinaryIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiHexOrBinaryIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiHexOrOctalOrBinaryString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiHexOrOctalOrBinaryIndex = numberString.indexOf('a');\n\n  if (asciiHexOrOctalOrBinaryIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiHexOrOctalOrBinaryIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiHexOrOctalOrBinaryOrAsciiString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiHexOrOctalOrBinaryOrAsciiIndex = numberString.indexOf('a');\n\n  if (asciiHexOrOctalOrBinaryOrAsciiIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiHexOrOctalOrBinaryOrAsciiIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiHexOrOctalOrBinaryOrAsciiHexString = (number, radix) => {\n  const numberString = number.toString(radix);\n  const asciiHexOrOctalOrBinaryOrAsciiHexIndex = numberString.indexOf('a');\n\n  if (asciiHexOrOctalOrBinaryOrAsciiHexIndex === -1) {\n    return numberString;\n  }\n\n  return numberString.slice(0, asciiHexOrOctalOrBinaryOrAsciiHexIndex);\n};\n\n/**\n * Converts number into string with given radix\n * @param {Number} number\n * @param {Number} radix\n * @returns {String}\n */\nconst toAsciiHexOrOctalOrBinaryOrAsciiOctal", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestNumber = numbers[0];\n  let largestNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallestNumber) {\n      smallestNumber = numbers[i];\n    } else if (numbers[i] > largestNumber) {\n      largestNumber = numbers[i];\n    }\n  }\n  return [smallestNumber, largestNumber];\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {Array} numbers - An array of numbers.\n * @returns {Array} - An array of numbers in reverse order.\n */\nconst reverseArray = (numbers) => {\n  return numbers.reverse();\n};\n\n/**\n * A function that takes an array of numbers and returns an array of the numbers in reverse order.\n * @param {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min) / range;\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [1,2,3,4,5].allLessThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allLessThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [1,2,3,4,5].allLessThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allLessThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [1,2,3,4,5].allLessThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allLessThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [1,2,3,4,5].allLessThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allLessThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [1,2,3,4,5].allLessThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allLessThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [1,2,3,4,5].allLessThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allLessThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [1,2,3,4,5].allLessThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allLessThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all greater than or equal to each other\n *\n * >>> [1,2,3,4,5].allGreaterThanOrEqualTo(6)\n * [1,2,3,4,5]\n */\nconst allGreaterThanOrEqualTo = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i]);\n  }\n  return newNumbers;\n};\n\n/**\n * A helper function which takes an array of numbers and returns an array of numbers which are\n * all less than or equal to each other\n *\n * >>> [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filter = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterObject = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterString = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterBoolean = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterNumber = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterArray = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterObjects = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterStrings = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterBooleans = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterNumbers = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterArrays = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterObjects = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterStrings = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterBooleans = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterNumbers = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterArrays = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterObjects = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterStrings = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given predicate.\n *\n * >>> filter([1,2,3,4,5], (x) => x % 2 === 0)\n * [2, 4]\n */\nconst filterBooleans = (values, predicate) => {\n  const result = [];\n  values.forEach((value) => {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns a new list containing only items that match a given ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len += 1;\n    }\n  }\n  return len;\n};\n\n/**\n * Returns true if string contains only ASCII characters\n *\n * >>> isASCII('abc')\n * true\n * >>> isASCII('abc def')\n * false\n * >>> isASCII('abc123')\n * false\n * >>> isASCII('abc')\n * true\n * >>> isASCII('')\n * true\n * >>> isASCII(' ')\n * true\n * >>> isASCII('\\n')\n * true\n * >>> isASCII('\\\\n')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001a')\n * false\n * >>> isASCII('\\\\u0001a')\n * false\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * >>> isASCII('\\\\u0001')\n * true\n * ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let fInd = 1;\n  let smalLEr = 1;\n  let nUMBeR = 1;\n  let divIDes = 1;\n  while (divIDes < n) {\n    if (n % fInd === 0) {\n      largestDivisor = divIDes;\n      fInd++;\n    } else {\n      smalLEr++;\n    }\n    nUMBeR++;\n    divIDes++;\n  }\n  return largestDi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const divisors = [];\n  const divisorsSet = new Set();\n  let factor = 1;\n  let divisor;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    divisor = i;\n    while (divisor >= 1) {\n      if (divisorsSet.has(divisor)) {\n        break;\n      }\n      divisorsSet.add(divisor);\n      divisors.push(divisor);\n      divisor = divisor / 2;\n    }\n    factors.push(factor);\n    factor *= i;\n  }\n  return factors;\n};\n\n/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const divisors = [];\n  const divisorsSet = new Set();\n  let factor = 1;\n  let divisor;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    divisor = i;\n    while (divisor >= 1) {\n      if (divisorsSet.has(divisor)) {\n        break;\n      }\n      divisorsSet.add(divisor);\n      divisors.push(divisor);\n      divisor = divisor / 2;\n    }\n    factors.push(factor);\n    factor *= i;\n  }\n  return factors;\n};\n\n/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const divisors = [];\n  const divisorsSet = new Set();\n  let factor = 1;\n  let divisor;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    divisor = i;\n    while (divisor >= 1) {\n      if (divisorsSet.has(divisor)) {\n        break;\n      }\n      divisorsSet.add(divisor);\n      divisors.push(divisor);\n      divisor = divisor / 2;\n    }\n    factors.push(factor);\n    factor *= i;\n  }\n  return factors;\n};\n\n/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const divisors = [];\n  const divisorsSet = new Set();\n  let factor = 1;\n  let divisor;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    divisor = i;\n    while (divisor >= 1) {\n      if (divisorsSet.has(divisor)) {\n        break;\n      }\n      divisorsSet.add(divisor);\n      divisors.push(divisor);\n      divisor = divisor / 2;\n    }\n    factors.push(factor);\n    factor *= i;\n  }\n  return factors;\n};\n\n/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const divisors = [];\n  const divisorsSet = new Set();\n  let factor = 1;\n  let divisor;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    divisor = i;\n    while (divisor >= 1) {\n      if (divisorsSet.has(divisor)) {\n        break;\n      }\n      divisorsSet.add(divisor);\n      divisors.push(divisor);\n      divisor = divisor / 2;\n    }\n    factors.push(factor);\n    factor *= i;\n  }\n  return factors;\n};\n\n/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const divisors = [];\n  const divisorsSet = new Set();\n  let factor = 1;\n  let divisor;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    divisor = i;\n    while (divisor >= 1) {\n      if (divisorsSet.has(divisor)) {\n        break;\n      }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV2 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV3 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV4 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV5 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV6 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV7 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV8 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV9 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV10 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV11 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV12 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV13 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV14 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV15 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV16 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV17 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV18 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV19 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV20 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV21 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV22 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV23 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((n) => {\n    if (seen[n]) result.push(n);\n    seen[n] = true;\n  });\n  return result;\n};\n\n/* >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesV24 = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const lower = string.toLowerCase();\n  const upper = string.toUpperCase();\n  return lower + upper.split(lower).join(upper);\n};\n\n/**\n * Converts string to lower case and removes spaces.\n * If string has spaces then it returns string without spaces.\n * If string has no spaces then it returns string with spaces.\n * If string has spaces and has only 1 space then it returns string without spaces.\n * If string has spaces and has more than 1 space then it returns string with spaces.\n * If string has spaces and has 2 or more spaces then it returns string with spaces.\n * If string has spaces and has 3 or more spaces then it returns string with spaces.\n * If string has spaces and has 4 or more spaces then it returns string with spaces.\n * If string has spaces and has 5 or more spaces then it returns string with spaces.\n * If string has spaces and has 6 or more spaces then it returns string with spaces.\n * If string has spaces and has 7 or more spaces then it returns string with spaces.\n * If string has spaces and has 8 or more spaces then it returns string with spaces.\n * If string has spaces and has 9 or more spaces then it returns string with spaces.\n * If string has spaces and has 10 or more spaces then it returns string with spaces.\n * If string has spaces and has 11 or more spaces then it returns string with spaces.\n * If string has spaces and has 12 or more spaces then it returns string with spaces.\n * If string has spaces and has 13 or more spaces then it returns string with spaces.\n * If string has spaces and has 14 or more spaces then it returns string with spaces.\n * If string has spaces and has 15 or more spaces then it returns string with spaces.\n * If string has spaces and has 16 or more spaces then it returns string with spaces.\n * If string has spaces and has 17 or more spaces then it returns string with spaces.\n * If string has spaces and has 18 or more spaces then it returns string with spaces.\n * If string has spaces and has 19 or more spaces then it returns string with spaces.\n * If string has spaces and has 20 or more spaces then it returns string with spaces.\n * If string has spaces and has 21 or more spaces then it returns string with spaces.\n * If string has spaces and has 22 or more spaces then it returns string with spaces.\n * If string has spaces and has 23 or more spaces then it returns string with spaces.\n * If string has spaces and has 24 or more spaces then it returns string with spaces.\n * If string has spaces and has 25 or more spaces then it returns string with spaces.\n * If string has spaces and has 26 or more spaces then it returns string with spaces.\n * If string has spaces and has 27 or more spaces then it returns string with spaces.\n * If string has spaces and has 28 or more spaces then it returns string with spaces.\n * If string has spaces and has 29 or more spaces then it returns string with spaces.\n * If string has spaces and has 30 or more spaces then it returns string with spaces.\n * If string has spaces and has 31 or more spaces then it returns string with spaces.\n * If string has spaces and has 32 or more spaces then it returns string with spaces.\n * If string has spaces and has 33 or more spaces then it returns string with spaces.\n * If string has spaces and has 34 or more spaces then it returns string with spaces.\n * If string has spaces and has 35 or more spaces then it returns string with spaces.\n * If string has spaces and has 36 or more spaces then it returns string with spaces.\n * If string has spaces and has 37 or more spaces then it returns string with spaces.\n * If string has spaces and has 38 or more spaces then it returns string with spaces.\n * If string has spaces and has 39 or more spaces then it returns string with spaces.\n * If string has spaces and has 40 or more spaces then it returns string with spaces.\n * If string has spaces and has 41 or more spaces then it returns string with spaces.\n * If string has spaces and has 42 or more spaces then it returns string with spaces.\n * If string has spaces and has 43 or more spaces then it returns string with spaces.\n * If string has spaces and has 44 or more spaces then it returns string with spaces.\n * If string has spaces and has 45 or more spaces then it returns string with spaces.\n * If string has spaces and has 46 or more spaces then it returns string with spaces.\n * If string has spaces and has 47 or more spaces then it returns string with spaces.\n * If string has spaces and has 48 or more spaces then it returns string with spaces.\n * If string has spaces and has 49 or more spaces then it returns string with spaces.\n * If string has spaces and has 50 or more spaces then it returns string with spaces.\n * If string has spaces and has 51 or more spaces then it returns string with spaces.\n * If string has spaces and has 52 or more spaces then it returns string with spaces.\n * If string has spaces and has 53 or more spaces then it returns string with spaces.\n * If string has spaces and has 54 or more spaces then it returns string with spaces.\n * If string has spaces and has 55 or more spaces then it returns string with spaces.\n * If string has spaces and has 56 or more spaces then it returns string with spaces.\n * If string has spaces and has 57 or more spaces then it returns string with spaces.\n * If string has spaces and has 58 or more spaces then it returns string with spaces.\n * If string has spaces and has 59 or more spaces then it returns string with spaces.\n * If string has spaces and has 60 or more spaces then it returns string with spaces.\n * If string has spaces and has 61 or more spaces then it returns string with spaces.\n * If string has spaces and has 62 or more spaces then it returns string with spaces.\n * If string has spaces and has 63 or more spaces then it returns string with spaces.\n * If string has spaces and has 64 or more spaces then it returns string with spaces.\n * If string has spaces and has 65 or more spaces then it returns string with spaces.\n * If string has spaces and has 66 or more spaces then it returns string with spaces.\n * If string has spaces and has 67 or more spaces then it returns string with spaces.\n * If string has spaces and has 68 or more spaces then it returns string with spaces.\n * If string has spaces and has 69 or more spaces then it returns string with spaces.\n * If string has spaces and has 70 or more spaces then it returns string with ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCatenate = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([ 'a', 'b', 'c' ])\n  'abc'\n  */\nconst conCatenateT = (strings) => {\n  return strings.reduce((acc, s) => acc + s, \"\");\n};\n\n/* conCatenATe list of strings ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Takes an array of strings and returns a new array with all the\n * strings removed that do not start with a given prefix.\n *\n * Example:\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * const prefix = 'b'\n * const result = removeNonPrefix(strings, prefix)\n * result === ['abc', 'cde']\n *\n * const strings = ['abc', 'bcd', 'cde', 'array']\n * ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n  return operations.some((val) => val < zeroBalance);\n};\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);\n//   return operations.some((val) => val < zeroBalance);\n// };\n\n// const belowZero = (operations) => {\n//   const zeroBalance = operations.reduce((acc, val) => acc + val, 0);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x >= 0);\n};\n\n/*REtuRn onlY NegTivE nuMBers in ThE list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*REtuRn onlY Zero nuMBers in ThE list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter(x => x === 0);\n};\n\n/*REtuRn onlY Ones nuMBers in ThE list.\n  >>> getOnes([-1, 2, -4, 5, 6])\n  [-1, 2, -4, -5, 6]\n  >>> getOnes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getOnes = (l) => {\n  return l.filter(x => x === 1);\n};\n\n/*REtuRn onlY Twos nuMBers in ThE list.\n  >>> getTwos([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 6, -5]\n  >>> getTwos([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getTwos = (l) => {\n  return l.filter(x => x === 2);\n};\n\n/*REtuRn onlY Threes nuMBers in ThE list.\n  >>> getThrees([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, -3]\n  >>> getThrees([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getThrees = (l) => {\n  return l.filter(x => x === 3);\n};\n\n/*REtuRn onlY Fours nuMBers in ThE list.\n  >>> getFours([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getFours([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getFours = (l) => {\n  return l.filter(x => x === 4);\n};\n\n/*REtuRn onlY Fives nuMBers in ThE list.\n  >>> getFives([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getFives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getFives = (l) => {\n  return l.filter(x => x === 5);\n};\n\n/*REtuRn onlY Sixes nuMBers in ThE list.\n  >>> getSixes([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSixes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getSixes = (l) => {\n  return l.filter(x => x === 6);\n};\n\n/*REtuRn onlY Sevens nuMBers in ThE list.\n  >>> getSevens([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSevens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getSevens = (l) => {\n  return l.filter(x => x === 7);\n};\n\n/*REtuRn onlY Eights nuMBers in ThE list.\n  >>> getEights([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getEights([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getEights = (l) => {\n  return l.filter(x => x === 8);\n};\n\n/*REtuRn onlY Nines nuMBers in ThE list.\n  >>> getNines([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNines([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNines = (l) => {\n  return l.filter(x => x === 9);\n};\n\n/*REtuRn onlY Tens nuMBers in ThE list.\n  >>> getTens([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getTens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getTens = (l) => {\n  return l.filter(x => x === 10);\n};\n\n/*REtuRn onlY Elevens nuMBers in ThE list.\n  >>> getElevens([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getElevens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getElevens = (l) => {\n  return l.filter(x => x === 11);\n};\n\n/*REtuRn onlY Twelves nuMBers in ThE list.\n  >>> getTwelves([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getTwelves([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getTwelves = (l) => {\n  return l.filter(x => x === 12);\n};\n\n/*REtuRn onlY Thirteens nuMBers in ThE list.\n  >>> getThirteens([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getThirteens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getThirteens = (l) => {\n  return l.filter(x => x === 13);\n};\n\n/*REtuRn onlY Fourteens nuMBers in ThE list.\n  >>> getFourteens([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getFourteens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getFourteens = (l) => {\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n!== 2 && n!== 3) return false;\n  if (n!== 5) return false;\n  if (n === 6) return true;\n  if (n === 7) return true;\n  if (n === 8) return true;\n  if (n === 9) return true;\n  if (n === 10) return true;\n  if (n === 11) return true;\n  if (n === 12) return true;\n  if (n === 13) return true;\n  if (n === 14) return true;\n  if (n === 15) return true;\n  if (n === 16) return true;\n  if (n === 17) return true;\n  if (n === 18) return true;\n  if (n === 19) return true;\n  if (n === 20) return true;\n  if (n === 21) return true;\n  if (n === 22) return true;\n  if (n === 23) return true;\n  if (n === 24) return true;\n  if (n === 25) return true;\n  if (n === 26) return true;\n  if (n === 27) return true;\n  if (n === 28) return true;\n  if (n === 29) return true;\n  if (n === 30) return true;\n  if (n === 31) return true;\n  if (n === 32) return true;\n  if (n === 33) return true;\n  if (n === 34) return true;\n  if (n === 35) return true;\n  if (n === 36) return true;\n  if (n === 37) return true;\n  if (n === 38) return true;\n  if (n === 39) return true;\n  if (n === 40) return true;\n  if (n === 41) return true;\n  if (n === 42) return true;\n  if (n === 43) return true;\n  if (n === 44) return true;\n  if (n === 45) return true;\n  if (n === 46) return true;\n  if (n === 47) return true;\n  if (n === 48) return true;\n  if (n === 49) return true;\n  if (n === 50) return true;\n  if (n === 51) return true;\n  if (n === 52) return true;\n  if (n === 53) return true;\n  if (n === 54) return true;\n  if (n === 55) return true;\n  if (n === 56) return true;\n  if (n === 57) return true;\n  if (n === 58) return true;\n  if (n === 59) return true;\n  if (n === 60) return true;\n  if (n === 61) return true;\n  if (n === 62) return true;\n  if (n === 63) return true;\n  if (n === 64) return true;\n  if (n === 65) return true;\n  if (n === 66) return true;\n  if (n === 67) return true;\n  if (n === 68) return true;\n  if (n === 69) return true;\n  if (n === 70) return true;\n  if (n === 71) return true;\n  if (n === 72) return true;\n  if (n === 73) return true;\n  if (n === 74) return true;\n  if (n === 75) return true;\n  if (n === 76) return true;\n  if (n === 77) return true;\n  if (n === 78) return true;\n  if (n === 79) return true;\n  if (n === 80) return true;\n  if (n === 81) return true;\n  if (n === 82) return true;\n  if (n === 83) return true;\n  if (n === 84) return true;\n  if (n === 85) return true;\n  if (n === 86) return true;\n  if (n === 87) return true;\n  if (n === 88) return true;\n  if (n === 89) return true;\n  if (n === 90) return true;\n  if (n === 91) return true;\n  if (n === 92) return true;\n  if (n === 93) return true;\n  if (n === 94) return true;\n  if (n === 95) return true;\n  if (n === 96) return true;\n  if (n === 97) return true;\n  if (n === 98) return true;\n  if (n === 99) return true;\n  if (n === 100) return true;\n  if (n === 101) return true;\n  if (n === 102) return true;\n  if (n === 103) return true;\n  if (n === 104) return true;\n  if (n === 105) return true;\n  if (n === 106) return true;\n  if (n === 107) return true;\n  if (n === 108) return true;\n  if (n === 109) return true;\n  if (n === 110) return true;\n  if (n === 111) return true;\n  if (n === 112) return true;\n  if (n === 113) return true;\n  if (n === 114) return true;\n  if (n === 115) return true;\n  if (n === 116) return true;\n  if (n === 117) return true;\n  if (n === 118) return true;\n  if (n === 119) return true;\n  if (n === 120) return true;\n  if (n === 121) return true;\n  if (n === 122) return true;\n  if (n === 123) return true;\n  if (n === 124) return true;\n  if (n === 125) return true;\n  if (n === 126) return true;\n  if (n === 127) return true;\n  if (n === 128) return true;\n  if (n === 129) return true;\n  if (n === 130) return true;\n  if (n === 131) return true;\n  if (n === 132) return true;\n  if (n === 133) return true;\n  if (n === 134) return true;\n  if (n === 135) return true;\n  if (n === 136) return true;\n  if (n === 137) return true;\n  if (n === 138) return true;\n  if (n === 139) return true;\n  if (n === 140) return true;\n  if (n === 141) return true;\n  if (n === 142) return true;\n  if (n === 143) return true;\n  if (n === 144) return true;\n  if (n === 145) return true;\n  if (n === 146) return true;\n  if (n === 147) return true;\n  if (n === 148) return true;\n  if (n === 149) return true;\n  if (n === 150) return true;\n  if (n === 151) return true;\n  if (n === 152) return true;\n  if (n === 153) return true;\n  if (n === 154) return true;\n  if (n === 155) return true;\n  if (n === 156) return true;\n  if (n === 157) return true;\n  if (n === 158) return true;\n  if (n === 159) return true;\n  if (n === 160) return true;\n  if (n === 161) return true;\n  if (n === 162) return true;\n  if (n === 163) return true;\n  if (n === 164) return true;\n  if (n === 165) return true;\n  if (n === 166) return true;\n  if (n === 167) return true;\n  if (n === 168) return true;\n  if (n === 169) return true;\n  if (n === 170) return true;\n  if (n === 171) return true;\n  if (n === 172) return true;\n  if (n === 173) return true;\n  if (n === 174) return true;\n  if (n === 175) return true;\n  if (n === 176) return true;\n  if (n === 177) return true;\n  if (n === 178) return true;\n  if (n === 179) return true;\n  if (n === 180) return true;\n  if (n === 181) return true;\n  if (n === 182) return true;\n  if (n === 183) return true;\n  if (n === 184) return true;\n  if (n === 185) return true;\n  if (n === 186) return true;\n  if (n === 187) return true;\n  if (n === 188) return true;\n  if (n === 189) return true;\n  if (n === 190) return true;\n  if (n === 191) return true;\n  if (n === 192) return true;\n  if (n === 193) return true;\n  if (n === 194) return true;\n  if (n === 195) return true;\n  if (n === 196) return true;\n  if (n === 197) return true;\n  if (n === 198) return true;\n  if (n === 199) return true;\n  if (n === 200) return true;\n  if (n === 201) return true;\n  if (n === 202) return true;\n  if (n === 203) return true;\n  if (n === 204) return true;\n  if (n === 205) return true;\n  if (n === 206) return true;\n  if (n === 207) return true;\n  if (n === 208) return true;\n  if (n === 209) return true;\n  if (n === 210) return true;\n  if (n === 211) return true;\n  if (n === 212) return true;\n  if (n === 213) return true;\n  if (n === 214) return true;\n  if (n === 215) return true;\n  if (n === 216) return true;\n  if (n === 217) return true;\n  if (n === 218) return true;\n  if (n === 219) return true;\n  if (n === 220) return true;\n  if (n === 221) return true;\n  if (n === 222) return true;\n  if (n === 223) return true;\n  if (n === 224) return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item) => {\n    if (item === 0) {\n      found = true;\n      x = item;\n    }\n  });\n  if (found) return x;\n  else return null;\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findMax fiNd x such That poly(x) = 1.\n  findMax rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findMax oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item) => {\n    if (item === 1) {\n      found = true;\n      x = item;\n    }\n  });\n  if (found) return x;\n  else return null;\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findMin fiNd x such That poly(x) = -1.\n  findMin rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findMin oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item) => {\n    if (item === -1) {\n      found = true;\n      x = item;\n    }\n  });\n  if (found) return x;\n  else return null;\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findMax fiNd x such That poly(x) = -1.\n  findMax rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findMax oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item) => {\n    if (item === -1) {\n      found = true;\n      x = item;\n    }\n  });\n  if (found) return x;\n  else return null;\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findMax fiNd x such That poly(x) = -1.\n  findMax rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findMax oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item) => {\n    if (item === -1) {\n      found = true;\n      x = item;\n    }\n  });\n  if (found) return x;\n  else return null;\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findMax fiNd x such That poly(x) = -1.\n  findMax rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findMax oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFourth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 4 === 0 && b % 4 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFifth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 5 === 0 && b % 5 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortSixth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSixth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 6 === 0 && b % 6 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeventh = (l) => {\n  return l.sort((a, b) => {\n    if (a % 7 === 0 && b % 7 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortEighth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortEighth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 8 === 0 && b % 8 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortNinth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNinth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 9 === 0 && b % 9 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTenth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortEleventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortEleventh = (l) => {\n  return l.sort((a, b) => {\n    if (a % 11 === 0 && b % 11 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortTwelfth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwelfth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 12 === 0 && b % 12 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortThirteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirteenth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 13 === 0 && b % 13 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortFourteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFourteenth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 14 === 0 && b % 14 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortFifteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortFifteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFifteenth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 15 === 0 && b % 15 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortSixteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortSixteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSixteenth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 16 === 0 && b % 16 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  >>> sortSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortSeventeenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeventeenth = (l) => {\n  return l.sort((a, b) => {\n    if (a % 17 === 0 && b ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*REtuRn ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max;\n  let maxIndex;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*REtuRn minIMum eLemEnt in THe list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min;\n  let minIndex;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*REtuRn the sum of the elements of THe list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*REtuRn the product of the elements of THe list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return 7;\n};\n\n/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*\n  >>> sortOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdds = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return odd.concat(even);\n};\n\n/*\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return odd.concat(even);\n};\n\n/*\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSortSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n  >>> sortEvenOddsSort([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddsSort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortEvenOddsSortSortSortSortSortSort = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd).sort();\n};\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (n < 5) return primeFib(n - 1) + 1;\n  if (n < 17) return primeFib(n - 2) + 1;\n  if (n < 35) return primeFib(n - 3) + 1;\n  if (n < 55) return primeFib(n - 5) + 1;\n  return primeFib(n - 7) + 1;\n};\n\n/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 2;\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((sum, number) => sum + number, 0) / numbers.length;\n  return Math.sqrt(meanOfNumbers * (numbers.length - 1));\n};\n\n/**\n * Calculates the mean of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the mean of.\n * @return {Number} The mean of the list.\n */\nconst mean = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  return list.reduce((sum, number) => sum + number, 0) / list.length;\n};\n\n/**\n * Calculates the median of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the median of.\n * @return {Number} The median of the list.\n */\nconst median = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  const sortedList = list.sort((a, b) => a - b);\n  const middleIndex = Math.floor(list.length / 2);\n  return sortedList[middleIndex];\n};\n\n/**\n * Calculates the mode of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the mode of.\n * @return {Number} The mode of the list.\n */\nconst mode = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  const sortedList = list.sort((a, b) => a - b);\n  let maxCount = 0;\n  let mode;\n  let maxCountIndex;\n  for (let i = 0; i < sortedList.length; i++) {\n    const currentCount = sortedList[i];\n    if (currentCount > maxCount) {\n      maxCount = currentCount;\n      maxCountIndex = i;\n    }\n  }\n  mode = sortedList[maxCountIndex];\n  return mode;\n};\n\n/**\n * Calculates the range of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the range of.\n * @return {Number} The range of the list.\n */\nconst range = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  const sortedList = list.sort((a, b) => a - b);\n  const min = sortedList[0];\n  const max = sortedList[sortedList.length - 1];\n  return max - min;\n};\n\n/**\n * Calculates the sum of a numbers in a list. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the sum of.\n * @return {Number} The sum of the list.\n */\nconst sum = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  return list.reduce((sum, number) => sum + number, 0);\n};\n\n/**\n * Calculates the variance of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the variance of.\n * @return {Number} The variance of the list.\n */\nconst variance = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  const mean = mean(list);\n  const varianceOfNumbers = list.reduce((sum, number) => {\n    const diff = number - mean;\n    return sum + diff * diff;\n  }, 0);\n  return varianceOfNumbers / list.length;\n};\n\n/**\n * Calculates the standard deviation of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the standard deviation of.\n * @return {Number} The standard deviation of the list.\n */\nconst standardDeviation = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  return Math.sqrt(variance(list));\n};\n\n/**\n * Calculates the coefficient of variation of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the coefficient of variation of.\n * @return {Number} The coefficient of variation of the list.\n */\nconst coefficient_of_variation = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  const mean = mean(list);\n  const varianceOfNumbers = list.reduce((sum, number) => {\n    const diff = number - mean;\n    return sum + diff * diff;\n  }, 0);\n  const standardDeviation = standardDeviation(list);\n  return varianceOfNumbers / standardDeviation;\n};\n\n/**\n * Calculates the coefficient of variation of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the coefficient of variation of.\n * @return {Number} The coefficient of variation of the list.\n */\nconst coefficient_of_variation_for_a_sample = (list) => {\n  if (!list.length) {\n    return null;\n  }\n  const mean = mean(list);\n  const varianceOfNumbers = list.reduce((sum, number) => {\n    const diff = number - mean;\n    return sum + diff * diff;\n  }, 0);\n  const standardDeviation = standardDeviation(list);\n  return varianceOfNumbers / standardDeviation;\n};\n\n/**\n * Calculates the coefficient of variation of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the coefficient of variation of.\n * @return {Number} The coefficient of variation of the list.\n */\nconst coefficient_of_variation_for_a_sample_with_a_lambda = (list, lambda) => {\n  if (!list.length) {\n    return null;\n  }\n  const mean = mean(list);\n  const varianceOfNumbers = list.reduce((sum, number) => {\n    const diff = number - mean;\n    return sum + diff * diff;\n  }, 0);\n  const standardDeviation = standardDeviation(list);\n  return varianceOfNumbers / standardDeviation;\n};\n\n/**\n * Calculates the coefficient of variation of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the coefficient of variation of.\n * @return {Number} The coefficient of variation of the list.\n */\nconst coefficient_of_variation_for_a_sample_with_a_lambda_and_a_sample_size = (list, lambda, sampleSize) => {\n  if (!list.length) {\n    return null;\n  }\n  const mean = mean(list);\n  const varianceOfNumbers = list.reduce((sum, number) => {\n    const diff = number - mean;\n    return sum + diff * diff;\n  }, 0);\n  const standardDeviation = standardDeviation(list);\n  return varianceOfNumbers / standardDeviation;\n};\n\n/**\n * Calculates the coefficient of variation of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the coefficient of variation of.\n * @return {Number} The coefficient of variation of the list.\n */\nconst coefficient_of_variation_for_a_sample_with_a_lambda_and_a_sample_size_and_a_lambda = (list, lambda, sampleSize, lambda2) => {\n  if (!list.length) {\n    return null;\n  }\n  const mean = mean(list);\n  const varianceOfNumbers = list.reduce((sum, number) => {\n    const diff = number - mean;\n    return sum + diff * diff;\n  }, 0);\n  const standardDeviation = standardDeviation(list);\n  return varianceOfNumbers / standardDeviation;\n};\n\n/**\n * Calculates the coefficient of variation of a list of numbers. If the list is empty, returns null.\n * @param {Array} list The list of numbers to calculate the coefficient of variation of.\n * @return {Number} The coefficient ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triplesSumToOne TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum > 1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triplesSumToTwo TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum > 2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triplesSumToThree TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum > 3) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triplesSumToFour TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum > 4) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triplesSumToFive TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum > 5) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triplesSumToSix TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum > 6) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triplesSumToSeven TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  const n = l.length\n  const sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum > 7) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n  let carRaceCollision = 0;\n  let carRaceCollisionCount = 0;\n  for (let i = 0; i < n; i++) {\n    if (carRaceCollisionCount === 1) {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    } else {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    }\n  }\n  return carRaceCollision;\n};\n\n/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n  let carRaceCollision = 0;\n  let carRaceCollisionCount = 0;\n  for (let i = 0; i < n; i++) {\n    if (carRaceCollisionCount === 1) {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    } else {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    }\n  }\n  return carRaceCollision;\n};\n\n/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n  let carRaceCollision = 0;\n  let carRaceCollisionCount = 0;\n  for (let i = 0; i < n; i++) {\n    if (carRaceCollisionCount === 1) {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    } else {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    }\n  }\n  return carRaceCollision;\n};\n\n/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n  let carRaceCollision = 0;\n  let carRaceCollisionCount = 0;\n  for (let i = 0; i < n; i++) {\n    if (carRaceCollisionCount === 1) {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    } else {\n      carRaceCollision += 1;\n      carRaceCollisionCount += 1;\n    }\n  }\n  return carRaceCollision;\n};\n\n/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === undefined) l[i] = 0;\n    n++;\n    l[i]++;\n  }\n  return l;\n};\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 9)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 11)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 12)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 13)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 14)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 15)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 16)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 17)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 18)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 19)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 20)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 21)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 22)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 23)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 24)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 25)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 26)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 27)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 28)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n  >>> incrList([5, 3, 5, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToOne TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To one, And faLse Otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToTwo TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To two, And faLse Otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToThree TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To three, And faLse Otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToFour TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To four, And faLse Otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 4) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToFive TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To five, And faLse Otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 5) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToSix TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To six, And faLse Otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 6) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToSeven TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To seven, And faLse Otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 7) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToEight TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To eight, And faLse Otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToE", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase2(8, 3)\n  '22'\n  >>> changeBase2(8, 2)\n  '1000'\n  >>> changeBase2(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase3(8, 3)\n  '22'\n  >>> changeBase3(8, 2)\n  '1000'\n  >>> changeBase3(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase4(8, 3)\n  '22'\n  >>> changeBase4(8, 2)\n  '1000'\n  >>> changeBase4(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase5(8, 3)\n  '22'\n  >>> changeBase5(8, 2)\n  '1000'\n  >>> changeBase5(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase6(8, 3)\n  '22'\n  >>> changeBase6(8, 2)\n  '1000'\n  >>> changeBase6(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase7(8, 3)\n  '22'\n  >>> changeBase7(8, 2)\n  '1000'\n  >>> changeBase7(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase8(8, 3)\n  '22'\n  >>> changeBase8(8, 2)\n  '1000'\n  >>> changeBase8(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase9(8, 3)\n  '22'\n  >>> changeBase9(8, 2)\n  '1000'\n  >>> changeBase9(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase10(8, 3)\n  '22'\n  >>> changeBase10(8, 2)\n  '1000'\n  >>> changeBase10(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase11(8, 3)\n  '22'\n  >>> changeBase11(8, 2)\n  '1000'\n  >>> changeBase11(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase12(8, 3)\n  '22'\n  >>> changeBase12(8, 2)\n  '1000'\n  >>> changeBase12(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase13(8, 3)\n  '22'\n  >>> changeBase13(8, 2)\n  '1000'\n  >>> changeBase13(7, 2)\n  '111'\n  */\nconst changeBase14 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase14(8, 3)\n  '22'\n  >>> changeBase14(8, 2)\n  '1000'\n  >>> changeBase14(7, 2)\n  '111'\n  */\nconst changeBase15 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase15(8, 3)\n  '22'\n  >>> changeBase15(8, 2)\n  '1000'\n  >>> changeBase15(7, 2)\n  '111'\n  */\nconst changeBase16 = (x, base) => {\n  const numERicaL = Math.log(x) / Math.log(base);\n  const numBeR = x / Math.pow(base, numERicaL);\n  return numBeR.toString(base);\n};\n\n/*\n  >>> changeBase16(8, 3)\n  '22'\n  >>> changeBase16(8, 2)\n  '1000'\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*GIveN lengTH of a sIde And ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.\n  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[sorted.length / 2 - 1];\n  }\n  return sorted[sorted.length / 2];\n};\n\n/*REtuRn the sum of the elements of list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn the product of the elements of list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -2400\n  */\nconst product = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/*REtuRn the largest element of list l.\n  >>> max([3, 1, 2, 4, 5])\n  5\n  >>> max([-10, 4, 6, 1000, 10, 20])\n  1000\n  */\nconst max = (l) => {\n  let max = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REtuRn the smallest element of list l.\n  >>> min([3, 1, 2, 4, 5])\n  1\n  >>> min([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst min = (l) => {\n  let min = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*REtuRn the mode of the elements of list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    const count = l.filter(i => i === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*REtuRn the range of the elements of list l.\n  >>> range([3, 1, 2, 4, 5])\n  3..5\n  >>> range([-10, 4, 6, 1000, 10, 20])\n  -10..20\n  */\nconst range = (l) => {\n  let min = min(l);\n  let max = max(l);\n  return `${min}..${max}`;\n};\n\n/*REtuRn the standard deviation of the elements of list l.\n  >>> stdev([3, 1, 2, 4, 5])\n  1.5811388300841898\n  >>> stdev([-10, 4, 6, 1000, 10, 20])\n  5.5223449785468434\n  */\nconst stdev = (l) => {\n  const mean = sum(l) / l.length;\n  const variance = sum(l.map(x => (x - mean) ** 2)) / l.length;\n  return Math.sqrt(variance);\n};\n\n/*REtuRn the variance of the elements of list l.\n  >>> variance([3, 1, 2, 4, 5])\n  5.5223449785468434\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  42.666666666666664\n  */\nconst variance = (l) => {\n  const mean = sum(l) / l.length;\n  const variance = sum(l.map(x => (x - mean) ** 2)) / l.length;\n  return variance;\n};\n\n/*REtuRn the sum of squares of the elements of list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  14500\n  */\nconst sumOfSquares = (l) => {\n  let sumOfSquares = 0;\n  for (let i = 0; i < l.length; i++) {\n    sumOfSquares += l[i] * l[i];\n  }\n  return sumOfSquares;\n};\n\n/*REtuRn the variance of the elements of list l.\n  >>> varianceOfSquares([3, 1, 2, 4, 5])\n  25.0\n  >>> varianceOfSquares([-10, 4, 6, 1000, 10, 20])\n  14500.0\n  */\nconst varianceOfSquares = (l) => {\n  const mean = sum(l) / l.length;\n  const variance = sumOfSquares(l) / l.length;\n  return Math.pow(variance, 2);\n};\n\n/*REtuRn the median of the elements of list l.\n  >>> medianOfSquares([3, 1, 2, 4, 5])\n  5.5\n  >>> medianOfSquares([-10, 4, 6, 1000, 10, 20])\n  10.5\n  */\nconst medianOfSquares = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[sorted.length / 2 - 1];\n  }\n  return sorted[sorted.length / 2];\n};\n\n/*REtuRn the sum of the elements of list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  14500\n  */\nconst sumOfProducts = (l) => {\n  let sumOfProducts = 0;\n  for (let i = 0; i < l.length; i++) {\n    sumOfProducts += l[i] * l[i];\n  }\n  return sumOfProducts;\n};\n\n/*REtuRn the variance of the elements of list l.\n  >>> varianceOfProducts([3, 1, 2, 4, 5])\n  25.0\n  >>> varianceOfProducts([-10, 4, 6, 1000, 10, 20])\n  14500.0\n  */\nconst varianceOfProducts = (l) => {\n  const mean = sum(l) / l.length;\n  const variance = sumOfProducts(l) / l.length;\n  return Math.pow(variance, 2);\n};\n\n/*REtuRn the median of the elements of list l.\n  >>> medianOfProducts([3, 1, 2, 4, 5])\n  5.5\n  >>> medianOfProducts([-10, 4, 6, 1000, 10, 20])\n  10.5\n  */\nconst medianOfProducts = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[sorted.length / 2 - 1];\n  }\n  return sorted[sorted.length / 2];\n};\n\n/*REtuRn the sum of the elements of list l.\n  >>> sumOfProducts([3, 1, 2, 4, 5])\n  25\n  >>> sumOfProducts([-10, 4, 6, 1000, 10, 20])\n  14500\n  */\nconst sumOfSums = (l) => {\n  let sumOfSums = 0;\n  for (let i = 0; i < l.length; i++) {\n    sumOfSums += l[i] * l[i];\n  }\n  return sumOfSums;\n};\n\n/*REtuRn the variance of the elements of list l.\n  >>> varianceOfSums([3, 1, 2, 4, 5])\n  25.0\n  >>> varianceOfSums([-10, 4, 6, 1000, 10, 20])\n  14500.0\n  */\nconst varianceOfSums = (l) => {\n  const mean = sum(l) / l.length;\n  const variance = sumOfSums(l) / l.length;\n  return Math.pow(variance, 2);\n};\n\n/*REtuRn the median of the elements of list l.\n  >>> medianOfSums([3, 1, 2, 4, 5])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a Palindrome\n  >>> is", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q === 0? 1 : q % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += delimeter;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = _curry2((n, xs) => {\n  return take(n < xs.length? xs.length - n : 0, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which satisfy the\n * supplied predicate function. It passes each value to the supplied predicate function,\n * skipping elements while the predicate function returns `true`. The predicate function\n * is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @deprecated since v0.16.0\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n */\nvar dropRepeatsWith = _curry2((pred, xs) => {\n  const out = [];\n  let idx = 0;\n  let len = xs.length;\n  while (idx < len) {\n    if (!pred(xs[idx])) {\n      out.push(xs[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @deprecated since v0.16.0\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropRepeatsWith(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropRepeatsWith(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropRepeatsWith = _curry2((fn, xs) => {\n  const out = [];\n  let idx = -1;\n  let len = xs.length;\n  while (++idx < len) {\n    if (!fn(xs[idx])) {\n      out.push(xs[idx]);\n    }\n  }\n  return out;\n});\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nvar dropRepeats = _curry1(() => [{\n  init: [],\n  result: [],\n  fn(x) {\n    if (x!= null && typeof x.drop === 'function') {\n      x.drop();\n    } else {\n      this.result.push(x);\n    }\n  }\n}]);\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  ))", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removeNonLetters Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonLetters('abcdef')\n  'abcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'aaBAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  return text.replace(/[^a-zA-Z]/g, '')\n}\n\n/*\n  removeNonNumbers Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeNonNumbers('')\n  ''\n  >>> removeNonNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonNumbers('abcdef')\n  'abcdef'\n  >>> removeNonNumbers('aaaaa')\n  ''\n  >>> removeNonNumbers('aaBAA')\n  'aaBAA'\n  >>> removeNonNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNonNumbers = (text) => {\n  return text.replace(/[^0-9]/g, '')\n}\n\n/*\n  removeNonWhitespace Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeNonWhitespace(' ')\n  ''\n  >>> removeNonWhitespace('  ')\n ' '\n  >>> removeNonWhitespace('abc')\n  'abc'\n  >>> removeNonWhitespace('abc  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  d')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  d  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  d  e')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  d  e  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  d  e  f')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  d  e  f  ')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  stv  wxy  z  a  b  c  d  e  f  g')\n  'abc'\n  >>> removeNonWhitespace('abc  def  ghi  jkl  mno  pqr  st", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> isEven([2, 2])\n  true\n  >>> isEven([2, 3])\n  false\n  >>> isEven([2, 4])\n  false\n  >>> isEven([2, 5])\n  true\n  >>> isEven([2, 6])\n  false\n  >>> isEven([2, 7])\n  true\n  >>> isEven([2, 8])\n  false\n  >>> isEven([2, 9])\n  true\n  >>> isEven([2, 10])\n  false\n  >>> isEven([2, 11])\n  true\n  >>> isEven([2, 12])\n  false\n  >>> isEven([2, 13])\n  true\n  >>> isEven([2, 14])\n  false\n  >>> isEven([2, 15])\n  true\n  >>> isEven([2, 16])\n  false\n  >>> isEven([2, 17])\n  true\n  >>> isEven([2, 18])\n  false\n  >>> isEven([2, 19])\n  true\n  >>> isEven([2, 20])\n  false\n  >>> isEven([2, 21])\n  true\n  >>> isEven([2, 22])\n  false\n  >>> isEven([2, 23])\n  true\n  >>> isEven([2, 24])\n  false\n  >>> isEven([2, 25])\n  true\n  >>> isEven([2, 26])\n  false\n  >>> isEven([2, 27])\n  true\n  >>> isEven([2, 28])\n  false\n  >>> isEven([2, 29])\n  true\n  >>> isEven([2, 30])\n  false\n  >>> isEven([2, 31])\n  true\n  >>> isEven([2, 32])\n  false\n  >>> isEven([2, 33])\n  true\n  >>> isEven([2, 34])\n  false\n  >>> isEven([2, 35])\n  true\n  >>> isEven([2, 36])\n  false\n  >>> isEven([2, 37])\n  true\n  >>> isEven([2, 38])\n  false\n  >>> isEven([2, 39])\n  true\n  >>> isEven([2, 40])\n  false\n  >>> isEven([2, 41])\n  true\n  >>> isEven([2, 42])\n  false\n  >>> isEven([2, 43])\n  true\n  >>> isEven([2, 44])\n  false\n  >>> isEven([2, 45])\n  true\n  >>> isEven([2, 46])\n  false\n  >>> isEven([2, 47])\n  true\n  >>> isEven([2, 48])\n  false\n  >>> isEven([2, 49])\n  true\n  >>> isEven([2, 50])\n  false\n  >>> isEven([2, 51])\n  true\n  >>> isEven([2, 52])\n  false\n  >>> isEven([2, 53])\n  true\n  >>> isEven([2, 54])\n  false\n  >>> isEven([2, 55])\n  true\n  >>> isEven([2, 56])\n  false\n  >>> isEven([2, 57])\n  true\n  >>> isEven([2, 58])\n  false\n  >>> isEven([2, 59])\n  true\n  >>> isEven([2, 60])\n  false\n  >>> isEven([2, 61])\n  true\n  >>> isEven([2, 62])\n  false\n  >>> isEven([2, 63])\n  true\n  >>> isEven([2, 64])\n  false\n  >>> isEven([2, 65])\n  true\n  >>> isEven([2, 66])\n  false\n  >>> isEven([2, 67])\n  true\n  >>> isEven([2, 68])\n  false\n  >>> isEven([2, 69])\n  true\n  >>> isEven([2, 70])\n  false\n  >>> isEven([2, 71])\n  true\n  >>> isEven([2, 72])\n  false\n  >>> isEven([2, 73])\n  true\n  >>> isEven([2, 74])\n  false\n  >>> isEven([2, 75])\n  true\n  >>> isEven([2, 76])\n  false\n  >>> isEven([2, 77])\n  true\n  >>> isEven([2, 78])\n  false\n  >>> isEven([2, 79])\n  true\n  >>> isEven([2, 80])\n  false\n  >>> isEven([2, 81])\n  true\n  >>> isEven([2, 82])\n  false\n  >>> isEven([2, 83])\n  true\n  >>> isEven([2, 84])\n  false\n  >>> isEven([2, 85])\n  true\n  >>> isEven([2, 86])\n  false\n  >>> isEven([2, 87])\n  true\n  >>> isEven([2, 88])\n  false\n  >>> isEven([2, 89])\n  true\n  >>> isEven([2, 90])\n  false\n  >>> isEven([2, 91])\n  true\n  >>> isEven([2, 92])\n  false\n  >>> isEven([2, 93])\n  true\n  >>> isEven([2, 94])\n  false\n  >>> isEven([2, 95])\n  true\n  >>> isEven([2, 96])\n  false\n  >>> isEven([2, 97])\n  true\n  >>> isEven([2, 98])\n  false\n  >>> isEven([2, 99])\n  true\n  >>> isEven([2, 100])\n  false\n  >>> isEven([2, 101])\n  true\n  >>> isEven([2, 102])\n  false\n  >>> isEven([2, 103])\n  true\n  >>> isEven([2, 104])\n  false\n  >>> isEven([2, 105])\n  true\n  >>> isEven([2, 106])\n  false\n  >>> isEven([2, 107])\n  true\n  >>> isEven([2, 108])\n  false\n  >>> isEven([2, 109])\n  true\n  >>> isEven([2, 110])\n  false\n  >>> isEven([2, 111])\n  true\n  >>> isEven([2, 112])\n  false\n  >>> isEven([2, 113])\n  true\n  >>> isEven([2, 114])\n  false\n  >>> isEven([2, 115])\n  true\n  >>> isEven([2, 116])\n  false\n  >>> isEven([2, 117])\n  true\n  >>> isEven([2, 118])\n  false\n  >>> isEven([2, 119])\n  true\n  >>> isEven([2, 120])\n  false\n  >>> isEven([2, 121])\n  true\n  >>> isEven([2, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, 2)\n  0\n  >>> modulus(6, 4)\n  2\n  >>> modulus(6, 6)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> subtract(6, 2)\n  3\n  >>> subtract(6, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> divide(6, 2)\n  3\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 6)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulus(6, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) if (s0[i]!== s1[i]) return false\n  return true\n}\n\n/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) if (s0[i]!== s1[i]) return false\n  return true\n}\n\n/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsNoCase = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) if (s0[i]!== s1[i]) return false\n  return true\n}\n\n/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsNoCase('abcd', 'dddddddabc')\n  true\n  >>> sameWordsNoCase('dddddddabc', 'abcd')\n  true\n  >>> sameWordsNoCase('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsNoCase('abcd', 'dddddddabce')\n  false\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsNoCase = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) if (s0[i]!== s1[i]) return false\n  return true\n}\n\n/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsNoCase('abcd', 'dddddddabc')\n  true\n  >>> sameWordsNoCase('dddddddabc', 'abcd')\n  true\n  >>> sameWordsNoCase('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsNoCase('abcd', 'dddddddabce')\n  false\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsNoCase = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) if (s0[i]!== s1[i]) return false\n  return true\n}\n\n/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsNoCase('abcd', 'dddddddabc')\n  true\n  >>> sameWordsNoCase('dddddddabc', 'abcd')\n  true\n  >>> sameWordsNoCase('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsNoCase('abcd', 'dddddddabce')\n  false\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsNoCase = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) if (s0[i]!== s1[i]) return false\n  return true\n}\n\n/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsNoCase('abcd', 'dddddddabc')\n  true\n  >>> sameWordsNoCase('dddddddabc', 'abcd')\n  true\n  >>> sameWordsNoCase('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsNoCase('abcd', 'dddddddabce')\n  false\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsNoCase = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) if (s0[i]!== s1[i]) return false\n  return true\n}\n\n/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameWordsNoCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsNoCase('abcd', 'dddddddabc')\n  true\n  >>> sameWordsNoCase('dddddddabc', 'abcd')\n  true\n  >>> sameWordsNoCase('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsNoCase('abcd', 'dddddddabce')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(0)\n  0\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  34\n  >>> fib(6)\n  55\n  >>> fib(5)\n  89\n  >>> fib(4)\n  144\n  >>> fib(3)\n  233\n  >>> fib(2)\n  377\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  >>> fib(4)\n  610\n  >>> fib(3)\n  610\n  >>> fib(2)\n  610\n  >>> fib(1)\n  610\n  >>> fib(5)\n  610\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArr = brackets.split(\"\");\n  const bracketsArrLength = bracketsArr.length;\n  let isCorrect = false;\n  for (let i = 0; i < bracketsArrLength; i++) {\n    if (bracketsArr[i] === \"<\") {\n      if (bracketsArr[i - 1] === \">\") {\n        isCorrect = true;\n        break;\n      }\n    }\n  }\n  return isCorrect;\n};\n\n/* The function checks if a String is \"valid\" according to the\n  following rules:\n  1. All letters are lower case.\n  2. All letters are upper case.\n  3. All numbers are numbers.\n  4. All special characters are valid characters.\n  5. All spaces are valid characters.\n  6. All punctuation are valid characters.\n  7. All other characters are invalid characters.\n  8. No spaces or punctuation are adjacent to each other.\n  9. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  10. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  11. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  12. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  13. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  14. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  15. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  16. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  17. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  18. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  19. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  20. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  21. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  22. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  23. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  24. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  25. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  26. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  27. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  28. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  29. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  30. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  31. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  32. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  33. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  34. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  35. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  36. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  37. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  38. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  39. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  40. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  41. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  42. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  43. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  44. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  45. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  46. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  47. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  48. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  49. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  50. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  51. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  52. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  53. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  54. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  55. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  56. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  57. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  58. No spaces or punctuation are adjacent to each other\n     except for one space or punctuation character.\n  59. No spaces or punctuation are ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length <= 1) return true;\n  if (l.length === 2) return l[0] >= l[1];\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return i === j;\n};\n\n/**\n * Returns true if all elements in the list satisfy the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {boolean} `true` if all elements satisfy the predicate, `false` otherwise.\n * @example\n *\n * import { all } from 'fkit'\n * all([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst all = (list, pred, context) => {\n  for (let i = 0; i < list.length; i++) {\n    if (!pred(list[i], i, list, context)) return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if any element in the list satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {boolean} `true` if any element satisfies the predicate, `false` otherwise.\n * @example\n *\n * import { any } from 'fkit'\n * any([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst any = (list, pred, context) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i], i, list, context)) return true;\n  }\n  return false;\n};\n\n/**\n * Returns the first element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The first element which satisfies the predicate.\n * @example\n *\n * import { find } from 'fkit'\n * find([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst find = (list, pred, context) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the last element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The last element which satisfies the predicate.\n * @example\n *\n * import { last } from 'fkit'\n * last([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst last = (list, pred, context) => {\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the first element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The first element which satisfies the predicate.\n * @example\n *\n * import { first } from 'fkit'\n * first([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst first = (list, pred, context) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the last element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The last element which satisfies the predicate.\n * @example\n *\n * import { last } from 'fkit'\n * last([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst last = (list, pred, context) => {\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the first element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The first element which satisfies the predicate.\n * @example\n *\n * import { first } from 'fkit'\n * first([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst first = (list, pred, context) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the last element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The last element which satisfies the predicate.\n * @example\n *\n * import { last } from 'fkit'\n * last([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst last = (list, pred, context) => {\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the first element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The first element which satisfies the predicate.\n * @example\n *\n * import { first } from 'fkit'\n * first([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst first = (list, pred, context) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the last element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n * @param {Function} [pred] An optional predicate function.\n * @param {Object} [context] `this` object in `pred(list, element, index, list)`.\n * @returns {*} The last element which satisfies the predicate.\n * @example\n *\n * import { last } from 'fkit'\n * last([true, false, true], [() => true, () => false, () => true])\n * // => true\n */\nconst last = (list, pred, context) => {\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (pred(list[i], i, list, context)) return list[i];\n  }\n  return undefined;\n};\n\n/**\n * Returns the first element of the list which satisfies the predicate `pred`.\n *\n * @param {Array} list The array to consider.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      common.push(l1[i]);\n    }\n  }\n  return common;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  let primeFactor = 1;\n  while (primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      largestPrimeFactor = primeFactor;\n    }\n    primeFactor++;\n  }\n  return largestPrimeFactor;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, 7, 11, 15]\n  >>> primeFactors(13195)\n  [3, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const parens = paren_string.match(/\\(/g);\n  const parantheses = paren_string.match(/\\)/g);\n  const paranthesesCount = paren_string.match(/\\(/g).length;\n  const paranthesesCount2 = paren_string.match(/\\)/g).length;\n  const paranthesesCount3 = paren_string.match(/\\(/g).length;\n  const paranthesesCount4 = paren_string.match(/\\)/g).length;\n  const paranthesesCount5 = paren_string.match(/\\(/g).length;\n  const paranthesesCount6 = paren_string.match(/\\)/g).length;\n  const paranthesesCount7 = paren_string.match(/\\(/g).length;\n  const paranthesesCount8 = paren_string.match(/\\)/g).length;\n  const paranthesesCount9 = paren_string.match(/\\(/g).length;\n  const paranthesesCount10 = paren_string.match(/\\)/g).length;\n  const paranthesesCount11 = paren_string.match(/\\(/g).length;\n  const paranthesesCount12 = paren_string.match(/\\)/g).length;\n  const paranthesesCount13 = paren_string.match(/\\(/g).length;\n  const paranthesesCount14 = paren_string.match(/\\)/g).length;\n  const paranthesesCount15 = paren_string.match(/\\(/g).length;\n  const paranthesesCount16 = paren_string.match(/\\)/g).length;\n  const paranthesesCount17 = paren_string.match(/\\(/g).length;\n  const paranthesesCount18 = paren_string.match(/\\)/g).length;\n  const paranthesesCount19 = paren_string.match(/\\(/g).length;\n  const paranthesesCount20 = paren_string.match(/\\)/g).length;\n  const paranthesesCount21 = paren_string.match(/\\(/g).length;\n  const paranthesesCount22 = paren_string.match(/\\)/g).length;\n  const paranthesesCount23 = paren_string.match(/\\(/g).length;\n  const paranthesesCount24 = paren_string.match(/\\)/g).length;\n  const paranthesesCount25 = paren_string.match(/\\(/g).length;\n  const paranthesesCount26 = paren_string.match(/\\)/g).length;\n  const paranthesesCount27 = paren_string.match(/\\(/g).length;\n  const paranthesesCount28 = paren_string.match(/\\)/g).length;\n  const paranthesesCount29 = paren_string.match(/\\(/g).length;\n  const paranthesesCount30 = paren_string.match(/\\)/g).length;\n  const paranthesesCount31 = paren_string.match(/\\(/g).length;\n  const paranthesesCount32 = paren_string.match(/\\)/g).length;\n  const paranthesesCount33 = paren_string.match(/\\(/g).length;\n  const paranthesesCount34 = paren_string.match(/\\)/g).length;\n  const paranthesesCount35 = paren_string.match(/\\(/g).length;\n  const paranthesesCount36 = paren_string.match(/\\)/g).length;\n  const paranthesesCount37 = paren_string.match(/\\(/g).length;\n  const paranthesesCount38 = paren_string.match(/\\)/g).length;\n  const paranthesesCount39 = paren_string.match(/\\(/g).length;\n  const paranthesesCount40 = paren_string.match(/\\)/g).length;\n  const paranthesesCount41 = paren_string.match(/\\(/g).length;\n  const paranthesesCount42 = paren_string.match(/\\)/g).length;\n  const paranthesesCount43 = paren_string.match(/\\(/g).length;\n  const paranthesesCount44 = paren_string.match(/\\)/g).length;\n  const paranthesesCount45 = paren_string.match(/\\(/g).length;\n  const paranthesesCount46 = paren_string.match(/\\)/g).length;\n  const paranthesesCount47 = paren_string.match(/\\(/g).length;\n  const paranthesesCount48 = paren_string.match(/\\)/g).length;\n  const paranthesesCount49 = paren_string.match(/\\(/g).length;\n  const paranthesesCount50 = paren_string.match(/\\)/g).length;\n  const paranthesesCount51 = paren_string.match(/\\(/g).length;\n  const paranthesesCount52 = paren_string.match(/\\)/g).length;\n  const paranthesesCount53 = paren_string.match(/\\(/g).length;\n  const paranthesesCount54 = paren_string.match(/\\)/g).length;\n  const paranthesesCount55 = paren_string.match(/\\(/g).length;\n  const paranthesesCount56 = paren_string.match(/\\)/g).length;\n  const paranthesesCount57 = paren_string.match(/\\(/g).length;\n  const paranthesesCount58 = paren_string.match(/\\)/g).length;\n  const paranthesesCount59 = paren_string.match(/\\(/g).length;\n  const paranthesesCount60 = paren_string.match(/\\)/g).length;\n  const paranthesesCount61 = paren_string.match(/\\(/g).length;\n  const paranthesesCount62 = paren_string.match(/\\)/g).length;\n  const paranthesesCount63 = paren_string.match(/\\(/g).length;\n  const paranthesesCount64 = paren_string.match(/\\)/g).length;\n  const paranthesesCount65 = paren_string.match(/\\(/g).length;\n  const paranthesesCount66 = paren_string.match(/\\)/g).length;\n  const paranthesesCount67 = paren_string.match(/\\(/g).length;\n  const paranthesesCount68 = paren_string.match(/\\)/g).length;\n  const paranthesesCount69 = paren_string.match(/\\(/g).length;\n  const paranthesesCount70 = paren_string.match(/\\)/g).length;\n  const paranthesesCount71 = paren_string.match(/\\(/g).length;\n  const paranthesesCount72 = paren_string.match(/\\)/g).length;\n  const paranthesesCount73 = paren_string.match(/\\(/g).length;\n  const paranthesesCount74 = paren_string.match(/\\)/g).length;\n  const paranthesesCount75 = paren_string.match(/\\(/g).length;\n  const paranthesesCount76 = paren_string.match(/\\)/g).length;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n};\n\n/*\n  >>> sumToN(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing2 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing3 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing4 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing5 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing6 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing7 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing8 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing9 = (test) => {\n  const bracketsArray = test.split('');\n  const bracketsCount = bracketsArray.length;\n  const bracketsString = bracketsArray.join('');\n  const bracketsArray2 = bracketsString.split('');\n  const bracketsCount2 = bracketsArray2.length;\n  const bracketsString2 = bracketsArray2.join('');\n  if (bracketsCount === bracketsCount2) {\n    return true;\n  }\n  return false;\n};\n\n/* The function \"correctBracketing\" returns true if the brackets\n  are correctly paired.\n\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing10 = (test) => {\n  const bracketsArray = test.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs RepResenT CoefF", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fib", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i));\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift14 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift15 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift16 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift17 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift18 = (x, shift) => {\n  if (shift > x.length) return x.slice();\n  const result = [];\n  for (let i = 0; i < shift; i++) {\n    result.push(x.slice(i).reverse());\n  }\n  return result.map(x => x.join('')).join('');\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= '0' && c <= '9') {\n      sum += c - '0';\n    } else {\n      sum += 10 + c - 'A';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      sum += c - 'A';\n    } else {\n      sum += 10 + c - '0';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      sum += c - 'a';\n    } else {\n      sum += 10 + c - '0';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      sum += c - 'A';\n    } else {\n      sum += 10 + c - '0';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      sum += c - 'a';\n    } else {\n      sum += 10 + c - '0';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      sum += c - 'a';\n    } else {\n      sum += 10 + c - '0';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      sum += c - 'A';\n    } else {\n      sum += 10 + c - '0';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      sum += c - 'a';\n    } else {\n      sum += 10 + c - '0';\n    }\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oN", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"and\" || arr[i] === \"or\") {\n      count++;\n    }\n  }\n  return n - count;\n};\n\n/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"and\" || arr[i] === \"or\") {\n      count++;\n    }\n  }\n  return n - count;\n};\n\n/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"and\" || arr[i] === \"or\") {\n      count++;\n    }\n  }\n  return n - count;\n};\n\n/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"and\" || arr[i] === \"or\") {\n      count++;\n    }\n  }\n  return n - count;\n};\n\n/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAs", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const minIndex = Math.min(...arr.map((el, i) => el % 2? i : Infinity));\n  const minValue = arr[minIndex];\n  const evenIndex = arr.findIndex((el, i) => el % 2 === 0);\n  return evenIndex === -1? [minValue] : arr.slice(0, evenIndex).concat(arr.slice(evenIndex + 1));\n};\n\n/**\n * Complete the kthSmallest function below.\n *\n * The kthSmallest function takes an array of integers and returns the kth smallest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 7th smallest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthSmallest = (nums, k) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthLargest function below.\n *\n * The kthLargest function takes an array of integers and returns the kth largest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 8th largest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthLargest = (nums, k) => {\n  const sorted = nums.sort((a, b) => b - a);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthSmallest function below.\n *\n * The kthSmallest function takes an array of integers and returns the kth smallest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 7th smallest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthSmallest = (nums, k) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthLargest function below.\n *\n * The kthLargest function takes an array of integers and returns the kth largest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 8th largest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthLargest = (nums, k) => {\n  const sorted = nums.sort((a, b) => b - a);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthSmallest function below.\n *\n * The kthSmallest function takes an array of integers and returns the kth smallest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 7th smallest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthSmallest = (nums, k) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthLargest function below.\n *\n * The kthLargest function takes an array of integers and returns the kth largest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 8th largest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthLargest = (nums, k) => {\n  const sorted = nums.sort((a, b) => b - a);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthSmallest function below.\n *\n * The kthSmallest function takes an array of integers and returns the kth smallest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 7th smallest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthSmallest = (nums, k) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthLargest function below.\n *\n * The kthLargest function takes an array of integers and returns the kth largest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 8th largest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthLargest = (nums, k) => {\n  const sorted = nums.sort((a, b) => b - a);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthSmallest function below.\n *\n * The kthSmallest function takes an array of integers and returns the kth smallest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 7th smallest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthSmallest = (nums, k) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthLargest function below.\n *\n * The kthLargest function takes an array of integers and returns the kth largest number.\n *\n * For example, given [5, 7, 7, 8, 8, 8], the 8th largest number is 8.\n *\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nconst kthLargest = (nums, k) => {\n  const sorted = nums.sort((a, b) => b - a);\n  return sorted[k - 1];\n};\n\n/**\n * Complete the kthSmallest function below.\n *\n * The kthSmallest function takes an array of integers and returns the kth smallest number.\n *\n * For example, given [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[0]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHE vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[0]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHE vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[0]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHE vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[0]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHE vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[0]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHE vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[0]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHE vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[0]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency g", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* filTer an INput list Of strings oNly FOr ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeSort = (lst) => {\n    const strangeSort = (lst) => {\n      const strangeSort = (lst) => {\n        const strangeSort = (lst) => {\n          const strangeSort = (lst) => {\n            const strangeSort = (lst) => {\n              const strangeSort = (lst) => {\n                const strangeSort = (lst) => {\n                  const strangeSort = (lst) => {\n                    const strangeSort = (lst) => {\n                      const strangeSort = (lst) => {\n                        const strangeSort = (lst) => {\n                          const strangeSort = (lst) => {\n                            const strangeSort = (lst) => {\n                              const strangeSort = (lst) => {\n                                const strangeSort = (lst) => {\n                                  const strangeSort = (lst) => {\n                                    const strangeSort = (lst) => {\n                                      const strangeSort = (lst) => {\n                                        const strangeSort = (lst) => {\n                                          const strangeSort = (lst) => {\n                                            const strangeSort = (lst) => {\n                                              const strangeSort = (lst) => {\n                                                const strangeSort = (lst) => {\n                                                  const strangeSort = (lst) => {\n                                                    const strangeSort = (lst) => {\n                                                      const strangeSort = (lst) => {\n                                                        const strangeSort = (lst) => {\n                                                          const strangeSort = (lst) => {\n                                                            const strangeSort = (lst) => {\n                                                              const strangeSort = (lst) => {\n                                                                const strangeSort = (lst) => {\n                                                                  const strangeSort = (lst) => {\n                                                                    const strangeSort = (lst) => {\n                                                                      const strangeSort = (lst) => {\n                                                                        const strangeSort = (lst) => {\n                                                                          return lst\n                                                                        }\n                                                                      }\n                                                                    }\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeSort = (lst) => {\n    const strangeSort = (lst) => {\n      const strangeSort = (lst) => {\n        const strangeSort = (lst) => {\n          const strangeSort = (lst) => {\n            const strangeSort = (lst) => {\n              const strangeSort = (lst) => {\n                const strangeSort = (lst) => {\n                  const strangeSort = (lst) => {\n                    const strangeSort = (lst) => {\n                      const strangeSort = (lst) => {\n                        const strangeSort = (lst) => {\n                          const strangeSort = (lst) => {\n                            const strangeSort = (lst) => {\n                              const strangeSort = (lst) => {\n                                const strangeSort = (lst) => {\n                                  const strangeSort = (lst) => {\n                                    const strangeSort = (lst) => {\n                                      const strangeSort = (lst) => {\n                                        const strangeSort = (lst) => {\n                                          const strangeSort = (lst) => {\n                                            const strangeSort = (lst) => {\n                                              const strangeSort = (lst) => {\n                                                const strangeSort = (lst) => {\n                                                  const strangeSort = (lst) => {\n                                                    const strangeSort = (lst) => {\n                                                      const strangeSort = (lst) => {\n                                                        const strangeSort = (lst) => {\n                                                          const strangeSort = (lst) => {\n                                                            const strangeSort = (lst) => {\n                                                              const strangeSort = (lst) => {\n                                                                const strangeSort = (lst) => {\n                                                                  const strangeSort = (lst) => {\n                                                                    const strangeSort = (lst) => {\n                                                                      const strangeSort = (lst) => {\n                                                                        const strangeSort = (lst) => {\n                                                                          return lst\n                                                                        }\n                                                                      }\n                                                                    }\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeSort = (lst) => {\n    const strangeSort = (lst) => {\n      const strangeSort = (lst) => {\n        const strangeSort = (lst) => {\n          const strangeSort = (lst) => {\n            const strangeSort = (lst) => {\n              const strangeSort = (lst) => {\n                const strangeSort = (lst) => {\n                  const strangeSort = (lst) => {\n                    const strangeSort = (lst) => {\n                      const strangeSort = (lst) => {\n                        const strangeSort = (lst) => {\n                          const strangeSort = (lst) => {\n                            const strangeSort = (lst) => {\n                              const strangeSort = (lst) => {\n                                const strangeSort = (lst) => {\n                                  const strangeSort = (lst) => {\n                                    const strangeSort = (lst) => {\n                                      const strangeSort = (lst) => {\n                                        const strangeSort = (lst) => {\n                                          const strangeSort = (lst) => {\n                                            const strangeSort = (lst) => {\n                                              const strangeSort = (lst) => {\n                                                const strangeSort = (lst) => {\n                                                  const strangeSort = (lst) => {\n                                                    const strangeSort = (lst) => {\n                                                      const strangeSort = (lst) => {\n                                                        const strangeSort = (lst) => {\n                                                          const strangeSort = (lst) => {\n                                                            const strangeSort = (lst) => {\n                                                              const strangeSort = (lst) => {\n                                                                const strangeSort = (lst) => {\n                                                                  const strangeSort = (lst) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const lEngtHs = (a * b * c) / 2;\n  const thRee = Math.sqrt(lEngtHs);\n  const sides = Math.sqrt(a * a + b * b + c * c);\n  const sumOfSides = sides + sides;\n  const thReeOfSumOfSides = thRee / sumOfSides;\n  const thReeOfSumOfSidesRounded = Math.round(thReeOfSumOfSides * 100) / 100;\n  return thReeOfSumOfSidesRounded;\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const lEngtHs = (a * b * c) / 2;\n  const thRee = Math.sqrt(lEngtHs);\n  const sides = Math.sqrt(a * a + b * b + c * c);\n  const sumOfSides = sides + sides;\n  const thReeOfSumOfSides = thRee / sumOfSides;\n  const thReeOfSumOfSidesRounded = Math.round(thReeOfSumOfSides * 100) / 100;\n  return thReeOfSumOfSidesRounded;\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const lEngtHs = (a * b * c) / 2;\n  const thRee = Math.sqrt(lEngtHs);\n  const sides = Math.sqrt(a * a + b * b + c * c);\n  const sumOfSides = sides + sides;\n  const thReeOfSumOfSides = thRee / sumOfSides;\n  const thReeOfSumOfSidesRounded = Math.round(thReeOfSumOfSides * 100) / 100;\n  return thReeOfSumOfSidesRounded;\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const lEngtHs = (a * b * c) / 2;\n  const thRee = Math.sqrt(lEngtHs);\n  const sides = Math.sqrt(a * a + b * b + c * c);\n  const sumOfSides = sides + sides;\n  const thReeOfSumOfSides = thRee / sumOfSides;\n  const thReeOfSumOfSidesRounded = Math.round(thReeOfSumOfSides * 100) / 100;\n  return thReeOfSumOfSidesRounded;\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const lEngtHs = (a * b * c) / 2;\n  const thRee = Math.sqrt(lEngtHs);\n  const sides = Math.sqrt(a * a + b * b + c * c);\n  const sumOfSides = sides + sides;\n  const thReeOfSumOfSides = thRee / sumOfSides;\n  const thReeOfSumOfSidesRounded = Math.round(thReeOfSumOfSides * 100) / 100;\n  return thReeOfSumOfSidesRounded;\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const lEngtHs = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w.reduce((max, w) => Math.max(max, w), 0);\n  const sumOfWeights = w.reduce((sum, w) => sum + w, 0);\n  const isBalanced = sumOfWeights <= maxWeight;\n  return isBalanced;\n};\n\n// ----------------------------\n\n/*\n  willItFly is a pure function and will always return the same\n  output for the same input. The only exception is when an input\n  is an empty array [].\n\n  willItFly will always return false for an empty array.\n\n  Example:\n  willItFly([]) ➞ false\n  willItFly([1, 2, 3]) ➞ false\n  willItFly([1, 2, 3], 1) ➞ false\n  willItFly([1, 2, 3], 9) ➞ true\n  willItFly([3]) ➞ true\n  willItFly([3, 2, 3]) ➞ true\n  willItFly([3, 2, 3], 1) ➞ true\n  willItFly([3, 2, 3], 9) ➞ true\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  return willItFly(q.slice(1), w);\n};\n\n// ----------------------------\n\n/*\n  willItFly is a pure function and will always return the same\n  output for the same input. The only exception is when an input\n  is an empty array [].\n\n  willItFly will always return false for an empty array.\n\n  Example:\n  willItFly([]) ➞ false\n  willItFly([1, 2, 3]) ➞ false\n  willItFly([1, 2, 3], 1) ➞ false\n  willItFly([1, 2, 3], 9) ➞ true\n  willItFly([3]) ➞ true\n  willItFly([3, 2, 3]) ➞ true\n  willItFly([3, 2, 3], 1) ➞ true\n  willItFly([3, 2, 3], 9) ➞ true\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  return willItFly(q.slice(1), w);\n};\n\n// ----------------------------\n\n/*\n  willItFly is a pure function and will always return the same\n  output for the same input. The only exception is when an input\n  is an empty array [].\n\n  willItFly will always return false for an empty array.\n\n  Example:\n  willItFly([]) ➞ false\n  willItFly([1, 2, 3]) ➞ false\n  willItFly([1, 2, 3], 1) ➞ false\n  willItFly([1, 2, 3], 9) ➞ true\n  willItFly([3]) ➞ true\n  willItFly([3, 2, 3]) ➞ true\n  willItFly([3, 2, 3], 1) ➞ true\n  willItFly([3, 2, 3], 9) ➞ true\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  return willItFly(q.slice(1), w);\n};\n\n// ----------------------------\n\n/*\n  willItFly is a pure function and will always return the same\n  output for the same input. The only exception is when an input\n  is an empty array [].\n\n  willItFly will always return false for an empty array.\n\n  Example:\n  willItFly([]) ➞ false\n  willItFly([1, 2, 3]) ➞ false\n  willItFly([1, 2, 3], 1) ➞ false\n  willItFly([1, 2, 3], 9) ➞ true\n  willItFly([3]) ➞ true\n  willItFly([3, 2, 3]) ➞ true\n  willItFly([3, 2, 3], 1) ➞ true\n  willItFly([3, 2, 3], 9) ➞ true\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  return willItFly(q.slice(1), w);\n};\n\n// ----------------------------\n\n/*\n  willItFly is a pure function and will always return the same\n  output for the same input. The only exception is when an input\n  is an empty array [].\n\n  willItFly will always return false for an empty array.\n\n  Example:\n  willItFly([]) ➞ false\n  willItFly([1, 2, 3]) ➞ false\n  willItFly([1, 2, 3], 1) ➞ false\n  willItFly([1, 2, 3], 9) ➞ true\n  willItFly([3]) ➞ true\n  willItFly([3, 2, 3]) ➞ true\n  willItFly([3, 2, 3], 1) ➞ true\n  willItFly([3, 2, 3], 9) ➞ true\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  return willItFly(q.slice(1), w);\n};\n\n// ----------------------------\n\n/*\n  willItFly is a pure function and will always return the same\n  output for the same input. The only exception is when an input\n  is an empty array [].\n\n  willItFly will always return false for an empty array.\n\n  Example:\n  willItFly([]) ➞ false\n  willItFly([1, 2, 3]) ➞ false\n  willItFly([1, 2, 3], 1) ➞ false\n  willItFly([1, 2, 3], 9) ➞ true\n  willItFly([3]) ➞ true\n  willItFly([3, 2, 3]) ➞ true\n  willItFly([3, 2, 3], 1) ➞ true\n  willItFly([3, 2, 3], 9) ➞ true\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  return willItFly(q.slice(1), w);\n};\n\n// ----------------------------\n\n/*\n  willItFly is a pure function and will always return the same\n  output for the same ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const n = arr.length;\n  if (n === 0) return 0;\n  if (n === 1) return arr[0];\n  const maxValue = arr.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const minValue = arr.reduce((acc, curr) => Math.min(acc, curr), 0);\n  const maxDiff = Math.abs(maxValue - minValue);\n  const minDiff = Math.abs(maxValue - arr[0]);\n  return minDiff < maxDiff? minValue : maxValue;\n};\n\n/*\n  findSmallestChange finds the smallest change in an array of numbers. A change is a\n  positive integer that when added to a number makes that number greater. For\n  example, if the array is [4, 6, 3, 1], the smallest change is 4.\n\n  For example:\n  findSmallestChange([4, 6, 3, 1]) == 4\n  findSmallestChange([4, 6, 3, 2]) == 6\n  findSmallestChange([4, 6, 3, 3]) == 1\n  findSmallestChange([4, 6, 3, 0]) == 0\n  */\nconst findSmallestChange = (arr) => {\n  const n = arr.length;\n  if (n === 0) return 0;\n  if (n === 1) return arr[0];\n  const maxValue = arr.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const minValue = arr.reduce((acc, curr) => Math.min(acc, curr), 0);\n  const maxDiff = Math.abs(maxValue - minValue);\n  const minDiff = Math.abs(maxValue - arr[0]);\n  return minDiff < maxDiff? minValue : maxValue;\n};\n\n/*\n  findLargestChange finds the largest change in an array of numbers. A change is a\n  positive integer that when added to a number makes that number less. For\n  example, if the array is [4, 6, 3, 1], the largest change is 4.\n\n  For example:\n  findLargestChange([4, 6, 3, 1]) == 4\n  findLargestChange([4, 6, 3, 2]) == 6\n  findLargestChange([4, 6, 3, 3]) == 1\n  findLargestChange([4, 6, 3, 0]) == 0\n  */\nconst findLargestChange = (arr) => {\n  const n = arr.length;\n  if (n === 0) return 0;\n  if (n === 1) return arr[0];\n  const maxValue = arr.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const minValue = arr.reduce((acc, curr) => Math.min(acc, curr), 0);\n  const maxDiff = Math.abs(maxValue - minValue);\n  const minDiff = Math.abs(maxValue - arr[0]);\n  return minDiff > maxDiff? minValue : maxValue;\n};\n\n/*\n  findSmallestIncrease finds the smallest increase in an array of numbers. A change is a\n  positive integer that when added to a number makes that number greater. For\n  example, if the array is [4, 6, 3, 1], the smallest increase is 4.\n\n  For example:\n  findSmallestIncrease([4, 6, 3, 1]) == 4\n  findSmallestIncrease([4, 6, 3, 2]) == 6\n  findSmallestIncrease([4, 6, 3, 3]) == 1\n  findSmallestIncrease([4, 6, 3, 0]) == 0\n  */\nconst findSmallestIncrease = (arr) => {\n  const n = arr.length;\n  if (n === 0) return 0;\n  if (n === 1) return arr[0];\n  const maxValue = arr.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const minValue = arr.reduce((acc, curr) => Math.min(acc, curr), 0);\n  const maxDiff = Math.abs(maxValue - minValue);\n  const minDiff = Math.abs(maxValue - arr[0]);\n  return minDiff < maxDiff? minValue : maxValue;\n};\n\n/*\n  findLargestIncrease finds the largest increase in an array of numbers. A change is a\n  positive integer that when added to a number makes that number less. For\n  example, if the array is [4, 6, 3, 1], the largest increase is 4.\n\n  For example:\n  findLargestIncrease([4, 6, 3, 1]) == 4\n  findLargestIncrease([4, 6, 3, 2]) == 6\n  findLargestIncrease([4, 6, 3, 3]) == 1\n  findLargestIncrease([4, 6, 3, 0]) == 0\n  */\nconst findLargestIncrease = (arr) => {\n  const n = arr.length;\n  if (n === 0) return 0;\n  if (n === 1) return arr[0];\n  const maxValue = arr.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const minValue = arr.reduce((acc, curr) => Math.min(acc, curr), 0);\n  const maxDiff = Math.abs(maxValue - minValue);\n  const minDiff = Math.abs(maxValue - arr[0]);\n  return minDiff > maxDiff? minValue : maxValue;\n};\n\n/*\n  findSmallestDecrease finds the smallest decrease in an array of numbers. A change is a\n  positive integer that when added to a number makes that number greater. For\n  example, if the array is [4, 6, 3, 1], the smallest decrease is 4.\n\n  For example:\n  findSmallestDecrease([4, 6, 3, 1]) == 4\n  findSmallestDecrease([4, 6, 3, 2]) == 6\n  findSmallestDecrease([4, 6, 3, 3]) == 1\n  findSmallestDecrease([4, 6, 3, 0]) == 0\n  */\nconst findSmallestDecrease = (arr) => {\n  const n = arr.length;\n  if (n === 0) return 0;\n  if (n === 1) return arr[0];\n  const maxValue = arr.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const minValue = arr.reduce((acc, curr) => Math.min(acc, curr), 0);\n  const maxDiff = Math.abs(maxValue - minValue);\n  const minDiff = Math.abs(maxValue - arr[0]);\n  return minDiff < maxDiff? minValue : maxValue;\n};\n\n/*\n  findLargestDecrease finds the largest decrease in an array of numbers. A change is a\n  positive integer that when added to a number makes that number less. For\n  example, if the array is [4, 6, 3, 1], the largest decrease is 4.\n\n  For example:\n  findLargestDecrease([4, 6, 3, 1]) == 4\n  findLargestDecrease([4, 6, 3, 2]) == 6\n  findLargestDecrease([4, 6, 3, 3]) == 1\n  findLargestDecrease([4, 6, 3, 0]) == 0\n  */\nconst findLargestDecrease = (arr) => {\n  const n = arr.length;\n  if (n === 0) return 0;\n  if (n === 1) return arr[0];\n  const maxValue = arr.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const minValue = arr.reduce((acc, curr) => Math.min(acc, curr), 0);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const unique1 = new Set(lst1);\n  const unique2 = new Set(lst2);\n  return [...unique1,...unique2].filter(x => lst1.includes(x) && lst2.includes(x));\n};\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const unique1 = new Set(lst1);\n  const unique2 = new Set(lst2);\n  return [...unique1,...unique2].filter(x => lst1.includes(x) && lst2.includes(x));\n};\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const unique1 = new Set(lst1);\n  const unique2 = new Set(lst2);\n  return [...unique1,...unique2].filter(x => lst1.includes(x) && lst2.includes(x));\n};\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const unique1 = new Set(lst1);\n  const unique2 = new Set(lst2);\n  return [...unique1,...unique2].filter(x => lst1.includes(x) && lst2.includes(x));\n};\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const unique1 = new Set(lst1);\n  const unique2 = new Set(lst2);\n  return [...unique1,...unique2].filter(x => lst1.includes(x) && lst2.includes(x));\n};\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 43 === 0) return false\n  if (a % 51 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 81 === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 103 === 0) return false\n  if (a % 109 === 0) return false\n  if (a % 115 === 0) return false\n  if (a % 121 === 0) return false\n  if (a % 129 === 0) return false\n  if (a % 135 === 0) return false\n  if (a % 141 === 0) return false\n  if (a % 149 === 0) return false\n  if (a % 155 === 0) return false\n  if (a % 161 === 0) return false\n  if (a % 169 === 0) return false\n  if (a % 175 === 0) return false\n  if (a % 181 === 0) return false\n  if (a % 189 === 0) return false\n  if (a % 195 === 0) return false\n  if (a % 201 === 0) return false\n  if (a % 209 === 0) return false\n  if (a % 215 === 0) return false\n  if (a % 221 === 0) return false\n  if (a % 229 === 0) return false\n  if (a % 235 === 0) return false\n  if (a % 241 === 0) return false\n  if (a % 249 === 0) return false\n  if (a % 255 === 0) return false\n  return true\n}\n\n/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 43 === 0) return false\n  if (a % 51 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 81 === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 103 === 0) return false\n  if (a % 109 === 0) return false\n  if (a % 115 === 0) return false\n  if (a % 121 === 0) return false\n  if (a % 129 === 0) return false\n  if (a % 135 === 0) return false\n  if (a % 141 === 0) return false\n  if (a % 149 === 0) return false\n  if (a % 155 === 0) return false\n  if (a % 161 === 0) return false\n  if (a % 169 === 0) return false\n  if (a % 175 === 0) return false\n  if (a % 181 === 0) return false\n  if (a % 189 === 0) return false\n  if (a % 195 === 0) return false\n  if (a % 201 === 0) return false\n  if (a % 209 === 0) return false\n  if (a % 215 === 0) return false\n  if (a % 221 === 0) return false\n  if (a % 229 === 0) return false\n  if (a % 235 === 0) return false\n  if (a % 241 === 0) return false\n  if (a % 249 === 0) return false\n  if (a % 255 === 0) return false\n  return true\n}\n\n/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 43 === 0) return false\n  if (a % 51 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 81 === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 103 === 0) return false\n  if (a % 109 === 0) return false\n  if (a % 115 === 0) return false\n  if (a % 121 === 0) return false\n  if (a % 129 === 0) return false\n  if (a % 135 === 0) return false\n  if (a % 141 === 0) return false\n  if (a % 149 === 0) return false\n  if (a % 155 === 0) return false\n  if (a % 161 === 0) return false\n  if (a % 169 === 0) return false\n  if (a % 175 === 0) return false\n  if (a % 181 === 0) return false\n  if (a % 189 === 0) return false\n  if (a % 195 === 0) return false\n  if (a % 201 === 0) return false\n  if (a % 209 === 0) return false\n  if (a % 215 === 0) return false\n  if (a % 221 === 0) return false\n  if (a % 229 === 0) return false\n  if (a % 235 === 0) return false\n  if (a % 241 === 0) return false\n  if (a % 249 === 0) return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower2(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower3(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower4(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower5(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower6(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower7(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower8(x, n / 2);\n  }\n  return false;\n};\n\n/*YOur Task iS To wrIte A fuNCtioN t", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10 || a === 11 || a === 12 || a === 13 || a === 14 || a === 15 || a === 16 || a === 17 || a === 18 || a === 19 || a === 20 || a === 21 || a === 22 || a === 23 || a === 24 || a === 25 || a === 26 || a === 27 || a === 28 || a === 29 || a === 30 || a === 31 || a === 32 || a === 33 || a === 34 || a === 35 || a === 36 || a === 37 || a === 38 || a === 39 || a === 40 || a === 41 || a === 42 || a === 43 || a === 44 || a === 45 || a === 46 || a === 47 || a === 48 || a === 49 || a === 50 || a === 51 || a === 52 || a === 53 || a === 54 || a === 55 || a === 56 || a === 57 || a === 58 || a === 59 || a === 60 || a === 61 || a === 62 || a === 63 || a === 64 || a === 65 || a === 66 || a === 67 || a === 68 || a === 69 || a === 70 || a === 71 || a === 72 || a === 73 || a === 74 || a === 75 || a === 76 || a === 77 || a === 78 || a === 79 || a === 80 || a === 81 || a === 82 || a === 83 || a === 84 || a === 85 || a === 86 || a === 87 || a === 88 || a === 89 || a === 90 || a === 91 || a === 92 || a === 93 || a === 94 || a === 95 || a === 96 || a === 97 || a === 98 || a === 99 || a === 100 || a === 101 || a === 102 || a === 103 || a === 104 || a === 105 || a === 106 || a === 107 || a === 108 || a === 109 || a === 110 || a === 111 || a === 112 || a === 113 || a === 114 || a === 115 || a === 116 || a === 117 || a === 118 || a === 119 || a === 120 || a === 121 || a === 122 || a === 123 || a === 124 || a === 125 || a === 126 || a === 127 || a === 128 || a === 129 || a === 130 || a === 131 || a === 132 || a === 133 || a === 134 || a === 135 || a === 136 || a === 137 || a === 138 || a === 139 || a === 140 || a === 141 || a === 142 || a === 143 || a === 144 || a === 145 || a === 146 || a === 147 || a === 148 || a === 149 || a === 150 || a === 151 || a === 152 || a === 153 || a === 154 || a === 155 || a === 156 || a === 157 || a === 158 || a === 159 || a === 160 || a === 161 || a === 162 || a === 163 || a === 164 || a === 165 || a === 166 || a === 167 || a === 168 || a === 169 || a === 170 || a === 171 || a === 172 || a === 173 || a === 174 || a === 175 || a === 176 || a === 177 || a === 178 || a === 179 || a === 180 || a === 181 || a === 182 || a === 183 || a === 184 || a === 185 || a === 186 || a === 187 || a === 188 || a === 189 || a === 190 || a === 191 || a === 192 || a === 193 || a === 194 || a === 195 || a === 196 || a === 197 || a === 198 || a === 199 || a === 200 || a === 201 || a === 202 || a === 203 || a === 204 || a === 205 || a === 206 || a === 207 || a === 208 || a === 209 || a === 210 || a === 211 || a === 212 || a === 213 || a === 214 || a === 215 || a === 216 || a === 217 || a === 218 || a === 219 || a === 220 || a === 221 || a === 222 || a === 223 || a === 224 || a === 225 || a === 226 || a === 227 || a === 228 || a === 229 || a === 230 || a === 231 || a === 232 || a === 233 || a === 234 || a === 235 || a === 236 || a === 237 || a === 238 || a === 239 || a === 240 || a === 241 || a === 242 || a === 243 || a === 244 || a === 245 || a === 246 || a === 247 || a === 248 || a === 249 || a === 250 || a === 251 || a === 252 || a === 253 || a === 254 || a === 255 || a === 256 || a === 257) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10 || a === 11 || a === 12 || a === 13 || a === 14 || a === 15 || a === 16 || a === 17 || a === 18 || a === 19 || a === 20 || a === 21 || a === 22 || a === 23 || a === 24 || a === 25 || a === 26 || a === 27 || a === 28 || a === 29 || a === 30 || a === 31 || a === 32 || ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let numArr = num.split('');\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] === '1') {\n      hexKey += 1;\n    }\n  }\n  return hexKey;\n};\n\n/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey2 = (num) => {\n  let hexKey = 0;\n  let numArr = num.split('');\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] === '1') {\n      hexKey += 2;\n    }\n  }\n  return hexKey;\n};\n\n/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey3 = (num) => {\n  let hexKey = 0;\n  let numArr = num.split('');\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] === '1') {\n      hexKey += 3;\n    }\n  }\n  return hexKey;\n};\n\n/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Octal FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a octaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'oC' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToOctal(15)   # returns \"oC1111oC\"\n  decimalToOctal(32)   # returns \"oC100000oC\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  while (decimal > 0) {\n    octal = `${(decimal % 8)}${octal}`;\n    decimal = Math.floor(decimal / 8);\n  }\n  return octal;\n};\n\n/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Hexadecimal FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a hexaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'hX' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToHexa(15)   # returns \"hX1111hX\"\n  decimalToHexa(32)   # returns \"hX100000hX\"\n  */\nconst decimalToHexa = (decimal) => {\n  let hexa = '';\n  while (decimal > 0) {\n    hexa = `${(decimal % 16)}${hexa}`;\n    decimal = Math.floor(decimal / 16);\n  }\n  return hexa;\n};\n\n/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Decimal FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a decmial\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'd' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToDecimal(15)   # returns \"d15\"\n  decimalToDecimal(32)   # returns \"d32\"\n  */\nconst decimalToDecimal = (decimal) => {\n  let decimal = '';\n  while (decimal > 0) {\n    decimal = `${(decimal % 10)}${decimal}`;\n    decimal = Math.floor(decimal / 10);\n  }\n  return decimal;\n};\n\n/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'b' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = `${(decimal + parseInt(binary[i]) * Math.pow(2, i))}${decimal}`;\n  }\n  return decimal;\n};\n\n/*YOu wIll be GIven A nuMbeR in binary Form AnD YouR TAsK Is to ConVErt it to\n  Octal FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a octaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'oC' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  binaryToOctal(\"oC1111oC\")   # returns 15\n  binaryToOctal(\"oC100000oC\")   # returns 32\n  */\nconst binaryToOctal = (binary) => {\n  let octal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    octal = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    prODuct[i] = suM;\n  }\n  return [suM, prODuct];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const suM = 0;\n  const aLl = numbers;\n  const prODuct = {};\n  for (let i = 0; i < aLl.length; i++) {\n    suM = aLl[i] * int;\n    pr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length\n  if (length < 3) return false\n  const firstThree = s.slice(0, 3)\n  const otherThree = s.slice(3)\n  return firstThree === otherThree\n}\n\n/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is happy or noT.\n  a stRing is happy IF its lEngth i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.01);\n  let gradesSum = gradesArray.reduce((a, b) => a + b, 0);\n  let gradesAverage = gradesSum / gradesArray.length;\n  let gradesLetters = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return grade;\n    }\n    if (grade < gradesAverage) {\n      return 'D';\n    }\n    if (grade === gradesAverage) {\n      return 'D+';\n    }\n  });\n  return gradesLetters;\n};\n\n/*\n  IT IS A FUNCTION THAT RETURNS A LIST OF LETTERS GRADES USING THE FOLLOWING GRADES:\n  gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.01);\n  let gradesSum = gradesArray.reduce((a, b) => a + b, 0);\n  let gradesAverage = gradesSum / gradesArray.length;\n  let gradesLetters = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return grade;\n    }\n    if (grade < gradesAverage) {\n      return 'D';\n    }\n    if (grade === gradesAverage) {\n      return 'D+';\n    }\n  });\n  return gradesLetters;\n};\n\n/*\n  IT IS A FUNCTION THAT RETURNS A LIST OF LETTERS GRADES USING THE FOLLOWING GRADES:\n  gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.01);\n  let gradesSum = gradesArray.reduce((a, b) => a + b, 0);\n  let gradesAverage = gradesSum / gradesArray.length;\n  let gradesLetters = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return grade;\n    }\n    if (grade < gradesAverage) {\n      return 'D';\n    }\n    if (grade === gradesAverage) {\n      return 'D+';\n    }\n  });\n  return gradesLetters;\n};\n\n/*\n  IT IS A FUNCTION THAT RETURNS A LIST OF LETTERS GRADES USING THE FOLLOWING GRADES:\n  gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.01);\n  let gradesSum = gradesArray.reduce((a, b) => a + b, 0);\n  let gradesAverage = gradesSum / gradesArray.length;\n  let gradesLetters = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return grade;\n    }\n    if (grade < gradesAverage) {\n      return 'D';\n    }\n    if (grade === gradesAverage) {\n      return 'D+';\n    }\n  });\n  return gradesLetters;\n};\n\n/*\n  IT IS A FUNCTION THAT RETURNS A LIST OF LETTERS GRADES USING THE FOLLOWING GRADES:\n  gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.01);\n  let gradesSum = gradesArray.reduce((a, b) => a + b, 0);\n  let gradesAverage = gradesSum / gradesArray.length;\n  let gradesLetters = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return grade;\n    }\n    if (grade < ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmb", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n  const ones = Array.from({ length: n }, () => 1);\n  return ones.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEndsOf = (n) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  for (let i = 1; i <= N; i++) {\n    sum += i;\n    binary = sum.toString(2) + binary;\n  }\n  return binary;\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. subtract tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      subtract([4, 2, 6, 7]) ==> 1 \n  */\nconst subtract = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. multiply tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      multiply([4, 2, 6, 7]) ==> 24 \n  */\nconst multiply = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum *= lst[i];\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. divide tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      divide([4, 2, 6, 7]) ==> 3 \n  */\nconst divide = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum /= lst[i];\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the max of tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7 \n  */\nconst max = (lst) => {\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the min of tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 2 \n  */\nconst min = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the sum of the tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 18 \n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the product of the tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24 \n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the mean of the tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      mean([4, 2, 6, 7]) ==> 3 \n  */\nconst mean = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the median of the tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      median([4, 2, 6, 7]) ==> 2 \n  */\nconst median = (lst) => {\n  let middle = Math.floor(lst.length / 2);\n  let lower = middle - 1;\n  let upper = middle;\n  let median;\n  if (lst.length % 2 === 0) {\n    median = lst[lower];\n  } else {\n    median = (lst[lower] + lst[upper]) / 2;\n  }\n  return median;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the mode of the tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      mode([4, 2, 6, 7]) ==> 2 \n  */\nconst mode = (lst) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j] === lst[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(lst[maxCountIndex]);\n  return modes;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the variance of the tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      variance([4, 2, 6, 7]) ==> 2 \n  */\nconst variance = (lst) => {\n  let mean = 0;\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    count++;\n  }\n  mean = sum / count;\n  let variance = 0;\n  for (let i = 0; i < lst.length; i++) {\n    variance += Math.pow(lst[i] - mean, 2);\n  }\n  variance = variance / count;\n  return variance;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the standard deviation of the tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      stddev([4, 2, 6, 7]) ==> 2 \n  */\nconst stddev = (lst) => {\n  let variance = variance(lst);\n  return Math.sqrt(variance);\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the variance of the tHe EVen ELEmENts tHat ARe at even IndiceS..\n\n\n  Examples:\n      variance([4, 2, 6, 7]) ==> 4 \n  */\nconst varianceEven = (lst) => {\n  let mean = 0;\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    count++;\n  }\n  mean = sum / count;\n  let variance = 0;\n  for (let i = 0; i < lst.length; i++) {\n    variance += Math.pow(lst[i] - mean, 2);\n  }\n  variance = variance / count;\n  return variance;\n};\n\n/*GIveN a non-EMpty list Of iNteGErs lst. find the standard deviation of the tHe EVen ELEmENts tHat ARe at even IndiceS..\n\n\n  Examples:\n      stddev([4, 2, 6, 7]) ==> 2 \n  */\nconst stddevEven = (lst) => {\n  let variance = varianceEven(lst);\n  return Math.sqrt(variance);\n};\n\n/*GIveN", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const splitted = s.split(' ')\n  splitted.forEach((word) => {\n    const newWord = word.split('')\n    newWord.forEach((letter) => {\n      if (letter === '!') {\n        newWord.splice(newWord.indexOf(letter), 1)\n      }\n    })\n    newS = newS.replace(word, newWord.join(''))\n  })\n  return newS\n}\n\n/*\n  wriTe a fuNCtioN thAt tAKes a StRIng OR rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const splitted = s.split(' ')\n  splitted.forEach((word) => {\n    const newWord = word.split('')\n    newWord.forEach((letter) => {\n      if (letter === '!') {\n        newWord.splice(newWord.indexOf(letter), 1)\n      }\n    })\n    newS = newS.replace(word, newWord.join(''))\n  })\n  return newS\n}\n\n/*\n  wriTe a fuNCtioN thAt tAKes a StRIng XOR rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const splitted = s.split(' ')\n  splitted.forEach((word) => {\n    const newWord = word.split('')\n    newWord.forEach((letter) => {\n      if (letter === '!') {\n        newWord.splice(newWord.indexOf(letter), 1)\n      }\n    })\n    newS = newS.replace(word, newWord.join(''))\n  })\n  return newS\n}\n\n/*\n  wriTe a fuNCtioN thAt tAKes a StRIng XNOR rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const splitted = s.split(' ')\n  splitted.forEach((word) => {\n    const newWord = word.split('')\n    newWord.forEach((letter) => {\n      if (letter === '!') {\n        newWord.splice(newWord.indexOf(letter), 1)\n      }\n    })\n    newS = newS.replace(word, newWord.join(''))\n  })\n  return newS\n}\n\n/*\n  wriTe a fuNCtioN thAt tAKes a StRIng XOR rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const splitted = s.split(' ')\n  splitted.forEach((word) => {\n    const newWord = word.split('')\n    newWord.forEach((letter) => {\n      if (letter === '!') {\n        newWord.splice(newWord.indexOf(letter), 1)\n      }\n    })\n    newS = newS.replace(word, newWord.join(''))\n  })\n  return newS\n}\n\n/*\n  wriTe a fuNCtioN thAt tAKes a StRIng XNOR rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2) ...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      ret.push([i, lst[i].indexOf(x)])\n    }\n  }\n  return ret\n}\n\n/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 5), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      ret.push([i, lst[i].indexOf(x)])\n    }\n  }\n  return ret\n}\n\n/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowCol = (lst, x, y) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1 && lst[i].indexOf(y)!== -1) {\n      ret.push([i, lst[i].indexOf(x), lst[i].indexOf(y)])\n    }\n  }\n  return ret\n}\n\n/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRowCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1, 2) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowCol([], 1, 2) == []\n  getRowCol([[], [1], [1, 2, 3]], 3, 2) == [(2, 2)]\n  */\nconst getRowCol = (lst, x, y) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1 && lst[i].indexOf(y)!== -1) {\n      ret.push([i, lst[i].indexOf(x), lst[i].indexOf(y)])\n    }\n  }\n  return ret\n}\n\n/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    result += String.fromCharCode(s.charCodeAt(i) + 1)\n  }\n  return result\n}\n\n/*CReaTe a fuNCtioN decrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    result += String.fromCharCode(s.charCodeAt(i) - 1)\n  }\n  return result\n}\n\n/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    result += String.fromCharCode(s.charCodeAt(i) + 1)\n  }\n  return result\n}\n\n/*CReaTe a fuNCtioN decrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decryptString = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    result += String.fromCharCode(s.charCodeAt(i) - 1)\n  }\n  return result\n}\n\n/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    result += String.fromCharCode(s.charCodeAt(i) + 1)\n  }\n  return result\n}\n\n/*CReaTe a fuNCtioN decrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decryptString = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    result += String.fromCharCode(s.charCodeAt(i) - 1)\n  }\n  return result\n}\n\n/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    result += String.fromCharCode(s.charCodeAt(i) + 1)\n  }\n  return result\n}\n\n/*CReaTe a fuNCtioN decrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muL", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      rollingMaxArray.push(numbers[i]);\n    }\n  }\n  return rollingMaxArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences2 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences3 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences4 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences5 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences6 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences7 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences8 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences9 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences10 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences11 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n/**\n * A function which takes a number as input and returns a number as output\n * which represents the number of times the number occurs in the given array.\n * \n * >>> countOccurrences([1, 2, 3, 4, 2, 3, 4, 1])\n * [1, 1, 2, 2]\n */\nconst countOccurrences12 = (numbers) => {\n  const countOccurrencesArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[j] === numbers[i]) {\n        count++;\n      }\n    }\n    countOccurrencesArray.push(count);\n  }\n  return countOccurrencesArray;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let index = lst.indexOf(smallest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextLargest() thaT reTUrns the 2Nd largest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == null\n  nextLargest([1, 1]) == NulL\n  */\nconSt nextLargest = (lst) => {\n  if (lst.length < 2) return null;\n  let largest = lst[0];\n  let index = lst.indexOf(largest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let index = lst.indexOf(smallest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextLargest() thaT reTUrns the 2Nd largest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == null\n  nextLargest([1, 1]) == NulL\n  */\nconSt nextLargest = (lst) => {\n  if (lst.length < 2) return null;\n  let largest = lst[0];\n  let index = lst.indexOf(largest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let index = lst.indexOf(smallest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextLargest() thaT reTUrns the 2Nd largest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == null\n  nextLargest([1, 1]) == NulL\n  */\nconSt nextLargest = (lst) => {\n  if (lst.length < 2) return null;\n  let largest = lst[0];\n  let index = lst.indexOf(largest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let index = lst.indexOf(smallest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextLargest() thaT reTUrns the 2Nd largest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == null\n  nextLargest([1, 1]) == NulL\n  */\nconSt nextLargest = (lst) => {\n  if (lst.length < 2) return null;\n  let largest = lst[0];\n  let index = lst.indexOf(largest);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n      index = i;\n    }\n  }\n  return lst[index];\n};\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  const boredWords = [\"bored\", \"bored!\", \"bored?\"];\n  const boredCounts = boredWords.map(w => words.filter(w => w === w).length);\n  return boredCounts.reduce((acc, cur) => acc + cur, 0) === boredWords.length;\n};\n\n/*\n  You'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  const boredWords = [\"bored\", \"bored!\", \"bored?\"];\n  const boredCounts = boredWords.map(w => words.filter(w => w === w).length);\n  return boredCounts.reduce((acc, cur) => acc + cur, 0) === boredWords.length;\n};\n\n/*\n  You'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  const boredWords = [\"bored\", \"bored!\", \"bored?\"];\n  const boredCounts = boredWords.map(w => words.filter(w => w === w).length);\n  return boredCounts.reduce((acc, cur) => acc + cur, 0) === boredWords.length;\n};\n\n/*\n  You'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  const boredWords = [\"bored\", \"bored!\", \"bored?\"];\n  const boredCounts = boredWords.map(w => words.filter(w => w === w).length);\n  return boredCounts.reduce((acc, cur) => acc + cur, 0) === boredWords.length;\n};\n\n/*\n  You'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  const boredWords = [\"bored\", \"bored!\", \"bored?\"];\n  const boredCounts = boredWords.map(w => words.filter(w => w === w).length);\n  return boredCounts.reduce((acc, cur) => acc + cur, 0) === boredWords.length;\n};\n\n/*\n  You'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  const boredWords = [\"bored\", \"bored!\", \"bored?\"];\n  const boredCounts = boredWords.map(w => words.filter(w => w === w).length);\n  return boredCounts.reduce((acc, cur) => acc + cur, 0) === boredWords.length;\n};\n\n/*\n  You'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  const boredWords = [\"bored\", \"bored!\", \"bored?\"];\n  const boredCounts = boredWords.map(w => words.filter(w => w === w).length);\n  return boredCounts.reduce((acc, cur) => acc + cur, 0) === bored", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (x === -y || x === -z) return true\n  if (x === -y || x === -z) return false\n  return false\n}\n\n/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (x === -y || x === -z) return true\n  if (x === -y || x === -z) return false\n  return false\n}\n\n/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (x === -y || x === -z) return true\n  if (x === -y || x === -z) return false\n  return false\n}\n\n/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (x === -y || x === -z) return true\n  if (x === -y || x === -z) return false\n  return false\n}\n\n/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (x === -y || x === -z) return true\n  if (x === -y || x === -z) return false\n  return false\n}\n\n/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (x === -y || x === -z) return true\n  if (x === -y || x === -z) return false\n  return false\n}\n\n/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (x === -y || x === -z) return true\n  if (x === -y || x === -z) return false\n  return false\n}\n\n/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let messageArray = message.split('');\n  let encodedMessage = '';\n  \n  for(let i = 0; i < messageArray.length; i++) {\n    let letter = messageArray[i];\n    \n    if(letter == 'a') {\n      encodedMessage += 'a';\n    } else if(letter == 'b') {\n      encodedMessage += 'b';\n    } else if(letter == 'c') {\n      encodedMessage += 'c';\n    } else if(letter == 'd') {\n      encodedMessage += 'd';\n    } else if(letter == 'e') {\n      encodedMessage += 'e';\n    } else if(letter == 'f') {\n      encodedMessage += 'f';\n    } else if(letter == 'g') {\n      encodedMessage += 'g';\n    } else if(letter == 'h') {\n      encodedMessage += 'h';\n    } else if(letter == 'i') {\n      encodedMessage += 'i';\n    } else if(letter == 'j') {\n      encodedMessage += 'j';\n    } else if(letter == 'k') {\n      encodedMessage += 'k';\n    } else if(letter == 'l') {\n      encodedMessage += 'l';\n    } else if(letter =='m') {\n      encodedMessage +='m';\n    } else if(letter == 'n') {\n      encodedMessage += 'n';\n    } else if(letter == 'o') {\n      encodedMessage += 'o';\n    } else if(letter == 'p') {\n      encodedMessage += 'p';\n    } else if(letter == 'q') {\n      encodedMessage += 'q';\n    } else if(letter == 'r') {\n      encodedMessage += 'r';\n    } else if(letter =='s') {\n      encodedMessage +='s';\n    } else if(letter == 't') {\n      encodedMessage += 't';\n    } else if(letter == 'u') {\n      encodedMessage += 'u';\n    } else if(letter == 'v') {\n      encodedMessage += 'v';\n    } else if(letter == 'w') {\n      encodedMessage += 'w';\n    } else if(letter == 'x') {\n      encodedMessage += 'x';\n    } else if(letter == 'y') {\n      encodedMessage += 'y';\n    } else if(letter == 'z') {\n      encodedMessage += 'z';\n    } else {\n      encodedMessage += letter;\n    }\n  }\n  \n  return encodedMessage;\n}\n\n/*\n  Desribes a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  let messageArray = encodedMessage.split('');\n  let decodedMessage = '';\n  \n  for(let i = 0; i < messageArray.length; i++) {\n    let letter = messageArray[i];\n    \n    if(letter == 'a') {\n      decodedMessage += 'a';\n    } else if(letter == 'b') {\n      decodedMessage += 'b';\n    } else if(letter == 'c') {\n      decodedMessage += 'c';\n    } else if(letter == 'd') {\n      decodedMessage += 'd';\n    } else if(letter == 'e') {\n      decodedMessage += 'e';\n    } else if(letter == 'f') {\n      decodedMessage += 'f';\n    } else if(letter == 'g') {\n      decodedMessage += 'g';\n    } else if(letter == 'h') {\n      decodedMessage += 'h';\n    } else if(letter == 'i') {\n      decodedMessage += 'i';\n    } else if(letter == 'j') {\n      decodedMessage += 'j';\n    } else if(letter == 'k') {\n      decodedMessage += 'k';\n    } else if(letter == 'l') {\n      decodedMessage += 'l';\n    } else if(letter =='m') {\n      decodedMessage +='m';\n    } else if(letter == 'n') {\n      decodedMessage += 'n';\n    } else if(letter == 'o') {\n      decodedMessage += 'o';\n    } else if(letter == 'p') {\n      decodedMessage += 'p';\n    } else if(letter == 'q') {\n      decodedMessage += 'q';\n    } else if(letter == 'r') {\n      decodedMessage += 'r';\n    } else if(letter =='s') {\n      decodedMessage +='s';\n    } else if(letter == 't') {\n      decodedMessage += 't';\n    } else if(letter == 'u') {\n      decodedMessage += 'u';\n    } else if(letter == 'v') {\n      decodedMessage += 'v';\n    } else if(letter == 'w') {\n      decodedMessage += 'w';\n    } else if(letter == 'x') {\n      decodedMessage += 'x';\n    } else if(letter == 'y') {\n      decodedMessage += 'y';\n    } else if(letter == 'z') {\n      decodedMessage += 'z';\n    } else {\n      decodedMessage += letter;\n    }\n  }\n  \n  return decodedMessage;\n}\n\n/*\n  A fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let messageArray = message.split('');\n  let encodedMessage = '';\n  \n  for(let i = 0; i < messageArray.length; i++) {\n    let letter = messageArray[i];\n    \n    if(letter == 'a') {\n      encodedMessage += 'a';\n    } else if(letter == 'b') {\n      encodedMessage += 'b';\n    } else if(letter == 'c') {\n      encodedMessage += 'c';\n    } else if(letter == 'd') {\n      encodedMessage += 'd';\n    } else if(letter == 'e') {\n      encodedMessage += 'e';\n    } else if(letter == 'f') {\n      encodedMessage += 'f';\n    } else if(letter == 'g') {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let lower = keys.map(key => key.toLowerCase());\n  let upper = keys.map(key => key.toUpperCase());\n  let allStrings = keys.map(key => typeof dict[key] === \"string\");\n  let allKeysAreStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAllLower = keys.every(key => key.toLowerCase() === key);\n  let allKeysAreAllUpper = keys.every(key => key.toUpperCase() === key);\n  let allKeysAreAllStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreAll", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  countDownTo(n) => [2,3,5,7,11,13,17,19]\n  countDownTo(0) => []\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(11) => [2,3,5,7,11,13]\n  countDownTo(5) => [2,3,5,7,11]\n  countDownTo(3) => [2,3,5]\n  countDownTo(-3) => []\n  countDownTo(-5) => []\n  countDownTo(-7) => [2,3,5,7,11]\n  countDownTo(-11) => [2,3,5,7,11]\n  countDownTo(-13) => [2,3,5,7,11,13]\n  countDownTo(-17) => [2,3,5,7,11,13,17]\n  countDownTo(-19) => [2,3,5,7,11,13,17,19]\n*/\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(0) => []\n  countTo(1) => []\n  countTo(18) => [2,3,5,7,11,13,17]\n  countTo(20) => [2,3,5,7,11,13,17,19]\n  countTo(11) => [2,3,5,7,11,13]\n  countTo(5) => [2,3,5,7,11]\n  countTo(3) => [2,3,5]\n  countTo(-3) => []\n  countTo(-5) => []\n  countTo(-7) => [2,3,5,7,11]\n  countTo(-11) => [2,3,5,7,11]\n  countTo(-13) => [2,3,5,7,11,13]\n  countTo(-17) => [2,3,5,7,11,13,17]\n  countTo(-19) => [2,3,5,7,11,13,17,19]\n*/\nconst countTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  return a / b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  modulus(148, 412) should return 0.\n  modulus(19, 28) should return 0.\n  modulus(2020, 1851) should return 0.\n  modulus(14,-15) should return 0.\n  */\nconst modulus = (a, b) => {\n  return a % b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  return a + b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  subtract(148, 412) should return -14.\n  subtract(19, 28) should return -28.\n  subtract(2020, 1851) should return -1851.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  return a - b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  return a / b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  modulus(148, 412) should return 0.\n  modulus(19, 28) should return 0.\n  modulus(2020, 1851) should return 0.\n  modulus(14,-15) should return 0.\n  */\nconst modulus = (a, b) => {\n  return a % b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  return a + b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  subtract(148, 412) should return -14.\n  subtract(19, 28) should return -28.\n  subtract(2020, 1851) should return -1851.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  return a - b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  return a / b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  modulus(148, 412) should return 0.\n  modulus(19, 28) should return 0.\n  modulus(2020, 1851) should return 0.\n  modulus(14,-15) should return 0.\n  */\nconst modulus = (a, b) => {\n  return a % b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  return a + b;\n};\n\n/*\n  COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  subtract(148, 412) should return -14.\n  subtract(19, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numberToCheck = parseFloat(value);\n  const closestToZero = Math.abs(numberToCheck);\n  const closestToOne = Math.abs(numberToCheck - 1);\n  const closestToTwo = Math.abs(numberToCheck - 2);\n  const closestToThree = Math.abs(numberToCheck - 3);\n  const closestToFour = Math.abs(numberToCheck - 4);\n  const closestToFive = Math.abs(numberToCheck - 5);\n  const closestToSix = Math.abs(numberToCheck - 6);\n  const closestToSeven = Math.abs(numberToCheck - 7);\n  const closestToEight = Math.abs(numberToCheck - 8);\n  const closestToNine = Math.abs(numberToCheck - 9);\n  const closestToTen = Math.abs(numberToCheck - 10);\n  const closestToEleven = Math.abs(numberToCheck - 11);\n  const closestToTwelve = Math.abs(numberToCheck - 12);\n  const closestToThirteen = Math.abs(numberToCheck - 13);\n  const closestToFourteen = Math.abs(numberToCheck - 14);\n  const closestToFifteen = Math.abs(numberToCheck - 15);\n  const closestToSixteen = Math.abs(numberToCheck - 16);\n  const closestToSeventeen = Math.abs(numberToCheck - 17);\n  const closestToEighteen = Math.abs(numberToCheck - 18);\n  const closestToNineteen = Math.abs(numberToCheck - 19);\n  const closestToTwenty = Math.abs(numberToCheck - 20);\n  const closestToTwentyOne = Math.abs(numberToCheck - 21);\n  const closestToTwentyTwo = Math.abs(numberToCheck - 22);\n  const closestToTwentyThree = Math.abs(numberToCheck - 23);\n  const closestToTwentyFour = Math.abs(numberToCheck - 24);\n  const closestToTwentyFive = Math.abs(numberToCheck - 25);\n  const closestToTwentySix = Math.abs(numberToCheck - 26);\n  const closestToTwentySeven = Math.abs(numberToCheck - 27);\n  const closestToTwentyEight = Math.abs(numberToCheck - 28);\n  const closestToTwentyNine = Math.abs(numberToCheck - 29);\n  const closestToTwentyTen = Math.abs(numberToCheck - 30);\n  const closestToTwentyEleven = Math.abs(numberToCheck - 31);\n  const closestToTwentyTwelve = Math.abs(numberToCheck - 32);\n  const closestToTwentyThirteen = Math.abs(numberToCheck - 33);\n  const closestToTwentyFourteen = Math.abs(numberToCheck - 34);\n  const closestToTwentyFifteen = Math.abs(numberToCheck - 35);\n  const closestToTwentySixteen = Math.abs(numberToCheck - 36);\n  const closestToTwentySeventeen = Math.abs(numberToCheck - 37);\n  const closestToTwentyEighteen = Math.abs(numberToCheck - 38);\n  const closestToTwentyNineteen = Math.abs(numberToCheck - 39);\n  const closestToTwentyTwenty = Math.abs(numberToCheck - 40);\n  const closestToTwentyTwentyOne = Math.abs(numberToCheck - 41);\n  const closestToTwentyTwentyTwo = Math.abs(numberToCheck - 42);\n  const closestToTwentyTwentyThree = Math.abs(numberToCheck - 43);\n  const closestToTwentyTwentyFour = Math.abs(numberToCheck - 44);\n  const closestToTwentyTwentyFive = Math.abs(numberToCheck - 45);\n  const closestToTwentyTwentySix = Math.abs(numberToCheck - 46);\n  const closestToTwentyTwentySeven = Math.abs(numberToCheck - 47);\n  const closestToTwentyTwentyEight = Math.abs(numberToCheck - 48);\n  const closestToTwentyTwentyNine = Math.abs(numberToCheck - 49);\n  const closestToTwentyTwentyTen = Math.abs(numberToCheck - 50);\n  const closestToTwentyTwentyEleven = Math.abs(numberToCheck - 51);\n  const closestToTwentyTwentyTwelve = Math.abs(numberToCheck - 52);\n  const closestToTwentyTwentyThirteen = Math.abs(numberToCheck - 53);\n  const closestToTwentyTwentyFourteen = Math.abs(numberToCheck - 54);\n  const closestToTwentyTwentyFifteen = Math.abs(numberToCheck - 55);\n  const closestToTwentyTwentySixteen = Math.abs(numberToCheck - 56);\n  const closestToTwentyTwentySeventeen = Math.abs(numberToCheck - 57);\n  const closestToTwentyTwentyEighteen = Math.abs(numberToCheck - 58);\n  const closestToTwentyTwentyNineteen = Math.abs(numberToCheck - 59);\n  const closestToTwentyTwentyTwenty = Math.abs(numberToCheck - 60);\n  const closestToTwentyTwentyTwentyOne = Math.abs(numberToCheck - 61);\n  const closestToTwentyTwentyTwentyTwo = Math.abs(numberToCheck - 62);\n  const closestToTwentyTwentyTwentyThree = Math.abs(numberToCheck - 63);\n  const closestToTwentyTwentyTwentyFour = Math.abs(numberToCheck - 64);\n  const closestToTwentyTwentyTwentyFive = Math.abs(numberToCheck - 65);\n  const closestToTwentyTwentyTwentySix = Math.abs(numberToCheck - 66);\n  const closestToTwentyTwentyTwentySeven = Math.abs(numberToCheck - 67);\n  const closestToTwentyTwentyTwentyEight = Math.abs(numberToCheck - 68);\n  const closestToTwentyTwentyTwentyNine = Math.abs(numberToCheck - 69);\n  const closestToTwentyTwentyTwentyTen = Math.abs(numberToCheck - 70);\n  const closestToTwentyTwentyTwentyEleven = Math.abs(numberToCheck - 71);\n  const closestToTwentyTwentyTwentyTwelve = Math.abs(numberToCheck - 72);\n  const closestToTwentyTwentyTwentyThirteen = Math.abs(numberToCheck - 73);\n  const closestToTwentyTwentyTwentyFourteen = Math.abs(numberToCheck - 74);\n  const closestToTwentyTwentyTwentyF", "passed": 0, "run_status": 2}
