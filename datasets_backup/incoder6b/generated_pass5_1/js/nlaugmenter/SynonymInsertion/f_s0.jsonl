{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      const nextNumber = numbers[j];\n      if (Math.abs(currentNumber - nextNumber) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string bowed stringed instrument containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore dismiss any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string bowed stringed instrument containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore dismiss any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_length = 0;\n  let current_group_open_brace_count = 0;\n  let current_group_close_brace_count = 0;\n  let current_group_open_brace_position = 0;\n  let current_group_close_brace_position = 0;\n  let current_group_open_brace_position_in_string = 0;\n  let current_group_close_brace_position_in_string = 0;\n  let current_group_open_brace_position_in_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_string = 0;\n  let current_group_close_brace_position_in_paren_string_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_close_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_paren_string_paren_string_paren_string_paren_string_paren_string_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = string.split('').reverse().join('');\n  let longestPalindromeSuffix = longestPalindromePrefix.substr(0, longestPalindromeLength);\n  let longestPalindromePostfix = longestPalindromeSuffix.substr(0, longestPalindromeLength);\n  let longestPalindromePostfixReverse = longestPalindromePostfix.split('').reverse().join('');\n  \n  for(let i = 0; i <= string.length; i++){\n    if(isPalindrome(string.substr(0, i))){\n      longestPalindromeLength = i;\n      longestPalindromePrefix = string.substr(0, i);\n      longestPalindromeSuffix = string.substr(i, string.length - i);\n      longestPalindromePostfix = longestPalindromePrefix.substr(0, longestPalindromeLength);\n      longestPalindromePostfixReverse = longestPalindromePostfix.split('').reverse().join('');\n      if(longestPalindromePostfixReverse === longestPalindromePostfix){\n        longestPalindrome = longestPalindromePostfix;\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Test if supplied string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = string.split('').reverse().join('');\n  let longestPalindromeSuffix = longestPalindromePrefix.substr(0, longestPalindromeLength);\n  let longestPalindromePostfix = longestPalindromeSuffix.substr(0, longestPalindromeLength);\n  let longestPalindromePostfixReverse = longestPalindromePostfix.split('').reverse().join('');\n  \n  for(let i = 0; i <= string.length; i++){\n    if(isPalindrome(string.substr(0, i))){\n      longestPalindromeLength = i;\n      longestPalindromePrefix = string.substr(0, i);\n      longestPalindromeSuffix = string.substr(i, string.length - i);\n      longestPalindromePostfix = longestPalindromePrefix.substr(0, longestPalindromeLength);\n      longestPalindromePostfixReverse = longestPalindromePostfix.split('').reverse().join('');\n      if(longestPalindromePostfixReverse === longestPalindromePostfix){\n        longestPalindrome = longestPalindromePostfix;\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Test if supplied string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = string.split('').reverse().join('');\n  let longestPalindromeSuffix = longestPalindromePrefix.substr(0, longestPalindromeLength);\n  let longestPalindromePostfix = longestPalindromeSuffix.substr(0, longestPalindromeLength);\n  let longestPalindromePostfixReverse = longestPalindromePostfix.split('').reverse().join('');\n  \n  for(let i = 0; i <= string.length; i++){\n    if(isPalindrome(string.substr(0, i))){\n      longestPalindromeLength = i;\n      longestPalindromePrefix = string.substr(0, i);\n      longestPalindromeSuffix = string.substr(i, string.length - i);\n      longestPalindromePostfix = longestPalindromePrefix.substr(0, longestPalindromeLength);\n      longestPalindromePostfixReverse = longestPalindromePostfix.split('').reverse().join('');\n      if(longestPalindromePostfixReverse === longestPalindromePostfix){\n        longestPalindrome = longestPalindromePostfix;\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Test if supplied string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindrome", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = n;\n  let levels = [stones];\n  let nextLevel = [];\n  let nextLevelCount = 0;\n  while (stones > 0) {\n    if (stones % 2 === 0) {\n      nextLevelCount += stones;\n      stones = stones / 2;\n    } else {\n      nextLevelCount += stones;\n      stones = stones / 2;\n      nextLevel.push(nextLevelCount);\n    }\n    levels.push(nextLevel);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = n;\n  let levels = [stones];\n  let nextLevel = [];\n  let nextLevelCount = 0;\n  while (stones > 0) {\n    if (stones % 2 === 0) {\n      nextLevelCount += stones;\n      stones = stones / 2;\n    } else {\n      nextLevelCount += stones;\n      stones = stones / 2;\n      nextLevel.push(nextLevelCount);\n    }\n    levels.push(nextLevel);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = n;\n  let levels = [stones];\n  let nextLevel = [];\n  let nextLevelCount = 0;\n  while (stones > 0) {\n    if (stones % 2 === 0) {\n      nextLevelCount += stones;\n      stones = stones / 2;\n    } else {\n      nextLevelCount += stones;\n      stones = stones / 2;\n      nextLevel.push(nextLevelCount);\n    }\n    levels.push(nextLevel);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = n;\n  let levels = [stones];\n  let nextLevel = [];\n  let nextLevelCount = 0;\n  while (stones > 0) {\n    if (stones % 2 === 0) {\n      nextLevelCount += stones;\n      stones = stones / 2;\n    } else {\n      nextLevelCount += stones;\n      stones = stones / 2;\n      nextLevel.push(nextLevelCount);\n    }\n    levels.push(nextLevel);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = n;\n  let levels = [stones];\n  let nextLevel = [];\n  let nextLevelCount = 0;\n  while (stones > 0) {\n    if (stones % 2 === 0) {\n      nextLevelCount += stones;\n      stones = stones / 2;\n    } else {\n      nextLevelCount += stones;\n      stones = stones / 2;\n      nextLevel.push(nextLevelCount);\n    }\n    levels.push(nextLevel);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = n;\n  let levels = [stones];\n  let nextLevel = [];\n  let nextLevelCount = 0;\n  while (stones > 0) {\n    if (stones % 2 === 0) {\n      nextLevelCount += stones;\n      stones = stones / 2;\n    } else {\n      nextLevelCount += stones;\n      stones = stones / 2;\n      nextLevel.push(nextLevelCount);\n    }\n    levels.push(nextLevel);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = n;\n  let levels = [stones];\n  let nextLevel = [];\n  let nextLevelCount = 0;\n  while (stones > 0) {\n    if (stones % 2 === 0) {\n      nextLevelCount += stones;\n      stones = stones / 2;\n    } else {\n      nextLevelCount += stones;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even integer number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even integer number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest odd number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest odd number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest odd number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest odd number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y - 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x - 1, y - 1);\n  }\n  return -1;\n};\n\n/*This function takes two positive convinced numbers x and y and returns return the \n   biggest odd number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x - 1, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst rounded", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any odd tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit and odd tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenAndOddDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit and odd tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenAndOddAndEvenDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit and odd tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenAndOddAndEvenAndOddDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit and odd tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenAndOddAndEvenAndOddAndEvenDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit and odd tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenAndOddAndEvenAndOddAndEvenAndOddDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit and odd tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let counter = 0;\n    for (let j = 0; j < x.length; j++) {\n      if (x[j] === x[i]) {\n        counter++;\n      }\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2!== 0) {\n      unique.push(x[i]);\n    }\n    if (counter % 2 === 0) {\n      unique.push(x[i]);\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes choose n as a parameter, \n   and returns return a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers number from 1 to i otherwise. \n   i starts originate from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes choose n as a parameter, \n   and returns return a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers number from 1 to i otherwise. \n   i starts originate from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  { name: 'factorial of 5', expected: [1, 2, 6, 24, 15], actual: f(5) },\n  { name: 'factorial of 0', expected: [1], actual: f(0)},\n  { name: 'factorial of 1', expected: [1], actual: f(1) },\n  { name: 'factorial of 2', expected: [1, 2], actual: f(2) },\n  { name: 'factorial of 3', expected: [1, 2, 6], actual: f(3) },\n  { name: 'factorial of 4', expected: [1, 2, 6, 24], actual: f(4) },\n  { name: 'factorial of 5', expected: [1, 2, 6, 24, 15], actual: f(5) },\n  { name: 'factorial of 6', expected: [1, 2, 6, 24, 15, 21], actual: f(6) },\n  { name: 'factorial of 7', expected: [1, 2, 6, 24, 15, 21, 34], actual: f(7) },\n  { name: 'factorial of 8', expected: [1, 2, 6, 24, 15, 21, 34, 55], actual: f(8) },\n  { name: 'factorial of 9', expected: [1, 2, 6, 24, 15, 21, 34, 55, 89], actual: f(9) },\n  { name: 'factorial of 10', expected: [1, 2, 6, 24, 15, 21, 34, 55, 89, 144, 729, 247, 610, 1220, 2584, 6178, 24809, 51096, 104079, 403202, 907083, 1764329, 27033566, 64355741, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637552611, 6348087429, 1307674105, 2637", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return { evenPalindromes, oddPalindromes };\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return { evenPalindromes, oddPalindromes };\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return { evenPalindromes, oddPalindromes };\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return { evenPalindromes, oddPalindromes };\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return { evenPalindromes, oddPalindromes };\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0. \n   If a number phone number is negative, then its first inaugural signed sign digit will be negative: \n   e.g. for example -123 has signed bless digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0. \n   If a number phone number is negative, then its first inaugural signed sign digit will be negative: \n   e.g. for example -123 has signed bless digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n    } else {\n      sum += arr[i];\n    }\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums2 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums2([]) == 0\n  >>> countNums2([-1, 11, -11]) == 1\n  >>> countNums2([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums3 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums3([]) == 0\n  >>> countNums3([-1, 11, -11]) == 1\n  >>> countNums3([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums4 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums4([]) == 0\n  >>> countNums4([-1, 11, -11]) == 1\n  >>> countNums4([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums5 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums5([]) == 0\n  >>> countNums5([-1, 11, -11]) == 1\n  >>> countNums5([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums6 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums6([]) == 0\n  >>> countNums6([-1, 11, -11]) == 1\n  >>> countNums6([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums7 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums7([]) == 0\n  >>> countNums7([-1, 11, -11]) == 1\n  >>> countNums7([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums8 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums8([]) == 0\n  >>> countNums8([-1, 11, -11]) == 1\n  >>> countNums8([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums9 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums9([]) == 0\n  >>> countNums9([-1, 11, -11]) == 1\n  >>> countNums9([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums10 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums10([]) == 0\n  >>> countNums10([-1, 11, -11]) == 1\n  >>> countNums10([1, 1, 2]) == 3\n  */\nconst countNums10 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums11 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums11([]) == 0\n  >>> countNums11([-1, 11, -11]) == 1\n  >>> countNums11([1, 1, 2]) == 3\n  */\nconst countNums11 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums12 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums12([]) == 0\n  >>> countNums12([-1, 11, -11]) == 1\n  >>> countNums12([1, 1, 2]) == 3\n  */\nconst countNums12 = (arr) => {\n  let sum = 0;\n  let reappear = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      reappear++;\n    }\n  }\n  return reappear;\n};\n\n/*\n  Write a function countNums13 which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0.\n  >>> countNums13([]) == 0\n  >>> countNums13([-1, 11, -11]) == 1\n  >>> countNums13([1, 1, 2]) == 3\n  */\nconst countNums13 = (arr) => {\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get have an array sorted in non - decreasing order ordering by performing \n   the following adopt operation on the given array: \n       You are allowed to perform do right shift operation any number phone number of times prison term. \n  \n   One right shift operation means think of shifting careen all elements of the array by one \n   position placement in the right correct direction. The last element component of the array will be moved to \n   the starting start position stead in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation mathematical process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get have an array sorted in non - decreasing order ordering by performing \n   the following adopt operation on the given array: \n       You are allowed to perform do right shift operation any number phone number of times prison term. \n  \n   One right shift operation means think of shifting careen all elements of the array by one \n   position placement in the right correct direction. The last element component of the array will be moved to \n   the starting start position stead in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation mathematical process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  let flag = true;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[len - i - 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum number \n  in the given array and remove it from the array. \n  \n  Your function should return an integer denoting the minimum number in the given array.\n  \n  If the given array is empty then return 0.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  removeMin([3, 4, 5, 1, 2])==>3\n  Explanation: The minimum number in the given array is 3.\n  removeMin([3, 5, 4, 1, 2])==>4\n  Explanation: The minimum number in the given array is 4.\n  \n  */\nconst removeMin = (arr) => {\n  let len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  return arr[min];\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum number \n  in the given array and remove it from the array. \n  \n  Your function should return an integer denoting the maximum number in the given array.\n  \n  If the given array is empty then return 0.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  removeMax([3, 4, 5, 1, 2])==>5\n  Explanation: The maximum number in the given array is 5.\n  removeMax([3, 5, 4, 1, 2])==>1\n  Explanation: The maximum number in the given array is 1.\n  \n  */\nconst removeMax = (arr) => {\n  let len = arr.length;\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n  }\n  return arr[max];\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the sum of all \n  the numbers in the given array and remove it from the array. \n  \n  Your function should return an integer denoting the sum of all the numbers in the given array.\n  \n  If the given array is empty then return 0.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  removeSum([3, 4, 5, 1, 2])==>9\n  Explanation: The sum of all the numbers in the given array is 9.\n  removeSum([3, 5, 4, 1, 2])==>6\n  Explanation: The sum of all the numbers in the given array is 6.\n  \n  */\nconst removeSum = (arr) => {\n  let len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the product of all\n  the numbers in the given array and remove it from the array. \n  \n  Your function should return an integer denoting the product of all the numbers in the given array.\n  \n  If the given array is empty then return 0.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  removeProd([3, 4, 5, 1, 2])==>15\n  Explanation: The product of all the numbers in the given array is 15.\n  removeProd([3, 5, 4, 1, 2])==>24\n  Explanation: The product of all the numbers in the given array is 24.\n  \n  */\nconst removeProd = (arr) => {\n  let len = arr.length;\n  let prod = 1;\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the sum of all \n  the numbers in the given array and remove it from the array. \n  \n  Your function should return an integer denoting the sum of all the numbers in the given array.\n  \n  If the given array is empty then return 0.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  removeSum([3, 4, 5, 1, 2])==>9\n  Explanation: The sum of all the numbers in the given array is 9.\n  removeSum([3, 5, 4, 1, 2])==>6\n  Explanation: The sum of all the numbers in the given array is 6.\n  \n  */\nconst removeSum = (arr) => {\n  let len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the product of all\n  the numbers in the given array and remove it from the array. \n  \n  Your function should return an integer denoting the product of all the numbers in the given array.\n  \n  If the given array is empty then return 0.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  removeProd([3, 4, 5, 1, 2])==>15\n  Explanation: The product of all the numbers in the given array is 15.\n  removeProd([3, 5, 4, 1, 2])==>24\n  Explanation: The product of all the numbers in the given array is 24.\n  \n  */\nconst removeProd = (arr) => {\n  let len = arr.length;\n  let prod = 1;\n  for (let i = 0; i < len; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the sum of all \n  the numbers in the given array and remove it from the array. \n  \n  Your function should return an integer denoting the sum of all the numbers in the given array.\n  \n  If the given array is empty then return 0.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  removeSum([3, 4, 5, 1, 2])==>9\n  Explanation: The sum of all the numbers in the given array is 9.\n  removeSum([3, 5, 4, 1, 2])==>6\n  Explanation: The sum of all the numbers in the given array is 6.\n  \n  */\nconst removeSum = (arr) => {\n  let len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two string", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines determine whether it is possible to perform do an exchange of elements \n   between them to make induce lst1 a list of only even numbers. \n   There is no limit on the number of exchanged commute elements between lst1 and lst2.\n   If it is possible to exchange elements element between the lst1 and lst2 to make have \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines determine whether it is possible to perform do an exchange of elements \n   between them to make induce lst1 a list of only even numbers. \n   There is no limit on the number of exchanged commute elements between lst1 and lst2.\n   If it is possible to exchange elements element between the lst1 and lst2 to make have \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n}\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 2, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings string section s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string drawstring is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We are given two strings string section s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string drawstring is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then check if the result string is a palindrome. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ab\" the result should be ('abcde',true)\n  For s = \"abcde\", c = \"ac\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"a\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"abde\" the result should be ('abcde',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then check if the result string is a palindrome. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ab\" the result should be ('abcde',true)\n  For s = \"abcde\", c = \"ac\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"a\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"abde\" the result should be ('abcde',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then check if the result string is a palindrome. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ab\" the result should be ('abcde',true)\n  For s = \"abcde\", c = \"ac\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"a\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"abde\" the result should be ('abcde',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then check if the result string is a palindrome. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ab\" the result should be ('abcde',true)\n  For s = \"abcde\", c = \"ac\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"a\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"abde\" the result should be ('abcde',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then check if the result string is a palindrome. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ab\" the result should be ('abcde',true)\n  For s = \"abcde\", c = \"ac\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"a\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"abde\" the result should be ('abcde',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then check if the result string is a palindrome. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ab\" the result should be ('abcde',true)\n  For s = \"abcde\", c = \"ac\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"a\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"abde\" the result should be ('abcde',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then check if the result string is a palindrome. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ab\" the result should be ('abcde',true)\n  For s = \"abcde\", c = \"ac\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"a\" the result should be ('abcde',false)\n  For s = \"abcde\", c = \"abde\" the result should be ('abcde',true)\n  */\nconst reverseDelete8 = (s, c) => {\n  let resultantRole = s;\n  for (let i = 0; i < c.length; i++) {\n    resultantRole = resultantRole.slice(0, i) + resultantRole.slice(i + 1);\n  }\n  return [resultantRole, resultantRole === s];\n};\n\n/*Task \n   You are given a string and you have to delete all the characters that are not in the given string \n   Then ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of odd elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of odd elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOdd = str.match(/\\d/g).length;\n    odd.push(`the number of odd elements ${numOdd} the str${numOdd} ${i} of the ${i}nput.`);\n  }\n  return odd;\n};\n\n/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of even elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2nthe str2nng 2 of the 2nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1nthe str1ng 1 of the 1nput.\",\n   \"the number of even elements 8nthe str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEven = str.match(/\\d/g).length;\n    even.push(`the number of even elements ${numEven} the str${numEven} ${i} of the ${i}nput.`);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of even elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2nthe str2nng 2 of the 2nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1nthe str1ng 1 of the 1nput.\",\n   \"the number of even elements 8nthe str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEven = str.match(/\\d/g).length;\n    even.push(`the number of even elements ${numEven} the str${numEven} ${i} of the ${i}nput.`);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of even elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2nthe str2nng 2 of the 2nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1nthe str1ng 1 of the 1nput.\",\n   \"the number of even elements 8nthe str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEven = str.match(/\\d/g).length;\n    even.push(`the number of even elements ${numEven} the str${numEven} ${i} of the ${i}nput.`);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of even elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2nthe str2nng 2 of the 2nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1nthe str1ng 1 of the 1nput.\",\n   \"the number of even elements 8nthe str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEven = str.match(/\\d/g).length;\n    even.push(`the number of even elements ${numEven} the str${numEven} ${i} of the ${i}nput.`);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of even elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2nthe str2nng 2 of the 2nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1nthe str1ng 1 of the 1nput.\",\n   \"the number of even elements 8nthe str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEven = str.match(/\\d/g).length;\n    even.push(`the number of even elements ${numEven} the str${numEven} ${i} of the ${i}nput.`);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of even elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2nthe str2nng 2 of the 2nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1nthe str1ng 1 of the 1nput.\",\n   \"the number of even elements 8nthe str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEven = str.match(/\\d/g).length;\n    even.push(`the number of even elements ${numEven} the str${numEven} ${i} of the ${i}nput.`);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find line up the maximum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find line up the maximum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find line up the maximum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find line up the maximum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find line up the maximum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find line up the maximum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find line up the maximum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents present a single well, \n   and each 1 in a row quarrel represents a single unmarried unit of water water system. \n   Each well has a corresponding bucket that can be used to extract water water system from it, \n   and all buckets bucket have the same capacity.\n   Your task undertaking is to use practice the buckets to empty the wells. \n   Output output signal the number phone number of times clock time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells well. Each row represents present a single well, \n   and each 1 in a row quarrel represents a single unmarried unit of water water system. \n   Each well has a corresponding bucket that can be used to extract water water system from it, \n   and all buckets bucket have the same capacity.\n   Your task undertaking is to use practice the buckets to empty the wells. \n   Output output signal the number phone number of times clock time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const buckets = grid.map((row, i) => {\n        return row.map((val, j) => {\n            return { val: val, index: [i, j] };\n        });\n    });\n    \n    const bucketsLen = buckets.reduce((acc, cur) => acc + cur.length, 0);\n    \n    if (bucketsLen === 0) return 0;\n    \n    const bucketsCap = buckets.map(row => row.reduce((acc, cur) => acc + cur.val, 0));\n    \n    const bucketsSum = bucketsCap.reduce((acc, cur) => acc + cur, 0);\n    \n    const bucketsSumCap = bucketsSum / bucketsLen;\n    \n    const bucketsSumCapReduced = bucketsSumCap.reduce((acc, cur) => acc + cur, 0);\n    \n    const bucketsSumCapReducedReduced = bucketsSumCapReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReduced = bucketsSumCapReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReduced = bucketsSumCapReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced / bucketsLen;\n    \n    const bucketsSumCapReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReducedReduced = bucketsSumCapReducedReducedReducedReducedReducedReducedReduced", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number numeral of ones in their binary representation theatrical performance in ascending order ordering. \n   For similar number issue of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number numeral of ones in their binary representation theatrical performance in ascending order ordering. \n   For similar number issue of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArray = arr.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return sortedArray;\n};\n\n// Tests\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| a tags=javascript,sorting,arrays |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| a tags=javascript,sorting,arrays |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting,arrays |>\n<| a tags=javascript,sorting,arrays |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? 1 : a < b? -1 : 0);\n  return inputArray;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,sorting,arrays |>\n<code>\nfunction sortArray(inputArray) {\n  inputArray.sort((a, b) => a > b? ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n vowels vowel, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n vowels vowel, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n vowels vowel, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find line up the closest vowel that stands digest between \n   two consonants from the right proper side of the word (case sheath sensitive). \n  \n   Vowels vowel in the beginning and ending conclusion doesn't count reckon. Return render empty string bowed stringed instrument if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given contribute string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to find line up the closest vowel that stands digest between \n   two consonants from the right proper side of the word (case sheath sensitive). \n  \n   Vowels vowel in the beginning and ending conclusion doesn't count reckon. Return render empty string bowed stringed instrument if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given contribute string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowel", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings string section consist of open candid \n   parentheses' (' or close airless parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string chain will be good estimable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strings string section consist of open candid \n   parentheses' (' or close airless parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string chain will be good estimable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let str1 = lst[0]\n  let str2 = lst[1]\n  let str1Len = str1.length\n  let str2Len = str2.length\n  let str1Str = ''\n  let str2Str = ''\n  let str1StrArr = []\n  let str2StrArr = []\n  let str1StrArrLen = 0\n  let str2StrArrLen = 0\n  let str1StrArrTemp = ''\n  let str2StrArrTemp = ''\n  let str1StrArrTempLen = 0\n  let str2StrArrTempLen = 0\n  let str1StrArrTemp2 = ''\n  let str2StrArrTemp2 = ''\n  let str1StrArrTemp2Len = 0\n  let str2StrArrTemp2Len = 0\n  let str1StrArrTemp3 = ''\n  let str2StrArrTemp3 = ''\n  let str1StrArrTemp3Len = 0\n  let str2StrArrTemp3Len = 0\n  let str1StrArrTemp4 = ''\n  let str2StrArrTemp4 = ''\n  let str1StrArrTemp4Len = 0\n  let str2StrArrTemp4Len = 0\n  let str1StrArrTemp5 = ''\n  let str2StrArrTemp5 = ''\n  let str1StrArrTemp5Len = 0\n  let str2StrArrTemp5Len = 0\n  let str1StrArrTemp6 = ''\n  let str2StrArrTemp6 = ''\n  let str1StrArrTemp6Len = 0\n  let str2StrArrTemp6Len = 0\n  let str1StrArrTemp7 = ''\n  let str2StrArrTemp7 = ''\n  let str1StrArrTemp7Len = 0\n  let str2StrArrTemp7Len = 0\n  let str1StrArrTemp8 = ''\n  let str2StrArrTemp8 = ''\n  let str1StrArrTemp8Len = 0\n  let str2StrArrTemp8Len = 0\n  let str1StrArrTemp9 = ''\n  let str2StrArrTemp9 = ''\n  let str1StrArrTemp9Len = 0\n  let str2StrArrTemp9Len = 0\n  let str1StrArrTemp10 = ''\n  let str2StrArrTemp10 = ''\n  let str1StrArrTemp10Len = 0\n  let str2StrArrTemp10Len = 0\n  let str1StrArrTemp11 = ''\n  let str2StrArrTemp11 = ''\n  let str1StrArrTemp11Len = 0\n  let str2StrArrTemp11Len = 0\n  let str1StrArrTemp12 = ''\n  let str2StrArrTemp12 = ''\n  let str1StrArrTemp12Len = 0\n  let str2StrArrTemp12Len = 0\n  let str1StrArrTemp13 = ''\n  let str2StrArrTemp13 = ''\n  let str1StrArrTemp13Len = 0\n  let str2StrArrTemp13Len = 0\n  let str1StrArrTemp14 = ''\n  let str2StrArrTemp14 = ''\n  let str1StrArrTemp14Len = 0\n  let str2StrArrTemp14Len = 0\n  let str1StrArrTemp15 = ''\n  let str2StrArrTemp15 = ''\n  let str1StrArrTemp15Len = 0\n  let str2StrArrTemp15Len = 0\n  let str1StrArrTemp16 = ''\n  let str2StrArrTemp16 = ''\n  let str1StrArrTemp16Len = 0\n  let str2StrArrTemp16Len = 0\n  let str1StrArrTemp17 = ''\n  let str2StrArrTemp17 = ''\n  let str1StrArrTemp17Len = 0\n  let str2StrArrTemp17Len = 0\n  let str1StrArrTemp18 = ''\n  let str2StrArrTemp18 = ''\n  let str1StrArrTemp18Len = 0\n  let str2StrArrTemp18Len = 0\n  let str1StrArrTemp19 = ''\n  let str2StrArrTemp19 = ''\n  let str1StrArrTemp19Len = 0\n  let str2StrArrTemp19Len = 0\n  let str1StrArrTemp20 = ''\n  let str2StrArrTemp20 = ''\n  let str1StrArrTemp20Len = 0\n  let str2StrArrTemp20Len = 0\n  let str1StrArrTemp21 = ''\n  let str2StrArrTemp21 = ''\n  let str1StrArrTemp21Len = 0\n  let str2StrArrTemp21Len = 0\n  let str1StrArrTemp22 = ''\n  let str2StrArrTemp22 = ''\n  let str1StrArrTemp22Len = 0\n  let str2StrArrTemp22Len = 0\n  let str1StrArrTemp23 = ''\n  let str2StrArrTemp23 = ''\n  let str1StrArrTemp23Len = 0\n  let str2StrArrTemp23Len = 0\n  let str1StrArrTemp24 = ''\n  let str2StrArrTemp24 = ''\n  let str1StrArrTemp24Len = 0\n  let str2StrArrTemp24Len = 0\n  let str1StrArrTemp25 = ''\n  let str2StrArrTemp25 = ''\n  let str1StrArrTemp25Len = 0\n  let str2StrArrTemp25Len = 0\n  let str1StrArrTemp26 = ''\n  let str2StrArrTemp26 = ''\n  let str1StrArrTemp26Len = 0\n  let str2StrArrTemp26Len = 0\n  let str1StrArrTemp27 = ''\n  let str2StrArrTemp27 = ''\n  let str1StrArrTemp27Len = 0\n  let str2StrArrTemp27Len = 0\n  let str1StrArrTemp28 = ''\n  let str2StrArrTemp28 = ''\n  let str1StrArrTemp28Len = 0\n  let str2StrArrTemp28Len = 0\n  let str1StrArrTemp29 = ''\n  let str2StrArrTemp29 = ''\n  let str1StrArrTemp29Len = 0\n  let str2StrArrTemp29Len = 0\n  let str1StrArrTemp30 = ''\n  let str2StrArrTemp30 = ''\n  let str1StrArrTemp30Len = 0\n  let str2StrArrTemp30Len = 0\n  let str1StrArrTemp31 = ''\n  let str2StrArrTemp31 = ''\n  let str1StrArrTemp31Len = 0\n  let str2StrArrTemp31Len = 0\n  let str1StrArrTemp32 = ''\n  let str2StrArrTemp32 = ''\n  let str1StrArrTemp32Len = 0\n  let str2StrArrTemp32Len = 0\n  let str1StrArrTemp33 = ''\n  let str2StrArrTemp33 = ''\n  let str1StrArrTemp33Len = 0\n  let str2StrArrTemp33Len = 0\n  let str1StrArrTemp34 = ''\n  let str2StrArrTemp34 = ''\n  let str1StrArrTemp34Len = 0\n  let str2StrArrTemp34Len = 0\n  let str1StrArrTemp35 = ''\n  let str2StrArrTemp35 = ''\n  let str1StrArrTemp35Len = 0\n  let str2StrArrTemp35Len = 0\n  let str1StrArrTemp36 = ''\n  let str2StrArrTemp36 = ''\n  let str1StrArrTemp36Len = 0\n  let str2StrArrTemp36Len = 0\n  let str1StrArrTemp37 = ''\n  let str2StrArr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case event of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case event of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* \n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestSubstrings(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  */\nconst longestSubstrings = (strings) => {\n  if (strings.length === 0) {\n    return []\n  }\n  const longestSubstrings = []\n  let longestSubstring = ''\n  for (let i = 0; i < strings.length; i++) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestSubstring.length) {\n      longestSubstring = currentSubstring\n    }\n  }\n  longestSubstrings.push(longestSubstring)\n  for (let i = 0; i < strings.length; i++) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestSubstring.length) {\n      longestSubstring = currentSubstring\n    }\n  }\n  return longestSubstrings\n}\n\n/* \n  >>> longestCommonPrefix(['ab', 'abc', 'abbb', 'abbbc'])\n  'ab'\n  >>> longestCommonPrefix(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc'])\n  'ab'\n  >>> longestCommonPrefix(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc'])\n  'ab'\n  >>> longestCommonPrefix(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc', 'abbbccc'])\n  'ab'\n  */\nconst longestCommonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestCommonPrefix = ''\n  for (let i = 0; i < strings.length; i++) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestCommonPrefix.length) {\n      longestCommonPrefix = currentSubstring\n    }\n  }\n  return longestCommonPrefix\n}\n\n/* \n  >>> longestCommonSuffix(['ab', 'abc', 'abbb', 'abbbc'])\n  'c'\n  >>> longestCommonSuffix(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc'])\n  'c'\n  >>> longestCommonSuffix(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc'])\n  'c'\n  >>> longestCommonSuffix(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc', 'abbbccc'])\n  'c'\n  */\nconst longestCommonSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestCommonSuffix = ''\n  for (let i = strings.length - 1; i >= 0; i--) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestCommonSuffix.length) {\n      longestCommonSuffix = currentSubstring\n    }\n  }\n  return longestCommonSuffix\n}\n\n/* \n  >>> longestCommonSubsequence(['ab', 'abc', 'abbb', 'abbbc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubsequence(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubsequence(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubsequence(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  */\nconst longestCommonSubsequence = (strings) => {\n  if (strings.length === 0) {\n    return []\n  }\n  const longestCommonSubsequence = []\n  let longestCommonSubsequence = ''\n  for (let i = 0; i < strings.length; i++) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestCommonSubsequence.length) {\n      longestCommonSubsequence = currentSubstring\n    }\n  }\n  longestCommonSubsequence.push(longestCommonSubsequence)\n  for (let i = strings.length - 1; i >= 0; i--) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestCommonSubsequence.length) {\n      longestCommonSubsequence = currentSubstring\n    }\n  }\n  return longestCommonSubsequence\n}\n\n/* \n  >>> longestCommonSubsequences(['ab', 'abc', 'abbb', 'abbbc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubsequences(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubsequences(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubsequences(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  */\nconst longestCommonSubsequences = (strings) => {\n  if (strings.length === 0) {\n    return []\n  }\n  const longestCommonSubsequences = []\n  let longestCommonSubsequence = ''\n  for (let i = 0; i < strings.length; i++) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestCommonSubsequence.length) {\n      longestCommonSubsequence = currentSubstring\n    }\n  }\n  longestCommonSubsequences.push(longestCommonSubsequence)\n  for (let i = strings.length - 1; i >= 0; i--) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longestCommonSubsequence.length) {\n      longestCommonSubsequence = currentSubstring\n    }\n  }\n  return longestCommonSubsequences\n}\n\n/* \n  >>> longestCommonSubstringsWithRepetitions(['ab', 'abc', 'abbb', 'abbbc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubstringsWithRepetitions(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubstringsWithRepetitions(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  >>> longestCommonSubstringsWithRepetitions(['ab', 'abc', 'abbb', 'abbbc', 'abbbcc', 'abbbccc', 'abbbccc'])\n  ['ab', 'abc', 'abbb']\n  */\nconst longestCommonSubstringsWithRepetitions = (strings) => {\n  if (strings.length === 0) {\n    return []\n  }\n  const longestCommonSubstringsWithRepetitions = []\n  let longestCommonSubstringsWithRepetition = ''\n  for (let i = 0; i < strings.length; i++) {\n    const currentSubstring = strings[i]\n    if (currentSubstring.length > longest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length distance k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length distance k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] > max) {\n      max = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] > max) {\n      max = arr[index];\n    }\n    index++;\n  }\n  result.push(max);\n  return result;\n};\n\nexport { maximum, maximumArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] < min) {\n      min = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] < min) {\n      min = arr[index];\n    }\n    index++;\n  }\n  result.push(min);\n  return result;\n};\n\nexport { minimum, minimumArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargest = (arr, k) => {\n  const result = [];\n  let largest = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] > largest) {\n      largest = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] > largest) {\n      largest = arr[index];\n    }\n    index++;\n  }\n  result.push(largest);\n  return result;\n};\n\nexport { kLargest, kLargestArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallest = (arr, k) => {\n  const result = [];\n  let smallest = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] < smallest) {\n      smallest = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] < smallest) {\n      smallest = arr[index];\n    }\n    index++;\n  }\n  result.push(smallest);\n  return result;\n};\n\nexport { kSmallest, kSmallestArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the largest number in the array smaller than k.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1], k = 1\n      Output: [-1, 2, 3]\n\n  Example 2:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2], k = 1\n      Output: [-1, 2, 3]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallestArray = (arr, k) => {\n  const result = [];\n  let smallest = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] < smallest) {\n      smallest = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] < smallest) {\n      smallest = arr[index];\n    }\n    index++;\n  }\n  result.push(smallest);\n  return result;\n};\n\nexport { kSmallestArray, kSmallestArrayArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the smallest number in the array greater than k.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1], k = 1\n      Output: [-1, 2, 3]\n\n  Example 2:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2], k = 1\n      Output: [-1, 2, 3]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargestArray = (arr, k) => {\n  const result = [];\n  let largest = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] > largest) {\n      largest = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] > largest) {\n      largest = arr[index];\n    }\n    index++;\n  }\n  result.push(largest);\n  return result;\n};\n\nexport { kLargestArray, kLargestArrayArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the largest number in the array smaller than k.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1], k = 1\n      Output: [-1, 2, 3]\n\n  Example 2:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2], k = 1\n      Output: [-1, 2, 3]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 3]\n\n  Note:\n      1. The length of the array ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in even positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in even positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in odd positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are greater than or equal to 30.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] >= 30) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are less than or equal to 30.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] <= 30) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are greater than or equal to 30 and less than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] >= 30 && lst[i] <= 60) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are less than or equal to 30 and less than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] <= 30 && lst[i] <= 60) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are greater than or equal to 30 and greater than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] >= 30 && lst[i] <= 60) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are less than or equal to 30 and greater than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] <= 30 && lst[i] >= 60) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are greater than or equal to 30 and less than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] >= 30 && lst[i] <= 60) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are less than or equal to 30 and less than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] <= 30 && lst[i] <= 60) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are greater than or equal to 30 and greater than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && i % 2 === 0 && lst[i] >= 30 && lst[i] >= 60) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in both positions position and are less than or equal to 30 and greater than or equal to 60.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 32", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i <= k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the last k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLast = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the last k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastLast = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the last k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLast = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the last k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastLast = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the last k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLast = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the last k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastLast = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let next = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(next);\n      next = next + prev;\n    } else {\n      collatz.push(prev);\n      prev = prev * 3 + next;\n      next = 1;\n    }\n    n--;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let next = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(next);\n      next = next + prev;\n    } else {\n      collatz.push(prev);\n      prev = prev * 3 + next;\n      next = 1;\n    }\n    n--;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let next = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(next);\n      next = next + prev;\n    } else {\n      collatz.push(prev);\n      prev = prev * 3 + next;\n      next = 1;\n    }\n    n--;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let next = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(next);\n      next = next + prev;\n    } else {\n      collatz.push(prev);\n      prev = prev * 3 + next;\n      next = 1;\n    }\n    n--;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let next = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(next);\n      next = next + prev;\n    } else {\n      collatz.push(prev);\n      prev = prev * 3 + next;\n      next = 1;\n    }\n    n--;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string bowed stringed instrument and \n   returns true truthful if the date is valid otherwise false delusive. \n   The date is valid if all of the following rules dominion are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher eminent than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher eminent than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates validate a given date string bowed stringed instrument and \n   returns true truthful if the date is valid otherwise false delusive. \n   The date is valid if all of the following rules dominion are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher eminent than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher eminent than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = dateArray[0];\n  const day = dateArray[1];\n  const year = dateArray[2];\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const monthsInYear = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear2 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear3 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear4 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear5 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear6 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear7 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear8 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear9 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear10 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear11 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear12 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear13 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear14 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear15 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear16 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear17 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear18 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear19 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear20 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear21 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear22 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear23 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear24 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear25 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear26 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear27 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear28 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear29 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear30 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear31 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear32 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear33 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear34 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear35 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear36 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear37 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear38 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear39 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear40 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear41 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  const monthsInYear42 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exist exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in descending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start === interval1End) {\n    return [\"NO\"];\n  }\n  if (interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start < interval1End && interval2Start < interval2End) {\n    if (interval1Start > interval2Start) {\n      return [interval1Start, interval2Start];\n    }\n    if (interval1End < interval2End) {\n      return [interval1End, interval2End];\n    }\n  }\n  return [\"NO\"];\n};\n\n/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 3, which a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst union = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start === interval1End) {\n    return [\"NO\"];\n  }\n  if (interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start < interval1End && interval2Start < interval2End) {\n    if (interval1Start > interval2Start) {\n      return [interval1Start, interval2Start];\n    }\n    if (interval1End < interval2End) {\n      return [interval1End, interval2End];\n    }\n  }\n  return [\"NO\"];\n};\n\n/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of these two \n  intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (-1, 3)\n  which its length is -1, which not a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start === interval1End) {\n    return [\"NO\"];\n  }\n  if (interval2Start === interval2End) {\n    return [\"NO\"];\n  }\n  if (interval1Start < interval1End && interval2Start < interval2End) {\n    if (interval1Start > interval2Start) {\n      return [interval1Start, interval2Start];\n    }\n    if (interval1End < interval2End) {\n      return [interval1End, interval2End];\n    }\n  }\n  return [\"NO\"];\n};\n\n/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 3, which a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst isPrime = (interval) => {\n  const [intervalStart, intervalEnd] = interval;\n  if (intervalStart > intervalEnd) {\n    return false;\n  }\n  if (intervalStart === intervalEnd) {\n    return false;\n  }\n  if (intervalStart < intervalEnd) {\n    const [interval1Start, interval1End] = interval;\n    const [interval2Start, interval2End] = interval;\n    if (interval1Start > interval1End) {\n      return false;\n    }\n    if (interval2Start > interval2End) {\n      return false;\n    }\n    if (interval1Start === interval1End && interval2Start === interval2End) {\n      return false;\n    }\n    if (interval1Start === interval1End) {\n      return true;\n    }\n    if (interval2Start === interval2End) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : +1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const lst_A = new Array(N).fill(0);\n  const lst_B = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] >= k) {\n        M[grid[i][j] - k] = M[grid[i][j] - k] + 1;\n        lst_A[grid[i][j] - k] = lst_A[grid[i][j] - k] + 1;\n        lst_B[grid[i][j] - k] = lst_B[grid[i][j] - k] + 1;\n      }\n    }\n  }\n\n  let ans = [];\n  let min = 0;\n  for (let i = 0; i < N; i++) {\n    if (M[i] === 1) {\n      min = i;\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (M[i] === 1) {\n      ans.push(lst_A[i]);\n    }\n  }\n\n  for (let i = min; i < N; i++) {\n    if (M[i] === 1) {\n      ans.push(lst_B[i]);\n    }\n  }\n\n  return ans;\n};\n\n/* \n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath2 = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const lst_A = new Array(N).fill(0);\n  const lst_B = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] >= k) {\n        M[grid[i][j] - k] = M[grid[i][j] - k] + 1;\n        lst_A[grid[i][j] - k] = lst_A[grid[i][j] - k] + 1;\n        lst_B[grid[i][j] - k] = lst_B[grid[i][j] - k] + 1;\n      }\n    }\n  }\n\n  let ans = [];\n  let min = 0;\n  for (let i = 0; i < N; i++) {\n    if (M[i] === 1) {\n      min = i;\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (M[i] === 1) {\n      ans.push(lst_A[i]);\n    }\n  }\n\n  for (let i = min; i < N; i++) {\n    if (M[i] === 1) {\n      ans.push(lst_B[i]);\n    }\n  }\n\n  return ans;\n};\n\n/* \n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two or more integers.\n *\n * If no arguments are given, return 0. The least common multiple of\n * two numbers is defined as the largest integer that is a multiple\n * of all integers between the two given numbers. The least common\n * multiple is defined as the least integer that is a multiple of\n * all integers between the two given numbers.\n *\n * If there is only 1 argument, return that number.\n *\n * If either argument is negative, return 0.\n *\n * If both arguments are positive, return the smallest integer\n * that is greater than the second argument while leaving the number\n * unchanged if possible.\n *\n * See http://en.wikipedia.org/wiki/Least_common_multiple for more information.\n *\n * If no arguments are given, the least common multiple is 0.\n *\n * Examples:\n *\n * leastCommonMultiple(7, 3)\n * // returns 7\n *\n * leastCommonMultiple(7, 3, 5)\n * // returns 7\n *\n * leastCommonMultiple(-7, 3)\n * // returns 0\n *\n * leastCommonMultiple(-7, 3, 5)\n * // returns -2\n */\nconst leastCommonMultiple = (a = 0,...args) => {\n  if (args.length === 0) {\n    return 0\n  }\n  if (args.length === 1) {\n    return args[0]\n  }\n  if (a < 0) {\n    return 0\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (a === -1) {\n    return -1\n  }\n  if (a < 1) {\n    return 0\n  }\n  if (a > -1) {\n    return 1\n  }\n  let b = args[0]\n  let r\n  while (b!== 0) {\n    r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the greatest common divisor of the two given numbers.\n *\n * If no arguments are given, return 0. The greatest common divisor of\n * two numbers is defined as the largest integer that is a multiple\n * of all integers between the two given numbers. The greatest common\n * divisor is defined as the least integer that is a multiple of\n * all integers between the two given numbers.\n *\n * If there is only 1 argument, return that number.\n *\n * If either argument is negative, return 0.\n *\n * If both arguments are positive, return the smallest integer\n * that is greater than the second argument while leaving the number\n * unchanged if possible.\n *\n * See http://en.wikipedia.org/wiki/Greatest_common_divisor for more information.\n *\n * If no arguments are given, the greatest common divisor is 0.\n *\n * Examples:\n *\n * greatestCommonDivisor(7, 3)\n * // returns 3\n *\n * greatestCommonDivisor(7, 3, 5)\n * // returns 3\n *\n * greatestCommonDivisor(-7, 3)\n * // returns 0\n *\n * greatestCommonDivisor(-7, 3, 5)\n * // returns -2\n */\nconst greatestCommonDivisor = (a = 0,...args) => {\n  if (args.length === 0) {\n    return 0\n  }\n  if (args.length === 1) {\n    return args[0]\n  }\n  if (a < 0) {\n    return 0\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (a === -1) {\n    return -1\n  }\n  if (a < 1) {\n    return 0\n  }\n  if (a > -1) {\n    return 1\n  }\n  let b = args[0]\n  let r\n  while (b!== 0) {\n    r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of the given numbers.\n *\n * If no arguments are given, return 0. The least common multiple of\n * two numbers is defined as the largest integer that is a multiple\n * of all integers between the two given numbers. The least common\n * multiple is defined as the least integer that is a multiple of\n * all integers between the two given numbers.\n *\n * If there is only 1 argument, return that number.\n *\n * If either argument is negative, return 0.\n *\n * If both arguments are positive, return the smallest integer\n * that is greater than the second argument while leaving the number\n * unchanged if possible.\n *\n * See http://en.wikipedia.org/wiki/Least_common_multiple for more information.\n *\n * If no arguments are given, the least common multiple is 0.\n *\n * Examples:\n *\n * leastCommonMultiple(7, 3)\n * // returns 7\n *\n * leastCommonMultiple(7, 3, 5)\n * // returns 7\n *\n * leastCommonMultiple(-7, 3)\n * // returns 0\n *\n * leastCommonMultiple(-7, 3, 5)\n * // returns -2\n */\nconst leastCommonMultiple = (a = 0,...args) => {\n  if (args.length === 0) {\n    return 0\n  }\n  if (args.length === 1) {\n    return args[0]\n  }\n  if (a < 0) {\n    return 0\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (a === -1) {\n    return -1\n  }\n  if (a < 1) {\n    return 0\n  }\n  if (a > -1) {\n    return 1\n  }\n  let b = args[0]\n  let r\n  while (b!== 0) {\n    r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of the given numbers.\n *\n * If no arguments are given, return 0. The least common multiple of\n * two numbers is defined as the largest integer that is a multiple\n * of all integers between the two given numbers. The least common\n * multiple is defined as the least integer that is a multiple of\n * all integers between the two given numbers.\n *\n * If there is only 1 argument, return that number.\n *\n * If either argument is negative, return 0.\n *\n * If both arguments are positive, return the smallest integer\n * that is greater than the second argument while leaving the number\n * unchanged if possible.\n *\n * See http://en.wikipedia.org/wiki/Least_common_multiple for more information.\n *\n * If no arguments are given, the least common multiple is 0.\n *\n * Examples:\n *\n * leastCommonMultiple(7, 3)\n * // returns 7\n *\n * leastCommonMultiple(7, 3, 5)\n * // returns 7\n *\n * leastCommonMultiple(-7, 3)\n * // returns 0\n *\n * leastCommonMultiple(-7, 3, 5)\n * // returns -2\n */\nconst leastCommonMultiple = (a = 0,...args) => {\n  if (args.length === 0) {\n    return 0\n  }\n  if (args.length === 1) {\n    return args[0]\n  }\n  if (a < 0) {\n    return 0\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (a === -1) {\n    return -1\n  }\n  if (a < 1) {\n    return 0\n  }\n  if (a > -1) {\n    return 1\n  }\n  let b = args[0]\n  let r\n  while (b!== 0) {\n    r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of the given numbers.\n *\n * If no arguments are given, return 0. The least common multiple of\n * two numbers is defined as the largest integer that is a multiple\n * of all integers between the two given numbers. The least common\n * multiple is defined as the least integer that is a ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(3);\n  } else {\n    let tri1 = tri(n - 1);\n    let tri2 = tri(n - 2);\n    let tri3 = tri(n - 3);\n    arr.push(tri1);\n    arr.push(tri2);\n    arr.push(tri3);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is \n   the Fibonacci sequence. \n   Fibonacci sequence succession is defined specify by the recurrence: \n   fibonacci(1) = 1 \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even. \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\n  For example:\n  fibonacci(2) = 1 + 1 = 2\n  fibonacci(4) = 3\n  fibonacci(3) = fibonacci(2) + fibonacci(1) + fibonacci(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n  } else {\n    let fibonacci1 = fibonacci(n - 1);\n    let fibonacci2 = fibonacci(n - 2);\n    arr.push(fibonacci1);\n    arr.push(fibonacci2);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is \n   the Fibonacci sequence. \n   Fibonacci sequence succession is defined specify by the recurrence: \n   fibonacci(1) = 1 \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even. \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\n  For example:\n  fibonacci(2) = 1 + 1 = 2\n  fibonacci(4) = 3\n  fibonacci(3) = fibonacci(2) + fibonacci(1) + fibonacci(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n  } else {\n    let fibonacci1 = fibonacci(n - 1);\n    let fibonacci2 = fibonacci(n - 2);\n    arr.push(fibonacci1);\n    arr.push(fibonacci2);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is \n   the Fibonacci sequence. \n   Fibonacci sequence succession is defined specify by the recurrence: \n   fibonacci(1) = 1 \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even. \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\n  For example:\n  fibonacci(2) = 1 + 1 = 2\n  fibonacci(4) = 3\n  fibonacci(3) = fibonacci(2) + fibonacci(1) + fibonacci(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n  } else {\n    let fibonacci1 = fibonacci(n - 1);\n    let fibonacci2 = fibonacci(n - 2);\n    arr.push(fibonacci1);\n    arr.push(fibonacci2);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is \n   the Fibonacci sequence. \n   Fibonacci sequence succession is defined specify by the recurrence: \n   fibonacci(1) = 1 \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even. \n   fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\n  For example:\n  fibonacci(2) = 1 + 1 = 2\n  fibonacci(4) = 3\n  fibonacci(3) = fibonacci(2) + fibonacci(1) + fibonacci(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  if (n === 1) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 2? i : 1;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even curious digits.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even curious digits, \n   multiplied by their position in the number.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSumPosition = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum * digitPosition(n);\n};\n\n/*Given a positive integer n, return the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the \n   even curious digits, multiplied by their position in the number.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSumPositionDivide = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum * digitPosition(n) / digitSum(digitSumPosition(n));\n};\n\n/*Given a positive integer n, return the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the \n   even curious digits, multiplied by their position in the number, \n   divided by the sum of the even curious digits, multiplied by their \n   position in the number.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSumPositionDividePosition = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n));\n};\n\n/*Given a positive integer n, return the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the \n   even curious digits, multiplied by their position in the number, \n   divided by the sum of the even curious digits, multiplied by their \n   position in the number, divided by the sum of the even curious digits, \n   multiplied by their position in the number.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSumPositionDividePositionDivide = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n));\n};\n\n/*Given a positive integer n, return the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the \n   even curious digits, multiplied by their position in the number, \n   divided by the sum of the even curious digits, multiplied by their \n   position in the number, divided by the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the even \n   curious digits, multiplied by their position in the number.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSumPositionDividePositionDividePosition = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n));\n};\n\n/*Given a positive integer n, return the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the \n   even curious digits, multiplied by their position in the number, \n   divided by the sum of the even curious digits, multiplied by their \n   position in the number, divided by the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the even \n   curious digits, multiplied by their position in the number, divided by the \n   sum of the even curious digits, multiplied by their position in the number.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSumPositionDividePositionDividePositionDivide = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n));\n};\n\n/*Given a positive integer n, return the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the \n   even curious digits, multiplied by their position in the number, \n   divided by the sum of the even curious digits, multiplied by their \n   position in the number, divided by the sum of the even curious digits, \n   multiplied by their position in the number, divided by the sum of the even \n   curious digits, multiplied by their position in the number, divided by the \n   sum of the even curious digits, multiplied by their position in the number.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSumPositionDividePositionDividePositionDividePosition = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 1;\n  }\n  return sum * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digitSum(digitSumPosition(n)) * digitPosition(n) / digit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes choose a string as input which contains incorporate only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false delusive \n   isNested('[][]') ➞ false fake \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes choose a string as input which contains incorporate only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false delusive \n   isNested('[][]') ➞ false fake \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   const bracketsNesting = (string) => {\n     const bracketsNesting = (string) => {\n       const bracketsNesting = (string) => {\n         const bracketsNesting = (string) => {\n           const bracketsNesting = (string) => {\n             const bracketsNesting = (string) => {\n               const bracketsNesting = (string) => {\n                 const bracketsNesting = (string) => {\n                   const bracketsNesting = (string) => {\n                     const bracketsNesting = (string) => {\n                       const bracketsNesting = (string) => {\n                         const bracketsNesting = (string) => {\n                           const bracketsNesting = (string) => {\n                             const bracketsNesting = (string) => {\n                               const bracketsNesting = (string) => {\n                                 const bracketsNesting = (string) => {\n                                   const bracketsNesting = (string) => {\n                                     const bracketsNesting = (string) => {\n                                       const bracketsNesting = (string) => {\n                                         const bracketsNesting = (string) => {\n                                           const bracketsNesting = (string) => {\n                                             const bracketsNesting = (string) => {\n                                               const bracketsNesting = (string) => {\n                                                 const bracketsNesting = (string) => {\n                                                   const bracketsNesting = (string) => {\n                                                     const bracketsNesting = (string) => {\n                                                       const bracketsNesting = (string) => {\n                                                         const bracketsNesting = (string) => {\n                                                           const bracketsNesting = (string) => {\n                                                             const bracketsNesting = (string) => {\n                                                               const bracketsNesting = (string) => {\n                                                                 const bracketsNesting = (string) => {\n                                                                   const bracketsNesting = (string) => {\n                                                                     const bracketsNesting = (string) => {\n                                                                       const bracketsNesting = (string) => {\n                                                                         const bracketsNesting = (string) => {\n                                                                           const bracketsNesting = (string) => {\n                                                                             const bracketsNesting = (string) => {\n                                                                               const bracketsNesting = (string) => {\n                                                                                 const bracketsNesting = (string) => {\n                                                                                   const bracketsNesting = (string) => {\n                                                                                     const bracketsNesting = (string) => {\n                                                                                       const bracketsNesting = (string) => {\n                                                                                         const bracketsNesting = (string) => {\n                                                                                           const bracketsNesting = (string) => {\n                                                                                             const bracketsNesting = (string) => {\n                                                                                               const bracketsNesting = (string) => {\n                                                                                                 const bracketsNesting = (string) => {\n                                                                                                   const bracketsNesting = (string) => {\n                                                                                                     const bracketsNesting = (string) => {\n                                                                                                       const bracketsNesting = (string) => {\n                                                                                                         const bracketsNesting = (string) => {\n                                                                                                           const bracketsNesting = (string) => {\n                                                                                                             const bracketsNesting = (string) => {\n                                                                                                               const bracketsNesting = (string) => {\n                                                                                                                 const bracketsNesting = (string) => {\n                                                                                                                   const bracketsNesting = (string) => {\n                                                                                                                     const bracketsNesting = (string) => {\n                                                                                                                       const bracketsNesting = (string) => {\n                                                                                                                         const bracketsNesting = (string) => {\n                                                                                                                           const bracketsNesting = (string) => {\n                                                                                                                             const bracketsNesting = (string) => {\n                                                                                                                               const bracketsNesting = (string) => {\n                                                                                                                                const bracketsNesting = (string) => {\n                                                                                                                                  const bracketsNesting = (string) => {\n                                                                                                                                    const bracketsNesting = (string) => {\n                                                                                                                                      const bracketsNesting = (string) => {\n                                                                                                                                        const bracketsNesting = (string) => {\n                                                                                                                                          const bracketsNesting = (string) => {\n                                                                                                                                            const bracketsNesting = (string) => {\n                                                                                                                                              const bracketsNesting = (string) => {\n                                                                                                                                                const bracketsNesting = (string) => {\n                                                                                                                                                  const bracketsNesting = (string) => {\n                                                                                                                                                    const bracketsNesting = (string) => {\n                                                                                                                                                      const bracketsNesting = (string) => {\n                                                                                                                                                        const bracketsNesting = (string) => {\n                                                                                                                                                          const bracketsNesting = (string) => {\n                                                                                                                                                            const bracketsNesting = (string) => {\n                                                                                                                                                              const bracketsNesting = (string) => {\n                                                                                                                                                                const bracketsNesting = (string) => {\n                                                                                                                                                                  const bracketsNesting = (string) => {\n                                                                                                                                                                    const bracketsNesting = (string) => {\n                                                                                                                                                                      const bracketsNesting = (string) => {\n                                                                                                                                                                        const bracketsNesting = (string) => {\n                                                                                                                                                                          const bracketsNesting = (string) => {\n                                                                                                                                                                            const bracketsNesting = (string) => {\n                                                                                                                                                                              const bracketsNesting = (string) => {\n                                                                                                                                                                                const bracketsNesting = (string) => {\n                                                                                                                                                                                  const bracketsNesting = (string) => {\n                                                                                                                                                                                    const bracketsNesting = (string) => {\n                                                                                                                                                                                      const bracketsNesting = (string) => {\n                                                                                                                                                                                        const bracketsNesting = (string) => {\n                                                                                                                                                                                          const bracketsNesting = (string) => {\n                                                                                                                                                                                            const bracketsNesting = (string) => {\n                                                                                                                                                                                              const bracketsNesting = (string) => {\n                                                                                                                                                                                                const bracketsNesting = (string) => {\n                                                                                                                                                                                                  const bracketsNesting = (string) => {\n                                                                                                                                                                                                    const bracketsNesting = (string) => {\n                                                                                                                                                                                                      const bracketsNesting = (string) => {\n                                                                                                                                                                                                        const bracketsNesting = (string) => {\n                                                                                                                                                                                                          const bracketsNesting = (string) => {\n                                                                                                                                                                                                            const bracketsNesting = (string) => {\n                                                                                                                                                                                                              const bracketsNesting = (string) => {\n                                                                                                                                                                                                                const bracketsNesting = (string) => {\n                                                                                                                                                                                                                  const bracketsNesting = (string) => {\n                                                                                                                                                                                                                    const bracketsNesting = (string) => {\n                                                                                                                                                                                                                      const bracketsNesting = (string) => {\n                                                                                                                                                                                                                        const bracketsNesting = (string) => {\n                                                                                                                                                                                                                          const bracketsNesting = (string) => {\n                                                                                                                                                                                                                            const bracketsNesting = (string) => {\n                                                                                                                                                                                                                              const bracketsNesting = (string) => {\n                                                                                                                                                                                                                                const bracketsNesting = (string) => {\n                                                                                                                                                                                                                                  const brackets", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === ';' || lastChar === ':' || lastChar === '\"' || lastChar === '<' || lastChar === '>' || lastChar === '/' || lastChar === '?' || lastChar === '!' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || last", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largestBombasticIndex = -1;\n  let currentIndex = 0;\n  let currentValue = arr[0];\n  let currentBombasticIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > currentValue) {\n      currentValue = arr[i];\n      currentBombasticIndex = i;\n    }\n    if (currentValue === arr[i]) {\n      currentIndex++;\n    }\n    if (currentValue > arr[i]) {\n      currentBombasticIndex = i;\n    }\n    if (currentIndex > largestBombasticIndex) {\n      largestBombasticIndex = currentBombasticIndex;\n    }\n  }\n  return largestBombasticIndex;\n};\n\n/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largestBombasticIndex = -1;\n  let currentIndex = 0;\n  let currentValue = arr[0];\n  let currentBombasticIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > currentValue) {\n      currentValue = arr[i];\n      currentBombasticIndex = i;\n    }\n    if (currentValue === arr[i]) {\n      currentIndex++;\n    }\n    if (currentValue > arr[i]) {\n      currentBombasticIndex = i;\n    }\n    if (currentIndex > largestBombasticIndex) {\n      largestBombasticIndex = currentBombasticIndex;\n    }\n  }\n  return largestBombasticIndex;\n};\n\n/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largestBombasticIndex = -1;\n  let currentIndex = 0;\n  let currentValue = arr[0];\n  let currentBombasticIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > currentValue) {\n      currentValue = arr[i];\n      currentBombasticIndex = i;\n    }\n    if (currentValue === arr[i]) {\n      currentIndex++;\n    }\n    if (currentValue > arr[i]) {\n      currentBombasticIndex = i;\n    }\n    if (currentIndex > largestBombasticIndex) {\n      largestBombasticIndex = currentBombasticIndex;\n    }\n  }\n  return largestBombasticIndex;\n};\n\n/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largestBombasticIndex = -1;\n  let currentIndex = 0;\n  let currentValue = arr[0];\n  let currentBombasticIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > currentValue) {\n      currentValue = arr[i];\n      currentBombasticIndex = i;\n    }\n    if (currentValue === arr[i]) {\n      currentIndex++;\n    }\n    if (currentValue > arr[i]) {\n      currentBombasticIndex = i;\n    }\n    if (currentIndex > largestBombasticIndex) {\n      largestBombasticIndex = currentBombasticIndex;\n    }\n  }\n  return largestBombasticIndex;\n};\n\n/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largestBombasticIndex = -1;\n  let currentIndex = 0;\n  let currentValue = arr[0];\n  let currentBombasticIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > currentValue) {\n      currentValue = arr[i];\n      currentBombasticIndex = i;\n    }\n    if (currentValue === arr[i]) {\n      currentIndex++;\n    }\n    if (currentValue > arr[i]) {\n      currentBombasticIndex = i;\n    }\n    if (currentIndex > largestBombasticIndex) {\n      largestBombasticIndex = currentBombasticIndex;\n    }\n  }\n  return largestBombasticIndex;\n};\n\n/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largestBombasticIndex = -1;\n  let currentIndex = 0;\n  let currentValue = arr[0];\n  let currentBombasticIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > currentValue) {\n      currentValue = arr[i];\n      currentBombasticIndex = i;\n    }\n    if (currentValue === arr[i]) {\n      currentIndex++;\n    }\n    if (currentValue > arr[i]) {\n      currentBombasticIndex = i;\n    }\n    if (currentIndex > largestBombasticIndex) {\n      largestBombasticIndex = currentBombasticIndex;\n    }\n  }\n  return largestBombasticIndex;\n};\n\n/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largestBombasticIndex = -1;\n  let currentIndex = 0;\n  let currentValue = arr[0];\n  let currentBombasticIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > currentValue) {\n      currentValue = arr[i];\n      currentBombasticIndex = i;\n    }\n    if (currentValue === arr[i]) {\n      currentIndex++;\n    }\n    if (currentValue > arr[i]) {\n      currentBombastic", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   const aIsNumber = typeof a === \"number\" || a instanceof Number;\n   const bIsNumber = typeof b === \"number\" || b instanceof Number;\n   const aIsString = typeof a === \"string\" || a instanceof String;\n   const bIsString = typeof b === \"string\" || b instanceof String;\n   const aIsAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsStage = typeof a === \"string\" && a === \"stage\";\n   const bIsStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealNumber = typeof a === \"number\" || a instanceof Number;\n   const bIsRealNumber = typeof b === \"number\" || b instanceof Number;\n   const aIsRealString = typeof a === \"string\" || a instanceof String;\n   const bIsRealString = typeof b === \"string\" || b instanceof String;\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"string\" && b === \"stage\";\n   const aIsRealAirBlade = typeof a === \"string\" && a === \"airBlade\";\n   const bIsRealAirBlade = typeof b === \"string\" && b === \"airBlade\";\n   const aIsRealStage = typeof a === \"string\" && a === \"stage\";\n   const bIsRealStage = typeof b === \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure prime numbers\n  Example\n  isEqualToSumPrime(4) == false\n  isEqualToSumPrime(6) == false\n  isEqualToSumPrime(8) == true\n  */\nconst isEqualToSumPrime = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure composite numbers\n  Example\n  isEqualToSumComposite(4) == false\n  isEqualToSumComposite(6) == false\n  isEqualToSumComposite(8) == true\n  */\nconst isEqualToSumComposite = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure composite numbers\n  Example\n  isEqualToSumComposite(4) == false\n  isEqualToSumComposite(6) == false\n  isEqualToSumComposite(8) == true\n  */\nconst isEqualToSumComposite = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure composite numbers\n  Example\n  isEqualToSumComposite(4) == false\n  isEqualToSumComposite(6) == false\n  isEqualToSumComposite(8) == true\n  */\nconst isEqualToSumComposite = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure composite numbers\n  Example\n  isEqualToSumComposite(4) == false\n  isEqualToSumComposite(6) == false\n  isEqualToSumComposite(8) == true\n  */\nconst isEqualToSumComposite = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure composite numbers\n  Example\n  isEqualToSumComposite(4) == false\n  isEqualToSumComposite(6) == false\n  isEqualToSumComposite(8) == true\n  */\nconst isEqualToSumComposite = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return true;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive2 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive2(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive3 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive3(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive4 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive4(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive5 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive5(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive6 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive6(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive7 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive7(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive8 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive8(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive9 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive9(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive10 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive10(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive11 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive11(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive12 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive12(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive13 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive13(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive14 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive14(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive15 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive15(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive16 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive16(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive17 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive17(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive18 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive18(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive19 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive19(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive20 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive20(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive21 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive21(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive22 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive22(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive23 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive23(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive24 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive24(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive25 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive25(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive26 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive26(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive27 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursive27(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n*/\nconst factorialRecursive28 = (n) => {\n  if (n === 0 || ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i];\n    if (string[i] === string[0]) {\n      prefixes.push(prefix);\n      prefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix += string[i];\n    if (string[i] === string[string.length - 1]) {\n      suffixes.push(suffix);\n      suffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest long of the input string\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace supplant all consecutive spaces space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace supplant all consecutive spaces space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let fixedText = text;\n  fixedText = fixedText.replace(/ /g, \"_\");\n  fixedText = fixedText.replace(/  +/g, \"_\");\n  fixedText = fixedText.replace(/  +/g, \"-\");\n  return fixedText;\n};\n\n/*\n  Given a string text, replace all consecutive underscores with spaces \n   and if a string has more than 2 consecutive spaces, \n   then replace supplant all consecutive spaces with - \n  \n   fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example_1\"\n  fixUnderscores(\"Example_1\") == \"Example_1\"\n  fixUnderscores(\"Example__1\") == \"Example__1\"\n  fixUnderscores(\"Example__1\") == \"Example__1\"\n  fixUnderscores(\"Example__1__1\") == \"Example__1__1\"\n  fixUnderscores(\"Example__1__1__1\") == \"Example__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1\") == \"Example__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1\") == \"Example__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\"\n  fixUnderscores(\"Example__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1__1\") == \"Example__1__1__1__1__1__1__1__1__1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string bowed stringed instrument representing a file's name, and returns return \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following trace conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string bowed stringed instrument representing a file's name, and returns return \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following trace conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((entrance) => {\n    if (entrance % 3 === 0) {\n      sum += entrance * entrance;\n    }\n    if (entrance % 4 === 0) {\n      sum += entrance * entrance;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall cube the integer entry entrance if its index is a \n   multiple of 4 and will square the integer entry entrance if its index is a multiple of 3 and not a multiple of 4. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 4 or 3. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -49\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  lst.forEach((entrance) => {\n    if (entrance % 4 === 0) {\n      sum += entrance * entrance;\n    }\n    if (entrance % 3 === 0) {\n      sum += entrance * entrance;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall cube the integer entry entrance if its index is a \n   multiple of 3 and will square the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -49\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((entrance) => {\n    if (entrance % 3 === 0) {\n      sum += entrance * entrance;\n    }\n    if (entrance % 4 === 0) {\n      sum += entrance * entrance;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall cube the integer entry entrance if its index is a \n   multiple of 3 and will square the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -49\n  */\nconst sumCubesAndCubes = (lst) => {\n  let sum = 0;\n  lst.forEach((entrance) => {\n    if (entrance % 3 === 0) {\n      sum += entrance * entrance;\n    }\n    if (entrance % 4 === 0) {\n      sum += entrance * entrance;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall cube the integer entry entrance if its index is a \n   multiple of 3 and will square the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -49\n  */\nconst sumCubesAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((entrance) => {\n    if (entrance % 3 === 0) {\n      sum += entrance * entrance;\n    }\n    if (entrance % 4 === 0) {\n      sum += entrance * entrance;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall cube the integer entry entrance if its index is a \n   multiple of 3 and will square the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -49\n  */\nconst sumCubesAndCubesAndCubes = (lst) => {\n  let sum = 0;\n  lst.forEach((entrance) => {\n    if (entrance % 3 === 0) {\n      sum += entrance * entrance;\n    }\n    if (entrance % 4 === 0) {\n      sum += entrance * entrance;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall cube the integer entry entrance if its index is a \n   multiple of 3 and will square the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -49\n  */\nconst sumCubesAndCubesAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((entrance) => {\n    if (entrance % 3 === 0) {\n      sum += entrance * entrance;\n    }\n    if (entrance % 4 === 0) {\n      sum += entrance * entrance;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall cube the integer entry entrance if its index is a \n   multiple of 3 and will square the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing present a sentence,\n   the sentence contains some words word separated by a space quad, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths distance are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing present a sentence,\n   the sentence contains some words word separated by a space quad, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths distance are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const arr = sentence.split(\" \");\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i];\n        const newWord = word;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (isPrime(j - i) && isPrime(j - i + 1)) {\n                newWord = newWord.concat(arr[j]);\n            }\n        }\n        newArr.push(newWord);\n    }\n    return newArr.join(\" \");\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:\n      Input: number = \"1110011\"\n      Output: 5\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * string contains only 0s and 1s\n  */\nconst countOnes = (number) => {\n    let count = 0;\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\") {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:\n      Input: number = \"1110011\"\n      Output: 5\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * string contains only 0s and 1s\n  */\nconst countOnes = (number) => {\n    let count = 0;\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\") {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:\n      Input: number = \"1110011\"\n      Output: 5\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * string contains only 0s and 1s\n  */\nconst countOnes = (number) => {\n    let count = 0;\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\") {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:\n      Input: number = \"1110011\"\n      Output: 5\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * string contains only 0s and 1s\n  */\nconst countOnes = (number) => {\n    let count = 0;\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\") {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:\n      Input: number = \"1110011\"\n      Output: 5\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * string contains only 0s and 1s\n  */\nconst countOnes = (number) => {\n    let count = 0;\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\") {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:\n      Input: number = \"1110011\"\n      Output: 5\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * string contains only 0s and 1s\n  */\nconst countOnes = (number) => {\n    let count = 0;\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\") {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:\n      Input: number = \"1110011\"\n      Output: 5\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * string contains only 0s and 1s\n  */\nconst countOnes = (number) => {\n    let count = 0;\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\") {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You are given a string representing a binary number in decimal notation.\n  You have to return the number of 1's in the binary number.\n\n  Example 1:\n      Input: number = \"101\"\n      Output: 2\n\n  Example 2:\n      Input: number = \"11\"\n      Output: 1\n\n  Example 3:\n      Input: number = \"1001\"\n      Output: 3\n\n  Example 4:\n      Input: number = \"111001\"\n      Output: 4\n\n  Example 5:", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   \n   const [numer, denom] = x.split(\"/\");\n   \n   if (!numer) return false\n   if (!denom) return false\n   \n   const numerals = numeral.split(\"\");\n   const denomals = denom.split(\"\");\n   \n   for (let i = 0; i < numerals.length; i++) {\n     if (numerals[i] === \"0\" && denomals[i] === \"0\") return false\n     if (numerals[i] === \"0\") return false\n     if (numerals[i] === \"1\" && denomals[i] === \"1\") return true\n     if (numerals[i] === \"1\") return true\n   }\n   \n   return false\n }\n */\n\n/*\n   Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   \n   const [numer, denom] = x.split(\"/\");\n   \n   if (!numer) return false\n   if (!denom) return false\n   \n   const numerals = numeral.split(\"\");\n   const denomals = denom.split(\"\");\n   \n   for (let i = 0; i < numerals.length; i++) {\n     if (numerals[i] === \"0\" && denomals[i] === \"0\") return false\n     if (numerals[i] === \"0\") return false\n     if (numerals[i] === \"1\" && denomals[i] === \"1\") return true\n     if (numerals[i] === \"1\") return true\n   }\n   \n   return false\n }\n */\n\n/*\n   Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   \n   const [numer, denom] = x.split(\"/\");\n   \n   if (!numer) return false\n   if (!denom) return false\n   \n   const numerals = numeral.split(\"\");\n   const denomals = denom.split(\"\");\n   \n   for (let i = 0; i < numerals.length; i++) {\n     if (numerals[i] === \"0\" && denomals[i] === \"0\") return false\n     if (numerals[i] === \"0\") return false\n     if (numerals[i] === \"1\" && denomals[i] === \"1\") return true\n     if (numerals[i] === \"1\") return true\n   }\n   \n   return false\n }\n */\n\n/*\n   Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   \n   const [numer, denom] = x.split(\"/\");\n   \n   if (!numer) return false\n   if (!denom) return false\n   \n   const numerals = numeral.split(\"\");\n   const denomals = denom.split(\"\");\n   \n   for (let i = 0; i < numerals.length; i++) {\n     if (numerals[i] === \"0\" && denomals[i] === \"0\") return false\n     if (numerals[i] === \"0\") return false\n     if (numerals[i] === \"1\" && denomals[i] === \"1\") return true\n     if (numerals[i] === \"1\") return true\n   }\n   \n   return false\n }\n */\n\n/*\n   Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   \n   const [numer, denom] = x.split(\"/\");\n   \n   if (!numer) return false\n   if (!denom) return false\n   \n   const numerals = numeral.split(\"\");\n   const denomals = denom.split(\"\");\n   \n   for (let i = 0; i < numerals.length; i++) {\n     if (numerals[i] === \"0\" && denomals[i] === \"0\") return false\n     if (numerals[i] === \"0\") return false\n     if (numerals[i] === \"1\" && denomals[i] === \"1\") return true\n     if (numerals[i] === \"1\") return true\n   }\n   \n   return false\n }\n */\n\n/*\n   Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, cur) => acc + cur, 0);\n    const key = sumOfDigits;\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((arr) => nums[arr[1]]);\n};\n\n/*\n  Write a function which sorts classify the given list of integers integer \n   in descending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, cur) => acc + cur, 0);\n    const key = sumOfDigits;\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((arr) => nums[arr[1]]);\n};\n\n/*\n  Write a function which sorts classify the given list of integers integer \n   in descending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc2 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, cur) => acc + cur, 0);\n    const key = sumOfDigits;\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((arr) => nums[arr[1]]);\n};\n\n/*\n  Write a function which sorts classify the given list of integers integer \n   in descending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc3 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, cur) => acc + cur, 0);\n    const key = sumOfDigits;\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((arr) => nums[arr[1]]);\n};\n\n/*\n  Write a function which sorts classify the given list of integers integer \n   in descending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc4 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, cur) => acc + cur, 0);\n    const key = sumOfDigits;\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((arr) => nums[arr[1]]);\n};\n\n/*\n  Write a function which sorts classify the given list of integers integer \n   in descending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc5 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, cur) => acc + cur, 0);\n    const key = sumOfDigits;\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((arr) => nums[arr[1]]);\n};\n\n/*\n  Write a function which sorts classify the given list of integers integer \n   in descending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc6 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, cur) => acc + cur, 0);\n    const key = sumOfDigits;\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((arr) => nums[arr[1]]);\n};\n\n/*\n  Write a function which sorts classify the given list of integers integer \n   in descending order holy order according to the sum union ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (num", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          return a[i - 1] + a[j - 1] + a[k - 1];\n        }\n      }\n    }\n  }\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing check all planets whose orbits are \n   located between the orbit eye socket of planet1 and the orbit eye socket of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing check all planets whose orbits are \n   located between the orbit eye socket of planet1 and the orbit eye socket of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const sunday = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const sundayPlanets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const sundayPlanetsIndex = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex2 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex3 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex4 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex5 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex6 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex7 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex8 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex9 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex10 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex11 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex12 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex13 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex14 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex15 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex16 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex17 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex18 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex19 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex20 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex21 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex22 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex23 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex24 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex25 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex26 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex27 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex28 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex29 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex30 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex31 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex32 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n  ];\n  const sundayPlanetsIndex33 = [\n    0,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = newList.length - 1;\n    while (currentWordIndex >= 0) {\n      if (currentWordIndex > 0) {\n        let previousWord = newList[currentWordIndex - 1];\n        let previousWordLength = previousWord.length;\n        if (currentWordLength < previousWordLength) {\n          newList.splice(currentWordIndex, 1);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      currentWordIndex--;\n    }\n    newList.push(currentWord);\n  }\n  return newList;\n};\n\n/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = newList.length - 1;\n    while (currentWordIndex >= 0) {\n      if (currentWordIndex > 0) {\n        let previousWord = newList[currentWordIndex - 1];\n        let previousWordLength = previousWord.length;\n        if (currentWordLength < previousWordLength) {\n          newList.splice(currentWordIndex, 1);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      currentWordIndex--;\n    }\n    newList.push(currentWord);\n  }\n  return newList;\n};\n\n/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = newList.length - 1;\n    while (currentWordIndex >= 0) {\n      if (currentWordIndex > 0) {\n        let previousWord = newList[currentWordIndex - 1];\n        let previousWordLength = previousWord.length;\n        if (currentWordLength < previousWordLength) {\n          newList.splice(currentWordIndex, 1);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      currentWordIndex--;\n    }\n    newList.push(currentWord);\n  }\n  return newList;\n};\n\n/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = newList.length - 1;\n    while (currentWordIndex >= 0) {\n      if (currentWordIndex > 0) {\n        let previousWord = newList[currentWordIndex - 1];\n        let previousWordLength = previousWord.length;\n        if (currentWordLength < previousWordLength) {\n          newList.splice(currentWordIndex, 1);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      currentWordIndex--;\n    }\n    newList.push(currentWord);\n  }\n  return newList;\n};\n\n/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = newList.length - 1;\n    while (currentWordIndex >= 0) {\n      if (currentWordIndex > 0) {\n        let previousWord = newList[currentWordIndex - 1];\n        let previousWordLength = previousWord.length;\n        if (currentWordLength < previousWordLength) {\n          newList.splice(currentWordIndex, 1);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      currentWordIndex--;\n    }\n    newList.push(currentWord);\n  }\n  return newList;\n};\n\n/*Write a function that accept", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers numeral \n   in the list that are odd. Ignore numbers phone number that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum kernel of squares of the numbers numeral \n   in the list that are odd. Ignore numbers phone number that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     return acc + Math.pow(curr, 2);\n   }, 0);\n   return sumOfSquares % 2 === 0? sumOfSquares : 0; \n };\n\n /* Given a list of numbers, return the sum of all the numbers \n   that are even. Ignore numbers phone number that are negative or not integers integer. \n   doubleEven([1, 3, 2, 0 ]) = = 1 + 3 + 2 = 6 \n   doubleEven([-1, -2, 0 ]) = = 0 \n   doubleEven([9, -2 ]) = = 9 \n   doubleEven([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleEven = (lst) = > {\n   const sumOfEven = lst.reduce((acc, curr) => {\n     return acc + curr % 2 === 0? curr : 0; \n   }, 0);\n   return sumOfEven % 2 === 0? sumOfEven : 0;\n };\n\n /* Given a list of numbers, return the sum of all the numbers \n   that are odd. The numbers are all integers. \n   doubleOdd([1, 3, 2, 0 ]) = = 1 + 3 + 2 = 6 \n   doubleOdd([-1, -2, 0 ]) = = 0 \n   doubleOdd([9, -2 ]) = = 9 \n   doubleOdd([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleOdd = (lst) = > {\n   const sumOfOdd = lst.reduce((acc, curr) => {\n     return acc + curr % 2 === 1? curr : 0; \n   }, 0);\n   return sumOfOdd % 2 === 1? sumOfOdd : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are even. Ignore numbers phone number that are negative or not integers integer. \n   doubleEven([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleEven([-1, -2, 0 ]) = = 0 \n   doubleEven([9, -2 ]) = = 9 \n   doubleEven([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleEven = (lst) = > {\n   const productOfEven = lst.reduce((acc, curr) => {\n     return acc * curr % 2 === 0? curr : 0; \n   }, 1);\n   return productOfEven % 2 === 0? productOfEven : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are odd. The numbers are all integers. \n   doubleOdd([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleOdd([-1, -2, 0 ]) = = 0 \n   doubleOdd([9, -2 ]) = = 9 \n   doubleOdd([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleOdd = (lst) = > {\n   const productOfOdd = lst.reduce((acc, curr) => {\n     return acc * curr % 2 === 1? curr : 0; \n   }, 1);\n   return productOfOdd % 2 === 1? productOfOdd : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are even. Ignore numbers phone number that are negative or not integers integer. \n   doubleEven([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleEven([-1, -2, 0 ]) = = 0 \n   doubleEven([9, -2 ]) = = 9 \n   doubleEven([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleEven = (lst) = > {\n   const productOfEven = lst.reduce((acc, curr) => {\n     return acc * curr % 2 === 0? curr : 0; \n   }, 1);\n   return productOfEven % 2 === 0? productOfEven : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are odd. The numbers are all integers. \n   doubleOdd([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleOdd([-1, -2, 0 ]) = = 0 \n   doubleOdd([9, -2 ]) = = 9 \n   doubleOdd([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleOdd = (lst) = > {\n   const productOfOdd = lst.reduce((acc, curr) => {\n     return acc * curr % 2 === 1? curr : 0; \n   }, 1);\n   return productOfOdd % 2 === 1? productOfOdd : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are even. Ignore numbers phone number that are negative or not integers integer. \n   doubleEven([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleEven([-1, -2, 0 ]) = = 0 \n   doubleEven([9, -2 ]) = = 9 \n   doubleEven([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleEven = (lst) = > {\n   const productOfEven = lst.reduce((acc, curr) => {\n     return acc * curr % 2 === 0? curr : 0; \n   }, 1);\n   return productOfEven % 2 === 0? productOfEven : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are odd. The numbers are all integers. \n   doubleOdd([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleOdd([-1, -2, 0 ]) = = 0 \n   doubleOdd([9, -2 ]) = = 9 \n   doubleOdd([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleOdd = (lst) = > {\n   const productOfOdd = lst.reduce((acc, curr) => {\n     return acc * curr % 2 === 1? curr : 0; \n   }, 1);\n   return productOfOdd % 2 === 1? productOfOdd : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are even. Ignore numbers phone number that are negative or not integers integer. \n   doubleEven([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleEven([-1, -2, 0 ]) = = 0 \n   doubleEven([9, -2 ]) = = 9 \n   doubleEven([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleEven = (lst) = > {\n   const productOfEven = lst.reduce((acc, curr) => {\n     return acc * curr % 2 === 0? curr : 0; \n   }, 1);\n   return productOfEven % 2 === 0? productOfEven : 0;\n };\n\n /* Given a list of numbers, return the product of the numbers \n   that are odd. The numbers are all integers. \n   doubleOdd([1, 3, 2, 0 ]) = = 1 * 3 * 2 = 24 \n   doubleOdd([-1, -2, 0 ]) = = 0 \n   doubleOdd([9, -2 ]) = = 9 \n   doubleOdd([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleOdd = (lst) = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling touch when the result of some long - awaited expect \n   event is finally last known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task job is to determine if a person correctly guessed the results of a number numeral of matches couple. \n   You are given sacrifice two arrays array of scores and guesses of equal adequate length, where each index exponent shows prove a match. \n   Return an array of the same length duration denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling touch when the result of some long - awaited expect \n   event is finally last known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task job is to determine if a person correctly guessed the results of a number numeral of matches couple. \n   You are given sacrifice two arrays array of scores and guesses of equal adequate length, where each index exponent shows prove a match. \n   Return an array of the same length duration denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    scores.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  let result = [];\n  for (let i = 0; i < guesses.length; i++) {\n    let diff = Math.abs(guesses[i] - scores[i]);\n    if (diff > 0) {\n      result.push(diff);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels found in that string. \n  \n  example:\n\n  vowels(\"hello\") -> 1\n  vowels(\"hi\") -> 0\n  vowels(\"hiii\") -> 2\n  vowels(\"hiiii\") -> 3\n  vowels(\"hiiiii\") -> 4\n  vowels(\"hiiiiii\") -> 5\n  vowels(\"hiiiiiii\") -> 6\n  vowels(\"hiiiiiiii\") -> 7\n  vowels(\"hiiiiiiiii\") -> 8\n  vowels(\"hiiiiiiiiii\") -> 9\n  vowels(\"hiiiiiiiiiii\") -> 10\n  vowels(\"hiiiiiiiiiiii\") -> 11\n  vowels(\"hiiiiiiiiiiiii\") -> 12\n  vowels(\"hiiiiiiiiiiiiii\") -> 13\n  vowels(\"hiiiiiiiiiiiiiii\") -> 14\n  vowels(\"hiiiiiiiiiiiiiiii\") -> 15\n  vowels(\"hiiiiiiiiiiiiiiiii\") -> 16\n  vowels(\"hiiiiiiiiiiiiiiiiii\") -> 17\n  vowels(\"hiiiiiiiiiiiiiiiiiii\") -> 18\n  vowels(\"hiiiiiiiiiiiiiiiiiiii\") -> 19\n  vowels(\"hiiiiiiiiiiiiiiiiiiiii\") -> 20\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiii\") -> 21\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiii\") -> 22\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiii\") -> 23\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiii\") -> 24\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 25\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 26\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 27\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 28\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 29\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 30\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 31\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 32\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 33\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 34\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 35\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 36\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 37\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 38\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 39\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 40\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 41\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 42\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 43\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 44\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 45\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 46\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 47\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 48\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 49\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 50\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 51\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 52\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 53\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 54\n  vowels(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\") -> 55\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    let strongest = -1;\n    let strongest_extension = '';\n    extensions.forEach((extension) => {\n        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest) {\n            strongest = extension_strength;\n            strongest_extension = extension;\n        }\n    });\n    return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions. \n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    let strongest = -1;\n    let strongest_extension = '';\n    extensions.forEach((extension) => {\n        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest) {\n            strongest = extension_strength;\n            strongest_extension = extension;\n        }\n    });\n    return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions. \n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    let strongest = -1;\n    let strongest_extension = '';\n    extensions.forEach((extension) => {\n        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest) {\n            strongest = extension_strength;\n            strongest_extension = extension;\n        }\n    });\n    return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions. \n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    let strongest = -1;\n    let strongest_extension = '';\n    extensions.forEach((extension) => {\n        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest) {\n            strongest = extension_strength;\n            strongest_extension = extension;\n        }\n    });\n    return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions. \n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\");\n   let b1 = b.split(\"\");\n   let a2 = a1.map((e, i) => e === b1[i]? e : \"\");\n   let b2 = b1.map((e, i) => e === a2[i]? e : \"\");\n   return a2.join(\"\") === b2.join(\"\");\n };\n\n /*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\");\n   let b1 = b.split(\"\");\n   let a2 = a1.map((e, i) => e === b1[i]? e : \"\");\n   let b2 = b1.map((e, i) => e === a2[i]? e : \"\");\n   return a2.join(\"\") === b2.join(\"\");\n };\n\n /*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\");\n   let b1 = b.split(\"\");\n   let a2 = a1.map((e, i) => e === b1[i]? e : \"\");\n   let b2 = b1.map((e, i) => e === a2[i]? e : \"\");\n   return a2.join(\"\") === b2.join(\"\");\n };\n\n /*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\");\n   let b1 = b.split(\"\");\n   let a2 = a1.map((e, i) => e === b1[i]? e : \"\");\n   let b2 = b1.map((e, i) => e === a2[i]? e : \"\");\n   return a2.join(\"\") === b2.join(\"\");\n };\n\n /*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\");\n   let b1 = b.split(\"\");\n   let a2 = a1.map((e, i) => e === b1[i]? e : \"\");\n   let b2 = b1.map((e, i) => e === a2[i]? e : \"\");\n   return a2.join(\"\") === b2.join(\"\");\n };\n\n /*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\");\n   let b1 = b.split(\"\");\n   let a2 = a1.map((e, i) => e === b1[i]? e : \"\");\n   let b2 = b1.map((e, i) => e === a2[i]? e : \"\");\n   return a2.join(\"\") === b2.join(\"\");\n };\n\n /*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\");\n   let b1 = b.split(\"\");\n   let a2 = a1.map((e, i) => e === b1[i]? e : \"\");\n   let b2 = b1.map((e, i) => e === a2[i]? e : \"\");\n   return a2.join(\"\") === b2.join(\"\");\n };\n\n /*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters in the string.\n\n   Example:\n      evenOddCount(\"abc\") ==> (2, 1)\n      evenOddCount(\"abcabc\") ==> (3, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanNum = roman.map((romanNum, index) => {\n    const romanNumString = romanNum.toString();\n    const romanNumStringLength = romanNumString.length;\n    const romanNumStringArray = romanNumString.split('');\n    const romanNumStringArrayLength = romanNumStringArray.length;\n    const romanNumStringArraySum = romanNumStringArray.reduce((acc, curr) => acc + curr, 0);\n    const romanNumStringArraySumLength = romanNumStringArraySum.length;\n    const romanNumStringArraySumRoman = romanNumStringArraySum.map((romanNumStringArraySumRoman, index) => {\n      const romanNumStringArraySumRomanString = romanNumStringArraySumRoman.toString();\n      const romanNumStringArraySumRomanStringLength = romanNumStringArraySumRomanString.length;\n      const romanNumStringArraySumRomanStringArray = romanNumStringArraySumRomanString.split('');\n      const romanNumStringArraySumRomanStringArrayLength = romanNumStringArraySumRomanStringArray.length;\n      const romanNumStringArraySumRomanStringArraySum = romanNumStringArraySumRomanStringArray.reduce((acc, curr) => acc + curr, 0);\n      const romanNumStringArraySumRomanStringArraySumLength = romanNumStringArraySumRomanStringArraySum.length;\n      const romanNumStringArraySumRomanStringArraySumRoman = romanNumStringArraySumRomanStringArraySum.map((romanNumStringArraySumRomanStringArraySumRoman, index) => {\n        const romanNumStringArraySumRomanStringArraySumRomanString = romanNumStringArraySumRomanStringArraySumRoman.toString();\n        const romanNumStringArraySumRomanStringArraySumRomanStringLength = romanNumStringArraySumRomanStringArraySumRomanString.length;\n        const romanNumStringArraySumRomanStringArraySumRomanStringArray = romanNumStringArraySumRomanStringArraySumRomanStringArray.split('');\n        const romanNumStringArraySumRomanStringArraySumRomanStringArrayLength = romanNumStringArraySumRomanStringArraySumRomanStringArray.length;\n        const romanNumStringArraySumRomanStringArraySumRomanStringArraySum = romanNumStringArraySumRomanStringArraySumRomanStringArraySum.reduce((acc, curr) => acc + curr, 0);\n        const romanNumStringArraySumRomanStringArraySumRomanStringArraySumLength = romanNumStringArraySumRomanStringArraySumRomanStringArraySum.length;\n        const romanNumStringArraySumRomanStringArraySumRomanStringArraySumRoman = romanNumStringArraySumRomanStringArraySumRomanStringArraySumRoman.map((romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRoman, index) => {\n          const romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanString = romanNumStringArraySumRomanStringArraySumRomanStringArraySumRoman.toString();\n          const romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringLength = romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanString.length;\n          const romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySum = romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySum.reduce((acc, curr) => acc + curr, 0);\n          const romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRoman = romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySum.reduce((acc, curr) => acc + curr, 0);\n          const romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRoman = romanNumStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRomanStringArraySumRoman", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a left correctly - angled triangle triangulum, false assumed otherwise differently. \n   A left correctly - angled slant triangle is a triangle in which one angle is left good angle slant or \n   90 degree academic degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a left correctly - angled triangle triangulum, false assumed otherwise differently. \n   A left correctly - angled slant triangle is a triangle in which one angle is left good angle slant or \n   90 degree academic degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a left correctly - angled triangle triangulum, false assumed otherwise differently. \n   A left correctly - angled slant triangle is a triangle in which one angle is left good angle slant or \n   90 degree academic degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a left correctly - angled triangle triangulum, false assumed otherwise differently. \n   A left correctly - angled slant triangle is a triangle in which one angle is left good angle slant or \n   90 degree academic degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abac = ab * ac;\n  const acab = ac * ab;\n  return abc === abac && acb === acab;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings string section. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique singular characters. If multiple strings string have maximum number of unique \n   characters quality, return the one which comes derive first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings string section. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique singular characters. If multiple strings string have maximum number of unique \n   characters quality, return the one which comes derive first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const map = new Map();\n   words.forEach((word) => {\n     const [key, value] = word.split(' ');\n     map.set(key, map.get(key) + 1 || 1);\n   });\n   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n     return map.get(key) > map.get(maxKey)? key : maxKey;\n   });\n   return map.get(maxKey);\n }; */\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return map.get(maxKey);\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n// };\n\n// const findMax = (words) = > {\n//   const map = new Map();\n//   words.forEach((word) => {\n//     const [key, value] = word.split(' ');\n//     map.set(key, map.get(key) + 1 || 1);\n//   });\n//   const maxKey = Array.from(map.keys()).reduce((maxKey, key) => {\n//     return map.get(key) > map.get(maxKey)? key : maxKey;\n//   });\n//   return maxKey;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return -1;\n  const carrots = Math.ceil(number / need);\n  const carrotsLeft = number - carrots * need;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return -1;\n  const carrots = Math.ceil(number / need);\n  const carrotsLeft = number - carrots * need;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return -1;\n  const carrots = Math.ceil(number / need);\n  const carrotsLeft = number - carrots * need;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return -1;\n  const carrots = Math.ceil(number / need);\n  const carrotsLeft = number - carrots * need;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return -1;\n  const carrots = Math.ceil(number / need);\n  const carrotsLeft = number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct discrete characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many distinct discrete characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, cur) => {\n    return acc + countChars(cur);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given establish lists to build construct the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given establish lists to build construct the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = [];\n  let index = 0;\n  let resultIndex = 0;\n  let resultOperator = '';\n  let resultOperand = '';\n  let resultOperatorIndex = 0;\n  let resultOperandIndex = 0;\n  let resultOperatorIndex2 = 0;\n  let resultOperandIndex2 = 0;\n  let resultOperatorIndex3 = 0;\n  let resultOperandIndex3 = 0;\n  let resultOperatorIndex4 = 0;\n  let resultOperandIndex4 = 0;\n  let resultOperatorIndex5 = 0;\n  let resultOperandIndex5 = 0;\n  let resultOperatorIndex6 = 0;\n  let resultOperandIndex6 = 0;\n  let resultOperatorIndex7 = 0;\n  let resultOperandIndex7 = 0;\n  let resultOperatorIndex8 = 0;\n  let resultOperandIndex8 = 0;\n  let resultOperatorIndex9 = 0;\n  let resultOperandIndex9 = 0;\n  let resultOperatorIndex10 = 0;\n  let resultOperandIndex10 = 0;\n  let resultOperatorIndex11 = 0;\n  let resultOperandIndex11 = 0;\n  let resultOperatorIndex12 = 0;\n  let resultOperandIndex12 = 0;\n  let resultOperatorIndex13 = 0;\n  let resultOperandIndex13 = 0;\n  let resultOperatorIndex14 = 0;\n  let resultOperandIndex14 = 0;\n  let resultOperatorIndex15 = 0;\n  let resultOperandIndex15 = 0;\n  let resultOperatorIndex16 = 0;\n  let resultOperandIndex16 = 0;\n  let resultOperatorIndex17 = 0;\n  let resultOperandIndex17 = 0;\n  let resultOperatorIndex18 = 0;\n  let resultOperandIndex18 = 0;\n  let resultOperatorIndex19 = 0;\n  let resultOperandIndex19 = 0;\n  let resultOperatorIndex20 = 0;\n  let resultOperandIndex20 = 0;\n  let resultOperatorIndex21 = 0;\n  let resultOperandIndex21 = 0;\n  let resultOperatorIndex22 = 0;\n  let resultOperandIndex22 = 0;\n  let resultOperatorIndex23 = 0;\n  let resultOperandIndex23 = 0;\n  let resultOperatorIndex24 = 0;\n  let resultOperandIndex24 = 0;\n  let resultOperatorIndex25 = 0;\n  let resultOperandIndex25 = 0;\n  let resultOperatorIndex26 = 0;\n  let resultOperandIndex26 = 0;\n  let resultOperatorIndex27 = 0;\n  let resultOperandIndex27 = 0;\n  let resultOperatorIndex28 = 0;\n  let resultOperandIndex28 = 0;\n  let resultOperatorIndex29 = 0;\n  let resultOperandIndex29 = 0;\n  let resultOperatorIndex30 = 0;\n  let resultOperandIndex30 = 0;\n  let resultOperatorIndex31 = 0;\n  let resultOperandIndex31 = 0;\n  let resultOperatorIndex32 = 0;\n  let resultOperandIndex32 = 0;\n  let resultOperatorIndex33 = 0;\n  let resultOperandIndex33 = 0;\n  let resultOperatorIndex34 = 0;\n  let resultOperandIndex34 = 0;\n  let resultOperatorIndex35 = 0;\n  let resultOperandIndex35 = 0;\n  let resultOperatorIndex36 = 0;\n  let resultOperandIndex36 = 0;\n  let resultOperatorIndex37 = 0;\n  let resultOperandIndex37 = 0;\n  let resultOperatorIndex38 = 0;\n  let resultOperandIndex38 = 0;\n  let resultOperatorIndex39 = 0;\n  let resultOperandIndex39 = 0;\n  let resultOperatorIndex40 = 0;\n  let resultOperandIndex40 = 0;\n  let resultOperatorIndex41 = 1;\n  let resultOperandIndex41 = 1;\n  let resultOperatorIndex42 = 1;\n  let resultOperandIndex42 = 1;\n  let resultOperatorIndex43 = 1;\n  let resultOperandIndex43 = 1;\n  let resultOperatorIndex44 = 1;\n  let resultOperandIndex44 = 1;\n  let resultOperatorIndex45 = 1;\n  let resultOperandIndex45 = 1;\n  let resultOperatorIndex46 = 1;\n  let resultOperandIndex46 = 1;\n  let resultOperatorIndex47 = 1;\n  let resultOperandIndex47 = 1;\n  let resultOperatorIndex48 = 1;\n  let resultOperandIndex48 = 1;\n  let resultOperatorIndex49 = 1;\n  let resultOperandIndex49 = 1;\n  let resultOperatorIndex50 = 1;\n  let resultOperandIndex50 = 1;\n  let resultOperatorIndex51 = 1;\n  let resultOperandIndex51 = 1;\n  let resultOperatorIndex52 = 1;\n  let resultOperandIndex52 = 1;\n  let resultOperatorIndex53 = 1;\n  let resultOperandIndex53 = 1;\n  let resultOperatorIndex54 = 1;\n  let resultOperandIndex54 = 1;\n  let resultOperatorIndex55 = 1;\n  let resultOperandIndex55 = 1;\n  let resultOperatorIndex56 = 1;\n  let resultOperandIndex56 = 1;\n  let resultOperatorIndex57 = 1;\n  let resultOperandIndex57 = 1;\n  let resultOperatorIndex58 = 1;\n  let resultOperandIndex58 = 1;\n  let resultOperatorIndex59 = 1;\n  let resultOperandIndex59 = 1;\n  let resultOperatorIndex60 = 1;\n  let resultOperandIndex60 = 1;\n  let resultOperatorIndex61 = 1;\n  let resultOperandIndex61 = 1;\n  let resultOperatorIndex62 = 1;\n  let resultOperandIndex62 = 1;\n  let resultOperatorIndex63 = 1;\n  let resultOperandIndex63 = 1;\n  let resultOperatorIndex64 = 1;\n  let resultOperandIndex64 = 1;\n  let resultOperatorIndex65 = 1;\n  let resultOperandIndex65 = 1;\n  let resultOperatorIndex66 = 1;\n  let resultOperandIndex66 = 1;\n  let resultOperatorIndex67 = 1;\n  let resultOperandIndex67 = 1;\n  let resultOperatorIndex68 = 1;\n  let resultOperandIndex68 = 1;\n  let resultOperatorIndex69 = 1;\n  let resultOperandIndex69 = 1;\n  let resultOperatorIndex70 = 1;\n  let resultOperandIndex70 = 1;\n  let resultOperatorIndex71 = 1;\n  let resultOperandIndex71 = 1;\n  let resultOperatorIndex72 = 1;\n  let resultOperandIndex72 = 1;\n  let resultOperatorIndex73 = 1;\n  let resultOperandIndex73 = 1;\n  let resultOperatorIndex74 = 1;\n  let resultOperandIndex74 = 1;\n  let resultOperatorIndex75 = 1;\n  let resultOperandIndex75 = 1;\n  let resultOperatorIndex76 = 1;\n  let resultOperandIndex76 = 1;\n  let resultOperatorIndex77 = 1;\n  let resultOperandIndex77 = 1;\n  let resultOperatorIndex78 = 1;\n  let resultOperandIndex78 = 1;\n  let resultOperatorIndex79 = 1;\n  let resultOperandIndex79 = 1;\n  let resultOperatorIndex80 = 1;\n  let resultOperandIndex80 = 1;\n  let resultOperatorIndex81 = 1;\n  let resultOperandIndex81 = 1;\n  let resultOperatorIndex82 = 1;\n  let resultOperandIndex82 = 1;\n  let resultOperatorIndex83 = 1;\n  let resultOperandIndex83 = 1;\n  let resultOperatorIndex84 = 1;\n  let resultOperandIndex84 = 1;\n  let resultOperatorIndex85 = 1;\n  let resultOperandIndex85 = 1;\n  let resultOperatorIndex86 = 1;\n  let resultOper", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else if (s[i] === \"@\") {\n      newString += s.substr(0, i) + s.substr(i + 1);\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s.substr(0, i) + s.substr(i + ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit === 0) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the odd digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateOdds(2, 8) => [2, 5, 8]\n  generateOdds(8, 2) => [2, 5, 8]\n  generateOdds(10, 14) => []\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit === 1) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generateDigits = (a, b) => {\n  const result = [];\n  const max = (b - a) + 1;\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    result.push(digit);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers integer a and b, return the digits digit between a and b,\n   in ascending order holy order.\n\n  For example:\n  generateDigits(2, 8) => [2, 4, 6, 8]\n  generateDigits(8, 2) => [2, 4, 6, 8]\n  generateDigits(10, 14) => []\n  */\nconst generate", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string bowed stringed instrument representing musical melodious notes in a special particular ASCII format. \n   Your task undertaking is to parse this string and return list of integers integer corresponding correspond to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole hale note, lasts four beats \n  ' o|' - half one-half note bill, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string bowed stringed instrument representing musical melodious notes in a special particular ASCII format. \n   Your task undertaking is to parse this string and return list of integers integer corresponding correspond to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole hale note, lasts four beats \n 'o|' - half one-half note bill, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map(music_note => music_note.match(/\\d+/g));\n  const music_array3 = music_array2.map(music_note => music_note.map(music_note => parseInt(music_note)));\n  const music_array4 = music_array3.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array5 = music_array4.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array6 = music_array5.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array7 = music_array6.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array8 = music_array7.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array9 = music_array8.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array10 = music_array9.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array11 = music_array10.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array12 = music_array11.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array13 = music_array12.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array14 = music_array13.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array15 = music_array14.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array16 = music_array15.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array17 = music_array16.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array18 = music_array17.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array19 = music_array18.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array20 = music_array19.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array21 = music_array20.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array22 = music_array21.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array23 = music_array22.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array24 = music_array23.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array25 = music_array24.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array26 = music_array25.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array27 = music_array26.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array28 = music_array27.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array29 = music_array28.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array30 = music_array29.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array31 = music_array30.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array32 = music_array31.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array33 = music_array32.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array34 = music_array33.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array35 = music_array34.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array36 = music_array35.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array37 = music_array36.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array38 = music_array37.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array39 = music_array38.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array40 = music_array39.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array41 = music_array40.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array42 = music_array41.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array43 = music_array42.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array44 = music_array43.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array45 = music_array44.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array46 = music_array45.map(music_note => music_note.map(music_note => music_note%2));\n  const music_array47 = music_array46.map(music_note => music_note.map(music_note => music_note%2));", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbersList.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    return aNum - bNum;\n  });\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a string chain of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(\" \");\n  let sortedNumbers = numbers", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3)\n  0\n  */\nconst truncateInteger = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger(3)\n  0\n  */\nconst truncateInteger2 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger2(3)\n  0\n  */\nconst truncateInteger3 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger3(3)\n  0\n  */\nconst truncateInteger4 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger4(3)\n  0\n  */\nconst truncateInteger5 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger5(3)\n  0\n  */\nconst truncateInteger6 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger6(3)\n  0\n  */\nconst truncateInteger7 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger7(3)\n  0\n  */\nconst truncateInteger8 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger8(3)\n  0\n  */\nconst truncateInteger9 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger9(3)\n  0\n  */\nconst truncateInteger10 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger10(3)\n  0\n  */\nconst truncateInteger11 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger11(3)\n  0\n  */\nconst truncateInteger12 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger12(3)\n  0\n  */\nconst truncateInteger13 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger13(3)\n  0\n  */\nconst truncateInteger14 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateInteger14(3)\n  0\n  */\nconst truncateInteger15 = (number) => {\n  const fraction = number % 1;\n  const decimal = number - fraction;\n  return decimal;\n};\n\n/* Given a positive integer number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order orderliness (smaller number issue, larger number phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order orderliness (smaller number issue, larger number phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  // sort numbers in ascending order\n  numbers.sort((a, b) => a - b);\n  // find two closest numbers to each other\n  let closestNumbers = [];\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let currentDistance = Math.abs(numbers[i] - numbers[i + 1]);\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closestNumbers = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return closestNumbers;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode2 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode3 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode4 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode5 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode6 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode7 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode8 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode9 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode10 = (phoneNumber) => {\n  let areaCode = '';\n  let digits = phoneNumber.split('');\n  let digit;\n  for (let i = 0; i < digits.length; i++) {\n    digit = digits[i];\n    if (digit.length!== 1) {\n      digit = `0${digit}`;\n    }\n    areaCode += digit;\n  }\n  return areaCode;\n};\n\n/**\n * Given a phone number, return its area code.\n *\n * Example: For input '15551234567', the output should be '216'.\n *\n * This is an O(n) solution, where 'n' is the length of the phone number.\n */\nconst getAreaCode11 = (phoneNumber) => {\n  let areaCode = '';", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scaledNumbers = numbers.map((number) => {\n    const scaledNumber = (number - min) / range;\n    return scaledNumber;\n  });\n  return scaledNumbers;\n};\n\n/**\n * Given a number, return a number between 1 and 0 that represents how close it is to 1.\n * For example, a number close to 1 would be 1, a number close to 0 would be 0.\n * A number close to 0.5 would be 0.5, and so on.\n * A number close to 0 would return 0, and a number close to 1 would return 1.\n * A number close to -1 would return -1, and so on.\n * A number close to -2 would return -2, and so on.\n * A number close to -3 would return -3, and so on.\n * A number close to -4 would return -4, and so on.\n * A number close to -5 would return -5, and so on.\n * A number close to -6 would return -6, and so on.\n * A number close to -7 would return -7, and so on.\n * A number close to -8 would return -8, and so on.\n * A number close to -9 would return -9, etc.\n * A number close to -10 would return -10, etc.\n * A number close to -11 would return -11, etc.\n * A number close to -12 would return -12, etc.\n * A number close to -13 would return -13, etc.\n * A number close to -14 would return -14, etc.\n * A number close to -15 would return -15, etc.\n * A number close to -16 would return -16, etc.\n * A number close to -17 would return -17, etc.\n * A number close to -18 would return -18, etc.\n * A number close to -19 would return -19, etc.\n * A number close to -20 would return -20, etc.\n * A number close to -21 would return -21, etc.\n * A number close to -22 would return -22, etc.\n * A number close to -23 would return -23, etc.\n * A number close to -24 would return -24, etc.\n * A number close to -25 would return -25, etc.\n * A number close to -26 would return -26, etc.\n * A number close to -27 would return -27, etc.\n * A number close to -28 would return -28, etc.\n * A number close to -29 would return -29, etc.\n * A number close to -30 would return -30, etc.\n * A number close to -31 would return -31, etc.\n * A number close to -32 would return -32, etc.\n * A number close to -33 would return -33, etc.\n * A number close to -34 would return -34, etc.\n * A number close to -35 would return -35, etc.\n * A number close to -36 would return -36, etc.\n * A number close to -37 would return -37, etc.\n * A number close to -38 would return -38, etc.\n * A number close to -39 would return -39, etc.\n * A number close to -40 would return -40, etc.\n * A number close to -41 would return -41, etc.\n * A number close to -42 would return -42, etc.\n * A number close to -43 would return -43, etc.\n * A number close to -44 would return -44, etc.\n * A number close to -45 would return -45, etc.\n * A number close to -46 would return -46, etc.\n * A number close to -47 would return -47, etc.\n * A number close to -48 would return -48, etc.\n * A number close to -49 would return -49, etc.\n * A number close to -50 would return -50, etc.\n * A number close to -51 would return -51, etc.\n * A number close to -52 would return -52, etc.\n * A number close to -53 would return -53, etc.\n * A number close to -54 would return -54, etc.\n * A number close to -55 would return -56, etc.\n * A number close to -56 would return -56, etc.\n * A number close to -57 would return -57, etc.\n * A number close to -58 would return -58, etc.\n * A number close to -59 would return -59, etc.\n * A number close to -60 would return -60, etc.\n * A number close to -61 would return -61, etc.\n * A number close to -62 would return -62, etc.\n * A number close to -63 would return -63, etc.\n * A number close to -64 would return -64, etc.\n * A number close to -65 would return -65, etc.\n * A number close to -66 would return -66, etc.\n * A number close to -67 would return -67, etc.\n * A number close to -68 would return -68, etc.\n * A number close to -69 would return -69, etc.\n * A number close to -70 would return -70, etc.\n * A number close to -71 would return -71, etc.\n * A number close to -72 would return -72, etc.\n * A number close to -73 would return -73, etc.\n * A number close to -74 would return -74, etc.\n * A number close to -75 would return -75, etc.\n * A number close to -76 would return -76, etc.\n * A number close to -77 would return -77, etc.\n * A number close to -78 would return -78, etc.\n * A number close to -79 would return -79, etc.\n * A number close to -80 would return -80, etc.\n * A number close to -81 would return -81, etc.\n * A number close to -82 would return -82, etc.\n * A number close to -83 would return -83, etc.\n * A number close to -84 would return -84, etc.\n * A number close to -85 would return -85, etc.\n * A number close to -86 would return -86, etc.\n * A number close to -87 would return -87, etc.\n * A number close to -88 would return -88, etc.\n * A number close to -89 would return -89, etc.\n * A number close to -90 would return -90, etc.\n * A number close to -91 would return -91, etc.\n * A number close to -92 would return -92, etc.\n * A number close to -93 would return -93, etc.\n * A number close to -94 would return -94, etc.\n * A number close to -95 would return -95, etc.\n * A number close to -96 would return -96, etc.\n * A number close to -97 would return -97, etc.\n * A number close to -98 would return -98, etc.\n * A number close to -99 would return -99, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty set\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  []\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty set\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  []\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty set\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  []\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty set\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  []\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty set\n  >>> filterEmptySets(['a', 3.14, 5])\n  []\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  []\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value =>!Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') length++\n  }\n  return length\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abd')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  const index = string.length - suffix.length\n  return index >= 0 && string.indexOf(suffix, index) === index\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abd')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  const index = string.length - prefix.length\n  return index >= 0 && string.indexOf(prefix, index) === index\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abd')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Return true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 3)\n  false\n  */\nconst containsAtIndex = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorNumber = 1;\n  let maxDivisorNumberNumberal = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (divisor === i) {\n      maxDivisorNumber = divisor;\n      maxDivisorNumberNumberal = i;\n    }\n  }\n  return maxDivisor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let divisor = 1;\n  while (n >= divisor) {\n    factors.push(divisor);\n    divisor *= n;\n  }\n  return factors;\n};\n\n/* Return list of prime factors ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.charCodeAt(0) === 65? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Converts a string to a slug using the provided separator\n * @param {string} string - The string to convert\n * @param {string} separator - The separator to use when separating words\n * @returns {string} The converted string\n */\nconst slugify = (string, separator = '-') => {\n  return string\n   .toLowerCase()\n   .trim()\n   .split(separator)\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a camel case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst camelCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a kebab case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a snake case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a kebab case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a snake case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a kebab case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a snake case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a kebab case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a snake case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a kebab case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a snake case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a kebab case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a snake case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst pascalCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a kebab case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst kebabCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a snake case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */\nconst snakeCase = (string) => {\n  return string\n   .split('-')\n   .map((word) => word.charAt(0).toLowerCase() + word.slice(1))\n   .join('');\n};\n\n/**\n * Converts a string to a pascal case string\n * @param {string} string - The string to convert\n * @returns {string} The converted string\n */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Split a string into an array of strings\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(\" \");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('   hello   ')\n  'hello'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end endle with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) === false) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (string", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts start with \n   zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts start with \n   zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account that starts \n   with zero balance. Your task is to detect if at any point item the balance of account fallls below zero", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter(n => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter(n => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter(n => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter(n => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter(n => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter(n => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter(n => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter(n => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisibleBy23([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy23 = (l) => {\n  return l.filter(n => n % 23 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter(n => n % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 27.\n  >>> getDivisibleBy27([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy27 = (l) => {\n  return l.filter(n => n % 27 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter(n => n % 29 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter(n => n % 31 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 33.\n  >>> getDivisibleBy33([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy33([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy33 = (l) => {\n  return l.filter(n => n % 33 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy35 = (l) => {\n  return l.filter(n => n % 35 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 37.\n  >>> getDivisibleBy37([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisible", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return true\n  if (n % 5 === 0) return false\n  if (n % 7 === 0) return true\n  if (n % 11!== 0) return false\n  if (n % 13!== 0) return true\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return true\n  if (n % 23!== 0) return false\n  if (n % 29 === 0) return true\n  if (n % 31!== 0) return false\n  if (n % 37 === 0) return true\n  if (n % 41!== 0) return false\n  if (n % 47!== 0) return true\n  if (n % 53!== 0) return false\n  if (n % 59!== 0) return true\n  if (n % 61!== 0) return false\n  if (n % 67!== 0) return true\n  if (n % 73!== 0) return false\n  if (n % 79!== 0) return true\n  if (n % 83!== 0) return false\n  if (n % 89!== 0) return true\n  if (n % 97!== 0) return false\n  if (n % 101!== 0) return false\n  if (n % 103!== 0) return true\n  if (n % 105!== 0) return false\n  if (n % 107!== 0) return true\n  if (n % 109!== 0) return false\n  if (n % 113!== 0) return true\n  if (n % 115!== 0) return false\n  if (n % 117!== 0) return true\n  if (n % 121!== 0) return false\n  if (n % 127!== 0) return true\n  if (n % 131!== 0) return false\n  if (n % 137!== 0) return true\n  if (n % 143!== 0) return false\n  if (n % 147!== 0) return true\n  if (n % 151!== 0) return false\n  if (n % 157!== 0) return true\n  if (n % 163!== 0) return false\n  if (n % 167!== 0) return true\n  if (n % 173!== 0) return false\n  if (n % 179!== 0) return true\n  if (n % 181!== 0) return false\n  if (n % 187!== 0) return true\n  if (n % 191!== 0) return false\n  if (n % 193!== 0) return true\n  if (n % 195!== 0) return false\n  if (n % 197!== 0) return true\n  if (n % 199!== 0) return false\n  if (n % 201!== 0) return false\n  if (n % 203!== 0) return true\n  if (n % 205!== 0) return false\n  if (n % 207!== 0) return true\n  if (n % 209!== 0) return false\n  if (n % 211!== 0) return true\n  if (n % 213!== 0) return false\n  if (n % 215!== 0) return true\n  if (n % 217!== 0) return false\n  if (n % 219!== 0) return true\n  if (n % 223!== 0) return false\n  if (n % 227!== 0) return true\n  if (n % 229!== 0) return false\n  if (n % 233!== 0) return true\n  if (n % 239!== 0) return false\n  if (n % 241!== 0) return true\n  if (n % 247!== 0) return false\n  if (n % 251!== 0) return true\n  if (n % 257!== 0) return false\n  if (n % 263!== 0) return true\n  if (n % 269!== 0) return false\n  if (n % 271!== 0) return true\n  if (n % 277!== 0) return true\n  if (n % 283!== 0) return false\n  if (n % 289!== 0) return true\n  if (n % 291!== 0) return false\n  if (n % 297!== 0) return true\n  if (n % 303!== 0) return false\n  if (n % 309!== 0) return true\n  if (n % 311!== 0) return false\n  if (n % 313!== 0) return true\n  if (n % 315!== 0) return false\n  if (n % 317!== 0) return true\n  if (n % 323!== 0) return false\n  if (n % 329!== 0) return true\n  if (n % 331!== 0) return false\n  if (n % 337!== 0) return true\n  if (n % 343!== 0) return false\n  if (n % 349!== 0) return true\n  if (n % 351!== 0) return false\n  if (n % 357!== 0) return true\n  if (n % 359!== 0) return false\n  if (n % 361!== 0) return true\n  if (n % 363!== 0) return false\n  if (n % 365!== 0) return true\n  if (n % 369!== 0) return false\n  if (n % 371!== 0) return true\n  if (n % 377!== 0) return true\n  if (n % 383!== 0) return false\n  if (n % 389!== 0) return true\n  if (n % 391!== 0) return false\n  if (n % 397!== 0) return true\n  if (n % 403!== 0) return false\n  if (n % 409!== 0) return true\n  if (n % 411!== 0) return false\n  if (n % 419!== 0) return true\n  if (n % 421!== 0) return false\n  if (n % 427!== 0) return true\n  if (n % 433!== 0) return true\n  if (n % 439!== 0) return true\n  if (n % 443!== 0) return false\n  if (n % 449!== 0) return true\n  if (n % 451!== 0) return false\n  if (n % 457!== 0) return true\n  if (n % 463!== 0) return false\n  if (n % 469!== 0) return true\n  if (n % 471!== 0) return false\n  if (n % 477!== 0) return true\n  if (n % 483!== 0) return false\n  if (n % 487!== 0) return true\n  if (n % 491!== 0) return false\n  if (n % 497!== 0) return true\n  if (n % 503!== 0) return false\n  if (n % 509!== 0) return true\n  if (n % 511!== 0) return false\n  if (n % 521!== 0) return true\n  if (n % 527!== 0) return true\n  if (n % 533!== 0) return true\n  if (n % 539!== 0) return true\n  if (n % 543!== 0) return false\n  if (n % 549!== 0) return true\n  if (n % 551!== 0) return false\n  if (n % 557!== 0) return true\n  if (n % 563!== 0) return false\n  if (n % 569!== 0) return true\n  if (n % 571!== 0) return false\n  if (n % 577!== 0) return true\n  if (n % 583!== 0) return false\n  if (n % 589!== 0) return true\n  if (n % 591!== 0) return false\n  if (n % 597!== 0) return true\n  if (n % 603!== 0) return false\n  if (n % 609!== 0) return true\n  if (n % 613!== 0) return false\n  if (n % 617!== 0) return true\n  if (n % 619!== 0) return false\n  if (n % 621!== 0) return true\n  if (n % 627!== 0) return true\n  if (n % 631!== 0) return false\n  if (n % 641!== 0) return true\n  if (n % 647!== 0) return true\n  if (n % 653!== 0) return false\n  if (n % 659!== 0) return true\n  if (n % 661!== 0) return false\n  if (n % 667!== 0) return true\n  if (n % 673!== 0) return false\n  if (n % 679!== 0) return true\n  if (n % 681!== 0) return false\n  if (n % 687", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item, index) => {\n    if (item === 0) found = true;\n    if (found) x = index;\n  });\n  return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item, index) => {\n    if (item === 0) found = true;\n    if (found) x = index;\n  });\n  return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item, index) => {\n    if (item === 0) found = true;\n    if (found) x = index;\n  });\n  return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item, index) => {\n    if (item === 0) found = true;\n    if (found) x = index;\n  });\n  return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item, index) => {\n    if (item === 0) found = true;\n    if (found) x = index;\n  });\n  return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMore = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty or less, while its values at the indicies that are divisible by twenty or less are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTwentyOrLess([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrLess([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrLess = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 < 20) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by thirty or more, while its values at the indicies that are divisible by thirty or more are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThirtyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirtyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirtyOrMore = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 >= 30) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by thirty or less, while its values at the indicies that are divisible by thirty or less are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThirtyOrLess([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirtyOrLess([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirtyOrLess = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 < 30) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortFour([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFour([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFour = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 4 === 0) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  return Math.min(...l);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst productElements = (l) => {\n  return l.reduce((acc, val) => acc * val, 1);\n};\n\n/*Return sum of all elements in list that are greater than zero.\n  >>> sumPositiveElements([1, 2, 3])\n  4\n  >>> sumPositiveElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumPositiveElements = (l) => {\n  return l.filter(x => x > 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are less than zero.\n  >>> sumNegativeElements([1, 2, 3])\n  4\n  >>> sumNegativeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumNegativeElements = (l) => {\n  return l.filter(x => x < 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are equal to zero.\n  >>> sumZeroElements([1, 2, 3])\n  4\n  >>> sumZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumZeroElements = (l) => {\n  return l.filter(x => x === 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are greater than or equal to zero.\n  >>> sumPositiveOrZeroElements([1, 2, 3])\n  4\n  >>> sumPositiveOrZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumPositiveOrZeroElements = (l) => {\n  return l.filter(x => x >= 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are less than or equal to zero.\n  >>> sumNegativeOrZeroElements([1, 2, 3])\n  4\n  >>> sumNegativeOrZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumNegativeOrZeroElements = (l) => {\n  return l.filter(x => x <= 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are greater than zero.\n  >>> sumPositiveElements([1, 2, 3])\n  4\n  >>> sumPositiveElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumPositiveElements = (l) => {\n  return l.filter(x => x > 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are less than zero.\n  >>> sumNegativeElements([1, 2, 3])\n  4\n  >>> sumNegativeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumNegativeElements = (l) => {\n  return l.filter(x => x < 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are equal to zero.\n  >>> sumZeroElements([1, 2, 3])\n  4\n  >>> sumZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumZeroElements = (l) => {\n  return l.filter(x => x === 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are greater than or equal to zero.\n  >>> sumPositiveOrZeroElements([1, 2, 3])\n  4\n  >>> sumPositiveOrZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumPositiveOrZeroElements = (l) => {\n  return l.filter(x => x >= 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are less than or equal to zero.\n  >>> sumNegativeOrZeroElements([1, 2, 3])\n  4\n  >>> sumNegativeOrZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumNegativeOrZeroElements = (l) => {\n  return l.filter(x => x <= 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are greater than zero.\n  >>> sumPositiveElements([1, 2, 3])\n  4\n  >>> sumPositiveElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumPositiveElements = (l) => {\n  return l.filter(x => x > 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are less than zero.\n  >>> sumNegativeElements([1, 2, 3])\n  4\n  >>> sumNegativeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumNegativeElements = (l) => {\n  return l.filter(x => x < 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are equal to zero.\n  >>> sumZeroElements([1, 2, 3])\n  4\n  >>> sumZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumZeroElements = (l) => {\n  return l.filter(x => x === 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are greater than or equal to zero.\n  >>> sumPositiveOrZeroElements([1, 2, 3])\n  4\n  >>> sumPositiveOrZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumPositiveOrZeroElements = (l) => {\n  return l.filter(x => x >= 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are less than or equal to zero.\n  >>> sumNegativeOrZeroElements([1, 2, 3])\n  4\n  >>> sumNegativeOrZeroElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumNegativeOrZeroElements = (l) => {\n  return l.filter(x => x <= 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are greater than zero.\n  >>> sumPositiveElements([1, 2, 3])\n  4\n  >>> sumPositiveElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumPositiveElements = (l) => {\n  return l.filter(x => x > 0).reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in list that are less than zero.\n  >>> sumNegativeElements([1, 2, 3])\n  4\n  >>> sumNegativeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      even.sort((a, b) => a - b)\n    }\n  }\n  return even\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      odd.sort((a, b) => a - b)\n    }\n  }\n  return odd\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the even indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sortEven(sortOdd(even))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let odd = []\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return sortOdd(sortEven(even))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sortEvenOdd(sortOdd(even))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let odd = []\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return sortOddEven(sortEven(even))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sortEvenOdd(sortOdd(odd))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortOddEvenEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenEvenOdd = (l) => {\n  let odd = []\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sortOddEven(sortEven(even))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sortEvenOdd(sortOdd(odd))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sortEvenOdd(sortOdd(even))\n}\n\n/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let primeNum = 0;\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    fibNum = fibNum + i;\n    if (fibNum > n) {\n      fibNum = fibNum - n;\n      primeNum = i;\n    }\n    if (fibNum % i === 0) {\n      isPrime = false;\n    }\n  }\n  return primeNum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime sum.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n    mean = sum / numbers.length;\n  }\n  return mean;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let median = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - median);\n    median = sum / numbers.length;\n  }\n  return median;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      mode = numbers[i];\n    }\n  }\n  return mode;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let median = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - median);\n    median = sum / numbers.length;\n  }\n  return median;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      mode = numbers[i];\n    }\n  }\n  return mode;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n    mean = sum / numbers.length;\n  }\n  return mean;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let median = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - median);\n    median = sum / numbers.length;\n  }\n  return median;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      mode = numbers[i];\n    }\n  }\n  return mode;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let median = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - median);\n    median = sum / numbers.length;\n  }\n  return median;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      mode = numbers[i];\n    }\n  }\n  return mode;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const zeros = l.filter((x) => x === 0);\n  if (zeros.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to one, and false delusive otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const ones = l.filter((x) => x === 1);\n  if (ones.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to two, and false delusive otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const twos = l.filter((x) => x === 2);\n  if (twos.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to three, and false delusive otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const threes = l.filter((x) => x === 3);\n  if (threes.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to four, and false delusive otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const fours = l.filter((x) => x === 4);\n  if (fours.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to five, and false delusive otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const fives = l.filter((x) => x === 5);\n  if (fives.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to six, and false delusive otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const sixes = l.filter((x) => x === 6);\n  if (sixes.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to seven, and false delusive otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  const sevens = l.filter((x) => x === 7);\n  if (sevens.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to eight, and false delusive otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  const eights = l.filter((x) => x === 8);\n  if (eights.length === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to nine, and false delusive otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumTo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight true infinitely long farseeing line. \n   n cars car are driving left leave to right;   simultaneously, a different unlike set hardening of n cars cable car \n   are driving force right good to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move motivate in the same speed.   Two cars are said to collide \n   when a car that's moving be active left leave to right proper hits strike a car that's moving travel right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight true infinitely long farseeing line. \n   n cars car are driving left leave to right;   simultaneously, a different unlike set hardening of n cars cable car \n   are driving force right good to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move motivate in the same speed.   Two cars are said to collide \n   when a car that's moving be active left leave to right proper hits strike a car that's moving travel right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (n) = > {\n   let collision = 0\n   for (let i = 1; i <= n; i++) {\n     for (let j = i + 1; j <= n; j++) {\n       if (carsRace[i][j] === 1) {\n         collision++\n       }\n     }\n   }\n   return collision\n }\n \n const carRaceCollision = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList2([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList3 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList3([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList4 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList4([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList5 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList5([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList6 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList6([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList7 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList7([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList8 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList8([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList9 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList9([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList10 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList10([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList11 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList11([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList12 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList12([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList13 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList13([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList14 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList14([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList15 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList15([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList16 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList16([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList17 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList17([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList18 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList18([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList19 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList19([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList20 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList20([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList21 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList21([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList22 = (l, i) => {\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList22([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrList23 = (l, i) => {\n  const ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToOne takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to one, and false delusive otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 1) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToTwo takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to two, and false delusive otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 2) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToThree takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to three, and false delusive otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToFour takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to four, and false delusive otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToFive takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to five, and false delusive otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 5) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToSix takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to six, and false delusive otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 6) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToSeven takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to seven, and false delusive otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 7) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToEight takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to eight, and false delusive otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSum", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number numeral x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number numeral x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num;\n  if (base < 0 || base > 10) {\n    throw 'Invalid base';\n  }\n  if (x === 0) return '0';\n  num = x.toString();\n  while (num.length < base) {\n    num = '0' + num;\n  }\n  return num;\n};\n\n/*\n  >>> getBase('22')\n  2\n  >>> getBase('1000')\n  8\n  >>> getBase('111')\n  7\n  */\nconst getBase = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num) => {\n  let base;\n  if (num.length === 1) {\n    base = num.charCodeAt(0);\n  } else {\n    base = parseInt(num.substring(0, num.length - 1), 10);\n  }\n  return base;\n};\n\n/*\n  >>> getNumeral('22')\n  22\n  >>> getNumeral('1000')\n  1000\n  >>> getNumeral('111')\n  111\n  */\nconst getNumeral = (num", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 4)\n  12.5\n  */\nconst triangleArea2 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 5)\n  17.5\n  */\nconst triangleArea3 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 6)\n  22.5\n  */\nconst triangleArea4 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 7)\n  27.5\n  */\nconst triangleArea5 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 8)\n  30.5\n  */\nconst triangleArea6 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 9)\n  35.5\n  */\nconst triangleArea7 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 10)\n  42.5\n  */\nconst triangleArea8 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 11)\n  47.5\n  */\nconst triangleArea9 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 12)\n  52.5\n  */\nconst triangleArea10 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 13)\n  57.5\n  */\nconst triangleArea11 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 14)\n  62.5\n  */\nconst triangleArea12 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 15)\n  67.5\n  */\nconst triangleArea13 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 16)\n  72.5\n  */\nconst triangleArea14 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 17)\n  77.5\n  */\nconst triangleArea15 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 18)\n  82.5\n  */\nconst triangleArea16 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 19)\n  87.5\n  */\nconst triangleArea17 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 20)\n  92.5\n  */\nconst triangleArea18 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 21)\n  97.5\n  */\nconst triangleArea19 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 22)\n  102.5\n  */\nconst triangleArea20 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 23)\n  107.5\n  */\nconst triangleArea21 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 24)\n  112.5\n  */\nconst triangleArea22 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 25)\n  117.5\n  */\nconst triangleArea23 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 26)\n  122.5\n  */\nconst triangleArea24 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 27)\n  127.5\n  */\nconst triangleArea25 = (a, h) => {\n  const b = 2 * h;\n  return a * b * Math.sqrt(a * a + b * b);\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return 0\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*The Fibonacci number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibonacci(0) - > 0 \n   fibonacci(1) - > 1 \n   fibonacci(2) - > 1 \n   fibonacci(3) - > 2 \n   fibonacci(4) - > 3 \n   fibonacci(n) - > fibonacci(n-1) + fibonacci(n-2).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibonacci number issue sequence succession.   Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return 0\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibonacci(0) - > 0 \n   fibonacci(1) - > 1 \n   fibonacci(2) - > 1 \n   fibonacci(3) - > 2 \n   fibonacci(4) - > 3 \n   fibonacci(n) - > fibonacci(n-1) + fibonacci(n-2).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibonacci number issue sequence succession.   Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return 0\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibonacci(0) - > 0 \n   fibonacci(1) - > 1 \n   fibonacci(2) - > 1 \n   fibonacci(3) - > 2 \n   fibonacci(4) - > 3 \n   fibonacci(n) - > fibonacci(n-1) + fibonacci(n-2).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibonacci number issue sequence succession.   Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return 0\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibonacci(0) - > 0 \n   fibonacci(1) - > 1 \n   fibonacci(2) - > 1 \n   fibonacci(3) - > 2 \n   fibonacci(4) - > 3 \n   fibonacci(n) - > fibonacci(n-1) + fibonacci(n-2).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibonacci number issue sequence succession.   Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return 0\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibonacci(0) - > 0 \n   fibonacci(1) - > 1 \n   fibonacci(2) - > 1 \n   fibonacci(3) - > 2 \n   fibonacci(4) - > 3 \n   fibonacci(n) - > fibonacci(n-1) + fibonacci(n-2).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibonacci number issue sequence succession.   Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return 0\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibonacci(0) - > 0 \n   fibonacci(1) - > 1 \n   fibonacci(2) - > 1 \n   fibonacci(3) - > 2 \n   fibonacci(4) - > 3 \n   fibonacci(n) - > fibonacci(n-1) + fibonacci(n-2).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibonacci number issue sequence succession.   Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return 0\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibonacci(0) - > 0 \n   fibonacci(1) - > 1 \n   fibonacci(2) - > 1 \n   fibonacci(3) - > 2 \n   fibonacci(4) - > 3 \n   fibonacci(n) - > fibonacci(n-1) + fibonacci(n-2).", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  let modeCount = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxCount) {\n      maxCount = l[i]\n    }\n    if (l[i] === maxCount) {\n      modeCount++\n    }\n  }\n  return maxCount\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = p % n;\n  return q < 0? q + n : q;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 15)\n  8\n  >>> modpow(2, 31, 5)\n  8\n  >>> modpow(2, 31, 15)\n  8\n  >>> modpow(2, 32, 5)\n  16\n  >>> modpow(2, 32, 15)\n  16\n  >>> modpow(2, 33, 5)\n  16\n  >>> modpow(2, 33, 15)\n  16\n  >>> modpow(2, 34, 5)\n  32\n  >>> modpow(2, 34, 15)\n  32\n  >>> modpow(2, 35, 5)\n  32\n  >>> modpow(2, 35, 15)\n  32\n  >>> modpow(2, 36, 5)\n  64\n  >>> modpow(2, 36, 15)\n  64\n  >>> modpow(2, 37, 5)\n  64\n  >>> modpow(2, 37, 15)\n  64\n  >>> modpow(2, 38, 5)\n  128\n  >>> modpow(2, 38, 15)\n  128\n  >>> modpow(2, 39, 5)\n  128\n  >>> modpow(2, 39, 15)\n  128\n  >>> modpow(2, 40, 5)\n  256\n  >>> modpow(2, 40, 15)\n  256\n  >>> modpow(2, 41, 5)\n  256\n  >>> modpow(2, 41, 15)\n  256\n  >>> modpow(2, 42, 5)\n  512\n  >>> modpow(2, 42, 15)\n  512\n  >>> modpow(2, 43, 5)\n  512\n  >>> modpow(2, 43, 15)\n  512\n  >>> modpow(2, 44, 5)\n  1024\n  >>> modpow(2, 44, 15)\n  1024\n  >>> modpow(2, 45, 5)\n  1024\n  >>> modpow(2, 45, 15)\n  1024\n  >>> modpow(2, 46, 5)\n  2048\n  >>> modpow(2, 46, 15)\n  2048\n  >>> modpow(2, 47, 5)\n  2048\n  >>> modpow(2, 47, 15)\n  2048\n  >>> modpow(2, 48, 5)\n  4096\n  >>> modpow(2, 48, 15)\n  4096\n  >>> modpow(2, 49, 5)\n  4096\n  >>> modpow(2, 49, 15)\n  4096\n  >>> modpow(2, 50, 5)\n  8192\n  >>> modpow(2, 50, 15)\n  8192\n  >>> modpow(2, 51, 5)\n  8192\n  >>> modpow(2, 51, 15)\n  8192\n  >>> modpow(2, 52, 5)\n  16384\n  >>> modpow(2, 52, 15)\n  16384\n  >>> modpow(2, 53, 5)\n  16384\n  >>> modpow(2, 53, 15)\n  16384\n  >>> modpow(2, 54, 5)\n  32768\n  >>> modpow(2, 54, 15)\n  32768\n  >>> modpow(2, 55, 5)\n  32768\n  >>> modpow(2, 55, 15)\n  32768\n  >>> modpow(2, 56, 5)\n  65536\n  >>> modpow(2, 56, 15)\n  65536\n  >>> modpow(2, 57, 5)\n  65536\n  >>> modpow(2, 57, 15)\n  65536\n  >>> modpow(2, 58, 5)\n  131072\n  >>> modpow(2, 58, 15)\n  131072\n  >>> modpow(2, 59, 5)\n  131072\n  >>> modpow(2, 59, 15)\n  131072\n  >>> modpow(2, 60, 5)\n  262144\n  >>> modpow(2, 60, 15)\n  262144\n  >>> modpow(2, 61, 5)\n  262144\n  >>> modpow(2, 61, 15)\n  262144\n  >>> modpow(2, 62, 5)\n  524288\n  >>> modpow(2, 62, 15)\n  524288\n  >>> modpow(2, 63, 5)\n  524288\n  >>> modpow(2, 63, 15)\n  524288\n  >>> modpow(2, 64, 5)\n  1048576\n  >>> modpow(2, 64, 15)\n  1048576\n  >>> modpow(2, 65, 5)\n  1048576\n  >>> modpow(2, 65, 15)\n  1048576\n  >>> modpow(2, 66, 5)\n  2097152\n  >>> modpow(2, 66, 15)\n  2097152\n  >>> modpow(2, 67, 5)\n  2097152\n  >>> modpow(2, 67, 15)\n  2097152\n  >>> modpow(2, 68, 5)\n  4194304\n  >>> modpow(2, 68, 15)\n  4194304\n  >>> modpow(2, 69, 5)\n  4194304\n  >>> modpow(2, 69, 15)\n  4194304\n  >>> modpow(2, 70, 5)\n  8388608\n  >>> modpow(2, 70, 15)\n  8388608\n  >>> modpow(2, 71, 5)\n  8388608\n  >>> modpow(2, 71, 15)\n  8388608\n  >>> modpow(2, 72, 5)\n  16777216\n  >>> modpow(2, 72, 15)\n  16777216\n  >>> modpow(2, 73, 5)\n  16777216\n  >>> modpow(2, 73, 15)\n  16777216\n  >>> modpow(2, 74, 5)\n  33554432\n  >>> modpow(2, 74, 15)\n  33554432\n  >>> modpow(2, 75, 5)\n  33554432\n  >>> modpow(2, 75, 15)\n  33554432\n  >>> modpow(2, 76, 5)\n  67108864\n  >>> modpow(2, 76, 15)\n  67108864\n  >>> modpow(2, 77, 5)\n  67108864\n  >>> modpow(2, 77, 15)\n  67108864\n  >>> modpow(2, 78, 5)\n  134217728\n  >>> modpow(2, 78, 15)\n  134217728\n  >>> modpow(2, 79, 5)\n  134217728\n  >>> modpow(2, 79, 15)\n  134217728\n  >>> modpow(2, 80, 5)\n  268435456\n  >>> modpow(2, 80, 15)\n  268435456\n  >>> modpow(2, 81, 5)\n  268435456\n  >>> modpow(2, 81, 15)\n  268435456\n  >>> modpow(2, 82, 5)\n  536870912\n  >>> modpow(2, 82, 15)\n  536870912\n  >>> modpow(2, 83, 5)\n  536870912\n  >>> modpow(2, 83, 15)\n  536870912\n  >>> modpow(2, 84, 5)\n  1073741824\n  >>> modpow(2, 84, 15)\n  1073741824\n  >>> modpow(2, 85, 5)\n  1073741824\n  >>> modpow(2, 85, 15)\n  1073741824\n  >>> modpow(2, 86, 5)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements chemical element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements chemical element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (i!== 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/**\n * Intersperse a number 'delimeter' between every two consecutive elements chemical element of input list `numbers'\n * and return the result as a list.\n * \n * Examples:\n * \n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * >>> intersperse([1, 2, 3], 4)\n * [1, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string bowed stringed instrument by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string bowed stringed instrument by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n / * \n   takes fill ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbcd'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'abcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.?]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold doorsill t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold2 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold3([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold4([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold4 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold5([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold6([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold6([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold6([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold6 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold7([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold8([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold8([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold8([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold8 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold9([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold9([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold9([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold9 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold10([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold10([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold10([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold10 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold11([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold11([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold11([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold11 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold12([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold12([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold12([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold12 = (l, t, s) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > s) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t.\n  >>> betweenThreshold13([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold13([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold13([1, 20, 4, 10], 5, 10)\n  false\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  -3\n  >>> sqrt(3)\n  3\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the reciprocal of number x\n  >>> reciprocal(-3)\n  -3\n  >>> reciprocal(3)\n  3\n  */\nconst reciprocal = x => {\n  return 1 / x;\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-3)\n  -Infinity\n  >>> log(3)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the natural logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x in base 10\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x in base 10\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x in base 10\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x in base 10\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x in base 10\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x in base 10\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x in base 10\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of number x in base 10\n  >>> log10(-3)\n  -Infinity\n  >>> log10", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  89\n  >>> fib(4)\n  67\n  >>> fib(3)\n  33\n  >>> fib(2)\n  11\n  >>> fib(1)\n  1\n  >>> fib(3)\n  33\n  >>> fib(4)\n  67\n  >>> fib(5)\n  89\n  >>> fib(6)\n  11\n  >>> fib(7)\n  13\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  183682\n  >>> fib(28)\n  352457\n  >>> fib(29)\n  570288\n  >>> fib(30)\n  92274\n  >>> fib(31)\n  1493035\n  >>> fib(32)\n  2415781\n  >>> fib(33)\n  3908816\n  >>> fib(34)\n  63245986\n  >>> fib(35)\n  1075376127\n  >>> fib(36)\n  1776387315\n  >>> fib(37)\n  2865753170\n  >>> fib(38)\n  4181159517\n  >>> fib(39)\n  5702887446\n  >>> fib(40)\n  9227466643\n  >>> fib(41)\n  14930356429\n  >>> fib(42)\n  24157816459\n  >>> fib(43)\n  39088162274\n  >>> fib(44)\n  63245986328\n  >>> fib(45)\n  107537612771\n  >>> fib(46)\n  17763873165\n  >>> fib(47)\n  28657532709\n  >>> fib(48)\n  41811584047\n  >>> fib(49)\n  57028874035\n  >>> fib(50)\n  92274666431\n  >>> fib(51)\n  149303564282\n  >>> fib(52)\n  241578164587\n  >>> fib(53)\n  390881622749\n  >>> fib(54)\n  632459863277\n  >>> fib(55)\n  107537612773\n  >>> fib(56)\n  177638731647\n  >>> fib(57)\n  286575327080\n  >>> fib(58)\n  418115840476\n  >>> fib(59)\n  570288740346\n  >>> fib(60)\n  922746664305\n  >>> fib(61)\n  1493035642817\n  >>> fib(62)\n  241578164586\n  >>> fib(63)\n  390881622747\n  >>> fib(64)\n  632459863276\n  >>> fib(65)\n  1075376127727\n  >>> fib(66)\n  177638731646\n  >>> fib(67)\n  286575327078\n  >>> fib(68)\n  418115840475\n  >>> fib(69)\n  570288740345\n  >>> fib(70)\n  922746664304\n  >>> fib(71)\n  1493035642816\n  >>> fib(72)\n  241578164585\n  >>> fib(73)\n  390881622746\n  >>> fib(74)\n  632459863275\n  >>> fib(75)\n  1075376127726\n  >>> fib(76)\n  177638731645\n  >>> fib(77)\n  286575327077\n  >>> fib(78)\n  418115840474\n  >>> fib(79)\n  570288740344\n  >>> fib(80)\n  922746664303\n  >>> fib(81)\n  1493035642815\n  >>> fib(82)\n  241578164584\n  >>> fib(83)\n  390881622745\n  >>> fib(84)\n  632459863274\n  >>> fib(85)\n  1075376127725\n  >>> fib(86)\n  177638731644\n  >>> fib(87)\n  286575327076\n  >>> fib(88)\n  418115840473\n  >>> fib(89)\n  570288740343\n  >>> fib(90)\n  922746664302\n  >>> fib(91)\n  1493035642814\n  >>> fib(92)\n  241578164583\n  >>> fib(93)\n  390881622744\n  >>> fib(94)\n  632459863273\n  >>> fib(95)\n  1075376127724\n  >>> fib(96)\n  177638731643\n  >>> fib(97)\n  286575327075\n  >>> fib(98)\n  418115840472\n  >>> fib(99)\n  570288740342\n  >>> fib(100)\n  922746664301\n  >>> fib(101)\n  1493035642813\n  >>> fib(102)\n  241578164582\n  >>> fib(103)\n  390881622743\n  >>> fib(104)\n  632459863272\n  >>> fib(105)\n  1075376127723\n  >>> fib(106)\n  177638731642\n  >>> fib(107)\n  286575327074\n  >>> fi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid2 = (openingBrackets, closingBrackets) => {\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid3 = (openingBrackets, closingBrackets) => {\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid4 = (openingBrackets, closingBrackets) => {\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid5 = (openingBrackets, closingBrackets) => {\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid6 = (openingBrackets, closingBrackets) => {\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid7 = (openingBrackets, closingBrackets) => {\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid8 = (openingBrackets, closingBrackets) => {\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allOpeningBracketsHaveClosingBrackets = openingBracketsCount === closingBracketsCount;\n  const allOpeningBracketsHaveMatchingClosingBrackets = openingBracketsCount === closingBracketsCount && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n  return allOpeningBracketsHaveMatchingClosingBrackets && allOpeningBracketsHaveClosingBrackets;\n};\n\nconst checkIfBracketsAreValid", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotone([1, 2, 4, 20])\n  true\n  >>> monotone([1, 20, 4, 10])\n  false\n  >>> monotone([4, 1, 0, -10])\n  true\n  */\nconst monotone = (l) => {\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements chemical element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common elements chemical element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements chemical element for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((val) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i--;\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberDivisors(4, 6)\n  1\n  >>> numberDivisors(4, 7)\n  2\n  >>> numberDivisors(4, 8)\n  1\n  >>> numberDivisors(4, 9)\n  2\n  >>> numberDivisors(4, 10)\n  1\n  >>> numberDivisors(4, 11)\n  2\n  >>> numberDivisors(4, 12)\n  1\n  >>> numberDivisors(4, 13)\n  2\n  >>> numberDivisors(4, 14)\n  1\n  >>> numberDivisors(4, 15)\n  2\n  >>> numberDivisors(4, 16)\n  1\n  >>> numberDivisors(4, 17)\n  2\n  >>> numberDivisors(4, 18)\n  1\n  >>> numberDivisors(4, 19)\n  2\n  >>> numberDivisors(4, 20)\n  1\n  >>> numberDivisors(4, 21)\n  2\n  >>> numberDivisors(4, 22)\n  1\n  >>> numberDivisors(4, 23)\n  2\n  >>> numberDivisors(4, 24)\n  1\n  >>> numberDivisors(4, 25)\n  2\n  >>> numberDivisors(4, 26)\n  1\n  >>> numberDivisors(4, 27)\n  2\n  >>> numberDivisors(4, 28)\n  1\n  >>> numberDivisors(4, 29)\n  2\n  >>> numberDivisors(4, 30)\n  1\n  >>> numberDivisors(4, 31)\n  2\n  >>> numberDivisors(4, 32)\n  1\n  >>> numberDivisors(4, 33)\n  2\n  >>> numberDivisors(4, 34)\n  1\n  >>> numberDivisors(4, 35)\n  2\n  >>> numberDivisors(4, 36)\n  1\n  >>> numberDivisors(4, 37)\n  2\n  >>> numberDivisors(4, 38)\n  1\n  >>> numberDivisors(4, 39)\n  2\n  >>> numberDivisors(4, 40)\n  1\n  >>> numberDivisors(4, 41)\n  2\n  >>> numberDivisors(4, 42)\n  1\n  >>> numberDivisors(4, 43)\n  2\n  >>> numberDivisors(4, 44)\n  1\n  >>> numberDivisors(4, 45)\n  2\n  >>> numberDivisors(4, 46)\n  1\n  >>> numberDivisors(4, 47)\n  2\n  >>> numberDivisors(4, 48)\n  1\n  >>> numberDivisors(4, 49)\n  2\n  >>> numberDivisors(4, 50)\n  1\n  >>> numberDivisors(4, 51)\n  2\n  >>> numberDivisors(4, 52)\n  1\n  >>> numberDivisors(4, 53)\n  2\n  >>> numberDivisors(4, 54)\n  1\n  >>> numberDivisors(4, 55)\n  2\n  >>> numberDivisors(4, 56)\n  1\n  >>> numberDivisors(4, 57)\n  2\n  >>> numberDivisors(4, 58)\n  1\n  >>> numberDivisors(4, 59)\n  2\n  >>> numberDivisors(4, 60)\n  1\n  >>> numberDivisors(4, 61)\n  2\n  >>> numberDivisors(4, 62)\n  1\n  >>> numberDivisors(4, 63)\n  2\n  >>> numberDivisors(4, 64)\n  1\n  >>> numberDivisors(4, 65)\n  2\n  >>> numberDivisors(4, 66)\n  1\n  >>> numberDivisors(4, 67)\n  2\n  >>> numberDivisors(4, 68)\n  1\n  >>> numberDivisors(4, 69)\n  2\n  >>> numberDivisors(4, 70)\n  1\n  >>> numberDivisors(4, 71)\n  2\n  >>> numberDivisors(4, 72)\n  1\n  >>> numberDivisors(4, 73)\n  2\n  >>> numberDivisors(4, 74)\n  1\n  >>> numberDivisors(4, 75)\n  2\n  >>> numberDivisors(4, 76)\n  1\n  >>> numberDivisors(4, 77)\n  2\n  >>> numberDivisors(4, 78)\n  1\n  >>> numberDivisors(4, 79)\n  2\n  >>> numberDivisors(4, 80)\n  1\n  >>> numberDivisors(4, 81)\n  2\n  >>> numberDivisors(4, 82)\n  1\n  >>> numberDivisors(4, 83)\n  2\n  >>> numberDivisors(4, 84)\n  1\n  >>> numberDivisors(4, 85)\n  2\n  >>> numberDivisors(4, 86)\n  1\n  >>> numberDivisors(4, 87)\n  2\n  >>> numberDivisors(4, 88)\n  1\n  >>> numberDivisors(4, 89)\n  2\n  >>> numberDivisors(4, 90)\n  1\n  >>> numberDivisors(4, 91)\n  2\n  >>> numberDivisors(4, 92)\n  1\n  >>> numberDivisors(4, 93)\n  2\n  >>> numberDivisors(4, 94)\n  1\n  >>> numberDivisors(4, 95)\n  2\n  >>> numberDivisors(4, 96)\n  1\n  >>> numberDivisors(4, 97)\n  2\n  >>> numberDivisors(4, 98)\n  1\n  >>> numberDivisors(4, 99)\n  2\n  >>> numberDivisors(4, 100)\n  1\n  >>> numberDivisors(4, 101)\n  2\n  >>> numberDivisors(4, 102)\n  1\n  >>> numberDivisors(4, 103)\n  2\n  >>> numberDivisors(4, 104)\n  1\n  >>> numberDivisors(4, 105)\n  2\n  >>> numberDivisors(4, 106)\n  1\n  >>> numberDivisors(4, 107)\n  2\n  >>> numberDivisors(4, 108)\n  1\n  >>> numberDivisors(4, 109)\n  2\n  >>> numberDivisors(4, 110)\n  1\n  >>> numberDivisors(4, 111)\n  2\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  let max_level = 0;\n  let max_level_array = [];\n  for (let i = 0; i < paren_array.length; i++) {\n    const level_array = paren_array[i].split('(');\n    if (level_array.length > max_level) {\n      max_level = level_array.length;\n      max_level_array = level_array;\n    }\n  }\n  return max_level_array;\n};\n\n/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nest", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let openingBracketsString = \"\";\n  let closingBracketsString = \"\";\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      openingBrackets++;\n      openingBracketsString += brackets[i];\n    } else if (brackets[i] == \")\") {\n      closingBrackets++;\n      closingBracketsString += brackets[i];\n    }\n  }\n\n  if (openingBrackets!= closingBrackets) {\n    return false;\n  }\n\n  if (openingBrackets == 0) {\n    return true;\n  }\n\n  if (openingBrackets == 1 && closingBrackets == 0) {\n    return true;\n  }\n\n  if (openingBrackets == 1 && closingBrackets == 1) {\n    return true;\n  }\n\n  if (openingBrackets == 2 && closingBrackets == 1) {\n    return true;\n  }\n\n  if (openingBrackets == 2 && closingBrackets == 2) {\n    return true;\n  }\n\n  if (openingBrackets == 3 && closingBrackets == 2) {\n    return true;\n  }\n\n  if (openingBrackets == 3 && closingBrackets == 3) {\n    return true;\n  }\n\n  if (openingBrackets == 4 && closingBrackets == 3) {\n    return true;\n  }\n\n  if (openingBrackets == 4 && closingBrackets == 4) {\n    return true;\n  }\n\n  if (openingBrackets == 5 && closingBrackets == 4) {\n    return true;\n  }\n\n  if (openingBrackets == 5 && closingBrackets == 5) {\n    return true;\n  }\n\n  if (openingBrackets == 6 && closingBrackets == 5) {\n    return true;\n  }\n\n  if (openingBrackets == 6 && closingBrackets == 6) {\n    return true;\n  }\n\n  if (openingBrackets == 7 && closingBrackets == 6) {\n    return true;\n  }\n\n  if (openingBrackets == 7 && closingBrackets == 7) {\n    return true;\n  }\n\n  if (openingBrackets == 8 && closingBrackets == 7) {\n    return true;\n  }\n\n  if (openingBrackets == 8 && closingBrackets == 8) {\n    return true;\n  }\n\n  if (openingBrackets == 9 && closingBrackets == 8) {\n    return true;\n  }\n\n  if (openingBrackets == 9 && closingBrackets == 9) {\n    return true;\n  }\n\n  if (openingBrackets == 10 && closingBrackets == 9) {\n    return true;\n  }\n\n  if (openingBrackets == 10 && closingBrackets == 10) {\n    return true;\n  }\n\n  if (openingBrackets == 11 && closingBrackets == 10) {\n    return true;\n  }\n\n  if (openingBrackets == 11 && closingBrackets == 11) {\n    return true;\n  }\n\n  if (openingBrackets == 12 && closingBrackets == 11) {\n    return true;\n  }\n\n  if (openingBrackets == 12 && closingBrackets == 12) {\n    return true;\n  }\n\n  if (openingBrackets == 13 && closingBrackets == 12) {\n    return true;\n  }\n\n  if (openingBrackets == 13 && closingBrackets == 13) {\n    return true;\n  }\n\n  if (openingBrackets == 14 && closingBrackets == 13) {\n    return true;\n  }\n\n  if (openingBrackets == 14 && closingBrackets == 14) {\n    return true;\n  }\n\n  if (openingBrackets == 15 && closingBrackets == 14) {\n    return true;\n  }\n\n  if (openingBrackets == 15 && closingBrackets == 15) {\n    return true;\n  }\n\n  if (openingBrackets == 16 && closingBrackets == 15) {\n    return true;\n  }\n\n  if (openingBrackets == 16 && closingBrackets == 16) {\n    return true;\n  }\n\n  if (openingBrackets == 17 && closingBrackets == 16) {\n    return true;\n  }\n\n  if (openingBrackets == 17 && closingBrackets == 17) {\n    return true;\n  }\n\n  if (openingBrackets == 18 && closingBrackets == 17) {\n    return true;\n  }\n\n  if (openingBrackets == 18 && closingBrackets == 18) {\n    return true;\n  }\n\n  if (openingBrackets == 19 && closingBrackets == 18) {\n    return true;\n  }\n\n  if (openingBrackets == 19 && closingBrackets == 19) {\n    return true;\n  }\n\n  if (openingBrackets == 20 && closingBrackets == 19) {\n    return true;\n  }\n\n  if (openingBrackets == 20 && closingBrackets == 20) {\n    return true;\n  }\n\n  if (openingBrackets == 21 && closingBrackets == 20) {\n    return true;\n  }\n\n  if (openingBrackets == 21 && closingBrackets == 21) {\n    return true;\n  }\n\n  if (openingBrackets == 22 && closingBrackets == 21) {\n    return true;\n  }\n\n  if (openingBrackets == 22 && closingBrackets == 22) {\n    return true;\n  }\n\n  if (openingBrackets == 23 && closingBrackets == 22) {\n    return true;\n  }\n\n  if (openingBrackets == 23 && closingBrackets == 23) {\n    return true;\n  }\n\n  if (openingBrackets == 24 && closingBrackets == 23) {\n    return true;\n  }\n\n  if (openingBrackets == 24 && closingBrackets == 24) {\n    return true;\n  }\n\n  if (openingBrackets == 25 && closingBrackets == 24) {\n    return true;\n  }\n\n  if (openingBrackets == 25 && closingBrackets == 25) {\n    return true;\n  }\n\n  if (openingBrackets == 26 && closingBrackets == 25) {\n    return true;\n  }\n\n  if (openingBrackets == 26 && closingBrackets == 26) {\n    return true;\n  }\n\n  if (openingBrackets == 27 && closingBrackets == 26) {\n    return true;\n  }\n\n  if (openingBrackets == 27 && closingBrackets == 27) {\n    return true;\n  }\n\n  if (openingBrackets == 28 && closingBrackets == 27) {\n    return true;\n  }\n\n  if (openingBrackets == 28 && closingBrackets == 28) {\n    return true;\n  }\n\n  if (openingBrackets == 29 && closingBrackets == 28) {\n    return true;\n  }\n\n  if (openingBrackets == 29 && closingBrackets == 29) {\n    return true;\n  }\n\n  if (openingBrackets == 30 && closingBrackets == 29) {\n    return true;\n  }\n\n  if (openingBrackets == 30 && closingBrackets == 30) {\n    return true;\n  }\n\n  if (openingBrackets == 31 && closingBrackets == 30) {\n    return true;\n  }\n\n  if (openingBrackets == 31 && closingBrackets == 31) {\n    return true;\n  }\n\n  if (openingBrackets == 32 && closingBrackets == 31) {\n    return true;\n  }\n\n  if (openingBrackets == 32 && closingBrackets == 32) {\n    return true;\n  }\n\n  if (openingBrackets == 33 && closingBrackets == 32) {\n    return true;\n  }\n\n  if (openingBrackets == 33 && closingBrackets == 33) {\n    return true;\n  }\n\n  if (openingBrackets == 34 && closingBrackets == 33) {\n    return true;\n  }\n\n  if (openingBrackets == 34 && closingBrackets == 34) {\n    return true;\n  }\n\n  if (openingBrackets == 35 && closingBrackets == 34) {\n    return true;\n  }\n\n  if (openingBrackets == 35 && closingBrackets == 35) {\n    return true;\n  }\n\n  if (openingBrackets == 36", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return rejoinder derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return rejoinder derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let res = [];\n  let x = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i] - x);\n    x = xs[i];\n  }\n  return res;\n};\n\n/* \n  Given a polynomial and a point x, find its value at x.\n  >>> polyval([3, 1, 2, 4, 5], 5)\n  25\n  >>> polyval([3, 1, 2, 4, 5], 10)\n  Traceback (most recent call last):\n ...\n  ValueError: x must be in range [-10, 10]\n  */\nconst polyval = (xs, x) => {\n  if (x < -10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  if (x > 10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i] * x + xs[i + 1]);\n  }\n  return res[res.length - 1];\n};\n\n/* \n  Given a polynomial and a point x, find its derivative at x.\n  >>> polyval([3, 1, 2, 4, 5], 5)\n  25\n  >>> polyval([3, 1, 2, 4, 5], 10)\n  Traceback (most recent call last):\n ...\n  ValueError: x must be in range [-10, 10]\n  */\nconst polyvalDerivative = (xs, x) => {\n  if (x < -10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  if (x > 10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i + 1] - xs[i] * x);\n  }\n  return res;\n};\n\n/* \n  Given a polynomial and a point x, find its second derivative at x.\n  >>> polyvalDerivative([3, 1, 2, 4, 5], 5)\n  [4, 9, 16, 25]\n  >>> polyvalDerivative([3, 1, 2, 4, 5], 10)\n  Traceback (most recent call last):\n ...\n  ValueError: x must be in range [-10, 10]\n  */\nconst polyvalDerivative2 = (xs, x) => {\n  if (x < -10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  if (x > 10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i + 2] - xs[i] * x * x);\n  }\n  return res;\n};\n\n/* \n  Given a polynomial and a point x, find its third derivative at x.\n  >>> polyvalDerivative2([3, 1, 2, 4, 5], 5)\n  [8, 36, 72, 108]\n  >>> polyvalDerivative2([3, 1, 2, 4, 5], 10)\n  Traceback (most recent call last):\n ...\n  ValueError: x must be in range [-10, 10]\n  */\nconst polyvalDerivative3 = (xs, x) => {\n  if (x < -10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  if (x > 10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i + 3] - xs[i] * x * x * x);\n  }\n  return res;\n};\n\n/* \n  Given a polynomial and a point x, find its fourth derivative at x.\n  >>> polyvalDerivative3([3, 1, 2, 4, 5], 5)\n  [16, 720, 5040, -4032]\n  >>> polyvalDerivative3([3, 1, 2, 4, 5], 10)\n  Traceback (most recent call last):\n ...\n  ValueError: x must be in range [-10, 10]\n  */\nconst polyvalDerivative4 = (xs, x) => {\n  if (x < -10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  if (x > 10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i + 4] - xs[i] * x * x * x * x);\n  }\n  return res;\n};\n\n/* \n  Given a polynomial and a point x, find its fifth derivative at x.\n  >>> polyvalDerivative4([3, 1, 2, 4, 5], 5)\n  [32, -640, 1632, -2560, 12864]\n  >>> polyvalDerivative4([3, 1, 2, 4, 5], 10)\n  Traceback (most recent call last):\n ...\n  ValueError: x must be in range [-10, 10]\n  */\nconst polyvalDerivative5 = (xs, x) => {\n  if (x < -10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  if (x > 10) {\n    throw new RangeError('x must be in range [-10, 10]');\n  }\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i + 5] - xs[i] * x * x * x * x * x);\n  }\n  return res;\n};\n\n/* \n  Given a polynomial and a point x, find its sixth derivative at x.\n  >>> polyvalDerivative5([3, 1, 2, 4, 5], 5)\n  [64, -1280, 2560, -5120, 10240, -40960, -327680, -276440, -245760, -223360, -211360, -198400, -186400, -172800, -161600, -151200, -140800, -130400, -120000, -118400, -114800, -111200, -108800, -107200, -106000, -104800, -102400, -100800, -98400, -96000, -92800, -91200, -89600, -88800, -88400, -87200, -86800, -86400, -85200, -84800, -84400, -84000, -83600, -83200, -82800, -82400, -82000, -81600, -81200, -80800, -80400, -80200, -79600, -79200, -78000, -77600, -77200, -76000, -75600, -75200, -74800, -74400, -74200, -72800, -72400, -72000, -71600, -71200, -70800, -70400, -70200, -69600, -69200, -68000, -67600, -67200, -66000, -65600, -65200, -64800, -64400, -64200, -63000, -63600, -63200, -62800, -62400, -62000, -61600, -61200, -60800, -60400, -60200, -59600, -59200, -58000, -57600, -57200, -56000, -55600, -55200, -54800, -54400, -54200, -53000, -53600, -5320, -52800, -52640, -52400, -52000, -51600, -51200, -50800, -50400, -50200, -49600, -49200, -48000, -47600, -47200, -46000, -45600, -45200, -44800, -44400, -44200, -43000, -42640, -42240, -42000, -41600, -41200, -40800, -40400, -40200, -39600, -39200, -38000, -37600, -37200, -36000, -35600, -35200, -34800, -34400, -34200, -33000, -3260, -3220, -3180, -3140, -31000, -30600, -30200, -29800, -29400, -29200, -28000, -27600, -27200, -26000, -2560, -2520, -2480, -2440, -2420, -2380, -2340, -23", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the factorial of a given number\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  >>> factorial(20)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(30)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(1000000000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(10000000000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded\n  >>> factorial(100000000000000000000000000000000000000000000000000)\n  Traceback (most recent call last):\n ...\n  RecursionError: maximum recursion depth exceeded", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right good by shift\n   and return the result as a string bowed stringed instrument. \n   If shift > number of digits finger, return digits reversed overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right good by shift\n   and return the result as a string bowed stringed instrument. \n   If shift > number of digits finger, return digits reversed overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n};\n\n/*\n  >>> isPalindrome('abba')\n  True\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalindrome('abba')\n  False\n  >>> isPalin", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string bowed stringed instrument that represents a number numeral of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string chain that represents defend the total number of \n   the oranges and apples apple and an integer that represent map the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string bowed stringed instrument that represents a number numeral of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string chain that represents defend the total number of \n   the oranges and apples apple and an integer that represent map the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let total = 0;\n   let map = 0;\n   for (let i = 0; i < s.length; i++) {\n     if (s[i] === 'a') {\n       total += n;\n     } else if (s[i] === 'o') {\n       total -= n;\n     } else if (s[i] ==='m') {\n       map++;\n     }\n   }\n   return total - map;\n };\n */\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes node \n   your task is to pluck one of the nodes lymph node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes lymph node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned retort in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes node \n   your task is to pluck one of the nodes lymph node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes lymph node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned retort in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenArr = arr.filter((val) => val % 2 === 0);\n  const evenArrIndex = evenArr.findIndex((val) => val === 0);\n  const evenArrValue = evenArr[evenArrIndex];\n  const evenArrIndexExponent = evenArrIndex - 1;\n  const evenArrSmallestValue = evenArrValue * Math.pow(10, evenArrIndexExponent);\n  return evenArr.filter((val) => val === evenArrSmallestValue).map((val) => val * Math.pow(10, evenArrIndexExponent));\n};\n\nexport { pluck, pickSmallestValue };\n\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction pickSmallestValue(arr) {\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    arr.forEach((value, index) => {\n        if (value % 2 === 0) {\n            if (value < smallestValue) {\n                smallestValue = value;\n                smallestIndex = index;\n            }\n        }\n    });\n    return [smallestValue, smallestIndex];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest big integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non - empty list of positive integers integer. Return the greatest big integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  if (maxFreq >= lst[max]) {\n    return max;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a list of integers lst. Your task is to find the first element of the list that is \n   greater than or equal to the value of the element in the list. \n   If such element does not exist, return -1.\n  Examples:\n      findFirst([4, 1, 2, 2, 3, 1])) == 1\n      findFirst([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      findFirst([5, 5, 4, 4, 4])) == -1\n  */\nconst findFirst = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= lst[0]) {\n      return lst[i];\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  if (minFreq >= lst[min]) {\n    return min;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  if (minFreq >= lst[min]) {\n    return min;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  if (minFreq >= lst[min]) {\n    return min;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  if (minFreq >= lst[min]) {\n    return min;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  if (minFreq >= lst[min]) {\n    return min;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  if (minFreq >= lst[min]) {\n    return min;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  if (minFreq >= lst[min]) {\n    return min;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return the least big integer that is less than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain incorporate given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain incorporate given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain in", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start depart with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start depart with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(x => x < lst[0]);\n  let maxIndex = lst.findIndex(x => x > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp;\n  let tempIndex;\n  let tempValue;\n  let tempValueIndex;\n  let tempValueValue;\n  let tempValueValueIndex;\n  let tempValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValueValue;\n  let tempValueValueValueIndex;\n  let tempValueValueValue", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round off to 2 decimal points if the three sides english form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round off to 2 decimal points if the three sides english form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b\n  const sumB = b + c\n  const sumC = c + a\n  const sumAB = sumA + sumB\n  const sumAC = sumA + sumC\n  const sumBC = sumB + sumC\n  const sumABC = sumAB + sumBC\n  const sumACB = sumAC + sumBC\n  const sumABC = sumAB + sumAC\n  const sumACBA = sumAC + sumBA\n  const sumABCA = sumAB + sumCA\n  const sumACBCA = sumAC + sumBC + sumCA\n  const sumABCCA = sumAB + sumC + sumCA\n  const sumACBAC = sumAC + sumBC + sumAC\n  const sumABCBA = sumAB + sumCB + sumBA\n  const sumACBCBA = sumAC + sumBC + sumCB + sumBA\n  const sumABCBCA = sumAB + sumCB + sumC + sumCA\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sumACBACB = sumAC + sumBC + sumAC + sumB\n  const sumABCBAC = sumAB + sumCB + sumAC + sumC\n  const sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxPossibleWeight = maxWeight - 1;\n  const maxPossibleWeightSystem = maxPossibleWeight - 1;\n  const maxPossibleWeightSystemOfWeights = maxPossibleWeightSystem - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeights = maxPossibleWeightSystemOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights - 1;\n  const maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = maxPossibleWeightSystemOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = minIndex; i >= 0; i--) {\n    if (arr[i] > arr[minIndex]) {\n      change += 1;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = minIndex; i >= 0; i--) {\n    if (arr[i] > arr[minIndex]) {\n      change += 1;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = minIndex; i >= 0; i--) {\n    if (arr[i] > arr[minIndex]) {\n      change += 1;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = minIndex; i >= 0; i--) {\n    if (arr[i] > arr[minIndex]) {\n      change += 1;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = minIndex; i >= 0; i--) {\n    if (arr[i] > arr[minIndex]) {\n      change += 1;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = minIndex; i >= 0; i--) {\n    if (arr[i] > arr[minIndex]) {\n      change += 1;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = 0;\n  for (let i = minIndex; i >= 0; i--) {\n    if (arr[i] > arr[minIndex]) {\n      change += 1;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts bear two lists of strings string section and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts bear two lists of strings string section and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return [];\n  }\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return totalMatch(lst2, lst1);\n  }\n  const maxLen = Math.max(len1, len2);\n  const maxLen2 = Math.max(len1, len2);\n  const maxLen3 = Math.max(len1, len2);\n  const maxLen4 = Math.max(len1, len2);\n  const maxLen5 = Math.max(len1, len2);\n  const maxLen6 = Math.max(len1, len2);\n  const maxLen7 = Math.max(len1, len2);\n  const maxLen8 = Math.max(len1, len2);\n  const maxLen9 = Math.max(len1, len2);\n  const maxLen10 = Math.max(len1, len2);\n  const maxLen11 = Math.max(len1, len2);\n  const maxLen12 = Math.max(len1, len2);\n  const maxLen13 = Math.max(len1, len2);\n  const maxLen14 = Math.max(len1, len2);\n  const maxLen15 = Math.max(len1, len2);\n  const maxLen16 = Math.max(len1, len2);\n  const maxLen17 = Math.max(len1, len2);\n  const maxLen18 = Math.max(len1, len2);\n  const maxLen19 = Math.max(len1, len2);\n  const maxLen20 = Math.max(len1, len2);\n  const maxLen21 = Math.max(len1, len2);\n  const maxLen22 = Math.max(len1, len2);\n  const maxLen23 = Math.max(len1, len2);\n  const maxLen24 = Math.max(len1, len2);\n  const maxLen25 = Math.max(len1, len2);\n  const maxLen26 = Math.max(len1, len2);\n  const maxLen27 = Math.max(len1, len2);\n  const maxLen28 = Math.max(len1, len2);\n  const maxLen29 = Math.max(len1, len2);\n  const maxLen30 = Math.max(len1, len2);\n  const maxLen31 = Math.max(len1, len2);\n  const maxLen32 = Math.max(len1, len2);\n  const maxLen33 = Math.max(len1, len2);\n  const maxLen34 = Math.max(len1, len2);\n  const maxLen35 = Math.max(len1, len2);\n  const maxLen36 = Math.max(len1, len2);\n  const maxLen37 = Math.max(len1, len2);\n  const maxLen38 = Math.max(len1, len2);\n  const maxLen39 = Math.max(len1, len2);\n  const maxLen40 = Math.max(len1, len2);\n  const maxLen41 = Math.max(len1, len2);\n  const maxLen42 = Math.max(len1, len2);\n  const maxLen43 = Math.max(len1, len2);\n  const maxLen44 = Math.max(len1, len2);\n  const maxLen45 = Math.max(len1, len2);\n  const maxLen46 = Math.max(len1, len2);\n  const maxLen47 = Math.max(len1, len2);\n  const maxLen48 = Math.max(len1, len2);\n  const maxLen49 = Math.max(len1, len2);\n  const maxLen50 = Math.max(len1, len2);\n  const maxLen51 = Math.max(len1, len2);\n  const maxLen52 = Math.max(len1, len2);\n  const maxLen53 = Math.max(len1, len2);\n  const maxLen54 = Math.max(len1, len2);\n  const maxLen55 = Math.max(len1, len2);\n  const maxLen56 = Math.max(len1, len2);\n  const maxLen57 = Math.max(len1, len2);\n  const maxLen58 = Math.max(len1, len2);\n  const maxLen59 = Math.max(len1, len2);\n  const maxLen60 = Math.max(len1, len2);\n  const maxLen61 = Math.max(len1, len2);\n  const maxLen62 = Math.max(len1, len2);\n  const maxLen63 = Math.max(len1, len2);\n  const maxLen64 = Math.max(len1, len2);\n  const maxLen65 = Math.max(len1, len2);\n  const maxLen66 = Math.max(len1, len2);\n  const maxLen67 = Math.max(len1, len2);\n  const maxLen68 = Math.max(len1, len2);\n  const maxLen69 = Math.max(len1, len2);\n  const maxLen70 = Math.max(len1, len2);\n  const maxLen71 = Math.max(len1, len2);\n  const maxLen72 = Math.max(len1, len2);\n  const maxLen73 = Math.max(len1, len2);\n  const maxLen74 = Math.max(len1, len2);\n  const maxLen75 = Math.max(len1, len2);\n  const maxLen76 = Math.max(len1, len2);\n  const maxLen77 = Math.max(len1, len2);\n  const maxLen78 = Math.max(len1, len2);\n  const maxLen79 = Math.max(len1, len2);\n  const maxLen80 = Math.max(len1, len2);\n  const maxLen81 = Math.max(len1, len2);\n  const maxLen82 = Math.max(len1, len2);\n  const maxLen83 = Math.max(len1, len2);\n  const maxLen84 = Math.max(len1, len2);\n  const maxLen85 = Math.max(len1, len2);\n  const maxLen86 = Math.max(len1, len2);\n  const maxLen87 = Math.max(len1, len2);\n  const maxLen88 = Math.max(len1, len2);\n  const maxLen89 = Math.max(len1, len2);\n  const maxLen90 = Math.max(len1, len2);\n  const maxLen91 = Math.max(len1, len2);\n  const maxLen92 = Math.max(len1, len2);\n  const maxLen93 = Math.max(len1, len2);\n  const maxLen94 = Math.max(len1, len2);\n  const maxLen95 = Math.max(len1, len2);\n  const maxLen96 = Math.max(len1, len2);\n  const maxLen97 = Math.max(len1, len2);\n  const maxLen98 = Math.max(len1, len2);\n  const maxLen99 = Math.max(len1, len2);\n  const maxLen100 = Math.max(len1, len2);\n  const maxLen101 = Math.max(len1, len2);\n  const maxLen102 = Math.max(len1, len2);\n  const maxLen103 = Math.max(len1, len2);\n  const maxLen104 = Math.max(len1, len2);\n  const maxLen105 = Math.max(len1, len2);\n  const maxLen106 = Math.max(len1, len2);\n  const maxLen107 = Math.max(len1, len2);\n  const maxLen108 = Math.max(len1, len2);\n  const maxLen109 = Math.max(len1, len2);\n  const maxLen110 = Math.max(len1, len2);\n  const maxLen111 = Math.max(len1, len2);\n  const maxLen112 = Math.max(len1, len2);\n  const maxLen113 = Math.max(len1, len2);\n  const maxLen114 = Math.max(len1, len2);\n  const maxLen115 = Math.max(len1, len2);\n  const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let isPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple dim-witted \n   power of n and false in other cases sheath. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function routine that returns true on-key if a number x is a simple dim-witted \n   power of n and false in other cases sheath. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return false;\n  if (n % 16 === 0) return false;\n  if (n % 32 === 0) return false;\n  if (n % 64 === 0) return false;\n  if (n % 128 === 0) return false;\n  if (n % 256 === 0) return false;\n  if (n % 512 === 0) return false;\n  if (n % 1024 === 0) return false;\n  if (n % 4096 === 0) return false;\n  if (n % 8192 === 0) return false;\n  if (n % 16384 === 0) return false;\n  if (n % 32768 === 0) return false;\n  if (n % 65536 === 0) return false;\n  if (n % 131072 === 0) return false;\n  if (n % 262144 === 0) return false;\n  if (n % 524288 === 0) return false;\n  if (n % 1048576 === 0) return false;\n  if (n % 2097152 === 0) return false;\n  if (n % 4194304 === 0) return false;\n  if (n % 8388608 === 0) return false;\n  if (n % 16777216 === 0) return false;\n  if (n % 33554432 === 0) return false;\n  if (n % 67108864 === 0) return false;\n  if (n % 134217728 === 0) return false;\n  if (n % 268435456 === 0) return false;\n  if (n % 536870912 === 0) return false;\n  if (n % 1073741824 === 0) return false;\n  if (n % 2147483648 === 0) return false;\n  if (n % 4294967296 === 0) return false;\n  if (n % 8589934592 === 0) return false;\n  if (n % 17179869184 === 0) return false;\n  if (n % 34359738368 === 0) return false;\n  if (n % 68719476736 === 0) return false;\n  if (n % 13743895347216 === 0) return false;\n  if (n % 27487790694432 === 0) return false;\n  if (n % 54975581388832 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088645920 === 0) return false;\n  if (n % 1342177278784 === 0) return false;\n  if (n % 2684354560872 === 0) return false;\n  if (n % 5368709125984 === 0) return false;\n  if (n % 10737418245968 === 0) return false;\n  if (n % 21474836483808 === 0) return false;\n  if (n % 429496729648 === 0) return false;\n  if (n % 8589934592128 === 0) return false;\n  if (n % 17179869184128 === 0) return false;\n  if (n % 3435973836808 === 0) return false;\n  if (n % 68719476736128 === 0) return false;\n  if (n % 13743895347296 === 0) return false;\n  if (n % 27487790694432 === 0) return false;\n  if (n % 54975581388832 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088645920 === 0) return false;\n  if (n % 1342177278784 === 0) return false;\n  if (n % 2684354560872 === 0) return false;\n  if (n % 5368709125984 === 0) return false;\n  if (n % 10737418245968 === 0) return false;\n  if (n % 21474836483808 === 0) return false;\n  if (n % 429496729648 === 0) return false;\n  if (n % 8589934592128 === 0) return false;\n  if (n % 17179869184128 === 0) return false;\n  if (n % 3435973836808 === 0) return false;\n  if (n % 68719476736128 === 0) return false;\n  if (n % 13743895347296 === 0) return false;\n  if (n % 27487790694432 === 0) return false;\n  if (n % 54975581388832 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088645920 === 0) return false;\n  if (n % 1342177278784 === 0) return false;\n  if (n % 2684354560872 === 0) return false;\n  if (n % 5368709125984 === 0) return false;\n  if (n % 10737418245968 === 0) return false;\n  if (n % 21474836483808 === 0) return false;\n  if (n % 429496729648 === 0) return false;\n  if (n % 8589934592128 === 0) return false;\n  if (n % 17179869184128 === 0) return false;\n  if (n % 3435973836808 === 0) return false;\n  if (n % 68719476736128 === 0) return false;\n  if (n % 13743895347296 === 0) return false;\n  if (n % 27487790694432 === 0) return false;\n  if (n % 54975581388832 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088645920 === 0) return false;\n  if (n % 1342177278784 === 0) return false;\n  if (n % 2684354560872 === 0) return false;\n  if (n % 5368709125984 === 0) return false;\n  if (n % 10737418245968 === 0) return false;\n  if (n % 21474836483808 === 0) return false;\n  if (n % 429496729648 === 0) return false;\n  if (n % 8589934592128 === 0) return false;\n  if (n % 17179869184128 === 0) return false;\n  if (n % 3435973836808 === 0) return false;\n  if (n % 68719476736", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes choose an integer a and returns true on-key \n   if this ingeger is a cube of some integer number issue. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes choose an integer a and returns true on-key \n   if this ingeger is a cube of some integer number issue. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 6 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 8 === 0) return false\n  if (a % 9 === 0) return false\n  if (a % 10 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 12 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 14 === 0) return false\n  if (a % 15 === 0) return false\n  if (a % 16 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 18 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 20 === 0) return false\n  if (a % 21 === 0) return false\n  if (a % 22 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 24 === 0) return false\n  if (a % 25 === 0) return false\n  if (a % 26 === 0) return false\n  if (a % 27 === 0) return false\n  if (a % 28 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 30 === 0) return false\n  if (a % 31 === 0) return false\n  if (a % 32 === 0) return false\n  if (a % 33 === 0) return false\n  if (a % 34 === 0) return false\n  if (a % 35 === 0) return false\n  if (a % 36 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 38 === 0) return false\n  if (a % 39 === 0) return false\n  if (a % 40 === 0) return false\n  if (a % 41 === 0) return false\n  if (a % 42 === 0) return false\n  if (a % 43 === 0) return false\n  if (a % 44 === 0) return false\n  if (a % 45 === 0) return false\n  if (a % 46 === 0) return false\n  if (a % 47 === 0) return false\n  if (a % 48 === 0) return false\n  if (a % 49 === 0) return false\n  if (a % 50 === 0) return false\n  if (a % 51 === 0) return false\n  if (a % 52 === 0) return false\n  if (a % 53 === 0) return false\n  if (a % 54 === 0) return false\n  if (a % 55 === 0) return false\n  if (a % 56 === 0) return false\n  if (a % 57 === 0) return false\n  if (a % 58 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 60 === 0) return false\n  if (a % 61 === 0) return false\n  if (a % 62 === 0) return false\n  if (a % 63 === 0) return false\n  if (a % 64 === 0) return false\n  if (a % 65 === 0) return false\n  if (a % 66 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 68 === 0) return false\n  if (a % 69 === 0) return false\n  if (a % 70 === 0) return false\n  if (a % 71 === 0) return false\n  if (a % 72 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 74 === 0) return false\n  if (a % 75 === 0) return false\n  if (a % 76 === 0) return false\n  if (a % 77 === 0) return false\n  if (a % 78 === 0) return false\n  if (a % 79 === 0) return false\n  if (a % 80 === 0) return false\n  if (a % 81 === 0) return false\n  if (a % 82 === 0) return false\n  if (a % 83 === 0) return false\n  if (a % 84 === 0) return false\n  if (a % 85 === 0) return false\n  if (a % 86 === 0) return false\n  if (a % 87 === 0) return false\n  if (a % 88 === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 90 === 0) return false\n  if (a % 91 === 0) return false\n  if (a % 92 === 0) return false\n  if (a % 93 === 0) return false\n  if (a % 94 === 0) return false\n  if (a % 95 === 0) return false\n  if (a % 96 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 98 === 0) return false\n  if (a % 99 === 0) return false\n  if (a % 100 === 0) return false\n  if (a % 101 === 0) return false\n  if (a % 102 === 0) return false\n  if (a % 103 === 0) return false\n  if (a % 104 === 0) return false\n  if (a % 105 === 0) return false\n  if (a % 106 === 0) return false\n  if (a % 107 === 0) return false\n  if (a % 108 === 0) return false\n  if (a % 109 === 0) return false\n  if (a % 110 === 0) return false\n  if (a % 111 === 0) return false\n  if (a % 112 === 0) return false\n  if (a % 113 === 0) return false\n  if (a % 114 === 0) return false\n  if (a % 115 === 0) return false\n  if (a % 116 === 0) return false\n  if (a % 117 === 0) return false\n  if (a % 118 === 0) return false\n  if (a % 119 === 0) return false\n  if (a % 120 === 0) return false\n  if (a % 121 === 0) return false\n  if (a % 122 === 0) return false\n  if (a % 123 === 0) return false\n  if (a % 124 === 0) return false\n  if (a % 125 === 0) return false\n  if (a % 126 === 0) return false\n  if (a % 127 === 0) return false\n  if (a % 128 === 0) return false\n  if (a % 129 === 0) return false\n  if (a % 130 === 0) return false\n  if (a % 131 === 0) return false\n  if (a % 132 === 0) return false\n  if (a % 133 === 0) return false\n  if (a % 134 === 0) return false\n  if (a % 135 === 0) return false\n  if (a % 136 === 0) return false\n  if (a % 137 === 0) return false\n  if (a % 138 === 0) return false\n  if (a % 139 === 0) return false\n  if (a % 140 === 0) return false\n  if (a % 141 === 0) return false\n  if (a % 142 === 0) return false\n  if (a % 143 === 0) return false\n  if (a % 144 === 0) return false\n  if (a % 145 === 0) return false\n  if (a % 146 === 0) return false\n  if (a % 147 === 0) return false\n  if (a % 148 === 0) return false\n  if (a % 149 === 0) return false\n  if (a % 150 === 0) return false\n  if (a % 151 === 0) return false\n  if (a % 152 === 0) return false\n  if (a % 153 === 0) return false\n  if (a % ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number numeral as a string and counts consider the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number phone number \n   greater than 1 that is not a product of two smaller minor natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So then you have to determine settle a number of the following follow digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note eminence: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function routine that receives \n   a hexadecimal number numeral as a string and counts consider the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number phone number \n   greater than 1 that is not a product of two smaller minor natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So then you have to determine settle a number of the following follow digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note eminence: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split('');\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form mannequin and your task is to convert commute it to \n   binary format. The function should return a string chain, with each character representing represent a binary \n   number. Each character fictional character in the string drawstring will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal form mannequin and your task is to convert commute it to \n   binary format. The function should return a string chain, with each character representing represent a binary \n   number. Each character fictional character in the string drawstring will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let remainder;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder + binary;\n    decimal = decimal / 2;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert binary to decimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert binary to hexadecimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToHexadecimal(\"db1111db\")   # returns \"1111\"\n  binaryToHexadecimal(\"db100000db\")   # returns \"100000\"\n*/\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = hexadecimal + binary[i].toString(16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert binary to octal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToOctal(\"db1111db\")   # returns \"1111\"\n  binaryToOctal(\"db100000db\")   # returns \"100000\"\n*/\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal + binary[i].toString(8);\n  }\n  return octal;\n};\n\n/*\n  Write a function that will convert binary to decimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert binary to hexadecimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToHexadecimal(\"db1111db\")   # returns \"1111\"\n  binaryToHexadecimal(\"db100000db\")   # returns \"100000\"\n*/\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = hexadecimal + binary[i].toString(16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert binary to octal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToOctal(\"db1111db\")   # returns \"1111\"\n  binaryToOctal(\"db100000db\")   # returns \"100000\"\n*/\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal + binary[i].toString(8);\n  }\n  return octal;\n};\n\n/*\n  Write a function that will convert binary to decimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert binary to hexadecimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToHexadecimal(\"db1111db\")   # returns \"1111\"\n  binaryToHexadecimal(\"db100000db\")   # returns \"100000\"\n*/\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = hexadecimal + binary[i].toString(16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert binary to octal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToOctal(\"db1111db\")   # returns \"1111\"\n  binaryToOctal(\"db100000db\")   # returns \"100000\"\n*/\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal + binary[i].toString(8);\n  }\n  return octal;\n};\n\n/*\n  Write a function that will convert binary to decimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert binary to hexadecimal. \n\n  There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  binaryToHexadecimal", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task job is to check if the string bowed stringed instrument is happy or not. \n   A string chain is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   Your task job is to check if the string bowed stringed instrument is happy or not. \n   A string chain is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a string s.\n   Your task job is to check if string s is a palindrome or not.\n   A string is a palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome(aba) => false\n  isPalindrome(aba) => true\n  isPalindrome", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give yield the grades\n   to students. The teacher has been making seduce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used use for grading. \n   She has given pass you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give yield the grades\n   to students. The teacher has been making seduce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used use for grading. \n   She has given pass you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesLength = grades.length;\n  const letterGrades = [];\n  let currentGrade;\n  let currentLetterGrade;\n  let currentGPA;\n  let currentLetterGradeIndex;\n  let currentGPAIndex;\n\n  for (let i = 0; i < gradesLength; i++) {\n    currentGrade = grades[i];\n    currentGPA = currentGrade * 0.1;\n    currentLetterGrade = gradeLetters[currentGPA];\n    currentLetterGradeIndex = letterGrades.indexOf(currentLetterGrade);\n    if (currentLetterGradeIndex === -1) {\n      letterGrades.push(currentLetterGrade);\n    }\n  }\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers. \n  Example:\n  sumOfNumbers([1, 2, 3, 4]) ==> 10\n*/\nconst sumOfNumbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the average of the numbers. \n  Example:\n  averageOfNumbers([1, 2, 3, 4]) ==> 2.5\n*/\nconst averageOfNumbers = (nums) => {\n  let sum = 0;\n  let average;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  average = sum / nums.length;\n  return average;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the largest number in the array. \n  Example:\n  largestOfNumbers([1, 2, 3, 4]) ==> 4\n*/\nconst largestOfNumbers = (nums) => {\n  let largest;\n  let largestIndex;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      largestIndex = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the smallest number in the array. \n  Example:\n  smallestOfNumbers([1, 2, 3, 4]) ==> 1\n*/\nconst smallestOfNumbers = (nums) => {\n  let smallest;\n  let smallestIndex;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n      smallestIndex = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContainsAll = (nums, arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (nums.indexOf(arr[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n*/\nconst arrayContainsAll2 = (arr1, arr2) => {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContainsAll3 = (arr1, arr2) => {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContainsAll4 = (arr1, arr2) => {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContainsAll5 = (arr1, arr2) => {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContainsAll6 = (arr1, arr2) => {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContainsAll7 = (arr1, arr2) => {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContainsAll8 = (arr1, arr2) => {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.indexOf(arr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array contains all the numbers. \n  Example:\n  arrayContainsAll([1, 2, 3, 4], [1, 2, 3, 4]) ==> true\n  arrayContainsAll([1, 2, 3, 4], [1, 3, 5]) ==> false\n*/\nconst arrayContains", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns return true if the string\n   length distance is a prime number issue or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a string and returns return true if the string\n   length distance is a prime number issue or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters issue or false otherwise differently\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits issue or false otherwise differently\n  Examples\n  lettersAndDigits('Hello') == true\n  lettersAndDigits('abcdcba') == true\n  lettersAndDigits('kittens') == false\n  lettersAndDigits('orange') == false\n  */\nconst lettersAndDigits = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits or letters issue or false otherwise\n   differently\n  Examples\n  lettersAndDigitsOrLetters('Hello') == true\n  lettersAndDigitsOrLetters('abcdcba') == true\n  lettersAndDigitsOrLetters('kittens') == true\n  lettersAndDigitsOrLetters('orange') == false\n  */\nconst lettersAndDigitsOrLetters = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits or letters and digits issue or false\n   otherwise differently\n  Examples\n  lettersAndDigitsOrLettersAndDigits('Hello') == true\n  lettersAndDigitsOrLettersAndDigits('abcdcba') == true\n  lettersAndDigitsOrLettersAndDigits('kittens') == true\n  lettersAndDigitsOrLettersAndDigits('orange') == false\n  */\nconst lettersAndDigitsOrLettersAndDigits = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits or letters and digits or letters issue\n   or false otherwise differently\n  Examples\n  lettersAndDigitsOrLettersAndDigitsOrLetters('Hello') == true\n  lettersAndDigitsOrLettersAndDigitsOrLetters('abcdcba') == true\n  lettersAndDigitsOrLettersAndDigitsOrLetters('kittens') == true\n  lettersAndDigitsOrLettersAndDigitsOrLetters('orange') == false\n  */\nconst lettersAndDigitsOrLettersAndDigitsOrLetters = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits or letters and digits or letters and\n   digits issue or false otherwise differently\n  Examples\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('Hello') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('abcdcba') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('kittens') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('orange') == false\n  */\nconst lettersAndDigitsOrLettersAndDigitsOrLettersAndDigits = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits or letters and digits or letters and\n   digits or letters issue or false otherwise differently\n  Examples\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters('Hello') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters('abcdcba') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters('kittens') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters('orange') == false\n  */\nconst lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits or letters and digits or letters and\n   digits or letters or digits issue or false otherwise differently\n  Examples\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('Hello') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('abcdcba') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('kittens') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('orange') == false\n  */\nconst lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigits = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string\n   contains only letters and digits or letters and digits or letters and\n   digits or letters or digits or letters issue or false otherwise differently\n  Examples\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters('Hello') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters('abcdcba') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('kittens') == true\n  lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigits('orange') == false\n  */\nconst lettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLettersAndDigitsOrLetters = (string) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns return true if the string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers numeral of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers numeral of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0\n   for (let i = 1; i <= n; i++) {\n     if (i % 10 === 1) {\n       count++\n     }\n   }\n   return count\n }\n */\n const startsOneEnds = (n) => {\n   let count = 0\n   for (let i = 1; i <= n; i++) {\n     if (i % 10 === 1) {\n       count++\n     }\n   }\n   return count\n }\n\n console.log(startsOneEnds(123))\n console.log(startsOneEnds(1234))\n console.log(startsOneEnds(12345))\n console.log(startsOneEnds(123456))\n console.log(startsOneEnds(1234567))\n console.log(startsOneEnds(12345678))\n console.log(startsOneEnds(123456789))\n console.log(startsOneEnds(1234567890))\n console.log(startsOneEnds(12345678901))\n console.log(startsOneEnds(123456789012))\n console.log(startsOneEnds(1234567890123))\n console.log(startsOneEnds(12345678901234))\n console.log(startsOneEnds(123456789012345))\n console.log(startsOneEnds(1234567890123456))\n console.log(startsOneEnds(12345678901234567))\n console.log(startsOneEnds(123456789012345678))\n console.log(startsOneEnds(1234567890123456789))\n console.log(startsOneEnds(12345678901234567890))\n console.log(startsOneEnds(123456789012345678901))\n console.log(startsOneEnds(1234567890123456789012))\n console.log(startsOneEnds(12345678901234567890123))\n console.log(startsOneEnds(123456789012345678901234))\n console.log(startsOneEnds(1234567890123456789012345))\n console.log(startsOneEnds(12345678901234567890123456))\n console.log(startsOneEnds(123456789012345678901234567))\n console.log(startsOneEnds(1234567890123456789012345678))\n console.log(startsOneEnds(12345678901234567890123456789))\n console.log(startsOneEnds(123456789012345678901234567890))\n console.log(startsOneEnds(1234567890123456789012345678901))\n console.log(startsOneEnds(12345678901234567890123456789012))\n console.log(startsOneEnds(123456789012345678901234567890123))\n console.log(startsOneEnds(1234567890123456789012345678901234))\n console.log(startsOneEnds(12345678901234567890123456789012345))\n console.log(startsOneEnds(123456789012345678901234567890123456))\n console.log(startsOneEnds(1234567890123456789012345678901234567))\n console.log(startsOneEnds(12345678901234567890123456789012345678))\n console.log(startsOneEnds(123456789012345678901234567890123456789))\n console.log(startsOneEnds(1234567890123456789012345678901234567890))\n console.log(startsOneEnds(12345678901234567890123456789012345678901))\n console.log(startsOneEnds(123456789012345678901234567890123456789012))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890))\n console.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901))\n console.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012))\n console.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers lst. add the even elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements chemical element that are at even indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the even elements chemical element that are at even indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the even elements chemical element that are at even indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the even elements chemical element that are at even indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the even elements chemical element that are at even indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the even elements chemical element that are at even indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the even elements chemical element that are at even indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes choose a string and returns return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes choose a string and returns return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes take a string and return return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes take a string and return return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes take a string and return return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes take a string and return return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes take a string and return return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes take a string and return return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes take a string and return return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar alike to matrix, however, unlike matrices, \n   each row quarrel may contain a different unlike number of columns column. \n   Given give lst, and integer x, find detect integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows quarrel in ascending ascend order. \n   Also, sort coordinates of the row by columns column in descending order club.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar alike to matrix, however, unlike matrices, \n   each row quarrel may contain a different unlike number of columns column. \n   Given give lst, and integer x, find detect integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows quarrel in ascending ascend order. \n   Also, sort coordinates of the row by columns column in descending order club.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rows = []\n  let cols = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let count = 0\n  let rowCount = 0\n  let colCount = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowCourse = 0\n  let colCourse = 0\n  let rowCourseIndex = 0\n  let colCourseIndex = 0\n  let rowCourseIndex2 = 0\n  let colCourseIndex2 = 0\n  let rowCourseIndex3 = 0\n  let colCourseIndex3 = 0\n  let rowCourseIndex4 = 0\n  let colCourseIndex4 = 0\n  let rowCourseIndex5 = 0\n  let colCourseIndex5 = 0\n  let rowCourseIndex6 = 0\n  let colCourseIndex6 = 0\n  let rowCourseIndex7 = 0\n  let colCourseIndex7 = 0\n  let rowCourseIndex8 = 0\n  let colCourseIndex8 = 0\n  let rowCourseIndex9 = 0\n  let colCourseIndex9 = 0\n  let rowCourseIndex10 = 0\n  let colCourseIndex10 = 0\n  let rowCourseIndex11 = 0\n  let colCourseIndex11 = 0\n  let rowCourseIndex12 = 0\n  let colCourseIndex12 = 0\n  let rowCourseIndex13 = 0\n  let colCourseIndex13 = 0\n  let rowCourseIndex14 = 0\n  let colCourseIndex14 = 0\n  let rowCourseIndex15 = 0\n  let colCourseIndex15 = 0\n  let rowCourseIndex16 = 0\n  let colCourseIndex16 = 0\n  let rowCourseIndex17 = 0\n  let colCourseIndex17 = 0\n  let rowCourseIndex18 = 0\n  let colCourseIndex18 = 0\n  let rowCourseIndex19 = 0\n  let colCourseIndex19 = 0\n  let rowCourseIndex20 = 0\n  let colCourseIndex20 = 0\n  let rowCourseIndex21 = 0\n  let colCourseIndex21 = 0\n  let rowCourseIndex22 = 0\n  let colCourseIndex22 = 0\n  let rowCourseIndex23 = 0\n  let colCourseIndex23 = 0\n  let rowCourseIndex24 = 0\n  let colCourseIndex24 = 0\n  let rowCourseIndex25 = 0\n  let colCourseIndex25 = 0\n  let rowCourseIndex26 = 0\n  let colCourseIndex26 = 0\n  let rowCourseIndex27 = 0\n  let colCourseIndex27 = 0\n  let rowCourseIndex28 = 0\n  let colCourseIndex28 = 0\n  let rowCourseIndex29 = 0\n  let colCourseIndex29 = 0\n  let rowCourseIndex30 = 0\n  let colCourseIndex30 = 0\n  let rowCourseIndex31 = 0\n  let colCourseIndex31 = 0\n  let rowCourseIndex32 = 0\n  let colCourseIndex32 = 0\n  let rowCourseIndex33 = 0\n  let colCourseIndex33 = 0\n  let rowCourseIndex34 = 0\n  let colCourseIndex34 = 0\n  let rowCourseIndex35 = 0\n  let colCourseIndex35 = 0\n  let rowCourseIndex36 = 0\n  let colCourseIndex36 = 0\n  let rowCourseIndex37 = 0\n  let colCourseIndex37 = 0\n  let rowCourseIndex38 = 0\n  let colCourseIndex38 = 0\n  let rowCourseIndex39 = 0\n  let colCourseIndex39 = 0\n  let rowCourseIndex40 = 0\n  let colCourseIndex40 = 0\n  let rowCourseIndex41 = 0\n  let colCourseIndex41 = 0\n  let rowCourseIndex42 = 0\n  let colCourseIndex42 = 0\n  let rowCourseIndex43 = 0\n  let colCourseIndex43 = 0\n  let rowCourseIndex44 = 0\n  let colCourseIndex44 = 0\n  let rowCourseIndex45 = 0\n  let colCourseIndex45 = 0\n  let rowCourseIndex46 = 0\n  let colCourseIndex46 = 0\n  let rowCourseIndex47 = 0\n  let colCourseIndex47 = 0\n  let rowCourseIndex48 = 0\n  let colCourseIndex48 = 0\n  let rowCourseIndex49 = 0\n  let colCourseIndex49 = 0\n  let rowCourseIndex50 = 0\n  let colCourseIndex50 = 0\n  let rowCourseIndex51 = 0\n  let colCourseIndex51 = 0\n  let rowCourseIndex52 = 0\n  let colCourseIndex52 = 0\n  let rowCourseIndex53 = 0\n  let colCourseIndex53 = 0\n  let rowCourseIndex54 = 0\n  let colCourseIndex54 = 0\n  let rowCourseIndex55 = 0\n  let colCourseIndex55 = 0\n  let rowCourseIndex56 = 0\n  let colCourseIndex56 = 0\n  let rowCourseIndex57 = 0\n  let colCourseIndex57 = 0\n  let rowCourseIndex58 = 0\n  let colCourseIndex58 = 0\n  let rowCourseIndex59 = 0\n  let colCourseIndex59 = 0\n  let rowCourseIndex60 = 0\n  let colCourseIndex60 = 0\n  let rowCourseIndex61 = 0\n  let colCourseIndex61 = 0\n  let rowCourseIndex62 = 0\n  let colCourseIndex62 = 0\n  let rowCourseIndex63 = 0\n  let colCourseIndex63 = 0\n  let rowCourseIndex64 = 0\n  let colCourseIndex64 = 0\n  let rowCourseIndex65 = 0\n  let colCourseIndex65 = 0\n  let rowCourseIndex66 = 0\n  let colCourseIndex66 = 0\n  let rowCourseIndex67 = 0\n  let colCourseIndex67 = 0\n  let rowCourseIndex68 = 0\n  let colCourseIndex68 = 0\n  let rowCourseIndex69 = 0\n  let colCourseIndex69 = 0\n  let rowCourseIndex70 = 0\n  let colCourseIndex70 = 0\n  let rowCourseIndex71 = 0\n  let colCourseIndex71 = 0\n  let rowCourseIndex72 = 0\n  let colCourseIndex72 = 0\n  let rowCourseIndex73 = 0\n  let colCourseIndex73 = 0\n  let rowCourseIndex74 = 0\n  let colCourseIndex74 = 0\n  let rowCourseIndex75 = 0\n  let colCourseIndex75 = 0\n  let rowCourseIndex76 = 0\n  let colCourseIndex76 = 0\n  let rowCourseIndex77 = 0\n  let colCourseIndex77 = 0\n  let rowCourseIndex78 = 0\n  let colCourseIndex78 = 0\n  let rowCourseIndex79 = 0\n  let colCourseIndex79 = 0\n  let rowCourseIndex80 = 0\n  let colCourseIndex80 = 0\n  let rowCourseIndex81 = 0\n  let colCourseIndex81 = 0\n  let rowCourseIndex82 = 0\n  let colCourseIndex82 = 0\n  let rowCourseIndex83 = 0\n  let colCourseIndex83 = 0\n  let rowCourseIndex84 = 0\n  let colCourseIndex84 = 0\n  let rowCourseIndex85 = 0\n  let colCourseIndex85 = 0\n  let rowCourseIndex86 = 0\n  let colCourseIndex86 = 0\n  let rowCourseIndex87 = 0\n  let colCourseIndex87", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string bowed stringed instrument as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function decrypt that takes a string encrypted code as an argument and \n   returns return a string decrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) - 2);\n  }\n  return code;\n};\n\n/*Create a function rotate that takes a string encrypted code as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function decrypt that takes a string encrypted code as an argument and \n   returns return a string decrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function rotate that takes a string encrypted code as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function decrypt that takes a string encrypted code as an argument and \n   returns return a string decrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function rotate that takes a string encrypted code as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function decrypt that takes a string encrypted code as an argument and \n   returns return a string decrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function rotate that takes a string encrypted code as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let code = '';\n  for (let i = 0; i < s.length; i++) {\n    code += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) + 2);\n  }\n  return code;\n};\n\n/*Create a function decrypt that takes a string encrypted code as an argument and \n   returns return a string decrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate beget a list of rolling maximum maximal element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, generate beget a list of rolling maximum maximal element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(0, maxIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling minimum minimal element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  return numbers.slice(0, minIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling sum sum element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 5]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum === numbers[i]) {\n      sumIndex = i;\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling average average element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  let avg = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum === numbers[i]) {\n      sumIndex = i;\n      avg = sum / numbers.length;\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling median median element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 3]\n  */\nconst rollingMedian = (numbers) => {\n  let median = 0;\n  let medianIndex = 0;\n  let sortedNumbers = numbers.sort((a, b) => a - b);\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[sortedNumbers.length / 2]) {\n      medianIndex = i;\n      median = sortedNumbers[i];\n    }\n  }\n  return numbers.slice(0, medianIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling mode mode element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  let mode = 0;\n  let modeIndex = 0;\n  let sortedNumbers = numbers.sort((a, b) => a - b);\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[sortedNumbers.length - 1]) {\n      modeIndex = i;\n      mode = sortedNumbers[i];\n    }\n  }\n  return numbers.slice(0, modeIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling standard deviation standard deviation element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.4142135623730951]\n  */\nconst rollingStd = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  let avg = 0;\n  let std = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum === numbers[i]) {\n      sumIndex = i;\n      avg = sum / numbers.length;\n      std = Math.sqrt(avg * (numbers.length - i));\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling variance variance element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.6666666666666667]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  let avg = 0;\n  let std = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum === numbers[i]) {\n      sumIndex = i;\n      avg = sum / numbers.length;\n      std = Math.sqrt(avg * (numbers.length - i));\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling median median element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 3]\n  */\nconst rollingMedian = (numbers) => {\n  let median = 0;\n  let medianIndex = 0;\n  let sortedNumbers = numbers.sort((a, b) => a - b);\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[sortedNumbers.length / 2]) {\n      medianIndex = i;\n      median = sortedNumbers[i];\n    }\n  }\n  return numbers.slice(0, medianIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling mode mode element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  let mode = 0;\n  let modeIndex = 0;\n  let sortedNumbers = numbers.sort((a, b) => a - b);\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[sortedNumbers.length - 1]) {\n      modeIndex = i;\n      mode = sortedNumbers[i];\n    }\n  }\n  return numbers.slice(0, modeIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling standard deviation standard deviation element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.4142135623730951]\n  */\nconst rollingStd = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  let avg = 0;\n  let std = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum === numbers[i]) {\n      sumIndex = i;\n      avg = sum / numbers.length;\n      std = Math.sqrt(avg * (numbers.length - i));\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling variance variance element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.6666666666666667]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  let avg = 0;\n  let std = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum === numbers[i]) {\n      sumIndex = i;\n      avg = sum / numbers.length;\n      std = Math.sqrt(avg * (numbers.length - i));\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling median median element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 3]\n  */\nconst rollingMedian = (numbers) => {\n  let median = 0;\n  let medianIndex = 0;\n  let sortedNumber", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]\n   if(smallest < secondSmallest) return smallest\n   else return secondSmallest\n }\n\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null\n   const smallest = lst[0]\n   const secondSmallest = lst[1]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split(\" \").filter(w => w.startsWith(\"I \")).length;\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes choose 3 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes choose 3 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 4 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 5 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 6 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 7 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 8 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 9 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 10 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 11 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 12 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n}\n\n/* Create a function that takes choose 13 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowel = vowels[letter];\n    const index = vowels.indexOf(vowel);\n    if (index === -1) {\n      newMessage = newMessage.replace(letter, letters[letters.length - 1]);\n    } else {\n      newMessage = newMessage.replace(letter, letters[index + 1]);\n    }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        let digits = num.toString().split('');\n        let sumOfDigits = digits.reduce((acc, val) => acc + parseInt(val), 0);\n        if (sumOfDigits > max) {\n            max = sumOfDigits;\n        }\n        sum += sumOfDigits;\n    }\n    return sum;\n};\n\n/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        let digits = num.toString().split('');\n        let sumOfDigits = digits.reduce((acc, val) => acc + parseInt(val), 0);\n        if (sumOfDigits > max) {\n            max = sumOfDigits;\n        }\n        sum += sumOfDigits;\n    }\n    return sum;\n};\n\n/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        let digits = num.toString().split('');\n        let sumOfDigits = digits.reduce((acc, val) => acc + parseInt(val), 0);\n        if (sumOfDigits > max) {\n            max = sumOfDigits;\n        }\n        sum += sumOfDigits;\n    }\n    return sum;\n};\n\n/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        let digits = num.toString().split('');\n        let sumOfDigits = digits.reduce((acc, val) => acc + parseInt(val), 0);\n        if (sumOfDigits > max) {\n            max = sumOfDigits;\n        }\n        sum += sumOfDigits;\n    }\n    return sum;\n};\n\n/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        let digits = num.toString().split('');\n        let sumOfDigits = digits.reduce((acc, val) => acc + parseInt(val), 0);\n        if (sumOfDigits > max) {\n            max = sumOfDigits;\n        }\n        sum += sumOfDigits;\n    }\n    return sum;\n};\n\n/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        let digits = num.toString().split('');\n        let sumOfDigits = digits.reduce((acc, val) => acc + parseInt(val), 0);\n        if (sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) return false;\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key.toLowerCase()]) return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) return false;\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key.toLowerCase()]) return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) return false;\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key.toLowerCase()]) return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) return false;\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key.toLowerCase()]) return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) return false;\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key.toLowerCase()]) return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) return false;\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key.toLowerCase()]) return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpToAndDownTo(5) => [2,3]\n  countUpToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownTo(0) => []\n  countUpToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownTo(1) => []\n  countUpToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpToAndDownToAndDownTo(5) => [2,3]\n  countUpToAndDownToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownToAndDownTo(0) => []\n  countUpToAndDownToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownToAndDownTo(1) => []\n  countUpToAndDownToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpToAndDownToAndDownToAndDownTo(5) => [2,3]\n  countUpToAndDownToAndDownToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownToAndDownToAndDownTo(0) => []\n  countUpToAndDownToAndDownToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownToAndDownToAndDownTo(1) => []\n  countUpToAndDownToAndDownToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndDownToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpToAndDownToAndDownToAndDownToAndDownTo(5) => [2,3]\n  countUpToAndDownToAndDownToAndDownToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownToAndDownToAndDownToAndDownTo(0) => []\n  countUpToAndDownToAndDownToAndDownToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownToAndDownToAndDownToAndDownTo(1) => []\n  countUpToAndDownToAndDownToAndDownToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndDownToAndDownToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpToAndDownToAndDownToAndDownToAndDownToAndDownTo(5) => [2,3]\n  countUpToAndDownToAndDownToAndDownToAndDownToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownToAndDownToAndDownToAndDownToAndDownTo(0) => []\n  countUpToAndDownToAndDownToAndDownToAndDownToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownToAndDownToAndDownToAndDownToAndDownTo(1) => []\n  countUpToAndDownToAnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigits2 = b.toString().split('');\n  for (let i = 0; i < unitDigits.length; i++) {\n    product += unitDigits[i] * unitDigits2[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count reckon the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count reckon the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n    if (s[i] === 'B' || s[i] === 'b') {\n      count += 1;\n    }\n    if (s[i] === 'C' || s[i] === 'c') {\n      count += 1;\n    }\n    if (s[i] === 'D' || s[i] === 'd') {\n      count += 1;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      count += 1;\n    }\n    if (s[i] === 'F' || s[i] === 'f') {\n      count += 1;\n    }\n    if (s[i] === 'G' || s[i] === 'g') {\n      count += 1;\n    }\n    if (s[i] === 'H' || s[i] === 'h') {\n      count += 1;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      count += 1;\n    }\n    if (s[i] === 'J' || s[i] === 'j') {\n      count += 1;\n    }\n    if (s[i] === 'K' || s[i] === 'k') {\n      count += 1;\n    }\n    if (s[i] === 'L' || s[i] === 'l') {\n      count += 1;\n    }\n    if (s[i] === 'M' || s[i] ==='m') {\n      count += 1;\n    }\n    if (s[i] === 'N' || s[i] === 'n') {\n      count += 1;\n    }\n    if (s[i] === 'O' || s[i] === 'o') {\n      count += 1;\n    }\n    if (s[i] === 'P' || s[i] === 'p') {\n      count += 1;\n    }\n    if (s[i] === 'Q' || s[i] === 'q') {\n      count += 1;\n    }\n    if (s[i] === 'R' || s[i] === 'r') {\n      count += 1;\n    }\n    if (s[i] === 'S' || s[i] ==='s') {\n      count += 1;\n    }\n    if (s[i] === 'T' || s[i] === 't') {\n      count += 1;\n    }\n    if (s[i] === 'U' || s[i] === 'u') {\n      count += 1;\n    }\n    if (s[i] === 'V' || s[i] === 'v') {\n      count += 1;\n    }\n    if (s[i] === 'W' || s[i] === 'w') {\n      count += 1;\n    }\n    if (s[i] === 'X' || s[i] === 'x') {\n      count += 1;\n    }\n    if (s[i] === 'Y' || s[i] === 'y') {\n      count += 1;\n    }\n    if (s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number of lowercase capital vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n    if (s[i] === 'b' || s[i] === 'B') {\n      count += 1;\n    }\n    if (s[i] === 'c' || s[i] === 'C') {\n      count += 1;\n    }\n    if (s[i] === 'd' || s[i] === 'D') {\n      count += 1;\n    }\n    if (s[i] === 'e' || s[i] === 'E') {\n      count += 1;\n    }\n    if (s[i] === 'f' || s[i] === 'F') {\n      count += 1;\n    }\n    if (s[i] === 'g' || s[i] === 'G') {\n      count += 1;\n    }\n    if (s[i] === 'h' || s[i] === 'H') {\n      count += 1;\n    }\n    if (s[i] === 'i' || s[i] === 'I') {\n      count += 1;\n    }\n    if (s[i] === 'j' || s[i] === 'J') {\n      count += 1;\n    }\n    if (s[i] === 'k' || s[i] === 'K') {\n      count += 1;\n    }\n    if (s[i] === 'l' || s[i] === 'L') {\n      count += 1;\n    }\n    if (s[i] ==='m' || s[i] === 'M') {\n      count += 1;\n    }\n    if (s[i] === 'n' || s[i] === 'N') {\n      count += 1;\n    }\n    if (s[i] === 'o' || s[i] === 'O') {\n      count += 1;\n    }\n    if (s[i] === 'p' || s[i] === 'P') {\n      count += 1;\n    }\n    if (s[i] === 'q' || s[i] === 'Q') {\n      count += 1;\n    }\n    if (s[i] === 'r' || s[i] === 'R') {\n      count += 1;\n    }\n    if (s[i] ==='s' || s[i] === 'S') {\n      count += 1;\n    }\n    if (s[i] === 't' || s[i] === 'T') {\n      count += 1;\n    }\n    if (s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n    if (s[i] === 'v' || s[i] === 'V') {\n      count += 1;\n    }\n    if (s[i] === 'w' || s[i] === 'W') {\n      count += 1;\n    }\n    if (s[i] === 'x' || s[i] === 'X') {\n      count += 1;\n    }\n    if (s[i] === 'y' || s[i] === 'Y') {\n      count += 1;\n    }\n    if (s[i] === 'z' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number of lowercase vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n    if (s[i] === 'b' || s[i] === 'B') {\n      count += 1;\n    }\n    if (s[i] === 'c' || s[i] === 'C') {\n      count += 1;\n    }\n    if (s[i] === 'd' || s[i] === 'D') {\n      count += 1;\n    }\n    if (s[i] === 'e' || s[i] === 'E') {\n      count += 1;\n    }\n    if (s[i] === 'f' || s[i] === 'F') {\n      count += 1;\n    }\n    if (s[i] === 'g' || s[i] === 'G') {\n      count += 1;\n    }\n    if (s[i] === 'h' || s[i] === 'H') {\n      count += 1;\n    }\n    if (s[i] === 'i' || s[i] === 'I') {\n      count += 1;\n    }\n    if (s[i] === 'j' || s[i] === 'J') {\n      count += 1;\n    }\n    if (s[i] === 'k' || s[i] === 'K') {\n      count += 1;\n    }\n    if (s[i] === 'l' || s[i] === 'L') {\n      count += 1;\n    }\n    if (s[i] ==='m' || s[i] === 'M') {\n      count += 1;\n    }\n    if (s[i] === 'n' || s[i] === 'N') {\n      count += 1;\n    }\n    if (s[i] === 'o' || s[i] === 'O') {\n      count += 1;\n    }\n    if (s[i] === 'p' || s[i] === 'P') {\n      count += 1;\n    }\n    if (s[i] === 'q' || s[i] === 'Q') {\n      count += 1;\n    }\n    if (s[i] === 'r' || s[i] === 'R') {\n      count += 1;\n    }\n    if (s[i] ==='s' || s[i] === 'S') {\n      count += 1;\n    }\n    if (s[i] === 't' || s[i] === 'T') {\n      count += 1;\n    }\n    if (s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n    if (s[i] === 'v' || s[i] === 'V') {\n      count += 1;\n    }\n    if (s[i] === 'w' || s[i] === 'W') {\n      count += 1;\n    }\n    if (s[i] === 'x' || ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const integers = Object.keys(integers);\n  const closest = Math.abs(number);\n  const closestIndex = integers.indexOf(closest);\n  return integers[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest float to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestFloat(\"10\")\n  10\n  >>> closestFloat(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestFloat(\"14.5\") should\n  return 15.3 and closestFloat(\"-14.5\") should return -15.3\n  */\nconst closestFloat = (value) => {\n  const number = parseFloat(value);\n  const floats = Object.keys(floats);\n  const closest = Math.abs(number);\n  const closestIndex = floats.indexOf(closest);\n  return floats[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest double to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestDouble(\"10\")\n  10\n  >>> closestDouble(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDouble(\"14.5\") should\n  return 15.3 and closestDouble(\"-14.5\") should return -15.3\n  */\nconst closestDouble = (value) => {\n  const number = parseFloat(value);\n  const doubles = Object.keys(doubles);\n  const closest = Math.abs(number);\n  const closestIndex = doubles.indexOf(closest);\n  return doubles[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest long to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestLong(\"10\")\n  10\n  >>> closestLong(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestLong(\"14.5\") should\n  return 15 and closestLong(\"-14.5\") should return -15\n  */\nconst closestLong = (value) => {\n  const number = parseFloat(value);\n  const longs = Object.keys(longs);\n  const closest = Math.abs(number);\n  const closestIndex = longs.indexOf(closest);\n  return longs[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest double to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestDouble(\"10\")\n  10\n  >>> closestDouble(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDouble(\"14.5\") should\n  return 15.3 and closestDouble(\"-14.5\") should return -15.3\n  */\nconst closestDouble = (value) => {\n  const number = parseFloat(value);\n  const doubles = Object.keys(doubles);\n  const closest = Math.abs(number);\n  const closestIndex = doubles.indexOf(closest);\n  return doubles[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest long to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestLong(\"10\")\n  10\n  >>> closestLong(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestLong(\"14.5\") should\n  return 15 and closestLong(\"-14.5\") should return -15\n  */\nconst closestLong = (value) => {\n  const number = parseFloat(value);\n  const longs = Object.keys(longs);\n  const closest = Math.abs(number);\n  const closestIndex = longs.indexOf(closest);\n  return longs[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest double to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestDouble(\"10\")\n  10\n  >>> closestDouble(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDouble(\"14.5\") should\n  return 15.3 and closestDouble(\"-14.5\") should return -15.3\n  */\nconst closestDouble = (value) => {\n  const number = parseFloat(value);\n  const doubles = Object.keys(doubles);\n  const closest = Math.abs(number);\n  const closestIndex = doubles.indexOf(closest);\n  return doubles[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest long to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestLong(\"10\")\n  10\n  >>> closestLong(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestLong(\"14.5\") should\n  return 15 and closestLong(\"-14.5\") should return -15\n  */\nconst closestLong = (value) => {\n  const number = parseFloat(value);\n  const longs = Object.keys(longs);\n  const closest = Math.abs(number);\n  const closestIndex = longs.indexOf(closest);\n  return longs[closestIndex];\n};\n\n/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest double to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestDouble(\"10\")\n  10\n  >>> closestDouble(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthe", "passed": 0, "run_status": 2}
