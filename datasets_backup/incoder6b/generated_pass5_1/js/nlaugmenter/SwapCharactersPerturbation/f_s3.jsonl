{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, aer any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, aer any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const middleElement = sortedNumbers[Math.floor(sortedNumbers.length / 2)];\n  const isClose = (firstElement, lastElement, middleElement) =>\n    Math.abs(firstElement - middleElement) < threshold &&\n    Math.abs(lastElement - middleElement) < threshold;\n  return isClose(firstElement, lastElement, middleElement);\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicated elements - returns false.\n * If array contains only unique elements - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains only unique elements and at least one element is equal - returns true.\n * If array contains only unique elements and all elements are different - returns false.\n * If array contains only unique elements and all elements are different - returns true.\n * If array contains only unique elements and at least one element is different - returns false.\n * If array contains only unique elements and at least one element is different - returns true.\n * If array contains only unique elements and all elements are equal - returns false.\n * If array contains only unique elements and all elements are equal - returns true.\n * If array contains only unique elements and at least one element is equal - returns false.\n * If array contains ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to thsi function is a string containing multiple groups of sneted parentheses. Your ogal is to\n  sepaarte thsoe group into separate strings and return the list of those.\n  Separate groups rea balanecd (each open brace is properly closed) and not nested withni each other\n  Ingore any spaces in the niput string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thsi function is a string containing multiple groups of sneted parentheses. Your ogal is to\n  sepaarte thsoe group into separate strings and return the list of those.\n  Separate groups rea balanecd (each open brace is properly closed) and not nested withni each other\n  Ingore any spaces in the niput string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n        current_group_open = true;\n      }\n    } else if (char === ')') {\n      if (current_group_open) {\n        current_group.push(char);\n        current_group_open = false;\n        groups.push(current_group);\n        current_group = [];\n      } else {\n        current_group.push(char);\n      }\n    } else {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n      }\n    }\n  }\n  return groups;\n};\n\n/* Given a string containing multiple groups of sneted parentheses, return a list of those groups. Each group\n  is separated by a space and each group contains no nested parentheses.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoNested = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n        current_group_open = true;\n      }\n    } else if (char === ')') {\n      if (current_group_open) {\n        current_group.push(char);\n        current_group_open = false;\n        groups.push(current_group);\n        current_group = [];\n      } else {\n        current_group.push(char);\n      }\n    } else {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n      }\n    }\n  }\n  return groups;\n};\n\n/* Given a string containing multiple groups of sneted parentheses, return a list of those groups. Each group\n  is separated by a space and each group contains no nested parentheses.\n  >>> separateParenGroupsNoNested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoNested2 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n        current_group_open = true;\n      }\n    } else if (char === ')') {\n      if (current_group_open) {\n        current_group.push(char);\n        current_group_open = false;\n        groups.push(current_group);\n        current_group = [];\n      } else {\n        current_group.push(char);\n      }\n    } else {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n      }\n    }\n  }\n  return groups;\n};\n\n/* Given a string containing multiple groups of sneted parentheses, return a list of those groups. Each group\n  is separated by a space and each group contains no nested parentheses.\n  >>> separateParenGroupsNoNested2('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoNested3 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n        current_group_open = true;\n      }\n    } else if (char === ')') {\n      if (current_group_open) {\n        current_group.push(char);\n        current_group_open = false;\n        groups.push(current_group);\n        current_group = [];\n      } else {\n        current_group.push(char);\n      }\n    } else {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n      }\n    }\n  }\n  return groups;\n};\n\n/* Given a string containing multiple groups of sneted parentheses, return a list of those groups. Each group\n  is separated by a space and each group contains no nested parentheses.\n  >>> separateParenGroupsNoNested3('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoNested4 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n        current_group_open = true;\n      }\n    } else if (char === ')') {\n      if (current_group_open) {\n        current_group.push(char);\n        current_group_open = false;\n        groups.push(current_group);\n        current_group = [];\n      } else {\n        current_group.push(char);\n      }\n    } else {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n      }\n    }\n  }\n  return groups;\n};\n\n/* Given a string containing multiple groups of sneted parentheses, return a list of those groups. Each group\n  is separated by a space and each group contains no nested parentheses.\n  >>> separateParenGroupsNoNested4('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoNested5 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n        current_group_open = true;\n      }\n    } else if (char === ')') {\n      if (current_group_open) {\n        current_group.push(char);\n        current_group_open = false;\n        groups.push(current_group);\n        current_group = [];\n      } else {\n        current_group.push(char);\n      }\n    } else {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n      }\n    }\n  }\n  return groups;\n};\n\n/* Given a string containing multiple groups of sneted parentheses, return a list of those groups. Each group\n  is separated by a space and each group contains no nested parentheses.\n  >>> separateParenGroupsNoNested5('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoNested6 = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (current_group_open) {\n        current_group.push(char);\n      } else {\n        current_group = [char];\n        current_group_open = true;\n      }\n    } else if (char === ')') {\n      if (current_group_open) {\n        current_group.push(char);\n        current_group_open = false;\n        groups.push(current_group);\n        current_group = [];\n      } else {\n        current_group.push(char);\n      }\n    } else {\n      if (current_group_open) {\n        current_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palidnroem */\ncosnt isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palidnroem */\ncosnt isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = findLongestPalindrome(string);\n  const longestPalindromeSuffix = longestPalindrome.slice(longestPalindrome.indexOf(string));\n  const longestPalindromePrefix = longestPalindrome.slice(0, longestPalindrome.indexOf(string));\n  const palindrome = longestPalindromePrefix + longestPalindromeSuffix;\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const isPalindrome = isPalindrome(char);\n    if (isPalindrome) {\n      if (longestPalindrome.length < longestPalindromeSuffix.length) {\n        longestPalindrome = char;\n        longestPalindromeSuffix = string.slice(i + 1);\n        longestPalindromePrefix = string.slice(0, i);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const isPalindrome = isPalindrome(char);\n    if (isPalindrome) {\n      if (longestPalindrome.length < longestPalindromeSuffix.length) {\n        longestPalindrome = char;\n        longestPalindromeSuffix = string.slice(i + 1);\n        longestPalindromePrefix = string.slice(0, i);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const isPalindrome = isPalindrome(char);\n    if (isPalindrome) {\n      if (longestPalindrome.length < longestPalindromeSuffix.length) {\n        longestPalindrome = char;\n        longestPalindromeSuffix = string.slice(i + 1);\n        longestPalindromePrefix = string.slice(0, i);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const isPalindrome = isPalindrome(char);\n    if (isPalindrome) {\n      if (longestPalindrome.length < longestPalindromeSuffix.length) {\n        longestPalindrome = char;\n        longestPalindromeSuffix = string.slice(i + 1);\n        longestPalindromePrefix = string.slice(0, i);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const isPalindrome = isPalindrome(char);\n    if (isPalindrome) {\n      if (longestPalindrome.length < longestPalindromeSuffix.length) {\n        longestPalindrome = char;\n        longestPalindromeSuffix = string.slice(i + 1);\n        longestPalindromePrefix = string.slice(0, i);\n      }\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes tow opsitive numbers x and y and returns teh\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This function takes tow opsitive numbers x and y and returns teh\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2), 2);\n};\n\n/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itneg", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (result.indexOf(x[i]) === -1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreas", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return result;\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 1){\n      continue;\n    }\n    \n    if(arr[i] > 9){\n      continue;\n    }\n    \n    result.push(name[arr[i] - 1]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return result;\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 1){\n      continue;\n    }\n    \n    if(arr[i] > 9){\n      continue;\n    }\n    \n    result.push(name2[arr[i] - 1]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return result;\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 1){\n      continue;\n    }\n    \n    if(arr[i] > 9){\n      continue;\n    }\n    \n    result.push(name3[arr[i] - 1]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return result;\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 1){\n      continue;\n    }\n    \n    if(arr[i] > 9){\n      continue;\n    }\n    \n    result.push(name4[arr[i] - 1]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength5 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return result;\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 1){\n      continue;\n    }\n    \n    if(arr[i] > 9){\n      continue;\n    }\n    \n    result.push(name5[arr[i] - 1]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the factorial of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is hte multilpiaction of the nmubesr from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the factorial of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is hte multilpiaction of the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * factorial(i));\n  }\n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  {\n    name: \"factorial of 0\",\n    fn: factorial,\n    expected: 0,\n  },\n  {\n    name: \"factorial of 1\",\n    fn: factorial,\n    expected: 1,\n  },\n  {\n    name: \"factorial of 2\",\n    fn: factorial,\n    expected: 2,\n  },\n  {\n    name: \"factorial of 3\",\n    fn: factorial,\n    expected: 6,\n  },\n  {\n    name: \"factorial of 4\",\n    fn: factorial,\n    expected: 24,\n  },\n  {\n    name: \"factorial of 5\",\n    fn: factorial,\n    expected: 150,\n  },\n];\n\ntests.forEach((test) => {\n  test(test.name, () => {\n    expect(test.fn(5)).toEqual(test.expected);\n  });\n});\n\n// TESTS FOR RECURSIVE FUNCTIONS\n\n// factorial of 0\nconst factorial0 = (n) => {\n  if (n === 0) return 1;\n  return n * factorial0(n - 1);\n};\n\n// factorial of 1\nconst factorial1 = (n) => {\n  if (n === 1) return 1;\n  return n * factorial1(n - 1);\n};\n\n// factorial of 2\nconst factorial2 = (n) => {\n  if (n === 2) return 2;\n  return n * factorial2(n - 1);\n};\n\n// factorial of 3\nconst factorial3 = (n) => {\n  if (n === 3) return 3;\n  return n * factorial3(n - 1);\n};\n\n// factorial of 4\nconst factorial4 = (n) => {\n  if (n === 4) return 4;\n  return n * factorial4(n - 1);\n};\n\n// factorial of 5\nconst factorial5 = (n) => {\n  if (n === 5) return 5;\n  return n * factorial5(n - 1);\n};\n\n// factorial of 6\nconst factorial6 = (n) => {\n  if (n === 6) return 6;\n  return n * factorial6(n - 1);\n};\n\n// factorial of 7\nconst factorial7 = (n) => {\n  if (n === 7) return 7;\n  return n * factorial7(n - 1);\n};\n\n// factorial of 8\nconst factorial8 = (n) => {\n  if (n === 8) return 8;\n  return n * factorial8(n - 1);\n};\n\n// factorial of 9\nconst factorial9 = (n) => {\n  if (n === 9) return 9;\n  return n * factorial9(n - 1);\n};\n\n// factorial of 10\nconst factorial10 = (n) => {\n  if (n === 10) return 10;\n  return n * factorial10(n - 1);\n};\n\n// factorial of 11\nconst factorial11 = (n) => {\n  if (n === 11) return 11;\n  return n * factorial11(n - 1);\n};\n\n// factorial of 12\nconst factorial12 = (n) => {\n  if (n === 12) return 12;\n  return n * factorial12(n - 1);\n};\n\n// factorial of 13\nconst factorial13 = (n) => {\n  if (n === 13) return 13;\n  return n * factorial13(n - 1);\n};\n\n// factorial of 14\nconst factorial14 = (n) => {\n  if (n === 14) return 14;\n  return n * factorial14(n - 1);\n};\n\n// factorial of 15\nconst factorial15 = (n) => {\n  if (n === 15) return 15;\n  return n * factorial15(n - 1);\n};\n\n// factorial of 16\nconst factorial16 = (n) => {\n  if (n === 16) return 16;\n  return n * factorial16(n - 1);\n};\n\n// factorial of 17\nconst factorial17 = (n) => {\n  if (n === 17) return 17;\n  return n * factorial17(n - 1);\n};\n\n// factorial of 18\nconst factorial18 = (n) => {\n  if (n === 18) return 18;\n  return n * factorial18(n - 1);\n};\n\n// factorial of 19\nconst factorial19 = (n) => {\n  if (n === 19) return 19;\n  return n * factorial19(n - 1);\n};\n\n// factorial of 20\nconst factorial20 = (n) => {\n  if (n === 20) return 20;\n  return n * factorial20(n - 1);\n};\n\n// factorial of 21\nconst factorial21 = (n) => {\n  if (n === 21) return 21;\n  return n * factorial21(n - 1);\n};\n\n// factorial of 22\nconst factorial22 = (n) => {\n  if (n === 22) return 22;\n  return n * factorial22(n - 1);\n};\n\n// factorial of 23\nconst factorial23 = (n) => {\n  if (n === 23) return 23;\n  return n * factorial23(n - 1);\n};\n\n// factorial of 24\nconst factorial24 = (n) => {\n  if (n === 24) return 24;\n  return n * factorial24(n - 1);\n};\n\n// factorial of 25\nconst factorial25 = (n) => {\n  if (n === 25) return 25;\n  return n * factorial25(n - 1);\n};\n\n// factorial of 26\nconst factorial26 = (n) => {\n  if (n === 26) return 26;\n  return n * factorial26(n - 1);\n};\n\n// factorial of 27\nconst factorial27 = (n) => {\n  if (n === 27) return 27;\n  return n * factorial27(n - 1);\n};\n\n// factorial of 28\nconst factorial28 = (n) => {\n  if (n === 28) return 28;\n  return n * factorial28(n - 1);\n};\n\n// factorial of 29\nconst factorial29 = (n) => {\n  if (n === 29) return 29;\n  return n * factorial29(n - 1);\n};\n\n// factorial of 30\nconst factorial30 = (n) => {\n  if (n === 30) return 30;\n  return n * factorial30(n - 1);\n};\n\n// factorial of 31\nconst factorial31 = (n) => {\n  if (n === 31) return 31;\n  return n * factorial31(n - 1);\n};\n\n// factorial of 32\nconst factorial32 = (n) => {\n  if (n === 32) return 32;\n  return n * factorial32(n - 1);\n};\n\n// factorial of 33\nconst factorial33 = (n) => {\n  if (n === 33) return 33;\n  return n * factorial33(n - 1);\n};\n\n// factorial of 34\nconst factorial34 = (n) => {\n  if (n === 34) return 34;\n  return n * factorial34(n - 1);\n};\n\n// factorial of 35\nconst factorial35 = (n) => {\n  if (n === 35) return 35;\n  return n * factorial35(n - 1);\n};\n\n// factorial of 36\nconst factorial36 = (n) => {\n  if (n === 36) return 36;\n  return n * factorial36(n - 1);\n};\n\n// factorial of 37\nconst factorial37 = (n) => {\n  if (n === 37) return 37;\n  return n * factorial37(n - 1);\n};\n\n// factorial of 38\nconst factorial38 = (n) => {\n  if (n === 38) return 38;\n  return n * factorial38", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), niclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), niclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of even\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even integer palindromes respectively.\n  */\nconst evenPalindrome = (n) => {\n  const evenPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    }\n  }\n  return evenPalindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of odd integer palindromes respectively.\n  */\nconst oddPalindrome = (n) => {\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (oddPalindrome === oddPalindrome) {\n      oddPalindromes.push(i);\n    }\n  }\n  return oddPalindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of even\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even integer palindromes respectively.\n  */\nconst evenPalindrome = (n) => {\n  const evenPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    }\n  }\n  return evenPalindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of odd integer palindromes respectively.\n  */\nconst oddPalindrome = (n) => {\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (oddPalindrome === oddPalindrome) {\n      oddPalindromes.push(i);\n    }\n  }\n  return oddPalindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of even\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even integer palindromes respectively.\n  */\nconst evenPalindrome = (n) => {\n  const evenPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    }\n  }\n  return evenPalindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function sumDigits which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits([]) == 0\n  >>> sumDigits([-1, 11, -11]) == -1\n  >>> sumDigits([1, 1, 2]) == 3\n  */\nconst sumDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits2 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits2([]) == 0\n  >>> sumDigits2([-1, 11, -11]) == -1\n  >>> sumDigits2([1, 1, 2]) == 3\n  */\nconst sumDigits2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += Math.abs(arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits3 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits3([]) == 0\n  >>> sumDigits3([-1, 11, -11]) == -1\n  >>> sumDigits3([1, 1, 2]) == 3\n  */\nconst sumDigits3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits4 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits4([]) == 0\n  >>> sumDigits4([-1, 11, -11]) == -1\n  >>> sumDigits4([1, 1, 2]) == 3\n  */\nconst sumDigits4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits5 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits5([]) == 0\n  >>> sumDigits5([-1, 11, -11]) == -1\n  >>> sumDigits5([1, 1, 2]) == 3\n  */\nconst sumDigits5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits6 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits6([]) == 0\n  >>> sumDigits6([-1, 11, -11]) == -1\n  >>> sumDigits6([1, 1, 2]) == 3\n  */\nconst sumDigits6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits7 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits7([]) == 0\n  >>> sumDigits7([-1, 11, -11]) == -1\n  >>> sumDigits7([1, 1, 2]) == 3\n  */\nconst sumDigits7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits8 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits8([]) == 0\n  >>> sumDigits8([-1, 11, -11]) == -1\n  >>> sumDigits8([1, 1, 2]) == 3\n  */\nconst sumDigits8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits9 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits9([]) == 0\n  >>> sumDigits9([-1, 11, -11]) == -1\n  >>> sumDigits9([1, 1, 2]) == 3\n  */\nconst sumDigits9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits10 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits10([]) == 0\n  >>> sumDigits10([-1, 11, -11]) == -1\n  >>> sumDigits10([1, 1, 2]) == 3\n  */\nconst sumDigits10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits11 which takes an array of integers adn returns\n  the sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> sumDigits11([]) == 0\n  >>> sumDigits11([-1, 11, -11]) == -1\n  >>> sumDigits11([1, 1, 2]) == 3\n  */\nconst sumDigits11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integesr arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordeedr. Your task is to determine if\n  it is possilbe to get an array sorted in non-cdereasing order by prefomring \n  the following operation on hte given array:\n      You are allowed to perform rigth shift operatino any number of times.\n  \n  One right shift operation means hsfiting all eleemnts of the arrya by one\n  position in the irght direction. The last eelment of the arary will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the soretd array by performing the above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integesr arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordeedr. Your task is to determine if\n  it is possilbe to get an array sorted in non-cdereasing order by prefomring \n  the following operation on hte given array:\n      You are allowed to perform rigth shift operatino any number of times.\n  \n  One right shift operation means hsfiting all eleemnts of the arrya by one\n  position in the irght direction. The last eelment of the arary will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the soretd array by performing the above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let count = 0;\n  let flag = false;\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 1]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 1]){\n        arr[i] = arr[i + 1];\n        arr[i + 1] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 2]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 2]){\n        arr[i] = arr[i + 2];\n        arr[i + 2] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 3]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 3]){\n        arr[i] = arr[i + 3];\n        arr[i + 3] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 4]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 4]){\n        arr[i] = arr[i + 4];\n        arr[i + 4] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 5]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 5]){\n        arr[i] = arr[i + 5];\n        arr[i + 5] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 6]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 6]){\n        arr[i] = arr[i + 6];\n        arr[i + 6] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 7]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 7]){\n        arr[i] = arr[i + 7];\n        arr[i + 7] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 8]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 8]){\n        arr[i] = arr[i + 8];\n        arr[i + 8] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 9]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 9]){\n        arr[i] = arr[i + 9];\n        arr[i + 9] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 10]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 10]){\n        arr[i] = arr[i + 10];\n        arr[i + 10] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 11]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 11]){\n        arr[i] = arr[i + 11];\n        arr[i + 11] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 12]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 12]){\n        arr[i] = arr[i + 12];\n        arr[i + 12] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 13]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 13]){\n        arr[i] = arr[i + 13];\n        arr[i + 13] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 14]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 14]){\n        arr[i] = arr[i + 14];\n        arr[i + 14] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 15]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 15]){\n        arr[i] = arr[i + 15];\n        arr[i + 15] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 16]){\n      flag = true;\n      break;\n    }\n  }\n  \n  if(flag){\n    for(let i = 0; i < n; i++){\n      if(arr[i] > arr[i + 16]){\n        arr[i] = arr[i + 16];\n        arr[i + 16] = arr[i];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    if(arr[i] > arr[i + 17]){\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are tow strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input are tow strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/**\n * Convert a string to an integer with base 10.\n * If base is undefined or null, then treat base as 10.\n * If base is greater than 10, then return NaN\n * If base is less than 10, then return 0\n * If base is between 10 and 36, then return NaN\n * If base is between 36 and 64, then return 0\n * If base is between 64 and 256, then return NaN\n * If base is between 256 and 512, return 0\n * If base is between 512 and 1024, return NaN\n * If base is between 1024 and 4096, return 0\n * If base is between 4096 and 8192, return NaN\n * If base is between 8192 and 16384, return 0\n * If base is between 16384 and 32768, return NaN\n * If base is between 32768 and 65536, return 0\n * If base is between 65536 and 131072, return NaN\n * If base is between 131072 and 262144, return 0\n * If base is between 262144 and 524288, return NaN\n * If base is between 524288 and 1048576, return 0\n * If base is between 1048576 and 2097152, return NaN\n * If base is between 2097152 and 4194304, return 0\n * If base is between 4194304 and 8388608, return NaN\n * If base is between 8388608 and 16777216, return 0\n * If base is between 16777216 and 33554432, return NaN\n * If base is between 33554432 and 67108864, return 0\n * If base is between 67108864 and 134217728, return NaN\n * If base is between 134217728 and 268435456, return 0\n * If base is between 268435456 and 536870912, return NaN\n * If base is between 536870912 and 1073741824, return 0\n * If base is between 1073741824 and 2147483648, return NaN\n * If base is between 2147483648 and 4294967296, return 0\n * If base is between 4294967296 and 8589934592, return NaN\n * If base is between 8589934592 and 17179869184, return 0\n * If base is between 17179869184 and 34359738368, return NaN\n * If base is between 34359738368 and 68719476736, return 0\n * If base is between 68719476736 and 137438953472, return NaN\n * If base is between 137438953472\n * and 274877906944, return 0\n * If base is between 274877906944 and 549755813888, return NaN\n * If base is between 549755813888 and 1099511627776, return 0\n * If base is between 1099511627776 and 17592186044416, return NaN\n * If base is between 17592186044416 and 3421197648032, return 0\n * If base is between 3421197648032 and 70368744177664, return NaN\n * If base is between 70368744177664 and 1374389534720, return 0\n * If base is between 1374389534720 and 274877906944, return NaN\n * If base is between 274877906944 and 549755813888, return 0\n * If base is between 549755813888 and 1099511627776, return NaN\n * If base is between 1099511627776 and 17592186044416, return 0\n * If base is between 17592186044416 and 3421197648032, return NaN\n * If base is between 3421197648032 and 70368744177664, return 0\n * If base is between 70368744177664 and 1374389534720, return NaN\n * If base is between 1374389534720 and 274877906944, return 0\n * If base is between 274877906944 and 549755813888, return NaN\n * If base is between 549755813888 and 1099511627776, return 0\n * If base is between 1099511627776 and 17592186044416, return NaN\n * If base is between 17592186044416 and 3421197648032, return 0\n * If base is between 3421197648032 and 70368744177664, return NaN\n * If base is between 70368744177664 and 1374389534720, return 0\n * If base is between 1374389534720 and 274877906944, return NaN\n * If base is between 274877906944 and 549755813888, return 0\n * If base is between 549755813888 and 1099511627776, return NaN\n * If base is between 1099511627776 and 17592186044416, return 0\n * If base is between 17592186044416 and 3421197648032, return NaN\n * If base is between 3421197648032 and 70368744177664, return 0\n * If base is between 70368744177664 and 1374389534720, return NaN\n * If base is between 1374389534720 and 274877906944, return 0\n * If base is between 274877906944 and 549755813888, return NaN\n * If base is between 549755813888 and 1099511627776, return 0\n * If base is between 1099511627776 and 17592186044416, return NaN\n * If base is between 17592186044416 and 3421197648032, return 0\n * If base is between 3421197648032 and 70368744177664, return NaN\n * If base is between 70368744177664 and 1374389534720, return 0\n * If base is between 1374389534720 and 274877906944, return NaN\n * If base is between 274877906944 and 549755813888, return 0\n * If base is between 549755813888 and 1099511627776, return NaN\n * If base is between 1099511627776 and 17592186044416, return 0\n * If base is between 17592186044416 and 3421197648032, return NaN\n * If base is between 3421197648032 and 70368744177664, return 0\n * If base is between 70368744177664 and 1374389534720, return NaN\n * If base is between 1374389534720 and 274877906944, return 0\n * If base is between 274877906944 and 549755813888, return ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only even numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only even numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length && odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  let evenIndex = even.findIndex(x => x === lst1[0]);\n  let oddIndex = odd.findIndex(x => x === lst2[0]);\n  if (evenIndex === -1 && oddIndex === -1) {\n    return \"NO\";\n  }\n  if (evenIndex === -1 && oddIndex!== -1) {\n    even.splice(oddIndex, 1);\n    odd.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex === -1) {\n    even.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex!== -1) {\n    even.splice(evenIndex, 1);\n    odd.splice(oddIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n};\n\n/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only odd numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOdd = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length && odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  let evenIndex = even.findIndex(x => x === lst1[0]);\n  let oddIndex = odd.findIndex(x => x === lst2[0]);\n  if (evenIndex === -1 && oddIndex === -1) {\n    return \"NO\";\n  }\n  if (evenIndex === -1 && oddIndex!== -1) {\n    even.splice(oddIndex, 1);\n    odd.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex === -1) {\n    even.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex!== -1) {\n    even.splice(evenIndex, 1);\n    odd.splice(oddIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n};\n\n/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only even numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeEven = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length && odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  let evenIndex = even.findIndex(x => x === lst1[0]);\n  let oddIndex = odd.findIndex(x => x === lst2[0]);\n  if (evenIndex === -1 && oddIndex === -1) {\n    return \"NO\";\n  }\n  if (evenIndex === -1 && oddIndex!== -1) {\n    even.splice(oddIndex, 1);\n    odd.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex === -1) {\n    even.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex!== -1) {\n    even.splice(evenIndex, 1);\n    odd.splice(oddIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n};\n\n/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only odd numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOddEven = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length && odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  let evenIndex = even.findIndex(x => x === lst1[0]);\n  let oddIndex = odd.findIndex(x => x === lst2[0]);\n  if (evenIndex === -1 && oddIndex === -1) {\n    return \"NO\";\n  }\n  if (evenIndex === -1 && oddIndex!== -1) {\n    even.splice(oddIndex, 1);\n    odd.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex === -1) {\n    even.splice(evenIndex, 1);\n    even.push(lst1[0]);\n    odd.push(lst2[0]);\n    return \"YES\";\n  }\n  if (evenIndex!== -1 && oddIndex!== -1) {\n    even.splice(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const tests = test.split(' ');\n  for (let i = 0; i < tests.length; i++) {\n    const letter = tests[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strnigs s and c, you have to deleted all the chaarcters in s that are equal to any character in c\n  then check if hte result stirng is palindrome.\n  A string is called palidnrome if it reads the same backward as forwrad.\n  You sholud return a tuple containing the result string nad true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strnigs s and c, you have to deleted all the chaarcters in s that are equal to any character in c\n  then check if hte result stirng is palindrome.\n  A string is called palidnrome if it reads the same backward as forwrad.\n  You sholud return a tuple containing the result string nad true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i)\n      s = s.substr(1)\n    } else {\n      result += s.charAt(i)\n    }\n  }\n  return [result, s.toString() === result]\n}\n\n/*Task\n  You are given a string s and a number k.\n  You have to delete k characters from string s.\n  You sholud return a string that is the result of deleting k characters from s.\n  Example\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abcde\"\n  For s = \"abcde\", k = 3, the result should be \"abc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of odd elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of odd digtis in the i'th tsrgin of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of odd elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of odd digtis in the i'th tsrgin of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = lst[i].match(/\\d/g).length;\n    oddCountArr.push(oddCount);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = lst[i].match(/\\d/g).length;\n    evenCountArr.push(evenCount);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = lst[i].match(/\\d/g).length;\n    evenCountArr.push(evenCount);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = lst[i].match(/\\d/g).length;\n    evenCountArr.push(evenCount);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = lst[i].match(/\\d/g).length;\n    evenCountArr.push(evenCount);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = lst[i].match(/\\d/g).length;\n    evenCountArr.push(evenCount);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = lst[i].match(/\\d/g).length;\n    evenCountArr.push(evenCount);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given na array of integers nums, nfid the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given na array of integers nums, nfid the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given a non-empty array of integers nums, return the sum of the elements in\n  the array, excluding the first element that does not equal zero.\n  Example\n  sumExceptFirst([1, 2, 3]) == 6\n  sumExceptFirst([-1, -2, -3]) == -5\n  */\nconst sumExceptFirst = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0) {\n      sum += nums[i];\n    } else {\n      sum += nums[i] - nums[i - 1];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the first element that does not equal zero.\n  Example\n  removeFirst([1, 2, 3]) == [1, 2]\n  removeFirst([-1, -2, -3]) == [-2, -3]\n  */\nconst removeFirst = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== 0) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the last (length - 1) element that does\n  not equal zero.\n  Example\n  removeLast([1, 2, 3]) == [1, 2, 3]\n  removeLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 1) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the second last element that does\n  not equal zero.\n  Example\n  removeSecondLast([1, 2, 3]) == [1, 2, 3]\n  removeSecondLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeSecondLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 2) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the third last element that does\n  not equal zero.\n  Example\n  removeThirdLast([1, 2, 3]) == [1, 2, 3]\n  removeThirdLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeThirdLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 3) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the fourth last element that does\n  not equal zero.\n  Example\n  removeFourthLast([1, 2, 3]) == [1, 2, 3]\n  removeFourthLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeFourthLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 4) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the fifth last element that does\n  not equal zero.\n  Example\n  removeFifthLast([1, 2, 3]) == [1, 2, 3]\n  removeFifthLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeFifthLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 5) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the sixth last element that does\n  not equal zero.\n  Example\n  removeSixthLast([1, 2, 3]) == [1, 2, 3]\n  removeSixthLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeSixthLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 6) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the seventh last element that does\n  not equal zero.\n  Example\n  removeSeventhLast([1, 2, 3]) == [1, 2, 3]\n  removeSeventhLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeSeventhLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 7) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the eighth last element that does\n  not equal zero.\n  Example\n  removeEighthLast([1, 2, 3]) == [1, 2, 3]\n  removeEighthLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeEighthLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 8) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the ninth last element that does\n  not equal zero.\n  Example\n  removeNinthLast([1, 2, 3]) == [1, 2, 3]\n  removeNinthLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeNinthLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 9) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the tenth last element that does\n  not equal zero.\n  Example\n  removeTenthLast([1, 2, 3]) == [1, 2, 3]\n  removeTenthLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeTenthLast = (nums) => {\n  let newArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i!== nums.length - 10) {\n      newArray.push(nums[i]);\n    }\n  }\n  return newArray;\n};\n\n/*\n  Given a non-empty array of integers nums, return a new array containing the\n  elements in the original array except the eleventh last element that does\n  not equal zero.\n  Example\n  removeEleventhLast([1, 2, 3]) == [1, 2, 3]\n  removeEleventhLast([-1, -2, -3]) == [-1, -2, -3]\n  */\nconst removeEleventh", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah rwo represents a signle well,\n  and each 1 in a row represetns a single unit of water.\n  Each well has a corresponding bucket that acn be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to emtpy the wells.\n  Outptu the number fo times you need ot lwore the bukcets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Ecah rwo represents a signle well,\n  and each 1 in a row represetns a single unit of water.\n  Each well has a corresponding bucket that acn be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to emtpy the wells.\n  Outptu the number fo times you need ot lwore the bukcets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill2 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill3 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill4 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill5 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill6 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill7 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill8 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill9 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill10 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill11 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill12 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill13 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill14 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill15 = (grid, capacity) => {\n  const n = grid.length;\n  const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary represnetation in ascending order.\n  For similar unmber of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary represnetation in ascending order.\n  For similar unmber of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  // Write your code here\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n};\n\n// Test cases\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nWhile this code may provide a solution to the question, it's better to add context as to why/how it works. This can help future users learn and eventually apply that knowledge to their own code. You are also likely to have positive feedback/upvotes from users, when the code is explained.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting |>\n<| a |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);\n  });\n  return sortedArr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));</code>\n<|/ a tags=javascript,sorting |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n<code>\nfunction sortArray(arr) {\n  let countOnes = arr.reduce((acc, cur) => acc + cur, 0);\n  let sortedArr = arr.sort((a, b) => {\n    if (countOnes === 0) {\n      return a - b;\n    }\n    if (countOnes === 1) {\n      return a.localeCompare(b);\n    }\n    return countOnes - a.localeCompare(b);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  s = s.toLowerCase();\n  if (s.length === 0) {\n    return words;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      words.push(s.substr(i, n));\n    }\n  }\n  return words;\n};\n\n/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  s = s.toLowerCase();\n  if (s.length === 0) {\n    return words;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        words.push(s.substr(i, n));\n      }\n    }\n  }\n  return words;\n};\n\n/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  s = s.toLowerCase();\n  if (s.length === 0) {\n    return words;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        words.push(s.substr(i, n));\n      }\n    }\n  }\n  return words;\n};\n\n/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  s = s.toLowerCase();\n  if (s.length === 0) {\n    return words;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        words.push(s.substr(i, n));\n      }\n    }\n  }\n  return words;\n};\n\n/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  s = s.toLowerCase();\n  if (s.length === 0) {\n    return words;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        words.push(s.substr(i, n));\n      }\n    }\n  }\n  return words;\n};\n\n/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  s = s.toLowerCase();\n  if (s.length === 0) {\n    return words;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You rae given a word. Your task is to find the closets vowel that stands between \n  two consonanst from the right side of the word (csae sensitive).\n  \n  Vowlse in the beginning and ending odesn't count. Rteurn empty string if you iddn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contanis English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You rae given a word. Your task is to find the closets vowel that stands between \n  two consonanst from the right side of the word (csae sensitive).\n  \n  Vowlse in the beginning and ending odesn't count. Rteurn empty string if you iddn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contanis English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountInWord = vowels.filter(v => word.includes(v));\n  let vowelsCountInWordCount = vowelsCountInWord.length;\n  let vowelsCountInWordCountInWord = vowelsCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCount = vowelsCountInWordCountInWord.length;\n  let vowelsCountInWordCountInWordCountInWord = vowelsCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCount = vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord.filter(v => word.includes(v));\n  let vowelsCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWordCountInWord", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let result = 'No';\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    }\n    i++;\n  }\n  if (open === close) {\n    result = 'Yes';\n  }\n  return result;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let result = 'No';\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    }\n    i++;\n  }\n  if (open === close) {\n    result = 'Yes';\n  }\n  return result;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let result = 'No';\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    }\n    i++;\n  }\n  if (open === close) {\n    result = 'Yes';\n  }\n  return result;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let result = 'No';\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    }\n    i++;\n  }\n  if (open === close) {\n    result = 'Yes';\n  }\n  return result;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let result = 'No';\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    }\n    i++;\n  }\n  if (open === close) {\n    result = 'Yes';\n  }\n  return result;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let result = 'No';\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    }\n    i++;\n  }\n  if (open === close) {\n    result = 'Yes';\n  }\n  return result;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest noe. Return the fisrt one in case of multpile\n  strings of the smae lnegth. Return null in case the niput list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest noe. Return the fisrt one in case of multpile\n  strings of the smae lnegth. Return null in case the niput list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n\n  return longest\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy = (number, divisor) => {\n  return number % divisor === 0\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy2 = (n1, n2) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy3 = (n1, n2, n3) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy4 = (n1, n2, n3, n4) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy5 = (n1, n2, n3, n4, n5) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy6 = (n1, n2, n3, n4, n5, n6) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy7 = (n1, n2, n3, n4, n5, n6, n7) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n7) && isDivisibleBy(n7, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy8 = (n1, n2, n3, n4, n5, n6, n7, n8) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n7) && isDivisibleBy(n7, n8) && isDivisibleBy(n8, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy9 = (n1, n2, n3, n4, n5, n6, n7, n8, n9) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n7) && isDivisibleBy(n7, n8) && isDivisibleBy(n8, n9) && isDivisibleBy(n9, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy10 = (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n7) && isDivisibleBy(n7, n8) && isDivisibleBy(n8, n9) && isDivisibleBy(n9, n10) && isDivisibleBy(n10, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy11 = (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n7) && isDivisibleBy(n7, n8) && isDivisibleBy(n8, n9) && isDivisibleBy(n9, n10) && isDivisibleBy(n10, n11) && isDivisibleBy(n11, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy12 = (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n7) && isDivisibleBy(n7, n8) && isDivisibleBy(n8, n9) && isDivisibleBy(n9, n10) && isDivisibleBy(n10, n11) && isDivisibleBy(n11, n12) && isDivisibleBy(n12, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy13 = (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(n6, n7) && isDivisibleBy(n7, n8) && isDivisibleBy(n8, n9) && isDivisibleBy(n9, n10) && isDivisibleBy(n10, n11) && isDivisibleBy(n11, n12) && isDivisibleBy(n12, n13) && isDivisibleBy(n13, n1)\n}\n\n/* Return true if a number is divisible by another number */\nconst isDivisibleBy14 = (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14) => {\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n3) && isDivisibleBy(n3, n4) && isDivisibleBy(n4, n5) && isDivisibleBy(n5, n6) && isDivisibleBy(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of itnegers and a positive integer k, return a sorted list \n  of length k with the maximum k unmbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of itnegers and a positive integer k, return a sorted list \n  of length k with the maximum k unmbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given an array arr of integers, return a new array with the largest number \n  in it repeated k times.\n\n  Example 1:\n\n      Input: arr = [1, 3, 5]\n      Output: [1, 1, 2, 2, 3, 3, 4, 4, 5]\n\n  Example 2:\n\n      Input: arr = [1, 3, 2], k = 2\n      Output: [1, 1, 2, 2, 3, 3]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ arr.length.\n      2. If k is too large, then you may not use the same element twice.\n      3. Your function should run in O(n) time and uses constant space.\n*/\nconst largestRepeatedNumber = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] === max) {\n        continue;\n      }\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    for (let j = 0; j < k; j++) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nexport { largestRepeatedNumber };\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n                  3\n         / \\\n        9  20\n       /  \\\n      15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n*/\nconst levelOrder = (root) => {\n  const result = [];\n  const queue = [root];\n  while (queue.length) {\n    const size = queue.length;\n    for (let i = 0; i < size; i++) {\n      const node = queue.shift();\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n      result.push(node.val);\n    }\n  }\n  return result;\n};\n\nexport { levelOrder };\n\n/*\n  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /  \\\n      15   7\nreturn its zigzag level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n*/\nconst zigzagLevelOrder = (root) => {\n  const result = [];\n  const queue = [root];\n  while (queue.length) {\n    const size = queue.length;\n    for (let i = 0; i < size; i++) {\n      const node = queue.shift();\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n      result.push([node.val, node.val]);\n    }\n  }\n  return result;\n};\n\nexport { zigzagLevelOrder };\n\n/*\n  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /  \\\n      15   7\nreturn its zigzag level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n*/\nconst zigzagLevelOrder2 = (root) => {\n  const result = [];\n  const queue = [root];\n  while (queue.length) {\n    const size = queue.length;\n    for (let i = 0; i < size; i++) {\n      const node = queue.shift();\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n      result.push([node.val, node.val]);\n    }\n  }\n  return result;\n};\n\nexport { zigzagLevelOrder2 };\n\n/*\n  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /  \\\n      15   7\nreturn its zigzag level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n*/\nconst zigzagLevelOrder3 = (root) => {\n  const result = [];\n  const queue = [root];\n  while (queue.length) {\n    const size = queue.length;\n    for (let i = 0; i < size; i++) {\n      const node = queue.shift();\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n      result.push([node.val, node.val]);\n    }\n  }\n  return result;\n};\n\nexport { zigzagLevelOrder3 };\n\n/*\n  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /  \\\n      15   7\nreturn its zigzag level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n*/\nconst zigzagLevelOrder4 = (root) => {\n  const result = [];\n  const queue = [root];\n  while (queue.length) {\n    const size = queue.length;\n    for (let i = 0; i < size; i++) {\n      const node = queue.shift();\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n      result.push([node.val, node.val]);\n    }\n  }\n  return result;\n};\n\nexport { zigzagLevelOrder4 };\n\n/*\n  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /  \\\n      15   7\nreturn its zigzag level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n*/\nconst zig", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givne a non-empty array of integres arr and an intgeer k, return\n  the sum of the elements with at most two idgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givne a non-empty array of integres arr and an intgeer k, return\n  the sum of the elements with at most two idgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [1,2,3,4,5]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortArray = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst reverseSortArray = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.reverse();\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [1,2,3,4,5]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray2 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray3 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray4 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray5 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray6 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray7 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray8 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray9 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  return newArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array that\n  contains all elements from arr in sorted order and in reverse sorted order.\n\n  Example:\n\n      Input: arr = [1,3,5]\n      Output: [5,4,3,2,1]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n  */\nconst sortAndReverseSortArray10 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gievn a positive inetger n, return a sorted list that has the odd numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn a positive inetger n, return a sorted list that has the odd numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let odd = [];\n  let even = [];\n  let prev = 0;\n  let next = 1;\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      even.push(next);\n      next = next * 3 + 1;\n    } else {\n      odd.push(next);\n      next = next * 3 + 1;\n    }\n    prev = next;\n    i++;\n    n = prev;\n  }\n  collatz = even.concat(odd);\n  collatz.sort((a, b) => a - b);\n  return collatz;\n};\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the even numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let odd = [];\n  let even = [];\n  let prev = 0;\n  let next = 1;\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      even.push(next);\n      next = next * 3 + 1;\n    } else {\n      odd.push(next);\n      next = next * 3 + 1;\n    }\n    prev = next;\n    i++;\n    n = prev;\n  }\n  collatz = even.concat(odd);\n  collatz.sort((a, b) => a - b);\n  return collatz;\n};\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the even numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let odd = [];\n  let even = [];\n  let prev = 0;\n  let next = 1;\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      even.push(next);\n      next = next * 3 + 1;\n    } else {\n      odd.push(next);\n      next = next * 3 + 1;\n    }\n    prev = next;\n    i++;\n    n = prev;\n  }\n  collatz = even.concat(odd);\n  collatz.sort((a, b) => a - b);\n  return collatz;\n};\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the odd numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let odd = [];\n  let even = [];\n  let prev = 0;\n  let next = 1;\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      even.push(next);\n      next = next * 3 + 1;\n    } else {\n      odd.push(next);\n      next = next * 3 + 1;\n    }\n    prev = next;\n    i++;\n    n = prev;\n  }\n  collatz = even.concat(odd);\n  collatz.sort((a, b) => a - b);\n  return collatz;\n};\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the even numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validaets a given date string and\n  returns true if the date si valid otherwise fasle.\n  The date is valid fi all of the following rulse are astisfied:\n  1. The date string is not empty.\n  2. hTe number fo days is not elss than 1 or ihgher than 31 days for months 1,3,5,7,8,10,12. And the numbre of days is not less htan 1 or higher than 30 days for months 4,6,9,11. And, the numerb of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date shodul be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validaets a given date string and\n  returns true if the date si valid otherwise fasle.\n  The date is valid fi all of the following rulse are astisfied:\n  1. The date string is not empty.\n  2. hTe number fo days is not elss than 1 or ihgher than 31 days for months 1,3,5,7,8,10,12. And the numbre of days is not less htan 1 or higher than 30 days for months 4,6,9,11. And, the numerb of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date shodul be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength2 = dateArrayLength - 1;\n  const dateArrayLength3 = dateArrayLength2 - 1;\n  const dateArrayLength4 = dateArrayLength3 - 1;\n  const dateArrayLength5 = dateArrayLength4 - 1;\n  const dateArrayLength6 = dateArrayLength5 - 1;\n  const dateArrayLength7 = dateArrayLength6 - 1;\n  const dateArrayLength8 = dateArrayLength7 - 1;\n  const dateArrayLength9 = dateArrayLength8 - 1;\n  const dateArrayLength10 = dateArrayLength9 - 1;\n  const dateArrayLength11 = dateArrayLength10 - 1;\n  const dateArrayLength12 = dateArrayLength11 - 1;\n  const dateArrayLength13 = dateArrayLength12 - 1;\n  const dateArrayLength14 = dateArrayLength13 - 1;\n  const dateArrayLength15 = dateArrayLength14 - 1;\n  const dateArrayLength16 = dateArrayLength15 - 1;\n  const dateArrayLength17 = dateArrayLength16 - 1;\n  const dateArrayLength18 = dateArrayLength17 - 1;\n  const dateArrayLength19 = dateArrayLength18 - 1;\n  const dateArrayLength20 = dateArrayLength19 - 1;\n  const dateArrayLength21 = dateArrayLength20 - 1;\n  const dateArrayLength22 = dateArrayLength21 - 1;\n  const dateArrayLength23 = dateArrayLength22 - 1;\n  const dateArrayLength24 = dateArrayLength23 - 1;\n  const dateArrayLength25 = dateArrayLength24 - 1;\n  const dateArrayLength26 = dateArrayLength25 - 1;\n  const dateArrayLength27 = dateArrayLength26 - 1;\n  const dateArrayLength28 = dateArrayLength27 - 1;\n  const dateArrayLength29 = dateArrayLength28 - 1;\n  const dateArrayLength30 = dateArrayLength29 - 1;\n  const dateArrayLength31 = dateArrayLength30 - 1;\n  const dateArrayLength32 = dateArrayLength31 - 1;\n  const dateArrayLength33 = dateArrayLength32 - 1;\n  const dateArrayLength34 = dateArrayLength33 - 1;\n  const dateArrayLength35 = dateArrayLength34 - 1;\n  const dateArrayLength36 = dateArrayLength35 - 1;\n  const dateArrayLength37 = dateArrayLength36 - 1;\n  const dateArrayLength38 = dateArrayLength37 - 1;\n  const dateArrayLength39 = dateArrayLength38 - 1;\n  const dateArrayLength40 = dateArrayLength39 - 1;\n  const dateArrayLength41 = dateArrayLength40 - 1;\n  const dateArrayLength42 = dateArrayLength41 - 1;\n  const dateArrayLength43 = dateArrayLength42 - 1;\n  const dateArrayLength44 = dateArrayLength43 - 1;\n  const dateArrayLength45 = dateArrayLength44 - 1;\n  const dateArrayLength46 = dateArrayLength45 - 1;\n  const dateArrayLength47 = dateArrayLength46 - 1;\n  const dateArrayLength48 = dateArrayLength47 - 1;\n  const dateArrayLength49 = dateArrayLength48 - 1;\n  const dateArrayLength50 = dateArrayLength49 - 1;\n  const dateArrayLength51 = dateArrayLength50 - 1;\n  const dateArrayLength52 = dateArrayLength51 - 1;\n  const dateArrayLength53 = dateArrayLength52 - 1;\n  const dateArrayLength54 = dateArrayLength53 - 1;\n  const dateArrayLength55 = dateArrayLength54 - 1;\n  const dateArrayLength56 = dateArrayLength55 - 1;\n  const dateArrayLength57 = dateArrayLength56 - 1;\n  const dateArrayLength58 = dateArrayLength57 - 1;\n  const dateArrayLength59 = dateArrayLength58 - 1;\n  const dateArrayLength60 = dateArrayLength59 - 1;\n  const dateArrayLength61 = dateArrayLength60 - 1;\n  const dateArrayLength62 = dateArrayLength61 - 1;\n  const dateArrayLength63 = dateArrayLength62 - 1;\n  const dateArrayLength64 = dateArrayLength63 - 1;\n  const dateArrayLength65 = dateArrayLength64 - 1;\n  const dateArrayLength66 = dateArrayLength65 - 1;\n  const dateArrayLength67 = dateArrayLength66 - 1;\n  const dateArrayLength68 = dateArrayLength67 - 1;\n  const dateArrayLength69 = dateArrayLength68 - 1;\n  const dateArrayLength70 = dateArrayLength69 - 1;\n  const dateArrayLength71 = dateArrayLength70 - 1;\n  const dateArrayLength72 = dateArrayLength71 - 1;\n  const dateArrayLength73 = dateArrayLength72 - 1;\n  const dateArrayLength74 = dateArrayLength73 - 1;\n  const dateArrayLength75 = dateArrayLength74 - 1;\n  const dateArrayLength76 = dateArrayLength75 - 1;\n  const dateArrayLength77 = dateArrayLength76 - 1;\n  const dateArrayLength78 = dateArrayLength77 - 1;\n  const dateArrayLength79 = dateArrayLength78 - 1;\n  const dateArrayLength80 = dateArrayLength79 - 1;\n  const dateArrayLength81 = dateArrayLength80 - 1;\n  const dateArrayLength82 = dateArrayLength81 - 1;\n  const dateArrayLength83 = dateArrayLength82 - 1;\n  const dateArrayLength84 = dateArrayLength83 - 1;\n  const dateArrayLength85 = dateArrayLength84 - 1;\n  const dateArrayLength86 = dateArrayLength85 - 1;\n  const dateArrayLength87 = dateArrayLength86 - 1;\n  const dateArrayLength88 = dateArrayLength87 - 1;\n  const dateArrayLength89 = dateArrayLength88 - 1;\n  const dateArrayLength90 = dateArrayLength89 - 1;\n  const dateArrayLength91 = dateArrayLength90 - 1;\n  const dateArrayLength92 = dateArrayLength91 - 1;\n  const dateArrayLength93 = dateArrayLength92 - 1;\n  const dateArrayLength94 = dateArrayLength93 - 1;\n  const dateArrayLength95 = dateArrayLength94 - 1;\n  const dateArrayLength96 = dateArrayLength95 - 1;\n  const dateArrayLength97 = dateArrayLength96 - 1;\n  const dateArrayLength98 = dateArrayLength97 - 1;\n  const dateArrayLength99 = dateArrayLength98 - 1;\n  const dateArrayLength100 = dateArrayLength99 - 1;\n  const dateArrayLength101 = dateArrayLength100 - 1;\n  const dateArrayLength102 = dateArrayLength101 - ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = 1\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = 1\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = 1\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = 1\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = 1\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = 1\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = 1\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) return \"NO\"\n    if (start2 < start1) return \"NO\"\n    if (start1 < end2 && start2 < end1) return \"YES\"\n    return \"NO\"\n  }\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  return \"NO\"\n}\n\n/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) return \"NO\"\n    if (start2 < start1) return \"NO\"\n    if (start1 < end2 && start2 < end1) return \"YES\"\n    return \"NO\"\n  }\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  return \"NO\"\n}\n\n/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) return \"NO\"\n    if (start2 < start1) return \"NO\"\n    if (start1 < end2 && start2 < end1) return \"YES\"\n    return \"NO\"\n  }\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  return \"NO\"\n}\n\n/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) return \"NO\"\n    if (start2 < start1) return \"NO\"\n    if (start1 < end2 && start2 < end1) return \"YES\"\n    return \"NO\"\n  }\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  return \"NO\"\n}\n\n/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) return \"NO\"\n    if (start2 < start1) return \"NO\"\n    if (start1 < end2 && start2 < end1) return \"YES\"\n    return \"NO\"\n  }\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  return \"NO\"\n}\n\n/*You are given two itnervals,\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given na array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given na array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns12 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go throuhg.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go throuhg.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const path = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n      visited[j] = true;\n      path[j] = i;\n      M[j] = 0;\n      for (let k = 0; k < N; k++) {\n        if (grid[k][j] === grid[i][j]) {\n          M[j] += 1;\n        }\n      }\n    }\n  }\n\n  const lst_A = new Array(M[0]).fill(0);\n  const lst_B = new Array(M[0]).fill(0);\n\n  for (let i = 0; i < M[0]; i++) {\n    lst_A[i] = grid[path[i]][i];\n    lst_B[i] = grid[path[i]][path[i]];\n  }\n\n  for (let i = 1; i < M[0]; i++) {\n    lst_A[i] = Math.min(lst_A[i - 1] + 1, lst_A[i]);\n    lst_B[i] = Math.min(lst_B[i - 1] + 1, lst_B[i]);\n  }\n\n  const ans = [];\n\n  for (let i = 0; i < M[0]; i++) {\n    if (lst_A[i] === lst_B[i]) {\n      ans.push(grid[path[i]][i]);\n    }\n  }\n\n  return ans;\n};\n\n/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go throuhg.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath2 = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const path = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n      visited[j] = true;\n      path[j] = i;\n      M[j] = 0;\n      for (let k = 0; k < N; k++) {\n        if (grid[k][j] === grid[i][j]) {\n          M[j] += 1;\n        }\n      }\n    }\n  }\n\n  const lst_A = new Array(M[0]).fill(0);\n  const lst_B = new Array(M[0]).fill(0);\n\n  for (let i = 0; i < M[0]; i++) {\n    lst_A[i] = grid[path[i]][i];\n    lst_B[i] = grid[path[i]][path[i]];\n  }\n\n  for (let i = 1; i < M[0]; i++) {\n    lst_A[i] = Math.min(lst_A[i - 1] + 1, lst_A[i]);\n    lst_B[i] = Math.min(lst_B[i - 1] + 1, lst_B[i]);\n  }\n\n  const ans = [];\n\n  for (let i = 0; i < M[0]; i++) {\n    if (lst_A[i] === lst_B[i]) {\n      ans.push(grid[path[i]][i]);\n    }\n  }\n\n  return ans;\n};\n\n/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  if (a === 0) return b;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  False\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a & (a - 1)) === 0;\n};\n\n/* Return true if a is a multiple of b\n  >>> isMultipleOf(3, 5)\n  True\n  >>> isMultipleOf(25, 15)\n  True\n  */\nconst isMultipleOf = (a, b) => {\n  return a % b === 0;\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf(3, 5)\n  True\n  >>> isPowerOf(25, 15)\n  True\n  */\nconst isPowerOf = (a, b) => {\n  return a!== 0 && (a ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a postiive niteger n, return the product of the odd digits.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a postiive niteger n, return the product of the odd digits.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 1.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 1.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst evenDigitsMinus1 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the odd digits minus 1.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigitsMinus1 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 1.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst evenDigitsMinus2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the odd digits minus 1.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigitsMinus2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 2.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigitsMinus3 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 3;\n    n = Math.floor(n / 3);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the odd digits minus 2.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigitsMinus3 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 3;\n    n = Math.floor(n / 3);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 3.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigitsMinus4 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 4;\n    n = Math.floor(n / 4);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the odd digits minus 3.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigitsMinus4 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 4;\n    n = Math.floor(n / 4);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 4.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigitsMinus5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 5;\n    n = Math.floor(n / 5);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the odd digits minus 4.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigitsMinus5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 5;\n    n = Math.floor(n / 5);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 5.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigitsMinus6 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 6;\n    n = Math.floor(n / 6);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the odd digits minus 5.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigitsMinus6 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 6;\n    n = Math.floor(n / 6);\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits minus 6.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigitsMinus7 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 7;\n    n = Math.floor(n / ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let open = false;\n  let closed = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      open = true;\n    } else if (string[i] === ']') {\n      closed = true;\n      open = false;\n    } else if (open && closed) {\n      if (stack.length < 2) {\n        return false;\n      }\n      if (string[i]!== stack[stack.length - 2]) {\n        return false;\n      }\n      stack.pop();\n      closed = false;\n      open = false;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let open = false;\n  let closed = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      open = true;\n    } else if (string[i] === ']') {\n      closed = true;\n      open = false;\n    } else if (open && closed) {\n      if (stack.length < 2) {\n        return false;\n      }\n      if (string[i]!== stack[stack.length - 2]) {\n        return false;\n      }\n      stack.pop();\n      closed = false;\n      open = false;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let open = false;\n  let closed = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      open = true;\n    } else if (string[i] === ']') {\n      closed = true;\n      open = false;\n    } else if (open && closed) {\n      if (stack.length < 2) {\n        return false;\n      }\n      if (string[i]!== stack[stack.length - 2]) {\n        return false;\n      }\n      stack.pop();\n      closed = false;\n      open = false;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let open = false;\n  let closed = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      open = true;\n    } else if (string[i] === ']') {\n      closed = true;\n      open = false;\n    } else if (open && closed) {\n      if (stack.length < 2) {\n        return false;\n      }\n      if (string[i]!== stack[stack.length - 2]) {\n        return false;\n      }\n      stack.pop();\n      closed = false;\n      open = false;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let open = false;\n  let closed = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      open = true;\n    } else if (string[i] === ']') {\n      closed = true;\n      open = false;\n    } else if (open && closed) {\n      if (stack.length < 2) {\n        return false;\n      }\n      if (string[i]!== stack[stack.length - 2]) {\n        return false;\n      }\n      stack.pop();\n      closed = false;\n      open = false;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let open = false;\n  let closed = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      open = true;\n    } else if (string[i] === ']') {\n      closed = true;\n      open = false;\n    } else if (open && closed) {\n      if (stack.length < 2) {\n        return false;\n      }\n      if (string[i]!== stack[stack.length - 2]) {\n        return false;\n      }\n      stack.pop();\n      closed = false;\n      open = false;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yuo need to return the sum of squared numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.\n  Yuo need to return the sum of squared numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the sum of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  Yuo need to return the product of numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a wodr, and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a wodr, and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  return!isLastCharAlpha && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a wodr, and false otheriwse.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharDigit = lastChar.match(/[0-9]/i);\n  return!isLastCharAlpha &&!isLastCharDigit && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a wodr, and false otheriwse.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharDigit = lastChar.match(/[0-9]/i);\n  return!isLastCharAlpha &&!isLastCharDigit && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a wodr, and false otheriwse.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharDigit = lastChar.match(/[0-9]/i);\n  return!isLastCharAlpha &&!isLastCharDigit && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a wodr, and false otheriwse.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharDigit = lastChar.match(/[0-9]/i);\n  return!isLastCharAlpha &&!isLastCharDigit && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a wodr, and false otheriwse.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharDigit = lastChar.match(/[0-9]/i);\n  return!isLastCharAlpha &&!isLastCharDigit && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a wodr, and false otheriwse.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharDigit = lastChar.match(/[0-9]/i);\n  return!isLastCharAlpha &&!isLastCharDigit && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a wodr, and false otheriwse.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharDigit = lastChar.match(/[0-9]/i);\n  return!isLastCharAlpha &&!isLastCharDigit && lastChar!== \" \";\n};\n\n/* Create a function that returns true if the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functoin wihch returns the largest index of an element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a functoin wihch returns the largest index of an element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a functoin wihch returns the smallest index of an element which\n  is not less than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a functoin wihch returns the index of the first element which\n  is not less than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a functoin wihch returns the index of the last element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a functoin wihch returns the index of the first element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a functoin wihch returns the index of the last element which\n  is not less than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a functoin wihch returns the index of the first element which\n  is not less than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a functoin wihch returns the index of the last element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a functoin wihch returns the index of the first element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a functoin wihch returns the index of the last element which\n  is not less than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a functoin wihch returns the index of the first element which\n  is not less than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a functoin wihch returns the index of the last element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a functoin wihch returns the index of the first element which\n  is not less than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let nlul = null;\n  let nll = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] > nll) {\n      nll = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] < nul) {\n      nlul = lst[i];\n    }\n  }\n  return [nlul, nll];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a > b) return a\n  return b\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the smaller variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ \"5\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (a === b) return null\n  if (a < b) return a\n  return b\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareThree(1, 2.5) ➞ null\n  compareThree(1, \"2,3\") ➞ null\n  compareThree(\"5,1\", \"6\") ➞ null\n  compareThree(\"1\", 1) ➞ \"1\"\n  */\nconst compareThree = (a, b) => {\n  if (a === b) return null\n  if (a > b) return a\n  if (a < b) return b\n  return null\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the smaller variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareFour(1, 2.5) ➞ null\n  compareFour(1, \"2,3\") ➞ null\n  compareFour(\"5,1\", \"6\") ➞ null\n  compareFour(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  return null\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareFive(1, 2.5) ➞ null\n  compareFive(1, \"2,3\") ➞ null\n  compareFive(\"5,1\", \"6\") ➞ null\n  compareFive(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (a === b) return null\n  if (a > b) return a\n  if (a < b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  return null\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the smaller variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareSix(1, 2.5) ➞ null\n  compareSix(1, \"2,3\") ➞ null\n  compareSix(\"5,1\", \"6\") ➞ null\n  compareSix(\"1\", 1) ➞ null\n  */\nconst compareSix = (a, b) => {\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  return null\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareSeven(1, 2.5) ➞ null\n  compareSeven(1, \"2,3\") ➞ null\n  compareSeven(\"5,1\", \"6\") ➞ null\n  compareSeven(\"1\", 1) ➞ null\n  */\nconst compareSeven = (a, b) => {\n  if (a === b) return null\n  if (a > b) return a\n  if (a < b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  return null\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the smaller variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareEight(1, 2.5) ➞ null\n  compareEight(1, \"2,3\") ➞ null\n  compareEight(\"5,1\", \"6\") ➞ null\n  compareEight(\"1\", 1) ➞ null\n  */\nconst compareEight = (a, b) => {\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return null\n  if (a < b) return a\n  if (a > b) return b\n  return null\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurn", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evalaute whether the given number n can be written as the sum of exactly 4 positive veen numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Evalaute whether the given number n can be written as the sum of exactly 4 positive veen numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2 === 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndEvenAndOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndOddAndEvenAndOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndEvenAndOddAndOddAndEvenAndOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndEvenAndOddAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0 && sum % 2!== 0;\n};\n\n/*Evalaute whether the given number n can be written as the sum of exactly 4 positive and negative veen numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenAndOddAndEvenAndOddAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum % 2!== 0 && sum % 2 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazliian factorail is defiend as:\n  brazilain_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Brazliian factorail is defiend as:\n  brazilain_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian Factorial Notation.\n*/\nconst brazilain_factorial = (n) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Retrun list of lal prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Retrun list of lal prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'ab')\n  True\n  >>> isLalPrefix('abc', 'abd')\n  False\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n  */\nconst isLalPrefix = (string, prefix) => {\n  const prefixes = allPrefixes(string);\n  return prefixes.includes(prefix);\n};\n\n/* Return true if string is a valid lal prefix of another string\n  >>> isLalPrefix('abc', 'abd')\n  False\n  >>> isLalPrefix('abc', 'ab')\n  True\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consectuive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consectuive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\n/*\n  Given a string text, remove all consecutive spaces from it\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivisibleBy3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivisibleBy4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivisibleBy5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivisibleBy6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 6 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivisibleBy7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivisibleBy8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 8 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i];\n    if (result.includes(word)) {\n      continue;\n    }\n    for (let j = i + 1; j < sentence.length; j++) {\n      if (isPrime(j - i) && isPrime(j - i + 1)) {\n        result.push(word);\n        break;\n      }\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i];\n    if (result.includes(word)) {\n      continue;\n    }\n    for (let j = i + 1; j < sentence.length; j++) {\n      if (isPrime(j - i) && isPrime(j - i + 1)) {\n        result.push(word);\n        break;\n      }\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i];\n    if (result.includes(word)) {\n      continue;\n    }\n    for (let j = i + 1; j < sentence.length; j++) {\n      if (isPrime(j - i) && isPrime(j - i + 1)) {\n        result.push(word);\n        break;\n      }\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i];\n    if (result.includes(word)) {\n      continue;\n    }\n    for (let j = i + 1; j < sentence.length; j++) {\n      if (isPrime(j - i) && isPrime(j - i + 1)) {\n        result.push(word);\n        break;\n      }\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i];\n    if (result.includes(word)) {\n      continue;\n    }\n    for (let j = i + 1; j < sentence.length; j++) {\n      if (isPrime(j - i) && isPrime(j - i + 1)) {\n        result.push(word);\n        break;\n      }\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i];\n    if (result.includes(word)) {\n      continue;\n    }\n    for (let j = i + 1; j < sentence.length; j++) {\n      if (isPrime(j - i) && isPrime(j - i + 1)) {\n        result.push(word);\n        break;\n      }\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i];\n    if (result.includes(word)) {\n      continue;\n    }\n    for (let j = i + 1; j < sentence.length; j++) {\n      if (isPrime(j - i) && isPrime(j - i + 1)) {\n        result.push(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function thta will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and flase\n  otherwise. Both x and n, are string representaiton of a fraction, and have the following formta,\n  <numerator>/<denomintaro> where both numerator and denmoinator rae positive whole numbers.\n\n  You can assmue that x, and n rae valdi fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function thta will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and flase\n  otherwise. Both x and n, are string representaiton of a fraction, and have the following formta,\n  <numerator>/<denomintaro> where both numerator and denmoinator rae positive whole numbers.\n\n  You can assmue that x, and n rae valdi fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\nconsole.log(simplify(\"1/2\", \"1/2\"));\nconsole.log(simplify(\"1/2\", \"1/3\"));\nconsole.log(simplify(\"1/2\", \"1/4\"));\nconsole.log(simplify(\"1/2\", \"1/5\"));\nconsole.log(simplify(\"1/2\", \"1/6\"));\nconsole.log(simplify(\"1/2\", \"1/7\"));\nconsole.log(simplify(\"1/2\", \"1/8\"));\nconsole.log(simplify(\"1/2\", \"1/9\"));\nconsole.log(simplify(\"1/2\", \"1/10\"));\nconsole.log(simplify(\"1/2\", \"1/11\"));\nconsole.log(simplify(\"1/2\", \"1/12\"));\nconsole.log(simplify(\"1/2\", \"1/13\"));\nconsole.log(simplify(\"1/2\", \"1/14\"));\nconsole.log(simplify(\"1/2\", \"1/15\"));\nconsole.log(simplify(\"1/2\", \"1/16\"));\nconsole.log(simplify(\"1/2\", \"1/17\"));\nconsole.log(simplify(\"1/2\", \"1/18\"));\nconsole.log(simplify(\"1/2\", \"1/19\"));\nconsole.log(simplify(\"1/2\", \"1/20\"));\nconsole.log(simplify(\"1/2\", \"1/21\"));\nconsole.log(simplify(\"1/2\", \"1/22\"));\nconsole.log(simplify(\"1/2\", \"1/23\"));\nconsole.log(simplify(\"1/2\", \"1/24\"));\nconsole.log(simplify(\"1/2\", \"1/25\"));\nconsole.log(simplify(\"1/2\", \"1/26\"));\nconsole.log(simplify(\"1/2\", \"1/27\"));\nconsole.log(simplify(\"1/2\", \"1/28\"));\nconsole.log(simplify(\"1/2\", \"1/29\"));\nconsole.log(simplify(\"1/2\", \"1/30\"));\nconsole.log(simplify(\"1/2\", \"1/31\"));\nconsole.log(simplify(\"1/2\", \"1/32\"));\nconsole.log(simplify(\"1/2\", \"1/33\"));\nconsole.log(simplify(\"1/2\", \"1/34\"));\nconsole.log(simplify(\"1/2\", \"1/35\"));\nconsole.log(simplify(\"1/2\", \"1/36\"));\nconsole.log(simplify(\"1/2\", \"1/37\"));\nconsole.log(simplify(\"1/2\", \"1/38\"));\nconsole.log(simplify(\"1/2\", \"1/39\"));\nconsole.log(simplify(\"1/2\", \"1/40\"));\nconsole.log(simplify(\"1/2\", \"1/41\"));\nconsole.log(simplify(\"1/2\", \"1/42\"));\nconsole.log(simplify(\"1/2\", \"1/43\"));\nconsole.log(simplify(\"1/2\", \"1/44\"));\nconsole.log(simplify(\"1/2\", \"1/45\"));\nconsole.log(simplify(\"1/2\", \"1/46\"));\nconsole.log(simplify(\"1/2\", \"1/47\"));\nconsole.log(simplify(\"1/2\", \"1/48\"));\nconsole.log(simplify(\"1/2\", \"1/49\"));\nconsole.log(simplify(\"1/2\", \"1/50\"));\nconsole.log(simplify(\"1/2\", \"1/51\"));\nconsole.log(simplify(\"1/2\", \"1/52\"));\nconsole.log(simplify(\"1/2\", \"1/53\"));\nconsole.log(simplify(\"1/2\", \"1/54\"));\nconsole.log(simplify(\"1/2\", \"1/55\"));\nconsole.log(simplify(\"1/2\", \"1/56\"));\nconsole.log(simplify(\"1/2\", \"1/57\"));\nconsole.log(simplify(\"1/2\", \"1/58\"));\nconsole.log(simplify(\"1/2\", \"1/59\"));\nconsole.log(simplify(\"1/2\", \"1/60\"));\nconsole.log(simplify(\"1/2\", \"1/61\"));\nconsole.log(simplify(\"1/2\", \"1/62\"));\nconsole.log(simplify(\"1/2\", \"1/63\"));\nconsole.log(simplify(\"1/2\", \"1/64\"));\nconsole.log(simplify(\"1/2\", \"1/65\"));\nconsole.log(simplify(\"1/2\", \"1/66\"));\nconsole.log(simplify(\"1/2\", \"1/67\"));\nconsole.log(simplify(\"1/2\", \"1/68\"));\nconsole.log(simplify(\"1/2\", \"1/69\"));\nconsole.log(simplify(\"1/2\", \"1/70\"));\nconsole.log(simplify(\"1/2\", \"1/71\"));\nconsole.log(simplify(\"1/2\", \"1/72\"));\nconsole.log(simplify(\"1/2\", \"1/73\"));\nconsole.log(simplify(\"1/2\", \"1/74\"));\nconsole.log(simplify(\"1/2\", \"1/75\"));\nconsole.log(simplify(\"1/2\", \"1/76\"));\nconsole.log(simplify(\"1/2\", \"1/77\"));\nconsole.log(simplify(\"1/2\", \"1/78\"));\nconsole.log(simplify(\"1/2\", \"1/79\"));\nconsole.log(simplify(\"1/2\", \"1/80\"));\nconsole.log(simplify(\"1/2\", \"1/81\"));\nconsole.log(simplify(\"1/2\", \"1/82\"));\nconsole.log(simplify(\"1/2\", \"1/83\"));\nconsole.log(simplify(\"1/2\", \"1/84\"));\nconsole.log(simplify(\"1/2\", \"1/85\"));\nconsole.log(simplify(\"1/2\", \"1/86\"));\nconsole.log(simplify(\"1/2\", \"1/87\"));\nconsole.log(simplify(\"1/2\", \"1/88\"));\nconsole.log(simplify(\"1/2\", \"1/89\"));\nconsole.log(simplify(\"1/2\", \"1/90\"));\nconsole.log(simplify(\"1/2\", \"1/91\"));\nconsole.log(simplify(\"1/2\", \"1/92\"));\nconsole.log(simplify(\"1/2\", \"1/93\"));\nconsole.log(simplify(\"1/2\", \"1/94\"));\nconsole.log(simplify(\"1/2\", \"1/95\"));\nconsole.log(simplify(\"1/2\", \"1/96\"));\nconsole.log(simplify(\"1/2\", \"1/97\"));\nconsole.log(simplify(\"1/2\", \"1/98\"));\nconsole.log(simplify(\"1/2\", \"1/99\"));\nconsole.log(simplify(\"1/2\", \"1/100\"));\nconsole.log(simplify(\"1/2\", \"1/101\"));\nconsole.log(simplify(\"1/2\", \"1/102\"));\nconsole.log(simplify(\"1/2\", \"1/103\"));\nconsole.log(simplify(\"1/2\", \"1/104\"));\nconsole.log(simplify(\"1/2\", \"1/105\"));\nconsole.log(simplify(\"1/2\", \"1/106\"));\nconsole.log(simplify(\"1/2\", \"1/107\"));\nconsole.log(simplify(\"1/2\", \"1/108\"));\nconsole.log(simplify(\"1/2\", \"1/109\"));\nconsole.log(simplify(\"1/2\", \"1/110\"));\nconsole.log(simplify(\"1/2\", \"1/111\"));\nconsole.log(simplify(\"1/2\", \"1/112\"));\nconsole.log(simplify(\"1/2\", \"1/113\"));\nconsole.log(simplify(\"1/2\", \"1/114\"));\nconsole.log(simplify(\"1/2\", \"1/115\"));\nconsole.log(simplify(\"1/2\", \"1/116\"));\nconsole.log(simplify(\"1/2\", \"1/117\"));\nconsole.log(simplify(\"1/2\", \"1/118\"));\nconsole.log(simplify(\"1/2\", \"1/119\"));\nconsole.log(simplify(\"1/2\", \"1/120\"));\nconsole.log(simplify(\"1/2\", \"1/121\"));\nconsole.log(simplify(\"1/2\", \"1/122\"));\nconsole.log(simplify(\"1/2\", \"1/123\"));\nconsole.log(simplify(\"1/2\", \"1/124\"));\nconsole.log(simplify(\"1/2\", \"1/125\"));\nconsole.log(simplify(\"1/2\", \"1/126\"));\nconsole.log(simplify(\"1/2\", \"1/127\"));\nconsole.log(simplify(\"1/2\", \"1/128\"));\nconsole.log(simplify(\"1/2\", \"1/129\"));\nconsole.log(simplify(\"1/2\", \"1/130\"));\nconsole.log(simplify(\"1/2\", \"1/131\"));\nconsole.log(simplify(\"1/2\", \"1/132\"));\nconsole.log(simplify(\"1/2\", \"1/133\"));\nconsole.log(simplify(\"1/2\", \"1/134\"));\nconsole.log(simplify(\"1/2\", \"1/135\"));\nconsole.log(simplify(\"1/2\", \"1/136\"));\nconsole.log(simplify(\"1/2\", \"1/137\"));\nconsole.log(simplify(\"1/2\", \"1/138\"));\nconsole.log(simplify(\"1/2\", \"1/139\"));\nconsole.log(simplify(\"1/2\", \"1/140\"));\nconsole.log(simplify(\"1/2\", \"1/141\"));\nconsole.log(simplify(\"1/2\", \"1/142\"));\nconsole.log(simplify(\"1/2\", \"1/143\"));\nconsole.log(simplify(\"1/2\", \"1/144\"));\nconsole.log(simplify(\"1/2\", \"1/145\"));\nconsole.log(simplify(\"1/2\", \"1/146\"));\nconsole.log(simplify(\"1/2\", \"1/147\"));\nconsole.log(simplify(\"1/2\", \"1/148\"));\nconsole.log(simplify(\"1/2\", \"1/149\"));\nconsole.log(simplify(\"1/2\", \"1/150\"));\nconsole.log(simplify(\"1/2\", \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    if (aSum === bSum) {\n      return a.localeCompare(b)\n    }\n    return aSum - bSum\n  })\n  return sorted\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []) == 0\n  */\nconst countOfDigits = (num, nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === num) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  rWite a function which returns the number of occurences of a\n  given number in a given list.\n\n  For example:\n  >>> countOfDigits(1, [1, 1, 2, 3]) == 2\n  >>> countOfDigits(1, [1, 1]) == 1\n  >>> countOfDigits(1, []", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Wirte a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Wirte a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of trilpes (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of trilpes (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nI believe this fails for `getMaxTriples(0)`\n<|/ c |>\n<| c |>\nYes, you are right. I fixed it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 tags=arrays,algorithm,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* Tehre are eigth planets in our solar ystesm: the closerst to the Sun\n  is Mercury, the nxet one is eVnsu, then Earth, Mras, Jupiter, Saturn,\n  Uransu, Netpune.\n  Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the proximity to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Tehre are eigth planets in our solar ystesm: the closerst to the Sun\n  is Mercury, the nxet one is eVnsu, then Earth, Mras, Jupiter, Saturn,\n  Uransu, Netpune.\n  Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the proximity to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const orbits = orbits(planet1, planet2)\n  const planets = orbits.map(orbit => orbit.name)\n  const planetsBetween = planets.filter(planet => planets.includes(planet))\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => {\n    return distance(a, b) < distance(b, a)\n  })\n  return planetsBetweenSorted\n}\n\n/* Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the distance to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const orbits = orbits(planet1, planet2)\n  const planets = orbits.map(orbit => orbit.name)\n  const planetsBetween = planets.filter(planet => planets.includes(planet))\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => {\n    return distance(a, b) < distance(b, a)\n  })\n  return planetsBetweenSorted\n}\n\n/* Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the distance to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const orbits = orbits(planet1, planet2)\n  const planets = orbits.map(orbit => orbit.name)\n  const planetsBetween = planets.filter(planet => planets.includes(planet))\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => {\n    return distance(a, b) < distance(b, a)\n  })\n  return planetsBetweenSorted\n}\n\n/* Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the distance to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const orbits = orbits(planet1, planet2)\n  const planets = orbits.map(orbit => orbit.name)\n  const planetsBetween = planets.filter(planet => planets.includes(planet))\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => {\n    return distance(a, b) < distance(b, a)\n  })\n  return planetsBetweenSorted\n}\n\n/* Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the distance to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf5 = (planet1, planet2) => {\n  const orbits = orbits(planet1, planet2)\n  const planets = orbits.map(orbit => orbit.name)\n  const planetsBetween = planets.filter(planet => planets.includes(planet))\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => {\n    return distance(a, b) < distance(b, a)\n  })\n  return planetsBetweenSorted\n}\n\n/* Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the distance to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf6 = (planet1, planet2) => {\n  const orbits = orbits(planet1, planet2)\n  const plan", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sorted.push(lst[i]);\n    }\n  }\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sorted.push(lst[i]);\n    }\n  }\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sorted.push(lst[i]);\n    }\n  }\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sorted.push(lst[i]);\n    }\n  }\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sorted.push(lst[i]);\n    }\n  }\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sorted.push(lst[i]);\n    }\n  }\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndComma = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDot = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndComma = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDot = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndComma = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDot = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndComma = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDot = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndComma = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDot = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndComma = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDot = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndComma = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndCommaAndDotAndCommaAndDotAndCommaAndDotAndComma", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for x", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 * 1 * 1 * 1 = 1\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feelnig when the result fo some long-awaited\n  event is finlaly known. The efelings and thoughts you haev at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine fi a person correctly geussed the results of a number of matches.\n  You are given wto arrays of scores and guesses of equal length, where each index shows a match. \n  Rteurn an array of the same length denotngi how far off each guess was. If htey haev guessed correctly,\n  the value is 0, and if not, the value is the absolute differecne between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feelnig when the result fo some long-awaited\n  event is finlaly known. The efelings and thoughts you haev at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine fi a person correctly geussed the results of a number of matches.\n  You are given wto arrays of scores and guesses of equal length, where each index shows a match. \n  Rteurn an array of the same length denotngi how far off each guess was. If htey haev guessed correctly,\n  the value is 0, and if not, the value is the absolute differecne between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < guess.length; i += 1) {\n    const diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compareResults = (game, guesses) => {\n  const result = {};\n  for (let i = 0; i < guesses.length; i += 1) {\n    const guess = guesses[i];\n    const result = compare(game, guess);\n    result[guess] = result;\n  }\n  return result;\n};\n\nconst compareGames = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResults = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (games, guesses) => {\n  const result = {};\n  for (let i = 0; i < games.length; i += 1) {\n    const game = games[i];\n    const result = compareResults(game, guesses);\n    result[game] = result;\n  }\n  return result;\n};\n\nconst compareGamesResultsWithGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess = (game", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be igven the name of a class (a stirng) and a list of extensions.\n  The extensions are to be used to load additional classes ot the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the etxension's name, and let SM be the number of lowercaes letters\n  in the extension's name, the strenght is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there aer two or more extensions with the asme strength, oyu hsould\n  chosoe the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be igven the name of a class (a stirng) and a list of extensions.\n  The extensions are to be used to load additional classes ot the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the etxension's name, and let SM be the number of lowercaes letters\n  in the extension's name, the strenght is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there aer two or more extensions with the asme strength, oyu hsould\n  chosoe the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.charAt(0).toUpperCase() + extension.slice(1);\n    const extension_class_length = extension_class.length;\n    const extension_class_strength = extension_class_length - extension_class.match(/[A-Z]/g).length;\n    if (extension_class_strength > strongest) {\n      strongest = extension_class_strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n};\n\n/*You will be given a list of strings and a number N. Your task is to sort the\n  list according to the following rules:\n  1. All the strings in the list should be sorted in alphabetical order.\n  2. All the strings in the list should be sorted in ascending order.\n  3. All the strings in the list should be sorted in descending order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in descending order.\n  2. All the strings in the list should be sorted in ascending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in descending order.\n  2. All the strings in the list should be sorted in ascending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in descending order.\n  2. All the strings in the list should be sorted in ascending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in descending order.\n  2. All the strings in the list should be sorted in ascending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n  2. All the strings in the list should be sorted in descending order.\n  3. All the strings in the list should be sorted in alphabetical order.\n  4. The list should be sorted according to the following rules:\n  1. All the strings in the list should be sorted in ascending order.\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => flase\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => flase\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch = false;\n  let bMatch = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aMatch = true;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bMatch = true;\n      bIndex++;\n    } else {\n      aIndex++;\n    }\n  }\n  return aMatch && bMatch;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch = false;\n  let bMatch = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aMatch = true;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bMatch = true;\n      bIndex++;\n    } else {\n      aIndex++;\n    }\n  }\n  return aMatch;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch = false;\n  let bMatch = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aMatch = true;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bMatch = true;\n      bIndex++;\n    } else {\n      aIndex++;\n    }\n  }\n  return aMatch;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch = false;\n  let bMatch = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aMatch = true;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bMatch = true;\n      bIndex++;\n    } else {\n      aIndex++;\n    }\n  }\n  return aMatch;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch = false;\n  let bMatch = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aMatch = true;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bMatch = true;\n      bIndex++;\n    } else {\n      aIndex++;\n    }\n  }\n  return aMatch;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch = false;\n  let bMatch = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aMatch = true;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bMatch = true;\n      bIndex++;\n    } else {\n      aIndex++;\n    }\n  }\n  return aMatch;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the unmber of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the unmber of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of vowels.\n\n   Example:\n      vowelCount(\"hello\") ==> (5, 3)\n      vowelCount(\"hi\") ==> (2, 0)\n      vowelCount(\"bye\") ==> (3, 0)\n      vowelCount(\"a\") ==> (0, 1)\n*/\nconst vowelCount = (str) => {\n  let vowelCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      vowelCount++;\n    }\n  }\n  return [strLength, vowelCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of consonants.\n\n   Example:\n      consonantCount(\"hello\") ==> (5, 3)\n      consonantCount(\"hi\") ==> (2, 0)\n      consonantCount(\"bye\") ==> (3, 0)\n      consonantCount(\"a\") ==> (0, 1)\n*/\nconst consonantCount = (str) => {\n  let consonantCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i]!== \"a\" && str[i]!== \"e\" && str[i]!== \"i\" && str[i]!== \"o\" && str[i]!== \"u\") {\n      consonantCount++;\n    }\n  }\n  return [strLength, consonantCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of spaces.\n\n   Example:\n      spaceCount(\"hello\") ==> (5, 3)\n      spaceCount(\"hi\") ==> (2, 0)\n      spaceCount(\"bye\") ==> (3, 0)\n      spaceCount(\"a\") ==> (0, 1)\n*/\nconst spaceCount = (str) => {\n  let spaceCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i] === \" \") {\n      spaceCount++;\n    }\n  }\n  return [strLength, spaceCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of digits.\n\n   Example:\n      digitCount(\"hello\") ==> (5, 3)\n      digitCount(\"hi\") ==> (2, 0)\n      digitCount(\"bye\") ==> (3, 0)\n      digitCount(\"a\") ==> (0, 1)\n*/\nconst digitCount = (str) => {\n  let digitCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/\\d/g)) {\n      digitCount++;\n    }\n  }\n  return [strLength, digitCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of uppercase letters.\n\n   Example:\n      upperCaseCount(\"hello\") ==> (5, 3)\n      upperCaseCount(\"hi\") ==> (2, 0)\n      upperCaseCount(\"bye\") ==> (3, 0)\n      upperCaseCount(\"a\") ==> (0, 1)\n*/\nconst upperCaseCount = (str) => {\n  let upperCaseCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/[A-Z]/g)) {\n      upperCaseCount++;\n    }\n  }\n  return [strLength, upperCaseCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of lowercase letters.\n\n   Example:\n      lowerCaseCount(\"hello\") ==> (5, 3)\n      lowerCaseCount(\"hi\") ==> (2, 0)\n      lowerCaseCount(\"bye\") ==> (3, 0)\n      lowerCaseCount(\"a\") ==> (0, 1)\n*/\nconst lowerCaseCount = (str) => {\n  let lowerCaseCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/[a-z]/g)) {\n      lowerCaseCount++;\n    }\n  }\n  return [strLength, lowerCaseCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of punctuation marks.\n\n   Example:\n      punctuationCount(\"hello\") ==> (5, 3)\n      punctuationCount(\"hi\") ==> (2, 0)\n      punctuationCount(\"bye\") ==> (3, 0)\n      punctuationCount(\"a\") ==> (0, 1)\n*/\nconst punctuationCount = (str) => {\n  let punctuationCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/[!,?]/g)) {\n      punctuationCount++;\n    }\n  }\n  return [strLength, punctuationCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of digits.\n\n   Example:\n      digitCount(\"hello\") ==> (5, 3)\n      digitCount(\"hi\") ==> (2, 0)\n      digitCount(\"bye\") ==> (3, 0)\n      digitCount(\"a\") ==> (0, 1)\n*/\nconst digitCount = (str) => {\n  let digitCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/\\d/g)) {\n      digitCount++;\n    }\n  }\n  return [strLength, digitCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of uppercase letters.\n\n   Example:\n      upperCaseCount(\"hello\") ==> (5, 3)\n      upperCaseCount(\"hi\") ==> (2, 0)\n      upperCaseCount(\"bye\") ==> (3, 0)\n      upperCaseCount(\"a\") ==> (0, 1)\n*/\nconst upperCaseCount = (str) => {\n  let upperCaseCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/[A-Z]/g)) {\n      upperCaseCount++;\n    }\n  }\n  return [strLength, upperCaseCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of lowercase letters.\n\n   Example:\n      lowerCaseCount(\"hello\") ==> (5, 3)\n      lowerCaseCount(\"hi\") ==> (2, 0)\n      lowerCaseCount(\"bye\") ==> (3, 0)\n      lowerCaseCount(\"a\") ==> (0, 1)\n*/\nconst lowerCaseCount = (str) => {\n  let lowerCaseCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/[a-z]/g)) {\n      lowerCaseCount++;\n    }\n  }\n  return [strLength, lowerCaseCount];\n};\n\n/*Given a string. return a tuple that has the length of the string and the number of punctuation marks.\n\n   Example:\n      punctuationCount(\"hello\") ==> (5, 3)\n      punctuationCount(\"hi\") ==> (2, 0)\n      punctuationCount(\"bye\") ==> (3, 0)\n      punctuationCount(\"a\") ==> (0, 1)\n*/\nconst punctuationCount = (str) => {\n  let punctuationCount = 0;\n  let strLength = str.length;\n  for (let i = 0; i < strLength; i++) {\n    if (str[i].match(/[!,?]/g)) {\n      punctuationCount++;\n    }\n  }\n  return [strLength, punctuationCount];\n};\n\n/*Given a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive niteger, obtain its roman numeral equivalent as a string,\n  adn return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive niteger, obtain its roman numeral equivalent as a string,\n  adn return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumbers[number];\n  if (!roman) {\n    throw new Error('Invalid number');\n  }\n  return roman.toLowerCase();\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> miniRomanToInt('vii') == '152'\n  >>> miniRomanToInt('xix') == '19'\n  >>> miniRomanToInt('cdxxvi') == '426'\n  */\nconst miniRomanToInt = (roman) => {\n  const romanNumbers = romanNumbersObj;\n  if (!romanNumbers[roman]) {\n    throw new Error('Invalid roman');\n  }\n  return romanNumbers[roman];\n};\n\n/*\n  Given a positive integer, convert it to its decimal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '1.75'\n  >>> intToDecimal(426) == '4.2'\n  */\nconst intToDecimal = (number) => {\n  const decimal = numberToDecimal(number);\n  return decimal.toString();\n};\n\n/*\n  Given a positive integer, convert it to its binary equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == '1001'\n  >>> intToBinary(152) == '1100011'\n  >>> intToBinary(426) == '10101011'\n  */\nconst intToBinary = (number) => {\n  const binary = numberToBinary(number);\n  return binary.toString();\n};\n\n/*\n  Given a positive integer, convert it to its hexadecimal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == '19'\n  >>> intToHex(152) == '152'\n  >>> intToHex(426) == '2a'\n  */\nconst intToHex = (number) => {\n  const hex = numberToHex(number);\n  return hex.toString();\n};\n\n/*\n  Given a positive integer, convert it to its octal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == '19'\n  >>> intToOctal(152) == '152'\n  >>> intToOctal(426) == '2a'\n  */\nconst intToOctal = (number) => {\n  const octal = numberToOctal(number);\n  return octal.toString();\n};\n\n/*\n  Given a positive integer, convert it to its binary equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> decimalToBinary(19) == '1001'\n  >>> decimalToBinary(152) == '1100011'\n  >>> decimalToBinary(426) == '10101011'\n  */\nconst decimalToBinary = (number) => {\n  const binary = numberToBinary(number);\n  return binary.toString();\n};\n\n/*\n  Given a positive integer, convert it to its hexadecimal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> decimalToHex(19) == '19'\n  >>> decimalToHex(152) == '152'\n  >>> decimalToHex(426) == '2a'\n  */\nconst decimalToHex = (number) => {\n  const hex = numberToHex(number);\n  return hex.toString();\n};\n\n/*\n  Given a positive integer, convert it to its octal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> decimalToOctal(19) == '19'\n  >>> decimalToOctal(152) == '152'\n  >>> decimalToOctal(426) == '2a'\n  */\nconst decimalToOctal = (number) => {\n  const octal = numberToOctal(number);\n  return octal.toString();\n};\n\n/*\n  Given a positive integer, convert it to its binary equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> binaryToDecimal('1001') == '19'\n  >>> binaryToDecimal('1100011') == '152'\n  >>> binaryToDecimal('10101011') == '426'\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = binaryToDecimal(binary);\n  return decimal.toString();\n};\n\n/*\n  Given a positive integer, convert it to its hexadecimal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> binaryToHex('1001') == '19'\n  >>> binaryToHex('1100011') == '152'\n  >>> binaryToHex('10101011') == '2a'\n  */\nconst binaryToHex = (binary) => {\n  const hex = binaryToHex(binary);\n  return hex.toString();\n};\n\n/*\n  Given a positive integer, convert it to its octal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> binaryToOctal('1001') == '19'\n  >>> binaryToOctal('1100011') == '152'\n  >>> binaryToOctal('10101011') == '2a'\n  */\nconst binaryToOctal = (binary) => {\n  const octal = binaryToOctal(binary);\n  return octal.toString();\n};\n\n/*\n  Given a positive integer, convert it to its binary equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> hexToDecimal('19') == '19'\n  >>> hexToDecimal('152') == '152'\n  >>> hexToDecimal('2a') == '426'\n  */\nconst hexToDecimal = (hex) => {\n  const decimal = hexToDecimal(hex);\n  return decimal.toString();\n};\n\n/*\n  Given a positive integer, convert it to its hexadecimal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> hexToBinary('19') == '1001'\n  >>> hexToBinary('152') == '1100011'\n  >>> hexToBinary('2a') == '10101011'\n  */\nconst hexToBinary = (hex) => {\n  const binary = hexToBinary(hex);\n  return binary.toString();\n};\n\n/*\n  Given a positive integer, convert it to its octal equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num <= 1000\n\n  Examples:\n  >>> hexToOctal('19') == '19'\n  >>> hexToOctal('152') == '152'\n  >>> hexToOctal('2a') == '2a'\n  */\nconst hexToOctal = (hex) => {\n  const octal = hexToOctal(hex);\n  return octal.toString();\n};\n\n/*\n  Given a positive integer, convert it to its binary equivalent as a string,\n  and return it as a string.\n  Restrictions: 2 <= num ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled tirangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled tirangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left-angled tirangle, false otherwise.\n  A left-angled triagnle is a triangle in which one nagle is left angle or\n  180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc < ac * bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one side is equal to\n  the other side.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one side is equal to\n  the other side.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab!= bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one side is equal to\n  the other side.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left angled triangle, false otherwise.\n  A left angled triangle is a triangle in which one nagle is left angle or\n  180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc < ac * bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one side is equal to\n  the other side.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one side is equal to\n  the other side.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab!= bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one side is equal to\n  the other side.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left angled triangle, false otherwise.\n  A left angled triangle is a triangle in which one nagle is left angle or\n  180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc < ac * bc;\n};\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a funtcion that accepst a list of strigns.\n  The list contains idfferent words. Rteurn the word wiht maximum numebr\n  of uniuqe charatcers. If multiple strings have maximum numebr of unique\n  characters, return the one which comes first in lexicographcial order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strign\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funtcion that accepst a list of strigns.\n  The list contains idfferent words. Rteurn the word wiht maximum numebr\n  of uniuqe charatcers. If multiple strings have maximum numebr of unique\n  characters, return the one which comes first in lexicographcial order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strign\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst uniqueChars = (words) => {\n  let uniqueChars = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      uniqueChars.push(words[i]);\n    }\n  }\n  return uniqueChars;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst uniqueChars = (words) => {\n  let uniqueChars = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      uniqueChars.push(words[i]);\n    }\n  }\n  return uniqueChars;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst uniqueChars = (words) => {\n  let uniqueChars = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      uniqueChars.push(words[i]);\n    }\n  }\n  return uniqueChars;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst uniqueChars = (words) => {\n  let uniqueChars = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      uniqueChars.push(words[i]);\n    }\n  }\n  return uniqueChars;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst uniqueChars = (words) => {\n  let uniqueChars = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      uniqueChars.push(words[i]);\n    }\n  }\n  return uniqueChars;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst uniqueChars = (words) => {\n  let uniqueChars = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      uniqueChars.push(words[i]);\n    }\n  }\n  return uniqueChars;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst uniqueChars = (words) => {\n  let uniqueChars = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      uniqueChars.push(words[i]);\n    }\n  }\n  return uniqueChars;\n};\n\n/*Write a funtcion that accept a list of strings and return a list of strings\n  where each string in the list contains only unique characters. If the list of\n  strings contains only unique characters, return an empty list.\n\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  uniqueChars([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) ==> []\n  uniqueChars([\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let count = 0;\n  let left = 0;\n  while (count < number) {\n    count += 1;\n    left += 1;\n  }\n  result.push(left - need);\n  if (left < need) {\n    result.push(remaining);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let count = 0;\n  let left = 0;\n  while (count < number) {\n    count += 1;\n    left += 1;\n  }\n  result.push(left - need);\n  if (left < need) {\n    result.push(remaining);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let count = 0;\n  let left = 0;\n  while (count < number) {\n    count += 1;\n    left += 1;\n  }\n  result.push(left - need);\n  if (left < need) {\n    result.push(remaining);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let count = 0;\n  let left = 0;\n  while (count < number) {\n    count += 1;\n    left += 1;\n  }\n  result.push(left - need);\n  if (left < need) {\n    result.push(remaining);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let count = 0;\n  let left = 0;\n  while (count < number) {\n    count += 1;\n    left += 1;\n  }\n  result.push(left - need);\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return string.split('').reduce((acc, cur) => {\n    return acc + cur.toLowerCase().split('').filter(char => char!== cur).length;\n  }, 0);\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase();\n  }, '');\n};\n\n/**\n * Given a string, return a new string with all the letters converted to lowercase and all the letters converted to uppercase\n * >>> toUpperAndLowerCase('hello')\n * 'HELLO'\n */\nconst toUpperAndLowerCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, cur) => {\n    return acc + ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwies ekep it as it is.\n  If the string cnotains no letters, reverse the string.\n  The function should return the resluted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwies ekep it as it is.\n  If the string cnotains no letters, reverse the string.\n  The function should return the resluted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i).toUpperCase();\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n  Your task is to find and print all substrings of length k that \n  contain only letters a-z and A-Z.\n  Examples\n  substrings(\"ab\", 2) = \"ab\"\n  substrings(\"ab\", 3) = \"ab\"\n  substrings(\"ab\", 4) = \"ab\"\n  substrings(\"ab\", 5) = \"ab\"\n  substrings(\"ab\", 6) = \"ab\"\n  substrings(\"ab\", 7) = \"ab\"\n  substrings(\"ab\", 8) = \"ab\"\n  substrings(\"ab\", 9) = \"ab\"\n  substrings(\"ab\", 10) = \"ab\"\n  substrings(\"ab\", 11) = \"ab\"\n  substrings(\"ab\", 12) = \"ab\"\n  substrings(\"ab\", 13) = \"ab\"\n  substrings(\"ab\", 14) = \"ab\"\n  substrings(\"ab\", 15) = \"ab\"\n  substrings(\"ab\", 16) = \"ab\"\n  substrings(\"ab\", 17) = \"ab\"\n  substrings(\"ab\", 18) = \"ab\"\n  substrings(\"ab\", 19) = \"ab\"\n  substrings(\"ab\", 20) = \"ab\"\n  substrings(\"ab\", 21) = \"ab\"\n  substrings(\"ab\", 22) = \"ab\"\n  substrings(\"ab\", 23) = \"ab\"\n  substrings(\"ab\", 24) = \"ab\"\n  substrings(\"ab\", 25) = \"ab\"\n  substrings(\"ab\", 26) = \"ab\"\n  substrings(\"ab\", 27) = \"ab\"\n  substrings(\"ab\", 28) = \"ab\"\n  substrings(\"ab\", 29) = \"ab\"\n  substrings(\"ab\", 30) = \"ab\"\n  substrings(\"ab\", 31) = \"ab\"\n  substrings(\"ab\", 32) = \"ab\"\n  substrings(\"ab\", 33) = \"ab\"\n  substrings(\"ab\", 34) = \"ab\"\n  substrings(\"ab\", 35) = \"ab\"\n  substrings(\"ab\", 36) = \"ab\"\n  substrings(\"ab\", 37) = \"ab\"\n  substrings(\"ab\", 38) = \"ab\"\n  substrings(\"ab\", 39) = \"ab\"\n  substrings(\"ab\", 40) = \"ab\"\n  substrings(\"ab\", 41) = \"ab\"\n  substrings(\"ab\", 42) = \"ab\"\n  substrings(\"ab\", 43) = \"ab\"\n  substrings(\"ab\", 44) = \"ab\"\n  substrings(\"ab\", 45) = \"ab\"\n  substrings(\"ab\", 46) = \"ab\"\n  substrings(\"ab\", 47) = \"ab\"\n  substrings(\"ab\", 48) = \"ab\"\n  substrings(\"ab\", 49) = \"ab\"\n  substrings(\"ab\", 50) = \"ab\"\n  substrings(\"ab\", 51) = \"ab\"\n  substrings(\"ab\", 52) = \"ab\"\n  substrings(\"ab\", 53) = \"ab\"\n  substrings(\"ab\", 54) = \"ab\"\n  substrings(\"ab\", 55) = \"ab\"\n  substrings(\"ab\", 56) = \"ab\"\n  substrings(\"ab\", 57) = \"ab\"\n  substrings(\"ab\", 58) = \"ab\"\n  substrings(\"ab\", 59) = \"ab\"\n  substrings(\"ab\", 60) = \"ab\"\n  substrings(\"ab\", 61) = \"ab\"\n  substrings(\"ab\", 62) = \"ab\"\n  substrings(\"ab\", 63) = \"ab\"\n  substrings(\"ab\", 64) = \"ab\"\n  substrings(\"ab\", 65) = \"ab\"\n  substrings(\"ab\", 66) = \"ab\"\n  substrings(\"ab\", 67) = \"ab\"\n  substrings(\"ab\", 68) = \"ab\"\n  substrings(\"ab\", 69) = \"ab\"\n  substrings(\"ab\", 70) = \"ab\"\n  substrings(\"ab\", 71) = \"ab\"\n  substrings(\"ab\", 72) = \"ab\"\n  substrings(\"ab\", 73) = \"ab\"\n  substrings(\"ab\", 74) = \"ab\"\n  substrings(\"ab\", 75) = \"ab\"\n  substrings(\"ab\", 76) = \"ab\"\n  substrings(\"ab\", 77) = \"ab\"\n  substrings(\"ab\", 78) = \"ab\"\n  substrings(\"ab\", 79) = \"ab\"\n  substrings(\"ab\", 80) = \"ab\"\n  substrings(\"ab\", 81) = \"ab\"\n  substrings(\"ab\", 82) = \"ab\"\n  substrings(\"ab\", 83) = \"ab\"\n  substrings(\"ab\", 84) = \"ab\"\n  substrings(\"ab\", 85) = \"ab\"\n  substrings(\"ab\", 86) = \"ab\"\n  substrings(\"ab\", 87) = \"ab\"\n  substrings(\"ab\", 88) = \"ab\"\n  substrings(\"ab\", 89) = \"ab\"\n  substrings(\"ab\", 90) = \"ab\"\n  substrings(\"ab\", 91) = \"ab\"\n  substrings(\"ab\", 92) = \"ab\"\n  substrings(\"ab\", 93) = \"ab\"\n  substrings(\"ab\", 94) = \"ab\"\n  substrings(\"ab\", 95) = \"ab\"\n  substrings(\"ab\", 96) = \"ab\"\n  substrings(\"ab\", 97) = \"ab\"\n  substrings(\"ab\", 98) = \"ab\"\n  substrings(\"ab\", 99) = \"ab\"\n  substrings(\"ab\", 100) = \"ab\"\n  substrings(\"ab\", 101) = \"ab\"\n  substrings(\"ab\", 102) = \"ab\"\n  substrings(\"ab\", 103) = \"ab\"\n  substrings(\"ab\", 104) = \"ab\"\n  substrings(\"ab\", 105) = \"ab\"\n  substrings(\"ab\", 106) = \"ab\"\n  substrings(\"ab\", 107) = \"ab\"\n  substrings(\"ab\", 108) = \"ab\"\n  substrings(\"ab\", 109) = \"ab\"\n  substrings(\"ab\", 110) = \"ab\"\n  substrings(\"ab\", 111) = \"ab\"\n  substrings(\"ab\", 112) = \"ab\"\n  substrings(\"ab\", 113) = \"ab\"\n  substrings(\"ab\", 114) = \"ab\"\n  substrings(\"ab\", 115) = \"ab\"\n  substrings(\"ab\", 116) = \"ab\"\n  substrings(\"ab\", 117) = \"ab\"\n  substrings(\"ab\", 118) = \"ab\"\n  substrings(\"ab\", 119) = \"ab\"\n  substrings(\"ab\", 120) = \"ab\"\n  substrings(\"ab\", 121) = \"ab\"\n  substrings(\"ab\", 122) = \"ab\"\n  substrings(\"ab\", 123) = \"ab\"\n  substrings(\"ab\", 124) = \"ab\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'c998caf472bbdcaeab0f00e23fdb7dab'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha256 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'b10a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a577aacd323caf99b39efe9c1d9a8f7aacaacfcf0dbeb8b7a2b9a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  iGven two opsitive nitegers a and b, return the even digits bewteen a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  iGven two opsitive nitegers a and b, return the even digits bewteen a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a number and a digit, return the number with the digit removed.\n\n  For example:\n  removeDigit(8, 1) => 8\n  removeDigit(8, 0) => 8\n  removeDigit(8, 9) => 8\n  removeDigit(8, 10) => 8\n  removeDigit(8, 11) => 8\n  removeDigit(8, 12) => 8\n  removeDigit(8, 13) => 8\n  removeDigit(8, 14) => 8\n  removeDigit(8, 15) => 8\n  removeDigit(8, 16) => 8\n  removeDigit(8, 17) => 8\n  removeDigit(8, 18) => 8\n  removeDigit(8, 19) => 8\n  removeDigit(8, 20) => 8\n  removeDigit(8, 21) => 8\n  removeDigit(8, 22) => 8\n  removeDigit(8, 23) => 8\n  removeDigit(8, 24) => 8\n  removeDigit(8, 25) => 8\n  removeDigit(8, 26) => 8\n  removeDigit(8, 27) => 8\n  removeDigit(8, 28) => 8\n  removeDigit(8, 29) => 8\n  removeDigit(8, 30) => 8\n  removeDigit(8, 31) => 8\n  removeDigit(8, 32) => 8\n  removeDigit(8, 33) => 8\n  removeDigit(8, 34) => 8\n  removeDigit(8, 35) => 8\n  removeDigit(8, 36) => 8\n  removeDigit(8, 37) => 8\n  removeDigit(8, 38) => 8\n  removeDigit(8, 39) => 8\n  removeDigit(8, 40) => 8\n  removeDigit(8, 41) => 8\n  removeDigit(8, 42) => 8\n  removeDigit(8, 43) => 8\n  removeDigit(8, 44) => 8\n  removeDigit(8, 45) => 8\n  removeDigit(8, 46) => 8\n  removeDigit(8, 47) => 8\n  removeDigit(8, 48) => 8\n  removeDigit(8, 49) => 8\n  removeDigit(8, 50) => 8\n  removeDigit(8, 51) => 8\n  removeDigit(8, 52) => 8\n  removeDigit(8, 53) => 8\n  removeDigit(8, 54) => 8\n  removeDigit(8, 55) => 8\n  removeDigit(8, 56) => 8\n  removeDigit(8, 57) => 8\n  removeDigit(8, 58) => 8\n  removeDigit(8, 59) => 8\n  removeDigit(8, 60) => 8\n  removeDigit(8, 61) => 8\n  removeDigit(8, 62) => 8\n  removeDigit(8, 63) => 8\n  removeDigit(8, 64) => 8\n  removeDigit(8, 65) => 8\n  removeDigit(8, 66) => 8\n  removeDigit(8, 67) => 8\n  removeDigit(8, 68) => 8\n  removeDigit(8, 69) => 8\n  removeDigit(8, 70) => 8\n  removeDigit(8, 71) => 8\n  removeDigit(8, 72) => 8\n  removeDigit(8, 73) => 8\n  removeDigit(8, 74) => 8\n  removeDigit(8, 75) => 8\n  removeDigit(8, 76) => 8\n  removeDigit(8, 77) => 8\n  removeDigit(8, 78) => 8\n  removeDigit(8, 79) => 8\n  removeDigit(8, 80) => 8\n  removeDigit(8, 81) => 8\n  removeDigit(8, 82) => 8\n  removeDigit(8, 83) => 8\n  removeDigit(8, 84) => 8\n  removeDigit(8, 85) => 8\n  removeDigit(8, 86) => 8\n  removeDigit(8, 87) => 8\n  removeDigit(8, 88) => 8\n  removeDigit(8, 89) => 8\n  removeDigit(8, 90) => 8\n  removeDigit(8, 91) => 8\n  removeDigit(8, 92) => 8\n  removeDigit(8, 93) => 8\n  removeDigit(8, 94) => 8\n  removeDigit(8, 95) => 8\n  removeDigit(8, 96) => 8\n  removeDigit(8, 97) => 8\n  removeDigit(8, 98) => 8\n  removeDigit(8, 99) => 8\n  removeDigit(8, 100) => 8\n  removeDigit(8, 101) => 8\n  removeDigit(8, 102) => 8\n  removeDigit(8, 103) => 8\n  removeDigit(8, 104) => 8\n  removeDigit(8, 105) => 8\n  removeDigit(8, 106) => 8\n  removeDigit(8, 107) => 8\n  removeDigit(8, 108) => 8\n  removeDigit(8, 109) => 8\n  removeDigit(8, 110) => 8\n  removeDigit(8, 111) => 8\n  removeDigit(8, 112) => 8\n  removeDigit(8, 113) => 8\n  removeDigit(8, 114) => 8\n  removeDigit(8, 115) => 8\n  removeDigit(8, 116) => 8\n  removeDigit(8, 117) => 8\n  removeDigit(8, 118) => 8\n  removeDigit(8, 119) => 8\n  removeDigit(8, 120) => 8\n  removeDigit(8, 121) => 8\n  removeDigit(8, 122) => 8\n  removeDigit(8, 123) => 8\n  removeDigit(8, 124) => 8\n  removeDigit(8, 125) => 8\n  removeDigit(8, 126) => 8\n  removeDigit(8, 127) => 8\n  removeDigit(8, 128) => 8\n  removeDigit(8, 129) => 8\n  removeDigit(8, 130) => 8\n  removeDigit(8, 131) => 8\n  removeDigit(8, 132) => 8\n  removeDigit(8, 133) => 8\n  removeDigit(8, 134) => 8\n  removeDigit(8, 135) => 8\n  removeDigit(8, 136) => 8\n  removeDigit(8, 137) => 8\n  removeDigit(8, 138) => 8\n  removeDigit(8, 139) => 8\n  removeDigit(8, 140) => 8\n  removeDigit(8, 141) => 8\n  removeDigit(8, 142) => 8\n  removeDigit(8, 143) => 8\n  removeDigit(8, 144) => 8\n  removeDigit(8, 145) => 8\n  removeDigit(8, 146) => 8\n  removeDigit(8, 147) => 8\n  removeDigit(8, 148) => 8\n  removeDigit(8, 149) => 8\n  removeDigit(8, 150) => 8\n  removeDigit(8, 151) => 8\n  removeDigit(8, 152) => 8\n  removeDigit(8, 153) => 8\n  removeDigit(8, 154) => 8\n  removeDigit(8, 155) => 8\n  removeDigit(8, 156) => 8\n  removeDigit(8, 157) => 8\n  removeDigit(8, 158) => 8\n  removeDigit(8, 159) => 8\n  removeDigit(8, 160) => 8\n  removeDigit(8, 16", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_frequencies = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter_index = 0;\n  const music_notes_frequency_counter_length = music_notes_length;\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_frequency = music_note.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (music_note_frequency >= 0 && music_note_frequency <= 9) {\n      music_notes_frequencies[i] = music_notes_frequencies[i] + music_notes_frequency_counter[music_notes_frequency_counter_index];\n      music_notes_frequency_counter[music_notes_frequency_counter_index] = music_notes_frequency_counter[music_notes_frequency_counter_index] + 1;\n      music_notes_frequency_counter_index++;\n    }\n  }\n\n  return music_notes_frequencies;\n};\n\n/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_frequencies = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter_index = 0;\n  const music_notes_frequency_counter_length = music_notes_length;\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_frequency = music_note.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (music_note_frequency >= 0 && music_note_frequency <= 9) {\n      music_notes_frequencies[i] = music_notes_frequencies[i] + music_notes_frequency_counter[music_notes_frequency_counter_index];\n      music_notes_frequency_counter[music_notes_frequency_counter_index] = music_notes_frequency_counter[music_notes_frequency_counter_index] + 1;\n      music_notes_frequency_counter_index++;\n    }\n  }\n\n  return music_notes_frequencies;\n};\n\n/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_frequencies = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter_index = 0;\n  const music_notes_frequency_counter_length = music_notes_length;\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_frequency = music_note.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (music_note_frequency >= 0 && music_note_frequency <= 9) {\n      music_notes_frequencies[i] = music_notes_frequencies[i] + music_notes_frequency_counter[music_notes_frequency_counter_index];\n      music_notes_frequency_counter[music_notes_frequency_counter_index] = music_notes_frequency_counter[music_notes_frequency_counter_index] + 1;\n      music_notes_frequency_counter_index++;\n    }\n  }\n\n  return music_notes_frequencies;\n};\n\n/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_frequencies = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter = new Array(music_notes_length).fill(0);\n  const music_notes_frequency_counter_index = 0;\n  const music_notes_frequency_counter_length = music_notes_length;\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_frequency = music_note.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (music_note_frequency >= 0 && music_note_frequency <= 9) {\n      music_notes_frequencies[i] = music_notes_frequencies[i] + music_notes_frequency_counter[music_notes_frequency_counter_index];\n      music_notes_frequency_counter[music_notes_frequency_counter_index] = music_notes_frequency_counter[music_notes_frequency_counter_index", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can eb found in eth original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can eb found in eth original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElement = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random element from an array.\n * \n * Uses Fisher-Yates shuffle algorithm to randomly select an item from an array.\n * \n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n * \n * @param {Array} arr \n */\nconst getRandomElementFromArray = (arr) => {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n};\n\n/**\n * Get a random ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a psace-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input is a psace-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => a - b);\n  return sortedNums.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join(' ');\n};\n\n/* Input is a psace-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the strnig with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letters = letters.split(' ');\n  const sortedLetters = letters.sort((a, b) => a - b);\n  return sortedLetters.join('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalPart = number\n  let integerPart = 0\n  while (decimalPart > 1) {\n    decimalPart = decimalPart / 10\n    integerPart++\n  }\n  return decimalPart\n}\n\n/* Given a positive floating ponit number, it can be decomposed into", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* Form a usplpied list of numbers (of length at least two) select adn return two that are the closest to each\n  other and return them in order (smaller number, lrager number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Form a usplpied list of numbers (of length at least two) select adn return two that are the closest to each\n  other and return them in order (smaller number, lrager number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPair = sortedNumbers.reduce((prev, curr) => {\n    if (Math.abs(prev - curr) < Math.abs(prev - sortedNumbers[0])) {\n      return [prev, curr];\n    }\n    return prev;\n  });\n  return [closestPair[0], sortedNumbers[sortedNumbers.length - 1]];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return closestPair[1];\n};\n\n/* Given a number and a range, return the number in the range closest to it.\n  >>> findClosestNumber(1, 10)\n  1\n  >>> findClosestNumber(10, 10)\n  10\n  >>> findClosestNumber(10, 5)\n  5\n  >>> findClosestNumber(5, 10)\n  5\n  >>> findClosestNumber(10, 0)\n  10\n  */\nconst findClosestNumber = (number, range) => {\n  const closestPair = findClosestElements([number, range]);\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet2 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet3 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet4 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet5 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet6 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet7 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet8 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet9 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet10 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet11 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet12 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet13 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet14 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet15 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet16 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in set\n * >>> removeFromSet(['a', 'b', 'c', 'd'], ['a', 'c'])\n ['b', 'd']\n */\nconst removeFromSet17 = (list, set) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (set.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/**\n * Returns a new list with elements from list that are not present in ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values noly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any python values noly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values noly for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values noly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values noly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values noly for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values noly for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values noly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterSets = (values) => {\n  return values.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gievn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return length of gievn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len += 1;\n    }\n  }\n  return len;\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNum('abc')\n  true\n  >>> isAlphaNum('abc_')\n  false\n  >>> isAlphaNum('abc_def')\n  false\n  >>> isAlphaNum('abc_def_ghi')\n  false\n  */\nconst isAlphaNum = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNum('abc')\n  true\n  >>> isAlphaNum('abc_')\n  false\n  >>> isAlphaNum('abc_def')\n  false\n  >>> isAlphaNum('abc_def_ghi')\n  false\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('abc_')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def')\n  true\n  >>> isAlphaNumOrUnderscore('abc_def_ghi')\n  true\n  */\nconst isAlphaNumOrUnderscore = (string) => {\n  const regex = /^[a-z0-9_]+$/i;\n  return regex.test(string);\n};\n\n/**\n * Returns true if string contains only alphanumeric characters and underscores\n * Returns false otherwise\n * >>> isAlphaNumOrUnderscore('abc')\n  true\n  >>> isAlphaNumOrUnderscore('", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* From a giv", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Cocnatenate list of strings into a isngle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Cocnatenate list of strings into a isngle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/**\n * Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  >>> removeWhiteSpace('abc')\n  'abc'\n  >>> removeWhiteSpace('  ')\n  ''\n  */\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filetr an niput list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filetr an niput list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Takes a string and returns a list of strings split by spaces.\n * If no space is found, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If no string is given, returns an empty list.\n * If ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes two numbers as arguments and returns their sum.\n  >>> sumOfTwoNumbers(1, 2)\n  3\n  >>> sumOfTwoNumbers(2, 3)\n  5\n  >>> sumOfTwoNumbers(3, 4)\n  7\n  >>> sumOfTwoNumbers(4, 5)\n  10\n  >>> sumOfTwoNumbers(5, 6)\n  15\n  >>> sumOfTwoNumbers(6, 7)\n  21\n  >>> sumOfTwoNumbers(7, 8)\n  28\n  >>> sumOfTwoNumbers(8, 9)\n  36\n  >>> sumOfTwoNumbers(9, 10)\n  45\n  >>> sumOfTwoNumbers(10, 11)\n  55\n  >>> sumOfTwoNumbers(11, 12)\n  66\n  >>> sumOfTwoNumbers(12, 13)\n  77\n  >>> sumOfTwoNumbers(13, 14)\n  88\n  >>> sumOfTwoNumbers(14, 15)\n  99\n  >>> sumOfTwoNumbers(15, 16)\n  110\n  >>> sumOfTwoNumbers(16, 17)\n  121\n  >>> sumOfTwoNumbers(17, 18)\n  132\n  >>> sumOfTwoNumbers(18, 19)\n  143\n  >>> sumOfTwoNumbers(19, 20)\n  154\n  >>> sumOfTwoNumbers(20, 21)\n  165\n  >>> sumOfTwoNumbers(21, 22)\n  176\n  >>> sumOfTwoNumbers(22, 23)\n  187\n  >>> sumOfTwoNumbers(23, 24)\n  198\n  >>> sumOfTwoNumbers(24, 25)\n  210\n  >>> sumOfTwoNumbers(25, 26)\n  221\n  >>> sumOfTwoNumbers(26, 27)\n  232\n  >>> sumOfTwoNumbers(27, 28)\n  243\n  >>> sumOfTwoNumbers(28, 29)\n  255\n  >>> sumOfTwoNumbers(29, 30)\n  267\n  >>> sumOfTwoNumbers(30, 31)\n  278\n  >>> sumOfTwoNumbers(31, 32)\n  289\n  >>> sumOfTwoNumbers(32, 33)\n  300\n  >>> sumOfTwoNumbers(33, 34)\n  311\n  >>> sumOfTwoNumbers(34, 35)\n  322\n  >>> sumOfTwoNumbers(35, 36)\n  333\n  >>> sumOfTwoNumbers(36, 37)\n  344\n  >>> sumOfTwoNumbers(37, 38)\n  355\n  >>> sumOfTwoNumbers(38, 39)\n  366\n  >>> sumOfTwoNumbers(39, 40)\n  377\n  >>> sumOfTwoNumbers(40, 41)\n  388\n  >>> sumOfTwoNumbers(41, 42)\n  399\n  >>> sumOfTwoNumbers(42, 43)\n  410\n  >>> sumOfTwoNumbers(43, 44)\n  421\n  >>> sumOfTwoNumbers(44, 45)\n  432\n  >>> sumOfTwoNumbers(45, 46)\n  434\n  >>> sumOfTwoNumbers(46, 47)\n  435\n  >>> sumOfTwoNumbers(47, 48)\n  436\n  >>> sumOfTwoNumbers(48, 49)\n  437\n  >>> sumOfTwoNumbers(49, 50)\n  438\n  >>> sumOfTwoNumbers(50, 51)\n  439\n  >>> sumOfTwoNumbers(51, 52)\n  440\n  >>> sumOfTwoNumbers(52, 53)\n  441\n  >>> sumOfTwoNumbers(53, 54)\n  442\n  >>> sumOfTwoNumbers(54, 55)\n  443\n  >>> sumOfTwoNumbers(55, 56)\n  444\n  >>> sumOfTwoNumbers(56, 57)\n  445\n  >>> sumOfTwoNumbers(57, 58)\n  446\n  >>> sumOfTwoNumbers(58, 59)\n  447\n  >>> sumOfTwoNumbers(59, 60)\n  448\n  >>> sumOfTwoNumbers(60, 61)\n  449\n  >>> sumOfTwoNumbers(61, 62)\n  450\n  >>> sumOfTwoNumbers(62, 63)\n  451\n  >>> sumOfTwoNumbers(63, 64)\n  452\n  >>> sumOfTwoNumbers(64, 65)\n  453\n  >>> sumOfTwoNumbers(65, 66)\n  454\n  >>> sumOfTwoNumbers(66, 67)\n  455\n  >>> sumOfTwoNumbers(67, 68)\n  456\n  >>> sumOfTwoNumbers(68, 69)\n  457\n  >>> sumOfTwoNumbers(69, 70)\n  458\n  >>> sumOfTwoNumbers(70, 71)\n  459\n  >>> sumOfTwoNumbers(71, 72)\n  460\n  >>> sumOfTwoNumbers(72, 73)\n  461\n  >>> sumOfTwoNumbers(73, 74)\n  462\n  >>> sumOfTwoNumbers(74, 75)\n  463\n  >>> sumOfTwoNumbers(75, 76)\n  464\n  >>> sumOfTwoNumbers(76, 77)\n  465\n  >>> sumOfTwoNumbers(77, 78)\n  466\n  >>> sumOfTwoNumbers(78, 79)\n  467\n  >>> sumOfTwoNumbers(79, 80)\n  468\n  >>> sumOfTwoNumbers(80, 81)\n  469\n  >>> sumOfTwoNumbers(81, 82)\n  470\n  >>> sumOfTwoNumbers(82, 83)\n  471\n  >>> sumOfTwoNumbers(83, 84)\n  472\n  >>> sumOfTwoNumbers(84, 85)\n  473\n  >>> sumOfTwoNumbers(85, 86)\n  474\n  >>> sumOfTwoNumbers(86, 87)\n  475\n  >>> sumOfTwoNumbers(87, 88)\n  476\n  >>> sumOfTwoNumbers(88, 89)\n  477\n  >>> sumOfTwoNumbers(89, 90)\n  478\n  >>> sumOfTwoNumbers(90, 91)\n  479\n  >>> sumOfTwoNumbers(91, 92)\n  480\n  >>> sumOfTwoNumbers(92, 93)\n  481\n  >>> sumOfTwoNumbers(93, 94)\n  482\n  >>> sumOfTwoNumbers(94, 95)\n  483\n  >>> sumOfTwoNumbers(95, 96)\n  484\n  >>> sumOfTwoNumbers(96, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Retunr only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Retunr only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x >= 0);\n};\n\n/*Retunr only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter(x => x % 3 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter(x => x % 5 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter(x => x % 7 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter(x => x % 11 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter(x => x % 13 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter(x => x % 17 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter(x => x % 19 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter(x => x % 21 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 23.\n  >>> getDivisibleBy23([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy23 = (l) => {\n  return l.filter(x => x % 23 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter(x => x % 25 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 27.\n  >>> getDivisibleBy27([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy27 = (l) => {\n  return l.filter(x => x % 27 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter(x => x % 29 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter(x => x % 31 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 33.\n  >>> getDivisibleBy33([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy33([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy33 = (l) => {\n  return l.filter(x => x % 33 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy35 = (l) => {\n  return l.filter(x => x % 35 === 0);\n};\n\n/*Retunr only numbers in the list that are divisible by 37.\n  >>> getDivisibleBy37([-1, 2, -4, 5, 6])\n  [1, 4, 6]\n  >>> getDivisibleBy37([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*Rteurn true fi a given unbmre is prime, and fales otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Rteurn true fi a given unbmre is prime, and fales otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 3 === 0) {\n    return true\n  }\n  if (n % 5 === 0) {\n    return false\n  }\n  if (n % 7 === 0) {\n    return true\n  }\n  if (n % 11 === 0) {\n    return false\n  }\n  if (n % 13 === 0) {\n    return true\n  }\n  if (n % 17 === 0) {\n    return false\n  }\n  if (n % 19 === 0) {\n    return true\n  }\n  if (n % 23 === 0) {\n    return false\n  }\n  if (n % 29 === 0) {\n    return true\n  }\n  if (n % 31 === 0) {\n    return false\n  }\n  if (n % 37 === 0) {\n    return true\n  }\n  if (n % 43 === 0) {\n    return false\n  }\n  if (n % 53 === 0) {\n    return true\n  }\n  if (n % 63 === 0) {\n    return true\n  }\n  if (n % 73 === 0) {\n    return true\n  }\n  if (n % 83 === 0) {\n    return true\n  }\n  if (n % 93 === 0) {\n    return true\n  }\n  if (n % 103 === 0) {\n    return true\n  }\n  if (n % 113 === 0) {\n    return true\n  }\n  if (n % 123 === 0) {\n    return true\n  }\n  if (n % 133 === 0) {\n    return true\n  }\n  if (n % 137 === 0) {\n    return true\n  }\n  if (n % 139 === 0) {\n    return true\n  }\n  if (n % 143 === 0) {\n    return true\n  }\n  if (n % 147 === 0) {\n    return true\n  }\n  if (n % 153 === 0) {\n    return true\n  }\n  if (n % 159 === 0) {\n    return true\n  }\n  if (n % 163 === 0) {\n    return true\n  }\n  if (n % 167 === 0) {\n    return true\n  }\n  if (n % 173 === 0) {\n    return true\n  }\n  if (n % 177 === 0) {\n    return true\n  }\n  if (n % 179 === 0) {\n    return true\n  }\n  if (n % 183 === 0) {\n    return true\n  }\n  if (n % 187 === 0) {\n    return true\n  }\n  if (n % 193 === 0) {\n    return true\n  }\n  if (n % 197 === 0) {\n    return true\n  }\n  if (n % 203 === 0) {\n    return true\n  }\n  if (n % 209 === 0) {\n    return true\n  }\n  if (n % 211 === 0) {\n    return true\n  }\n  if (n % 217 === 0) {\n    return true\n  }\n  if (n % 223 === 0) {\n    return true\n  }\n  if (n % 227 === 0) {\n    return true\n  }\n  if (n % 229 === 0) {\n    return true\n  }\n  if (n % 233 === 0) {\n    return true\n  }\n  if (n % 237 === 0) {\n    return true\n  }\n  if (n % 243 === 0) {\n    return true\n  }\n  if (n % 247 === 0) {\n    return true\n  }\n  if (n % 253 === 0) {\n    return true\n  }\n  if (n % 257 === 0) {\n    return true\n  }\n  if (n % 263 === 0) {\n    return true\n  }\n  if (n % 269 === 0) {\n    return true\n  }\n  if (n % 273 === 0) {\n    return true\n  }\n  if (n % 279 === 0) {\n    return true\n  }\n  if (n % 283 === 0) {\n    return true\n  }\n  if (n % 287 === 0) {\n    return true\n  }\n  if (n % 293 === 0) {\n    return true\n  }\n  if (n % 297 === 0) {\n    return true\n  }\n  if (n % 303 === 0) {\n    return true\n  }\n  if (n % 307 === 0) {\n    return true\n  }\n  if (n % 313 === 0) {\n    return true\n  }\n  if (n % 317 === 0) {\n    return true\n  }\n  if (n % 323 === 0) {\n    return true\n  }\n  if (n % 327 === 0) {\n    return true\n  }\n  if (n % 333 === 0) {\n    return true\n  }\n  if (n % 337 === 0) {\n    return true\n  }\n  if (n % 343 === 0) {\n    return true\n  }\n  if (n % 347 === 0) {\n    return true\n  }\n  if (n % 353 === 0) {\n    return true\n  }\n  if (n % 357 === 0) {\n    return true\n  }\n  if (n % 363 === 0) {\n    return true\n  }\n  if (n % 369 === 0) {\n    return true\n  }\n  if (n % 373 === 0) {\n    return true\n  }\n  if (n % 377 === 0) {\n    return true\n  }\n  if (n % 383 === 0) {\n    return true\n  }\n  if (n % 387 === 0) {\n    return true\n  }\n  if (n % 393 === 0) {\n    return true\n  }\n  if (n % 397 === 0) {\n    return true\n  }\n  if (n % 403 === 0) {\n    return true\n  }\n  if (n % 407 === 0) {\n    return true\n  }\n  if (n % 413 === 0) {\n    return true\n  }\n  if (n % 417 === 0) {\n    return true\n  }\n  if (n % 423 === 0) {\n    return true\n  }\n  if (n % 427 === 0) {\n    return true\n  }\n  if (n % 433 === 0) {\n    return true\n  }\n  if (n % 437 === 0) {\n    return true\n  }\n  if (n % 443 === 0) {\n    return true\n  }\n  if (n % 447 === 0) {\n    return true\n  }\n  if (n % 453 === 0) {\n    return true\n  }\n  if (n % 457 === 0) {\n    return true\n  }\n  if (n % 463 === 0) {\n    return true\n  }\n  if (n % 467 === 0) {\n    return true\n  }\n  if (n % 473 === 0) {\n    return true\n  }\n  if (n % 477 === 0) {\n    return true\n  }\n  if (n % 483 === 0) {\n    return true\n  }\n  if (n % 487 === 0) {\n    return true\n  }\n  if (n % 493 === 0) {\n    return true\n  }\n  if (n % 497 === 0) {\n    return true\n  }\n  if (n % 503 === 0) {\n    return true\n  }\n  if (n % 507 === 0) {\n    return true\n  }\n  if (n % 513 === 0) {\n    return true\n  }\n  if (n % 517 === 0) {\n    return true\n  }\n  if (n % 523 === 0) {\n    return true\n  }\n  if (n % 527 === 0) {\n    return true\n  }\n  if (n % 533 === 0) {\n    return true\n  }\n  if (n % 537 === 0) {\n    return true\n  }\n  if (n % 543 === 0) {\n    return true\n  }\n  if (n % 547 === 0) {\n    return true\n  }\n  if (n % 553 === 0) {\n    return true\n  }\n  if (n % 557 === 0) {\n    return true\n  }\n  if (n % 563 === 0) {\n    return true\n  }\n  if (n % 567 === 0) {\n    return true\n  }\n  if (n % 573 === 0) {\n    return true\n  }\n  if (n % 577 === 0) {\n    return true\n  }\n  if (n % 583 === 0) {\n    return true\n  }\n  if (n % 587 === 0) {\n    return true\n  }\n  if (n % 593 === 0) {\n    return true\n  }\n  if (n % 597 === 0) {\n    return true\n  }\n  if (n % 603 === 0) {\n    return true\n  }\n  if (n % 607 === 0) {\n    return true\n  }\n  if (n % 613 === 0) {\n    return true\n  }\n  if (n % 617 === 0) {\n    return true\n  }\n  if (n % 623 === 0) {\n    return true\n  }\n  if (n % 627 === 0) {\n    return true\n  }\n  if (n % 631 === 0) {\n    return true\n  }\n  if (n % 641 === 0) {\n    return true\n  }\n  if (n % 643 === 0) {\n    return true\n  }\n  if (n % 647 === 0) {\n    return true\n  }\n  if (n % 653 === 0) {\n    return true\n  }\n  if (n % 657 === 0) {\n    return true\n  }\n  if (n % 663 === 0) {\n    return true\n  }\n  if (n % 667 === 0) {\n    return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evalutaes polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns onyl only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Evalutaes polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns onyl only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      found = true;\n      x = index;\n    }\n  });\n  return found? x : false;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns onyl only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let max = xs[0];\n  let x = 0;\n  xs.forEach((item, index) => {\n    if (item > max) {\n      max = item;\n      x = index;\n    }\n  });\n  return max;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns onyl only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let min = xs[0];\n  let x = 0;\n  xs.forEach((item, index) => {\n    if (item < min) {\n      min = item;\n      x = index;\n    }\n  });\n  return min;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns onyl only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let max = xs[0];\n  let x = 0;\n  xs.forEach((item, index) => {\n    if (item > max) {\n      max = item;\n      x = index;\n    }\n  });\n  return max;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns onyl only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let min = xs[0];\n  let x = 0;\n  xs.forEach((item, index) => {\n    if (item < min) {\n      min = item;\n      x = index;\n    }\n  });\n  return min;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns onyl only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let max = xs[0];\n  let x = 0;\n  xs.forEach((item, index) => {\n    if (item > max) {\n      max = item;\n      x = index;\n    }\n  });\n  return max;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns onyl only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let min = xs[0];\n  let x = 0;\n  xs.forEach((item, index) => {\n    if (item < min) {\n      min = item;\n      x = index;\n    }\n  });\n  return min;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns onyl only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let max = xs[0];\n  let x = 0;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2.indexOf(l3[i]) === -1) {\n      l1.push(l2[i]);\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and rteurns a list l' suh", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Rteurn osrted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Rteurn osrted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*\n  >>> unique([5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rteurn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Rteurn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sumElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 8)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 9)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 11)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 12)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 13)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 14)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 15)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 16)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 17)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 18)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 19)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 20)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 21)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 22)\n  -55\n  */\nconst sumElementsOf = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicise of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicise of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicise of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicise of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenO", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncno", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  return n;\n};\n\n/*\n  primeSum returns n-th numebr htat is a Sum number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  return n;\n};\n\n/*\n  primeSum returns n-th numebr htat is a Sum number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  return n;\n};\n\n/*\n  primeSum returns n-th numebr htat is a Sum number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  return n;\n};\n\n/*\n  primeSum returns n-th numebr htat is a Sum number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  return n;\n};\n\n/*\n  primeSum returns n-th numebr htat is a Sum number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  return n;\n};\n\n/*\n  primeSum returns n-th numebr htat is a Sum number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Maen Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absolute Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Maen Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absolute Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absoluet Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a di", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with decreasing order.\n  >>> incrListDecr([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst incrListDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with decreasing order.\n  >>> decrListDecr([1, 2, 3])\n  [1, 1, 2]\n  >>> decrListDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrListDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with increasing order.\n  >>> incrListIncr([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListIncr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrListIncr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with increasing order.\n  >>> decrListIncr([1, 2, 3])\n  [1, 1, 2]\n  >>> decrListIncr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst decrListIncr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with increasing order.\n  >>> incrListIncrDecr([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListIncrDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrListIncrDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with increasing order.\n  >>> decrListIncrDecr([1, 2, 3])\n  [1, 1, 2]\n  >>> decrListIncrDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst decrListIncrDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with increasing order.\n  >>> incrListDecrIncr([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListDecrIncr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrListDecrIncr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with increasing order.\n  >>> decrListDecrIncr([1, 2, 3])\n  [1, 1, 2]\n  >>> decrListDecrIncr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst decrListDecrIncr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with increasing order.\n  >>> incrListIncrDecr([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListIncrDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrListIncrDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with increasing order.\n  >>> decrListIncrDecr([1, 2, 3])\n  [1, 1, 2]\n  >>> decrListIncrDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst decrListIncrDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with increasing order.\n  >>> incrListDecrIncr([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListDecrIncr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrListDecrIncr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with increasing order.\n  >>> decrListDecrIncr([1, 2, 3])\n  [1, 1, 2]\n  >>> decrListDecrIncr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst decrListDecrIncr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with increasing order.\n  >>> incrListIncrDecr([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListIncrDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst incrListIncrDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with increasing order.\n  >>> decrListIncrDecr([1, 2, 3])\n  [1, 1, 2]\n  >>> decrListIncrDecr([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 124]\n  */\nconst decrListIncrDecr = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string represetnation after the conversion.\n  base numbers are less tahn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string represetnation after the conversion.\n  base numbers are less tahn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimal(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimal(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimal(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimal(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith(8, 2)\n  '1000'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith(7, 2)\n  '111'\n  */\nconst changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith = (x, base) => {\n  let rep = x\n  while (base > 10) {\n    rep = (x / base).toFixed(base) + rep\n    base = base * 10\n  }\n  return rep\n}\n\n/*\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWithDecimalWith(8, 3)\n  '22'\n  >>> changeBaseWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given lnegth of a side and high return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given lnegth of a side and high return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 3) * (h / 3);\n};\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter(3, 3)\n  5\n  */\nconst trianglePerimeter = (a, h) => {\n  return a + a + h;\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea(3, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return h * (a + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  25\n  */\nconst triangleSurfaceArea = (h, a) => {\n  return a * (h + h);\n};\n\n/*Given a triangle, return its surface area.\n  >>> triangleSurfaceArea(3, 3)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibboncaci seqnuece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wriet a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibboncaci seqnuece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wriet a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// TESTS\nconst tests = [\n  {\n    name: \"fib1\",\n    fn: fib1,\n    expected: 2,\n  },\n  {\n    name: \"fib2\",\n    fn: fib2,\n    expected: 3,\n  },\n  {\n    name: \"fib3\",\n    fn: fib3,\n    expected: 5,\n  },\n  {\n    name: \"fib4\",\n    fn: fib4,\n    expected: 8,\n  },\n];\n\n// Run tests\ntests.forEach((test) => {\n  test({ fib1, fib2, fib3, fib4 });\n});\n\n// Exercise 1\n// Write a function that takes an array of numbers and returns the sum of all numbers in the array.\n// >>> sum([1, 2, 3, 4])\n// 10\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n// >>> sum([1, 2, 3])\n// 6\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in teh list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return median of elements in teh list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sortedList = l.sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modeCounts = {};\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    let item = l[i];\n    let count = modeCounts[item];\n    if (count === undefined) {\n      modeCounts[item] = 1;\n    } else {\n      modeCounts[item] = count + 1;\n    }\n    if (modeCounts[item] > maxCount) {\n      maxCount = modeCounts[item];\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in teh list l.\n  >>> mode([3, 1, 2, 4, 5])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutiev elmeents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutiev elmeents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    while (j < numbers.length && numbers[j] === numbers[i]) {\n      j++;\n    }\n    result.push(numbers[i]);\n    if (j < numbers.length) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * drop([1, 2, 3, 4], 2)\n * // => [1, 3]\n */\nconst drop = (list, n) => {\n  return list.slice(n);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * drop([1, 2, 3, 4], 2)\n * // => [1, 3, 4]\n */\nconst dropRight = (list, n) => {\n  return list.slice(0, -n);\n};\n\n/**\n * Returns a list containing all but the first n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * dropRight([1, 2, 3, 4], 2)\n * // => [1, 2]\n */\nconst dropRightUntil = (list, predicate) => {\n  let i = list.length;\n  while (i && predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * dropRightUntil([1, 2, 3, 4], n => n % 2 === 0)\n * // => [1, 3, 4]\n */\nconst dropRightWhile = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the first n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * dropWhile([1, 2, 3, 4], n => n % 2 === 0)\n * // => [1, 3, 4]\n */\nconst dropWhile = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * dropLast([1, 2, 3, 4], 2)\n * // => [1, 3, 4]\n */\nconst dropLast = (list, n) => {\n  return list.slice(0, -n || list.length);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * dropLast([1, 2, 3, 4], 2)\n * // => [1, 3, 4]\n */\nconst dropLastUntil = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * dropLastWhile([1, 2, 3, 4], n => n % 2 === 0)\n * // => [1, 3, 4]\n */\nconst dropLastWhile = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the first n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * take([1, 2, 3, 4], 2)\n * // => [1, 2]\n */\nconst take = (list, n) => {\n  return list.slice(0, n);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * take([1, 2, 3, 4], 2)\n * // => [1, 3, 4]\n */\nconst takeRight = (list, n) => {\n  return list.slice(0, -n);\n};\n\n/**\n * Returns a list containing all but the first n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeRight([1, 2, 3, 4], 2)\n * // => [1, 2]\n */\nconst takeRightUntil = (list, predicate) => {\n  let i = list.length;\n  while (i && predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeRightUntil([1, 2, 3, 4], n => n % 2 === 0)\n * // => [1, 3, 4]\n */\nconst takeRightWhile = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeWhile([1, 2, 3, 4], n => n % 2 === 0)\n * // => [1, 3, 4]\n */\nconst takeWhile = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the first n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeLast([1, 2, 3, 4], 2)\n * // => [1, 2]\n */\nconst takeLast = (list, n) => {\n  return list.slice(0, -n || list.length);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeLast([1, 2, 3, 4], 2)\n * // => [1, 3, 4]\n */\nconst takeLastUntil = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeLastWhile([1, 2, 3, 4], n => n % 2 === 0)\n * // => [1, 3, 4]\n */\nconst takeLastWhile = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the first n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeFirst([1, 2, 3, 4], 2)\n * // => [1, 2]\n */\nconst takeFirst = (list, n) => {\n  return list.slice(0, n || list.length);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeFirst([1, 2, 3, 4], 2)\n * // => [1, 3, 4]\n */\nconst takeFirstUntil = (list, predicate) => {\n  let i = list.length;\n  while (i &&!predicate(list[i])) i--;\n  return list.slice(0, i);\n};\n\n/**\n * Returns a list containing all but the last n elements of the given list.\n *\n * @param {Array} list\n * @param {Number} n\n * @return {Array}\n * @example\n *\n * takeFirstWhile([1, 2, 3, 4], n => ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function taht takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function taht takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text\n   .split('')\n   .filter((char) =>!vowels.includes(char))\n   .join('');\n};\n\n/*\n  removeStopWords is a function taht takes string and returns string without stopwords.\n  >>> removeStopWords('')\n  ''\n  >>> removeStopWords(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeStopWords('abcdef')\n  'bcdf'\n  >>> removeStopWords('aaaaa')\n  ''\n  >>> removeStopWords('aaBAA')\n  'B'\n  >>> removeStopWords('zbcd')\n  'zbcd'\n  */\nconst removeStopWords = (text) => {\n  const stopWords = ['a', 'an', 'the', 'and', 'or', 'but', 'if', 'for', 'not', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at', 'be', 'by', 'from', 'of', 'to', 'on', 'with', 'as', 'at", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Get the square root of number x\n  >>> square(-3)\n  6\n  >>> square(3)\n  9\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Get the cube root of number x\n  >>> cube(-3)\n  3\n  >>> cube(3)\n  6\n  */\nconst cube = (x) => {\n  return x * x * x;\n};\n\n/*Get the reciprocal of number x\n  >>> reciprocal(-3)\n  -1\n  >>> reciprocal(3)\n  1\n  */\nconst reciprocal = (x) => {\n  return 1 / x;\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-3)\n  -Infinity\n  >>> log(3)\n  0\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = (x) => {\n  return Math.log2(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log1p(-3)\n  -Infinity\n  >>> log1p(3)\n  0\n  */\nconst log1p = (x) => {\n  return Math.log1p(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> expm1(3)\n  2\n  */\nconst expm1 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the exponential of number x\n  >>> exp(-1)\n  1\n  >>> exp(1)\n  2\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*Get the exponential of number x\n  >>> expm1(-1)\n  0\n  >>> expm1(1)\n  1\n  */\nconst expm1 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> ln(-1)\n  -Infinity\n  >>> ln(1)\n  Infinity\n  */\nconst ln = (x) => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log10(-1)\n  -Infinity\n  >>> log10(1)\n  Infinity\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log2(-1)\n  -Infinity\n  >>> log2(1)\n  Infinity\n  */\nconst log2 = (x) => {\n  return Math.log2(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log1p(-1)\n  -Infinity\n  >>> log1p(1)\n  Infinity\n  */\nconst log1p = (x) => {\n  return Math.log1p(x);\n};\n\n/*Get the exponential of number x\n  >>> exp(-1)\n  1\n  >>> exp(1)\n  2\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*Get the exponential of number x\n  >>> expm1(-1)\n  0\n  >>> expm1(1)\n  1\n  */\nconst expm1 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> ln(-1)\n  -Infinity\n  >>> ln(1)\n  Infinity\n  */\nconst ln = (x) => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log10(-1)\n  -Infinity\n  >>> log10(1)\n  Infinity\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log2(-1)\n  -Infinity\n  >>> log2(1)\n  Infinity\n  */\nconst log2 = (x) => {\n  return Math.log2(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log1p(-1)\n  -Infinity\n  >>> log1p(1)\n  Infinity\n  */\nconst log1p = (x) => {\n  return Math.log1p(x);\n};\n\n/*Get the exponential of number x\n  >>> exp(-1)\n  1\n  >>> exp(1)\n  2\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*Get the exponential of number x\n  >>> expm1(-1)\n  0\n  >>> expm1(1)\n  1\n  */\nconst expm1 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> ln(-1)\n  -Infinity\n  >>> ln(1)\n  Infinity\n  */\nconst ln = (x) => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log10(-1)\n  -Infinity\n  >>> log10(1)\n  Infinity\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log2(-1)\n  -Infinity\n  >>> log2(1)\n  Infinity\n  */\nconst log2 = (x) => {\n  return Math.log2(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log1p(-1)\n  -Infinity\n  >>> log1p(1)\n  Infinity\n  */\nconst log1p = (x) => {\n  return Math.log1p(x);\n};\n\n/*Get the exponential of number x\n  >>> exp(-1)\n  1\n  >>> exp(1)\n  2\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*Get the exponential of number x\n  >>> expm1(-1)\n  0\n  >>> expm1(1)\n  1\n  */\nconst expm1 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> ln(-1)\n  -Infinity\n  >>> ln(1)\n  Infinity\n  */\nconst ln = (x) => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Cehck if two words have the saem characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Cehck if two words have the saem characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacic number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonacic number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  196418\n  >>> fib(28)\n  317811\n  >>> fib(29)\n  514229\n  >>> fib(30)\n  832040\n  >>> fib(31)\n  1346269\n  >>> fib(32)\n  2178309\n  >>> fib(33)\n  3524578\n  >>> fib(34)\n  5702887\n  >>> fib(35)\n  9655783\n  >>> fib(36)\n  15480087\n  >>> fib(37)\n  25047303\n  >>> fib(38)\n  4051957\n  >>> fib(39)\n  5527939\n  >>> fib(40)\n  8952409\n  >>> fib(41)\n  14960087\n  >>> fib(42)\n  24217711\n  >>> fib(43)\n  39524097\n  >>> fib(44)\n  63488007\n  >>> fib(45)\n  99009901\n  >>> fib(46)\n  196714879\n  >>> fib(47)\n  384998009\n  >>> fib(48)\n  687194767\n  >>> fib(49)\n  1374389534\n  >>> fib(50)\n  2748779069\n  >>> fib(51)\n  549755813\n  >>> fib(52)\n  1040792153\n  >>> fib(53)\n  17592186044415\n  >>> fib(54)\n  28684186916696\n  >>> fib(55)\n  41831066006496\n  >>> fib(56)\n  634881496006496\n  >>> fib(57)\n  99009901\n  >>> fib(58)\n  196714879\n  >>> fib(59)\n  384998009\n  >>> fib(60)\n  687194767\n  >>> fib(61)\n  1374389534\n  >>> fib(62)\n  2748779069\n  >>> fib(63)\n  549755813\n  >>> fib(64)\n  1040792153\n  >>> fib(65)\n  17592186044415\n  >>> fib(66)\n  28684186916696\n  >>> fib(67)\n  41831066006496\n  >>> fib(68)\n  634881496006496\n  >>> fib(69)\n  99009901\n  >>> fib(70)\n  196714879\n  >>> fib(71)\n  384998009\n  >>> fib(72)\n  687194767\n  >>> fib(73)\n  1374389534\n  >>> fib(74)\n  2748779069\n  >>> fib(75)\n  549755813\n  >>> fib(76)\n  1040792153\n  >>> fib(77)\n  17592186044415\n  >>> fib(78)\n  28684186916696\n  >>> fib(79)\n  41831066006496\n  >>> fib(80)\n  634881496006496\n  >>> fib(81)\n  99009901\n  >>> fib(82)\n  196714879\n  >>> fib(83)\n  384998009\n  >>> fib(84)\n  687194767\n  >>> fib(85)\n  1374389534\n  >>> fib(86)\n  2748779069\n  >>> fib(87)\n  549755813\n  >>> fib(88)\n  1040792153\n  >>> fib(89)\n  17592186044415\n  >>> fib(90)\n  28684186916696\n  >>> fib(91)\n  41831066006496\n  >>> fib(92)\n  634881496006496\n  >>> fib(93)\n  99009901\n  >>> fib(94)\n  196714879\n  >>> fib(95)\n  384998009\n  >>> fib(96)\n  687194767\n  >>> fib(97)\n  1374389534\n  >>> fib(98)\n  2748779069\n  >>> fib(99)\n  549755813\n  >>> fib(100)\n  1040792153\n  >>> fib(101)\n  17592186044415\n  >>> fib(102)\n  28684186916696\n  >>> fib(103)\n  41831066006496\n  >>> fib(104)\n  634881496006496\n  >>> fib(105)\n  99009901\n  >>> fib(106)\n  196714879\n  >>> fib(107)\n  384998009\n  >>> fib(108)\n  687194767\n  >>> fib(109)\n  1374389534\n  >>> fib(110)\n  2748779069\n  >>> fib(111)\n  549755813\n  >>> fib(112)\n  1040792153\n  >>> fib(113)\n  17592186044415\n  >>> fib(114)\n  28684186916696\n  >>> fib(115)\n  4183106600", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a correspodning closing rbacket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a correspodning closing rbacket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<(.*?)>/)\n  const closingBrackets = brackets.match(/<(.*?)\\/>/)\n\n  return openingBrackets && closingBrackets\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTag = (tag) => {\n  return tag.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTags = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n */\nconst isValidTagsArray = (tags) => {\n  return tags.match(/<(.*?)>/)\n}", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically incresaing or decreasign.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are monotonically incresaing or decreasign.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false\n    }\n    prev = l[i]\n  }\n  return true\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return hte largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return hte largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return true if n is a prime number. Assume n > 1 nad is not a prime.\n  >>> isPrime(13195)\n  False\n  >>> isPrime(2048)\n  True\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect square. Assume n > 1 nad is not a perfect square.\n  >>> isPerfectSquare(13195)\n  False\n  >>> isPerfectSquare(2048)\n  True\n  */\nconst isPerfectSquare = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect cube. Assume n > 1 nad is not a perfect cube.\n  >>> isPerfectCube(13195)\n  False\n  >>> isPerfectCube(2048)\n  True\n  */\nconst isPerfectCube = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfect fifth.\n  >>> isPerfectFifth(13195)\n  False\n  >>> isPerfectFifth(2048)\n  True\n  */\nconst isPerfectFifth = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\n/*Return true if n is a perfect fifth. Assume n > 1 nad is not a perfe", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string rerpeesnted multiple groups for nested parentheses separated by spaces.\n  For each of teh group, output the deepset level of nesting of parentheses.\n  E.g. (()()) has maximum wto leevls of nesting while ((())) hsa three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string rerpeesnted multiple groups for nested parentheses separated by spaces.\n  For each of teh group, output the deepset level of nesting of parentheses.\n  E.g. (()()) has maximum wto leevls of nesting while ((())) hsa three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums unmbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums unmbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a correspondign clsoing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a correspondign clsoing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n\n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n\n  for (let i = 0; i < openingBrackets.length; i++) {\n    const openingBracket = openingBrackets[i];\n    const closingBracket = closingBrackets[i];\n\n    if (openingBracket!== closingBracket) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * Example:\n *\n * input: \"the quick brown fox jumps over the lazy dog\"\n * output: [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) (over) the (lazy) dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"(lazy)\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the (lazy) dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"(lazy)\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fox) (jumps) over the lazy dog\"\n * output: [\"the\", \"(quick)\", \"brown\", \"(fox)\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n *\n * input: \"the (quick) brown (fo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficienst of a polynmoial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Retrun derivative of thsi polynmoial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficienst of a polynmoial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Retrun derivative of thsi polynmoial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* Solve a polynomial using Newton's method.\n  xs represents coefficienst of a polynmoial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Retrun value of thsi polynmoial at x.\n  >>> solve([3, 1, 2, 4, 5])\n  5\n  >>> solve([1, 2, 3])\n  2\n  */\nconst solve = (xs) => {\n  const n = xs.length\n  const a = xs[0]\n  const b = xs[1]\n  let c = xs[2]\n  let d = xs[3]\n  let e = xs[4]\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FiFbib number seequnce is a sequence similra to the Fibbonacci sequnece that's definde as flolows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please wriet a fnuction to effiicently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The FiFbib number seequnce is a sequence similra to the Fibbonacci sequnece that's definde as flolows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please wriet a fnuction to effiicently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibbonacci number sequence.\n  >>> fibbonacci(1)\n  0\n  >>> fibbonacci(5)\n  1\n  >>> fibbonacci(8)\n  3\n*/\nconst fibbonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  3\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Write a fnuction to effiicently compute the n-th element of the fibonacci number sequence.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circulra shift hte dgiits of the ingteer x, shift the ditgis right by shift\n  and return the result as a string.\n  If shift > nmuber of digtis, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Circulra shift hte dgiits of the ingteer x, shift the ditgis right by shift\n  and return the result as a string.\n  If shift > nmuber of digtis, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.length) return x.split(\"\").reverse().join(\"\");\n  return x.split(\"\").slice(shift, x.length + shift).join(\"\");\n};\n\n/*\n  Given a string, return a string where each character is replaced by the number of times that character appears in the string.\n  >>> count(\"abcabcbb\")\n  \"3abcabcbb\"\n  >>> count(\"abcabcbb\", 1)\n  \"1abcabcbb\"\n  >>> count(\"abcabcbb\", 2)\n  \"2abcabcbb\"\n  >>> count(\"abcabcbb\", 3)\n  \"3abcabcbb\"\n  >>> count(\"abcabcbb\", 4)\n  \"4abcabcbb\"\n  >>> count(\"abcabcbb\", 5)\n  \"5abcabcbb\"\n  >>> count(\"abcabcbb\", 6)\n  \"6abcabcbb\"\n  >>> count(\"abcabcbb\", 7)\n  \"7abcabcbb\"\n  >>> count(\"abcabcbb\", 8)\n  \"8abcabcbb\"\n  >>> count(\"abcabcbb\", 9)\n  \"9abcabcbb\"\n  >>> count(\"abcabcbb\", 10)\n  \"10abcabcbb\"\n  >>> count(\"abcabcbb\", 11)\n  \"11abcabcbb\"\n  >>> count(\"abcabcbb\", 12)\n  \"12abcabcbb\"\n  >>> count(\"abcabcbb\", 13)\n  \"13abcabcbb\"\n  >>> count(\"abcabcbb\", 14)\n  \"14abcabcbb\"\n  >>> count(\"abcabcbb\", 15)\n  \"15abcabcbb\"\n  >>> count(\"abcabcbb\", 16)\n  \"16abcabcbb\"\n  >>> count(\"abcabcbb\", 17)\n  \"17abcabcbb\"\n  >>> count(\"abcabcbb\", 18)\n  \"18abcabcbb\"\n  >>> count(\"abcabcbb\", 19)\n  \"19abcabcbb\"\n  >>> count(\"abcabcbb\", 20)\n  \"20abcabcbb\"\n  >>> count(\"abcabcbb\", 21)\n  \"21abcabcbb\"\n  >>> count(\"abcabcbb\", 22)\n  \"22abcabcbb\"\n  >>> count(\"abcabcbb\", 23)\n  \"23abcabcbb\"\n  >>> count(\"abcabcbb\", 24)\n  \"24abcabcbb\"\n  >>> count(\"abcabcbb\", 25)\n  \"25abcabcbb\"\n  >>> count(\"abcabcbb\", 26)\n  \"26abcabcbb\"\n  >>> count(\"abcabcbb\", 27)\n  \"27abcabcbb\"\n  >>> count(\"abcabcbb\", 28)\n  \"28abcabcbb\"\n  >>> count(\"abcabcbb\", 29)\n  \"29abcabcbb\"\n  >>> count(\"abcabcbb\", 30)\n  \"30abcabcbb\"\n  >>> count(\"abcabcbb\", 31)\n  \"31abcabcbb\"\n  >>> count(\"abcabcbb\", 32)\n  \"32abcabcbb\"\n  >>> count(\"abcabcbb\", 33)\n  \"33abcabcbb\"\n  >>> count(\"abcabcbb\", 34)\n  \"34abcabcbb\"\n  >>> count(\"abcabcbb\", 35)\n  \"35abcabcbb\"\n  >>> count(\"abcabcbb\", 36)\n  \"36abcabcbb\"\n  >>> count(\"abcabcbb\", 37)\n  \"37abcabcbb\"\n  >>> count(\"abcabcbb\", 38)\n  \"38abcabcbb\"\n  >>> count(\"abcabcbb\", 39)\n  \"39abcabcbb\"\n  >>> count(\"abcabcbb\", 40)\n  \"40abcabcbb\"\n  >>> count(\"abcabcbb\", 41)\n  \"41abcabcbb\"\n  >>> count(\"abcabcbb\", 42)\n  \"42abcabcbb\"\n  >>> count(\"abcabcbb\", 43)\n  \"43abcabcbb\"\n  >>> count(\"abcabcbb\", 44)\n  \"44abcabcbb\"\n  >>> count(\"abcabcbb\", 45)\n  \"45abcabcbb\"\n  >>> count(\"abcabcbb\", 46)\n  \"46abcabcbb\"\n  >>> count(\"abcabcbb\", 47)\n  \"47abcabcbb\"\n  >>> count(\"abcabcbb\", 48)\n  \"48abcabcbb\"\n  >>> count(\"abcabcbb\", 49)\n  \"49abcabcbb\"\n  >>> count(\"abcabcbb\", 50)\n  \"50abcabcbb\"\n  >>> count(\"abcabcbb\", 51)\n  \"51abcabcbb\"\n  >>> count(\"abcabcbb\", 52)\n  \"52abcabcbb\"\n  >>> count(\"abcabcbb\", 53)\n  \"53abcabcbb\"\n  >>> count(\"abcabcbb\", 54)\n  \"54abcabcbb\"\n  >>> count(\"abcabcbb\", 55)\n  \"55abcabcbb\"\n  >>> count(\"abcabcbb\", 56)\n  \"56abcabcbb\"\n  >>> count(\"abcabcbb\", 57)\n  \"57abcabcbb\"\n  >>> count(\"abcabcbb\", 58)\n  \"58abcabcbb\"\n  >>> count(\"abcabcbb\", 59)\n  \"59abcabcbb\"\n  >>> count(\"abcabcbb\", 60)\n  \"60abcabcbb\"\n  >>> count(\"abcabcbb\", 61)\n  \"61abcabcbb\"\n  >>> count(\"abcabcbb\", 62)\n  \"62abcabcbb\"\n  >>> count(\"abcabcbb\", 63)\n  \"63abcabcbb\"\n  >>> count(\"abcabcbb\", 64)\n  \"64abcabcbb\"\n  >>> count(\"abcabcbb\", 65)\n  \"65abcabcbb\"\n  >>> count(\"abcabcbb\", 66)\n  \"66abcabcbb\"\n  >>> count(\"abcabcbb\", 67)\n  \"67abcabcbb\"\n  >>> count(\"abcabcbb\", 68)\n  \"68abcabcbb\"\n  >>> count(\"abcabcbb\", 69)\n  \"69abcabcbb\"\n  >>> count(\"abcabcbb\", 70)\n  \"70abcabcbb\"\n  >>> count(\"abcabcbb\", 71)\n  \"71abcabc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Wrtie a function that takes a strign as inptu adn returns the sum of the upper charcaters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Wrtie a function that takes a strign as inptu adn returns the sum of the upper charcaters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of vowels contained in the string.\n\n  Examples:\n      vowels(\"aAaa\") => 3\n      vowels(\"aAaaXa\") => 0\n  */\nconst vowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of consonants contained in the string.\n\n  Examples:\n      consonants(\"aAaa\") => 2\n      consonants(\"aAaaXa\") => 1\n  */\nconst consonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\nconst wordContains = (s, letter) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code === letter) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string and returns the number of words that contain the specified letter.\n\n  Examples:\n      wordContains(\"aAaa\", \"a\") => 1\n      wordContains(\"aAaa\", \"X\") => 0\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distribtued in a absket of rfuit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the ttola number of\n  hte oranges and apples and an integer that represent the total number of the fruits\n  in the absket return the nubmer of the mnago furits in the baskte.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appels and 1 orangse\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oargens\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distribtued in a absket of rfuit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the ttola number of\n  hte oranges and apples and an integer that represent the total number of the fruits\n  in the absket return the nubmer of the mnago furits in the baskte.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appels and 1 orangse\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oargens\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n\nIf you want a more generic solution that can handle any number of fruits, you can use a regular expression to match any number of fruits and then use Array#reduce to calculate the sum:\n\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.match(/\\d+/g);\n  return arr.reduce((acc, curr) => acc + Number(curr), 0);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a tags=javascript |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const n = Number(arr[0]);\n  const apples = Number(arr[1]);\n  const oranges = Number(arr[2]);\n  const total = apples + oranges;\n  return total - n - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orangse\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oargens\", 120));</code>\n<|/ a tags=javascript |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.findIndex(node => node === smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.findIndex(node => node === smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.findIndex(node => node === smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.findIndex(node => node === smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] >= max) {\n      freq++;\n    }\n  }\n  return freq > 0? max : -1;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the sum of all positive integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1])) == 6\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sum([5, 5, 4, 4, 4])) == 10\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the product of all positive integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1])) == 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 24\n      product([5, 5, 4, 4, 4])) == 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the min of all positive integers in the list.\n  Examples:\n      min([4, 1, 2, 2, 3, 1])) == 1\n      min([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      min([5, 5, 4, 4, 4])) == 5\n  */\nconst min = (lst) => {\n  let min = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the max of all positive integers in the list.\n  Examples:\n      max([4, 1, 2, 2, 3, 1])) == 4\n      max([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      max([5, 5, 4, 4, 4])) == 5\n  */\nconst max = (lst) => {\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the sum of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1])) == 6\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sum([5, 5, 4, 4, 4])) == 10\n  */\nconst sumOfPositives = (lst) => {\n  return lst.length? sum(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the product of all positive integers in the list.\n  If the list is empty, return 1.\n  Examples:\n      product([4, 1, 2, 2, 3, 1])) == 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 24\n      product([5, 5, 4, 4, 4])) == 24\n  */\nconst productOfPositives = (lst) => {\n  return lst.length? product(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the min of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      min([4, 1, 2, 2, 3, 1])) == 1\n      min([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      min([5, 5, 4, 4, 4])) == 5\n  */\nconst minOfPositives = (lst) => {\n  return lst.length? min(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the max of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      max([4, 1, 2, 2, 3, 1])) == 4\n      max([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      max([5, 5, 4, 4, 4])) == 5\n  */\nconst maxOfPositives = (lst) => {\n  return lst.length? max(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the sum of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1])) == 6\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sum([5, 5, 4, 4, 4])) == 10\n  */\nconst sumOfPositivesOf = (lst) => {\n  return lst.length? sumOfPositives(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the product of all positive integers in the list.\n  If the list is empty, return 1.\n  Examples:\n      product([4, 1, 2, 2, 3, 1])) == 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 24\n      product([5, 5, 4, 4, 4])) == 24\n  */\nconst productOfPositivesOf = (lst) => {\n  return lst.length? productOfPositives(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the min of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      min([4, 1, 2, 2, 3, 1])) == 1\n      min([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      min([5, 5, 4, 4, 4])) == 5\n  */\nconst minOfPositivesOf = (lst) => {\n  return lst.length? minOfPositives(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the max of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      max([4, 1, 2, 2, 3, 1])) == 4\n      max([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      max([5, 5, 4, 4, 4])) == 5\n  */\nconst maxOfPositivesOf = (lst) => {\n  return lst.length? maxOfPositives(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the sum of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1])) == 6\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sum([5, 5, 4, 4, 4])) == 10\n  */\nconst sumOfPositivesOf = (lst) => {\n  return lst.length? sumOfPositivesOf(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the product of all positive integers in the list.\n  If the list is empty, return 1.\n  Examples:\n      product([4, 1, 2, 2, 3, 1])) == 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 24\n      product([5, 5, 4, 4, 4])) == 24\n  */\nconst productOfPositivesOf = (lst) => {\n  return lst.length? productOfPositivesOf(lst) : 0;\n};\n\n/*\n  You rae igven a nno-empty list of positive integers. Return the min of all positive integers in the list.\n  If the list is empty, return 0.\n  Examples:\n      min([4, 1, 2, 2, 3, 1])) == 1\n      min([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      min([5, 5, 4, 4, 4])) == 5\n  */\nconst minOfPositivesOf = (lst) => {\n  return lst.length? minOfPositivesOf(lst) : 0;\n};\n\n/*\n  You ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strangeSortList(left).concat([min], strangeSortList(right));\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b1 && b1 === c1) {\n    return a1;\n  }\n  if (a1 === c1 && c1 === b1) {\n    return b1;\n  }\n  if (b1 === c1 && c1 === a1) {\n    return c1;\n  }\n  if (a1 === b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([10, 20, 30, 40], 70) ➞ false\n  # 10+20+30+40 is not equal to 70\n  */\nconst arraysSum = (arr, target) => {\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  return arrSum === target;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([10, 20, 30, 40], 70) ➞ false\n  # 10+20+30+40 is not equal to 70\n  */\nconst arraysSum = (arr, target) => {\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  return arrSum === target;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([10, 20, 30, 40], 70) ➞ false\n  # 10+20+30+40 is not equal to 70\n  */\nconst arraysSum = (arr, target) => {\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  return arrSum === target;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([10, 20, 30, 40], 70) ➞ false\n  # 10+20+30+40 is not equal to 70\n  */\nconst arraysSum = (arr, target) => {\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  return arrSum === target;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([10, 20, 30, 40], 70) ➞ false\n  # 10+20+30+40 is not equal to 70\n  */\nconst arraysSum = (arr, target) => {\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  return arrSum === target;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([10, 20, 30, 40], 70) ➞ false\n  # 10+20+30+40 is not equal to 70\n  */\nconst arraysSum = (arr, target) => {\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  return arrSum === target;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([10, 20, 30, 40], 70) ➞ false\n  # 10+20+30+40 is not equal to 70\n  */\nconst arraysSum = (arr, target) => {\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  return arrSum === target;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if any two numbers in the array add up to a third number in the array, and false if they do not.\n\n  Example:\n  arraysSum([1, 2, 3, 4], 5) ➞ true\n  # 1+2+3+4 is equal to 5\n\n  arraysSum([1, 2, 3, 4], 7) ➞ false\n  # 1+2+3+4 is not equal to 7\n\n  arraysSum([10, 20, 30, 40], 50) ➞ true\n  # 10+20+30+40 is equal to 50\n\n  arraysSum([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j] && arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find hte minimum number of ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return [];\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length > 0) {\n    return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x));\n  }\n};\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return [];\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length > 0) {\n    return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x));\n  }\n};\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return [];\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length > 0) {\n    return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x));\n  }\n};\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return [];\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length > 0) {\n    return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x));\n  }\n};\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return [];\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0 && lst2.length > 0) {\n    return lst2;\n  }\n  if (lst1.length > 0 && lst2.length > 0) {\n    return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x));\n  }\n};\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function taht erturns true if the given number is the multilpication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function taht erturns true if the given number is the multilpication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    let primesCount = 0\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] == 0) {\n        primesCount++\n      }\n    }\n    if (primesCount == 3) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\n/*Write a function taht erturns true if the given number is the power of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPowerOf3Prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPowerOf3Prime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    let primesCount = 0\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] == 0) {\n        primesCount++\n      }\n    }\n    if (primesCount == 3) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\n/*Write a function taht erturns true if the given number is the power of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPowerOf5Prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPowerOf5Prime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    let primesCount = 0\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] == 0) {\n        primesCount++\n      }\n    }\n    if (primesCount == 5) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\n/*Write a function taht erturns true if the given number is the power of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPowerOf7Prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPowerOf7Prime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true fi a number x is a simpel\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that returns true fi a number x is a simpel\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (n === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower(x, n / 2);\n  }\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if the number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(2, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(8, 1) => false\n  isPowerOf(5, 3) => false\n  isPowerOf(5, 1) => false\n  isPowerOf(3, 3) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(2, 1) => false\n  isPowerOf(1, 1) => false\n  isPowerOf(0, 1) => false\n  isPowerOf(-1, 1) => false\n  isPowerOf(-2, 1) => false\n  isPowerOf(-3, 1) => false\n  isPowerOf(-4, 1) => false\n  isPowerOf(-5, 1) => false\n  isPowerOf(-6, 1) => false\n  isPowerOf(-7, 1) => false\n  isPowerOf(-8, 1) => false\n  isPowerOf(-9, 1) => false\n  isPowerOf(-10, 1) => false\n  isPowerOf(-11, 1) => false\n  isPowerOf(-12, 1) => false\n  isPowerOf(-13, 1) => false\n  isPowerOf(-14, 1) => false\n  isPowerOf(-15, 1) => false\n  isPowerOf(-16, 1) => false\n  isPowerOf(-17, 1) => false\n  isPowerOf(-18, 1) => false\n  isPowerOf(-19, 1) => false\n  isPowerOf(-20, 1) => false\n  isPowerOf(-21, 1) => false\n  isPowerOf(-22, 1) => false\n  isPowerOf(-23, 1) => false\n  isPowerOf(-24, 1) => false\n  isPowerOf(-25, 1) => false\n  isPowerOf(-26, 1) => false\n  isPowerOf(-27, 1) => false\n  isPowerOf(-28, 1) => false\n  isPowerOf(-29, 1) => false\n  isPowerOf(-30, 1) => false\n  isPowerOf(-31, 1) => false\n  isPowerOf(-32, 1) => false\n  isPowerOf(-33, 1) => false\n  isPowerOf(-34, 1) => false\n  isPowerOf(-35, 1) => false\n  isPowerOf(-36, 1) => false\n  isPowerOf(-37, 1) => false\n  isPowerOf(-38, 1) => false\n  isPowerOf(-39, 1) => false\n  isPowerOf(-40, 1) => false\n  isPowerOf(-41, 1) => false\n  isPowerOf(-42, 1) => false\n  isPowerOf(-43, 1) => false\n  isPowerOf(-44, 1) => false\n  isPowerOf(-45, 1) => false\n  isPowerOf(-46, 1) => false\n  isPowerOf(-47, 1) => false\n  isPowerOf(-48, 1) => false\n  isPowerOf(-49, 1) => false\n  isPowerOf(-50, 1) => false\n  isPowerOf(-51, 1) => false\n  isPowerOf(-52, 1) => false\n  isPowerOf(-53, 1) => false\n  isPowerOf(-54, 1) => false\n  isPowerOf(-55, 1) => false\n  isPowerOf(-56, 1) => false\n  isPowerOf(-57, 1) => false\n  isPowerOf(-58, 1) => false\n  isPowerOf(-59, 1) => false\n  isPowerOf(-60, 1) => false\n  isPowerOf(-61, 1) => false\n  isPowerOf(-62, 1) => false\n  isPowerOf(-63, 1) => false\n  isPowerOf(-64, 1) => false\n  isPowerOf(-65, 1) => false\n  isPowerOf(-66, 1) => false\n  isPowerOf(-67, 1) => false\n  isPowerOf(-68, 1) => false\n  isPowerOf(-69, 1) => false\n  isPowerOf(-70, 1) => false\n  isPowerOf(-71, 1) => false\n  isPowerOf(-72, 1) => false\n  isPowerOf(-73, 1) => false\n  isPowerOf(-74, 1) => false\n  isPowerOf(-75, 1) => false\n  isPowerOf(-76, 1) => false\n  isPowerOf(-77, 1) => false\n  isPowerOf(-78, 1) => false\n  isPowerOf(-79, 1) => false\n  isPowerOf(-80, 1) => false\n  isPowerOf(-81, 1) => false\n  isPowerOf(-82, 1) => false\n  isPowerOf(-83, 1) => false\n  isPowerOf(-84, 1) => false\n  isPowerOf(-85, 1) => false\n  isPowerOf(-86, 1) => false\n  isPowerOf(-87, 1) => false\n  isPowerOf(-88, 1) => false\n  isPowerOf(-89, 1) => false\n  isPowerOf(-90, 1) => false\n  isPowerOf(-91, 1) => false\n  isPowerOf(-92, 1) => false\n  isPowerOf(-93, 1) => false\n  isPowerOf(-94, 1) => false\n  isPowerOf(-95, 1) => false\n  isPowerOf(-96, 1) => false\n  isPowerOf(-97, 1) => false\n  isPowerOf(-98, 1) => false\n  isPowerOf(-99, 1) => false\n  isPowerOf(-100, 1) => false\n  isPowerOf(-101, 1) => false\n  isPowerOf(-102, 1) => false\n  isPowerOf(-103, 1) => false\n  isPowerOf(-104, 1) => false\n  isPowerOf(-105, 1) => false\n  isPowerOf(-106, 1) => false\n  isPowerOf(-107, 1) => false\n  isPowerOf(-108, 1) => false\n  isPowerOf(-109, 1) => false\n  isPowerOf(-110, 1) => false\n  isPowerOf(-111, 1) => false\n  isPowerOf(-112, 1) => false\n  isPowerOf(-113, 1) => false\n  isPowerOf(-114, 1) => false\n  isPowerOf(-115, 1) => false\n  isPowerOf(-116, 1) => false\n  isPowerOf(-117, 1) => false\n  isPowerOf(-118, 1) => false\n  isPowerOf(-119, 1) => false\n  isPowerOf(-120, 1) => false\n  isPowerOf(-121, 1) => false\n  isPowerOf(-122, 1) => false\n  isPowerOf(-123, 1) => false\n  isPowerOf(-124, 1) => false\n  isPowerOf(-125, 1) => false\n  isPowerOf(-126, 1) => false\n  isPowerOf(-127, 1) => false\n  isPowerOf(-128, 1) => false\n  isPowerOf(-129, 1) => false\n  isPowerOf(-130, 1) => false\n  isPowerOf(-131, 1) => false\n  isPowerOf(-132, 1) => false\n  isPowerOf(-133, 1) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1!== 0) return false;\n  if (a < 0 || a > 180) return false;\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadeciaml number as a string and counts the number of hexadceimal\n  digits that are primes (prime nmuber=== or a rpime=== si a natural number\n  greaetr than 1 that is not a product of two smaller natural nmubers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to dteermien a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decmila 11)=== D (=decimal 13).\n  Noet: you may assume the input is always correct or epmty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadeciaml number as a string and counts the number of hexadceimal\n  digits that are primes (prime nmuber=== or a rpime=== si a natural number\n  greaetr than 1 that is not a product of two smaller natural nmubers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to dteermien a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decmila 11)=== D (=decimal 13).\n  Noet: you may assume the input is always correct or epmty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split(\"\");\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArray2 = [];\n  let hexNumArray2Length = hexNumArray2.length;\n  let hexNumArray3 = [];\n  let hexNumArray3Length = hexNumArray3.length;\n  let hexNumArray4 = [];\n  let hexNumArray4Length = hexNumArray4.length;\n  let hexNumArray5 = [];\n  let hexNumArray5Length = hexNumArray5.length;\n  let hexNumArray6 = [];\n  let hexNumArray6Length = hexNumArray6.length;\n  let hexNumArray7 = [];\n  let hexNumArray7Length = hexNumArray7.length;\n  let hexNumArray8 = [];\n  let hexNumArray8Length = hexNumArray8.length;\n  let hexNumArray9 = [];\n  let hexNumArray9Length = hexNumArray9.length;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = hexNumArrayA.length;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = hexNumArrayB.length;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = hexNumArrayC.length;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = hexNumArrayD.length;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = hexNumArrayE.length;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = hexNumArrayF.length;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = hexNumArrayG.length;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = hexNumArrayH.length;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = hexNumArrayI.length;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = hexNumArrayJ.length;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = hexNumArrayK.length;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = hexNumArrayL.length;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = hexNumArrayM.length;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = hexNumArrayN.length;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = hexNumArrayO.length;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = hexNumArrayP.length;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = hexNumArrayQ.length;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = hexNumArrayR.length;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = hexNumArrayS.length;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = hexNumArrayT.length;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = hexNumArrayU.length;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = hexNumArrayV.length;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = hexNumArrayW.length;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = hexNumArrayX.length;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = hexNumArrayY.length;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = hexNumArrayZ.length;\n  let hexNumArrayA1 = [];\n  let hexNumArrayA1Length = hexNumArrayA1.length;\n  let hexNumArrayA2 = [];\n  let hexNumArrayA2Length = hexNumArrayA2.length;\n  let hexNumArrayA3 = [];\n  let hexNumArrayA3Length = hexNumArrayA3.length;\n  let hexNumArrayA4 = [];\n  let hexNumArrayA4Length = hexNumArrayA4.length;\n  let hexNumArrayA5 = [];\n  let hexNumArrayA5Length = hexNumArrayA5.length;\n  let hexNumArrayA6 = [];\n  let hexNumArrayA6Length = hexNumArrayA6.length;\n  let hexNumArrayA7 = [];\n  let hexNumArrayA7Length = hexNumArrayA7.length;\n  let hexNumArrayA8 = [];\n  let hexNumArrayA8Length = hexNumArrayA8.length;\n  let hexNumArrayA9 = [];\n  let hexNumArrayA9Length = hexNumArrayA9.length;\n  let hexNumArrayA10 = [];\n  let hexNumArrayA10Length = hexNumArrayA10.length;\n  let hexNumArrayA11 = [];\n  let hexNumArrayA11Length = hexNumArrayA11.length;\n  let hexNumArrayA12 = [];\n  let hexNumArrayA12Length = hexNumArrayA12.length;\n  let hexNumArrayA13 = [];\n  let hexNumArrayA13Length = hexNumArrayA13.length;\n  let hexNumArrayA14 = [];\n  let hexNumArrayA14Length = hexNumArrayA14.length;\n  let hexNumArrayA15 = [];\n  let hexNumArrayA15Length = hexNumArrayA15.length;\n  let hexNumArrayA16 = [];\n  let hexNumArrayA16Length = hexNumArrayA16.length;\n  let hexNumArrayA17 = [];\n  let hexNumArrayA17Length = hexNumArrayA17.length;\n  let hexNumArrayA18 = [];\n  let hexNumArrayA18Length = hexNumArrayA18.length;\n  let hexNumArrayA19 = [];\n  let hexNumArrayA19Length = hexNumArrayA19.length;\n  let hexNumArrayA20 = [];\n  let hexNumArrayA20Length = hexNumArrayA20.length;\n  let hexNumArrayA21 = [];\n  let hexNumArrayA21Length = hexNumArrayA21.length;\n  let hexNumArrayA22 = [];\n  let hexNumArrayA22Length = hexNumArrayA22.length;\n  let hexNumArrayA23 = [];\n  let hexNumArrayA23Length = hexNumArrayA23.length;\n  let hexNumArrayA24 = [];\n  let hexNumArrayA24Length = hexNumArrayA24.length;\n  let hexNumArrayA25 = [];\n  let hexNumArrayA25Length = hexNumArrayA25.length;\n  let hexNumArrayA26 = [];\n  let hexNumArrayA26Length = hexNumArrayA26.length;\n  let hexNumArrayA27 = [];\n  let hexNumArrayA27Length = hexNumArrayA27.length;\n  let hexNumArrayA", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + (decimal % 2 === 0? '1' : '0');\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n};\n\n/*You wlli be given a number in binary format and your task is to convert it to\n  decimal format. The function should return a string, with each chacrater representing a decimal\n  number. Each character in the string will be a digit from 0 to 9.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*You wlli be given a number in decimal format and your task is to convert it to\n  hexadecimal format. The function should return a string, with each chacrater representing a hexadecimal\n  number. Each character in the string will be a digit from 0 to F (hexadecimal).\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHexadecimal(15)   # returns \"db1111db\"\n  decimalToHexadecimal(32)   # returns \"db100000db\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  while (decimal > 0) {\n    hexadecimal = hexadecimal + (decimal % 16 === 0? 'F' : '0');\n    decimal = Math.floor(decimal / 16);\n  }\n  return 'db' + hexadecimal + 'db';\n};\n\n/*You wlli be given a number in hexadecimal format and your task is to convert it to\n  octal format. The function should return a string, with each chacrater representing an octal\n  number. Each character in the string will be a digit from 0 to 7 (octal).\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  hexadecimalToOctal(15)   # returns \"db1111db\"\n  hexadecimalToOctal(32)   # returns \"db100000db\"\n  */\nconst hexadecimalToOctal = (hexadecimal) => {\n  let octal = '';\n  while (hexadecimal > 0) {\n    octal = octal + (hexadecimal % 8 === 0? '7' : '0');\n    hexadecimal = Math.floor(hexadecimal / 8);\n  }\n  return 'db' + octal + 'db';\n};\n\n/*You wlli be given a number in octal format and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  octalToBinary(15)   # returns \"db1111db\"\n  octalToBinary(32)   # returns \"db100000db\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  while (octal > 0) {\n    binary = binary + (octal % 2 === 0? '1' : '0');\n    octal = Math.floor(octal / 2);\n  }\n  return 'db' + binary + 'db';\n};\n\n/*You wlli be given a number in binary format and your task is to convert it to\n  hexadecimal format. The function should return a string, with each chacrater representing a hexadecimal\n  number. Each character in the string will be a digit from 0 to F (hexadecimal).\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToHexadecimal(\"db1111db\")   # returns 15\n  binaryToHexadecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = hexadecimal + parseInt(binary[i], 16);\n  }\n  return hexadecimal;\n};\n\n/*You wlli be given a number in hexadecimal format and your task is to convert it to\n  decimal format. The function should return a string, with each chacrater representing a decimal\n  number. Each character in the string will be a digit from 0 to 9.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  hexadecimalToDecimal(\"db1111db\")   # returns 15\n  hexadecimalToDecimal(\"db100000db\")   # returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0;\n  for (let i = 0; i < hexadecimal.length; i++) {\n    decimal = decimal + parseInt(hexadecimal[i], 16);\n  }\n  return decimal;\n};\n\n/*You wlli be given a number in decimal format and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + (decimal % 2 === 0? '1' : '0');\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n};\n\n/*You wlli be given a number in binary format and your task is to convert it to\n  decimal format. The function should return a string, with each chacrater representing a decimal\n  number. Each character in the string will be a digit from 0 to 9.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*You wlli be given a number in decimal format and your task is to convert it to\n  hexadecimal format. The function should return a string, with each chacrater representing a hexadecimal\n  number. Each character in the string will be a digit from 0 to F (hexa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or nto.\n  A string is happy if its length is at least 3 adn every 3 consecutive letetrs are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or nto.\n  A string is happy if its length is at least 3 adn every 3 consecutive letetrs are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return true\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1\n    if (count === 3) break\n  }\n  return count >= 3\n}\n\n/*You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(aba) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length < 2) return true\n  if (s[0] === s[s.length - 1]) return true\n  return false\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is palindrome if its first and last chars are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the seemster and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The lony problem is, she has lost the cdoe she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can outptu a list of letter grades using the flolowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the seemster and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The lony problem is, she has lost the cdoe she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can outptu a list of letter grades using the flolowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 100).toArray();\n  const gradesSum = gradesArray.reduce((acc, val) => acc + val, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesDiff = gradesArray.map(grade => grade - gradesAverage);\n  const gradesDiffSum = gradesDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffAverage = gradesDiffSum / gradesDiff.length;\n  const gradesDiffDiff = gradesDiff.map(grade => grade - gradesDiffAverage);\n  const gradesDiffDiffSum = gradesDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffAverage = gradesDiffDiffSum / gradesDiffDiff.length;\n  const gradesDiffDiffDiff = gradesDiffDiff.map(grade => grade / gradesDiffAverage);\n  const gradesDiffDiffDiffSum = gradesDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffAverage = gradesDiffDiffDiffSum / gradesDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiff = gradesDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffSum = gradesDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray();\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiff.reduce((acc, val) => acc + val, 0);\n  const gradesDiffDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiff.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiff.map(grade => grade * 100).toArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that taeks a string nad retruns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that taeks a string nad retruns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reversed\n  Examples\n  reverseString('hello') == 'olleh'\n  reverseString('kittens') == 'tenkit'\n  */\nconst reverseString = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i);\n  }\n  return reversed;\n};\n\n/*Write a function that takes a string and returns the string with all\n  the letters reverse", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gvien a psoiitve integre ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at dod indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at dod indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers lst. add the odd elements that are at dod indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 5\n  */\nconst addOdd = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non-empty list of integers lst. find the maximum element in the list..\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let maxValue = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  return maxValue;\n};\n\n/*Given a non-empty list of integers lst. find the minimum element in the list..\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 2\n  */\nconst min = (lst) => {\n  let minValue = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n  }\n  return minValue;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 7..\n\n\n  Examples:\n      sumDivideBy7([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 3..\n\n\n  Examples:\n      sumDivideBy3([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 5..\n\n\n  Examples:\n      sumDivideBy5([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 11..\n\n\n  Examples:\n      sumDivideBy11([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 13..\n\n\n  Examples:\n      sumDivideBy13([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 17..\n\n\n  Examples:\n      sumDivideBy17([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 19..\n\n\n  Examples:\n      sumDivideBy19([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 23..\n\n\n  Examples:\n      sumDivideBy23([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy23 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 23 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 29..\n\n\n  Examples:\n      sumDivideBy29([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy29 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 29 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 31..\n\n\n  Examples:\n      sumDivideBy31([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy31 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 31 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 37..\n\n\n  Examples:\n      sumDivideBy37([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy37 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 37 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 40..\n\n\n  Examples:\n      sumDivideBy40([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy40 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 40 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list that are divisible by 47..\n\n\n  Examples:\n      sumDivideBy47([4, 2, 6, 7]) ==> 12\n  */\nconst sumDivideBy47 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 47 === 0) {\n      sum += lst[i];\n    }\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wirte a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Wirte a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().reverse().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleAsc = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleAscDesc = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().reverse().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleAscAsc = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleAscAscDesc = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().reverse().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleAscAscAsc = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleAscAscAscDesc = (s) => {\n  const words = s.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = \"\";\n  }\n  return newWords.sort().reverse().join(\" \");\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res.sort((a, b) => b[1] - a[1]).sort((a, b) => a[0] - b[0]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by columns in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(0, 0), (2, 0), (3, 2)]\n  */\nconst getCol = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res.sort((a, b) => a[1] - b[1]).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by columns in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(0, 0), (1, 0), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res.sort((a, b) => a[1] - b[1]).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by columns in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(0, 0), (1, 0), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res.sort((a, b) => a[1] - b[1]).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by columns in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(0, 0), (1, 0), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res.sort((a, b) => a[1] - b[1]).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by columns in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(0, 0), (1, 0), (2, 2), (2, 3), (2, 4), (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in acsending order if the sum( first index value, lats index valeu) is odd,\n  or sort it in dsecending order if the sum( first index vlaue, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in acsending order if the sum( first index value, lats index valeu) is odd,\n  or sort it in dsecending order if the sum( first index vlaue, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstElements = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastElements = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstElements % 2 === 1;\n  const isEven = sumOfLastElements % 2 === 0;\n  if (isOdd) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\nexport { sortArray };\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = sum % 2 === 1;\n  let isEven = sum % 2 === 0;\n  if (isOdd) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a tsrnig as an argmuent and\n  returns a string encrypted with the alphabet bieng rotated. \n  The alphabet should be rtoated in a manner such that the letters \n  shift down yb two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Cerate a function encrypt that takes a tsrnig as an argmuent and\n  returns a string encrypted with the alphabet bieng rotated. \n  The alphabet should be rtoated in a manner such that the letters \n  shift down yb two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map((letter, index) => alphabet.charAt(index) + alphabet.charAt(index + 1))\n   .join('');\n  let rotatedAlphabetArr = rotatedAlphabet.split('');\n  let rotatedAlphabetArrLength = rotatedAlphabetArr.length;\n  let rotatedAlphabetArrShifted = rotatedAlphabetArr.slice(rotatedAlphabetArrLength / 2, rotatedAlphabetArrLength);\n  let rotatedAlphabetArrShiftedLength = rotatedAlphabetArrShifted.length;\n  let rotatedAlphabetArrShiftedShifted = rotatedAlphabetArrShifted.slice(rotatedAlphabetArrLength / 2, rotatedAlphabetArrLength);\n  let rotatedAlphabetArrShiftedShiftedLength = rotatedAlphabetArrShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShifted = rotatedAlphabetArrShiftedShifted.slice(rotatedAlphabetArrLength / 2, rotatedAlphabetArrLength);\n  let rotatedAlphabetArrShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShifted = rotatedAlphabetArrShiftedShiftedShifted.slice(rotatedAlphabetArrLength / 2, rotatedAlphabetArrLength);\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShifted = rotatedAlphabetArrShiftedShiftedShiftedShifted.slice(rotatedAlphabetArrLength / 2, rotatedAlphabetArrLength);\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShifted = rotatedAlphabetArrShiftedShiftedShiftedShiftedShifted.slice(rotatedAlphabetArrLength / 2, rotatedAlphabetArrLength);\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShifted = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShifted.slice(rotatedAlphabetArrLength / 2, rotatedAlphabetArrLength);\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = rotatedAlphabetArrShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted.length;\n  let rotatedAlphabetArr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of integers, generate a list of rolling maximum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a gievn list of integers, generate a list of rolling maximum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (numbers[i] > max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling minimum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (numbers[i] < min) {\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling sum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling average elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 2.5, 3]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling median elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 2.5, 3]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  const middle = Math.floor(numbers.length / 2);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(sum / count);\n  }\n  if (count % 2 === 0) {\n    result.push(numbers[middle]);\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling mode elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] === max) {\n      mode++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (numbers[i] === max) {\n      result.push(mode);\n    }\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling standard deviation elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 2.5, 3]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(Math.sqrt(sum / count));\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling variance elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 2.5, 3]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling sum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling average elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 2.5, 3]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling median elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 2.5, 3]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  const middle = Math.floor(numbers.length / 2);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    result.push(sum / count);\n  }\n  if (count % 2 === 0) {\n    result.push(numbers[middle]);\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling mode elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] === max) {\n      mode++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (numbers[i] === max) {\n      result.push(mode);\n    }\n  }\n  return result;\n};\n\n/* From a gievn list of integers, generate a list of rolling standard deviation elmeent fou", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are igven a list of integers.\n  Write a function nextSmallest() taht retruns the 2nd smallest eleemnt of the list.\n  Return null if there is no such eleemnt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are igven a list of integers.\n  Write a function nextSmallest() taht retruns the 2nd smallest eleemnt of the list.\n  Return null if there is no such eleemnt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all even numbers in the list.\n  \n  sumEven([2, 4, 6, 8]) == 18\n  sumEven([4, 6, 8, 10, 12]) == 20\n  sumEven([]) == 0\n  sumEven([2, 3, 4, 5]) == 10\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n  sumEven([10, 5, 1, 4, 2, 3]) == 15\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, letter => {\n    const letterIndex = message.indexOf(letter);\n    const letter2 = message.charAt(letterIndex + 1);\n    return letter2;\n  });\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message;\n  encodedMessage = encodedMessage.replace(/[aeiou", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*Yuo are givne a list of integers.\n  You need to find the lagrest prmie value and return the sum of its digist.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Yuo are givne a list of integers.\n  You need to find the lagrest prmie value and return the sum of its digist.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let count = 0;\n    for (let j = i; j < lst.length; j++) {\n      if (num === lst[j]) {\n        count++;\n      }\n    }\n    if (count === 1) {\n      sum += num;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, you need to return the number of occurrences of the given string in that string.\n  Examples:\n  For str = \"abcabc\" the output should be 3\n  For str = \"bbbbb\" the output should be 1\n  For str = \"aba\" the output should be 0\n  For str = \"a\" the output should be 0\n*/\nconst skjkasdkd = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    } else {\n      if (dict[key].toUpperCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, return ture fi all chars are in lower case or all chars \n  are in upper case, lese return false.\n  The function should return flase is the givne string is empty.\n  Examples:\n  checkStringCase(\"apple\") should return true.\n  checkStringCase(\"Apple\") should return true.\n  checkStringCase(\"Apple\") should return true.\n  checkStringCase(\"Apple\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should return false.\n  checkStringCase(\"a\") should ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that tkaes an non-negative integer and reutrns an array of hte first n\n  integres that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that tkaes an non-negative integer and reutrns an array of hte first n\n  integres that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n};\n\n/*Implement a function that takes a positive integer and returns the next prime number after that integer.\n  for example:\n  nextPrime(5) => 6\n  nextPrime(11) => 13\n  nextPrime(0) => 0\n  nextPrime(20) => 21\n  nextPrime(1) => 1\n  nextPrime(18) => 19\n  */\nconst nextPrime = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply15 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and retursn the \n  product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowlse in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowlse in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowlse in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'b' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpaces('aBCdEf') returns 1\n  countSpaces('abcdefg') returns 0\n  countSpaces('dBBE') returns 0\n  */\nconst countSpaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowelsOdd('aBCdEf') returns 1\n  countVowelsOdd('abcdefg') returns 0\n  countVowelsOdd('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 1\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'b' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  countSpacesOdd('aBCdEf') returns 1\n  countSpacesOdd('abcdefg') returns 0\n  countSpacesOdd('dBBE') returns 0\n  */\nconst countSpacesOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in odd indices.\n  \n  For example:\n  countDigitsOdd('aBCdEf') returns 1\n  countDigitsOdd('abcdefg') returns 0\n  countDigitsOdd('dBBE') returns 0\n  */\nconst countDigitsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowelsEven('aBCdEf') returns 1\n  countVowelsEven('abcdefg') returns 0\n  countVowelsEven('dBBE') returns 0\n  */\nconst countVowelsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 1\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpacesEven('aBCdEf') returns 1\n  countSpacesEven('abcdefg') returns 0\n  countSpacesEven('dBBE') returns 0\n  */\nconst countSpacesEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  countDigitsEven('aBCdEf') returns 1\n  countDigitsEven('abcdefg') returns 0\n  countDigitsEven('dBBE') returns 0\n  */\nconst countDigitsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int2 - int1;\n  return diff > 0? int1 + diff : int1 - diff;\n};\n\n/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from ", "passed": 0, "run_status": 1}
