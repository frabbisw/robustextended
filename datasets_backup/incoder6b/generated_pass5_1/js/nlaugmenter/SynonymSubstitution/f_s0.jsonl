{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let close = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      close = true;\n    }\n  }\n  return close;\n};\n\n/* Check if in given list of numbers, are any ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let groups = [];\n  let opening_groups = [];\n  let closing_groups = [];\n  let opening_paren_groups = [];\n  let closing_paren_groups = [];\n  let opening_paren_group_index = 0;\n  let closing_paren_group_index = 0;\n  let paren_string_index = 0;\n  let paren_string_string = '';\n  let paren_string_opening_paren_group_index = 0;\n  let paren_string_closing_paren_group_index = 0;\n  let paren_string_opening_paren_group_string = '';\n  let paren_string_closing_paren_group_string = '';\n  let paren_string_opening_paren_group_opening_paren_group_index = 0;\n  let paren_string_opening_paren_group_closing_paren_group_index = 0;\n  let paren_string_closing_paren_group_opening_paren_group_index = 0;\n  let paren_string_closing_paren_group_closing_paren_group_index = 0;\n  let paren_string_opening_paren_group_opening_paren_group_string = '';\n  let paren_string_opening_paren_group_closing_paren_group_string = '';\n  let paren_string_closing_paren_group_opening_paren_group_string = '';\n  let paren_string_closing_paren_group_closing_paren_group_string = '';\n  let paren_string_opening_paren_group_opening_paren_group_opening_paren_group_index = 0;\n  let paren_string_opening_paren_group_opening_paren_group_closing_paren_group_index = 0;\n  let paren_string_opening_paren_group_closing_paren_group_opening_paren_group_index = 0;\n  let paren_string_opening_paren_group_closing_paren_group_closing_paren_group_index = 0;\n  let paren_string_closing_paren_group_opening_paren_group_opening_paren_group_index = 0;\n  let paren_string_closing_paren_group_opening_paren_group_closing_paren_group_index = 0;\n  let paren_string_closing_paren_group_closing_paren_group_opening_paren_group_index = 0;\n  let paren_string_closing_paren_group_closing_paren_group_closing_paren_group_index = 0;\n  while (paren_string_index < paren_string.length) {\n    if (paren_string[paren_string_index] === '(') {\n      opening_paren_groups.push(paren_string_string);\n      opening_paren_group_string = paren_string_string;\n      paren_string_string = '';\n      paren_string_opening_paren_group_index++;\n      paren_string_opening_paren_group_string = paren_string_string;\n      paren_string_opening_paren_group_opening_paren_group_index++;\n      paren_string_opening_paren_group_closing_paren_group_index++;\n      paren_string_closing_paren_group_index++;\n      paren_string_closing_paren_group_opening_paren_group_index++;\n      paren_string_closing_paren_group_closing_paren_group_index++;\n      paren_string_opening_paren_group_opening_paren_group_string = paren_string_string;\n      paren_string_opening_paren_group_closing_paren_group_string = paren_string_string;\n      paren_string_closing_paren_group_opening_paren_group_string = paren_string_string;\n      paren_string_closing_paren_group_closing_paren_group_string = paren_string_string;\n      paren_string_opening_paren_group_opening_paren_group_opening_paren_group_index++;\n      paren_string_opening_paren_group_opening_paren_group_closing_paren_group_index++;\n      paren_string_opening_paren_group_closing_paren_group_opening_paren_group_index++;\n      paren_string_opening_paren_group_closing_paren_group_closing_paren_group_index++;\n      paren_string_closing_paren_group_opening_paren_group_opening_paren_group_index++;\n      paren_string_closing_paren_group_opening_paren_group_closing_paren_group_index++;\n      paren_string_closing_paren_group_closing_paren_group_opening_paren_group_index++;\n      paren_string_closing_paren_group_closing_paren_group_closing_paren_group_index++;\n    } else if (paren_string[paren_string_index] === ')') {\n      closing_paren_groups.push(paren_string_string);\n      closing_paren_group_string = paren_string_string;\n      paren_string_string = '';\n      paren_string_closing_paren_group_index++;\n      paren_string_closing_paren_group_string = paren_string_string;\n      paren_string_closing_paren_group_opening_paren_group_index++;\n      paren_string_closing_paren_group_closing_paren_group_index++;\n      paren_string_opening_paren_group_index++;\n      paren_string_opening_paren_group_opening_paren_group_index++;\n      paren_string_opening_paren_group_closing_paren_group_index++;\n      paren_string_closing_paren_group_opening_paren_group_index++;\n      paren_string_closing_paren_group_closing_paren_group_index++;\n      paren_string_opening_paren_group_opening_paren_group_string = paren_string_string;\n      paren_string_opening_paren_group_closing_paren_group_string = paren_string_string;\n      paren_string_closing_paren_group_opening_paren_group_string = paren_string_string;\n      paren_string_closing_paren_group_closing_paren_group_string = paren_string_string;\n      paren_string_opening_paren_group_opening_paren_group_opening_paren_group_index++;\n      paren_string_opening_paren_group_opening_paren_group_closing_paren_group_index++;\n      paren_string_opening_paren_group_closing_paren_group_opening_paren_group_index++;\n      paren_string_opening_paren_group_closing_paren_group_closing_paren_group_index++;\n      paren_string_closing_paren_group_opening_paren_group_opening_paren_group_index++;\n      paren_string_closing_paren_group_opening_paren_group_closing_paren_group_index++;\n      paren_string_closing_paren_group_closing_paren_group_opening_paren_group_index++;\n      paren_string_closing_paren_group_closing_paren_group_closing_paren_group_index++;\n    } else if (paren_string[paren_string_index] ==='') {\n      paren_string_string = paren_string_string + paren_string[paren_string_index];\n    } else {\n      paren_string_string = paren_string_string + paren_string[paren_string_index];\n    }\n    paren_string_index++;\n  }\n  while (opening_paren_groups.length > 0) {\n    groups.push(opening_paren_groups);\n    opening_paren_groups = [];\n  }\n  while (closing_paren_groups.length > 0) {\n    groups.push(closing_paren_groups);\n    closing_paren_groups = [];\n  }\n  while (opening_paren_group_string.length > 0) {\n    groups.push(opening_paren_group_string);\n    opening_paren_group_string = '';\n  }\n  while (closing_paren_group_string.length > 0) {\n    groups.push(closing_paren_group_string);\n    closing_paren_group_string = '';\n  }\n  while (opening_paren_group_opening_paren_group_string.length > 0) {\n    groups.push(opening_paren_group_opening_paren_group_string);\n    open", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string\n  let palindrome = string\n  let reversedPostfix = string\n  let reversedPalindrome = string\n  \n  while (postfix.length > 0) {\n    if (isPalindrome(postfix)) {\n      reversedPostfix = postfix.split('').reverse().join('')\n      reversedPalindrome = reversedPostfix.split('').reverse().join('')\n      palindrome = palindrome + reversedPalindrome\n      postfix = postfix.substr(0, postfix.length - 1)\n    } else {\n      postfix = postfix.substr(0, postfix.length - 1)\n    }\n  }\n  return palindrome\n}\n\n/* Test if gniven string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string\n  let palindrome = string\n  let reversedPostfix = string\n  let reversedPalindrome = string\n  \n  while (postfix.length > 0) {\n    if (isPalindrome(postfix)) {\n      reversedPostfix = postfix.split('').reverse().join('')\n      reversedPalindrome = reversedPostfix.split('').reverse().join('')\n      palindrome = palindrome + reversedPalindrome\n      postfix = postfix.substr(0, postfix.length - 1)\n    } else {\n      postfix = postfix.substr(0, postfix.length - 1)\n    }\n  }\n  return palindrome\n}\n\n/* Test if gniven string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string\n  let palindrome = string\n  let reversedPostfix = string\n  let reversedPalindrome = string\n  \n  while (postfix.length > 0) {\n    if (isPalindrome(postfix)) {\n      reversedPostfix = postfix.split('').reverse().join('')\n      reversedPalindrome = reversedPostfix.split('').reverse().join('')\n      palindrome = palindrome + reversedPalindrome\n      postfix = postfix.substr(0, postfix.length - 1)\n    } else {\n      postfix = postfix.substr(0, postfix.length - 1)\n    }\n  }\n  return palindrome\n}\n\n/* Test if gniven string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string\n  let palindrome = string\n  let reversedPostfix = string\n  let reversedPalindrome = string\n  \n  while (postfix.length > 0) {\n    if (isPalindrome(postfix)) {\n      reversedPostfix = postfix.split('').reverse().join('')\n      reversedPalindrome = reversedPostfix.split('').reverse().join('')\n      palindrome = palindrome + reversedPalindrome\n      postfix = postfix.substr(0, postfix.length - 1)\n    } else {\n      postfix = postfix.substr(0, postfix.length - 1)\n    }\n  }\n  return palindrome\n}\n\n/* Test if gniven string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = string\n  let palindrome = string\n  let reversedPostfix = string\n  let reversedPalindrome = string\n  \n  while (postfix.length > 0) {\n    if (isPalindrome(postfix)) {\n      reversedPostfix = postfix.split('').reverse().join('')\n      reversedPalindrome = reversedPostfix.split('').reverse().join('')\n      palindrome = palindrome + reversedPalindrome\n      postfix = postfix.substr(0, postfix.length - 1)\n    } else {\n      postfix = postfix.substr(0, postfix.length - 1)\n    }\n  }\n  return p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(word => word.trim());\n  return words.map(word => word[0].toUpperCase() + word.slice(1));\n};\n\n/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(x, y);\n  }\n};\n\n/*This function takes two positive numbers x and y and return the \n   big odd integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNumOdd(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNumOdd(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNumOdd(x, y / 2);\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNumOdd(x, y);\n  }\n};\n\n/*This function takes two positive numbers x and y and return the \n   big odd integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNumOdd(12, 15) = 15\n  chooseNumOdd(13, 12) = -1\n  */\nconst chooseNumOdd2 = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNumOdd(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNumOdd(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNumOdd(x, y / 2);\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNumOdd(x, y);\n  }\n};\n\n/*This function takes two positive numbers x and y and return the \n   big odd integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNumOdd(12, 15) = 15\n  chooseNumOdd(13, 12) = -1\n  */\nconst chooseNumOdd3 = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNumOdd(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNumOdd(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNumOdd(x, y / 2);\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNumOdd(x, y);\n  }\n};\n\n/*This function takes two positive numbers x and y and return the \n   big odd integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNumOdd(12, 15) = 15\n  chooseNumOdd(13, 12) = -1\n  */\nconst chooseNumOdd4 = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNumOdd(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNumOdd(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNumOdd(x, y / 2);\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNumOdd(x, y);\n  }\n};\n\n/*This function takes two positive numbers x and y and return the \n   big odd integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNumOdd(12, 15) = 15\n  chooseNumOdd(13, 12) = -1\n  */\nconst chooseNumOdd5 = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNumOdd(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNumOdd(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNumOdd(x, y / 2);\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNumOdd(x, y);\n  }\n};\n\n/*This function takes two positive numbers x and y and return the \n   big odd integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNumOdd(12, 15) = 15\n  chooseNumOdd(13, 12) = -1\n  */\nconst chooseNumOdd6 = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNumOdd(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNumOdd(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNumOdd(x, y / 2);\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNumOdd(x, y);\n  }\n};\n\n/*This function takes two positive numbers x and y and return the \n   big odd integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNumOdd(12, 15) = 15\n  chooseNumOdd(13, 12) = -1\n  */\nconst chooseNumOdd7 = (x, y) => {\n  if (x < 0 || y < 0 || x > 100 || y > 100) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNumOdd(x / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNumOdd(x / 2, y);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNumOdd(x, y / 2);\n  }\n  if (x % 2 ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in decreasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [10, 1, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReverse = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed2 = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed3 = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed4 = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed5 = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed6 = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed7 = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReversed8 = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let flag = false;\n    for (let j = 0; j < arr.length; j++) {\n      if (x[i] == arr[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.reverse();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsReverse", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) return [];\n  \n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = reversedArr.map((num) => {\n    if (num < 10) return `One ${num}`;\n    if (num < 20) return `Two ${num}`;\n    if (num < 30) return `Three ${num}`;\n    if (num < 40) return `Four ${num}`;\n    if (num < 50) return `Five ${num}`;\n    if (num < 60) return `Six ${num}`;\n    if (num < 70) return `Seven ${num}`;\n    if (num < 80) return `Eight ${num}`;\n    if (num < 90) return `Nine ${num}`;\n  });\n  \n  return result;\n};\n\n// TESTS\nconst tests = [\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], []],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, 4, 2, 9, 7, 5, 8, 9]],\n  [[1, 3, 6, 4, 2, 9, 7, 5, 8], [1, 3, 6, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n// TEST\nconsole.log(f(5));</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays dscore=0 |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 tags=javascript,factorial,arrays |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=0 |>\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 2);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 2);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 2);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 2);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 2);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n / 2 }, (_, i) => i + 2);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums2 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums2([]) == 0\n  >>> countNums2([-1, 11, -11]) == 1\n  >>> countNums2([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums3 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0.\n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums3([]) == 0\n  >>> countNums3([-1, 11, -11]) == 1\n  >>> countNums3([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums4 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0.\n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums4([]) == 0\n  >>> countNums4([-1, 11, -11]) == 1\n  >>> countNums4([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums5 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0 and a \n   sum of finger > 0.\n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums5([]) == 0\n  >>> countNums5([-1, 11, -11]) == 1\n  >>> countNums5([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums6 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0 and a \n   sum of finger > 0 and a sum of finger < 0.\n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums6([]) == 0\n  >>> countNums6([-1, 11, -11]) == 1\n  >>> countNums6([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums7 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0 and a \n   sum of finger > 0 and a sum of finger < 0 and a sum of finger > \n   0.\n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums7([]) == 0\n  >>> countNums7([-1, 11, -11]) == 1\n  >>> countNums7([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums8 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0 and a \n   sum of finger > 0 and a sum of finger < 0 and a sum of finger > \n   0 and a sum of finger < 0.\n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums8([]) == 0\n  >>> countNums8([-1, 11, -11]) == 1\n  >>> countNums8([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums9 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0 and a \n   sum of finger > 0 and a sum of finger < 0 and a sum of finger > \n   0 and a sum of finger < 0 and a sum of finger > 0 and a sum of \n   finger < 0.\n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums9([]) == 0\n  >>> countNums9([-1, 11, -11]) == 1\n  >>> countNums9([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums10 which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0 and a \n   sum of finger > 0 and a sum of finger < 0 and a sum of finger > \n   0 and a sum of finger < 0 and a sum of finger > 0 and a sum of \n   finger < 0 and a sum of finger > 0 and a sum of finger < 0.\n   If a number be negative, then its first sign digit will be minus: ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let flag = false;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary AND on these inputs and return result besides as a string.\n  >>> stringAnd('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary OR on these inputs and return result besides as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary NOT on these inputs and return result besides as a string.\n  >>> stringNot('010', '110')\n  '01'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '10'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary AND on these inputs and return result besides as a string.\n  >>> stringAnd('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary OR on these inputs and return result besides as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary NOT on these inputs and return result besides as a string.\n  >>> stringNot('010', '110')\n  '01'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary AND on these inputs and return result besides as a string.\n  >>> stringAnd('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary OR on these inputs and return result besides as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary NOT on these inputs and return result besides as a string.\n  >>> stringNot('010', '110')\n  '01'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '10'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary AND on these inputs and return result besides as a string.\n  >>> stringAnd('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary OR on these inputs and return result besides as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary NOT on these inputs and return result besides as a string.\n  >>> stringNot('010', '110')\n  '01'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary AND on these inputs and return result besides as a string.\n  >>> stringAnd('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary OR on these inputs and return result besides as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s. \n   Perform binary NOT on these inputs and return result besides as a string.\n  >>> stringNot('0", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  let evenOdd = even.concat(odd);\n  let evenOddEven = evenOdd.filter(x => x % 2 === 0);\n  let evenOddOddEven = evenOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOdd = evenOddEvenOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddEven = evenOddEvenOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOdd = evenOddEvenOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddEven = evenOddEvenOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOdd = evenOddEvenOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddEven = evenOddEvenOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOdd = evenOddEvenOddOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddOddEven = evenOddEvenOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOdd = evenOddEvenOddOddOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOdd = evenOddEvenOddOddOddOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOdd = evenOddEvenOddOddOddOddOddOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOdd = evenOddEvenOddOddOddOddOddOddOddOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOdd = evenOddEvenOddOddOddOddOddOddOddOddOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOdd = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOdd.filter(x => x % 2 === 0);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven.filter(x => x % 2 === 1);\n  let evenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOEven = evenOddEvenOddOddOddOddOddOddOddOddO", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"bbbbb\", k = 1  the result should be \"\"\n  For s = \"pwwkew\", k = 3  the result should be \"wke\"\n  */\nconst longestSubstring = (s, k) => {\n  let result = '';\n  let index = 0;\n  let maxLength = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(index)) {\n      result += s.charAt(i);\n      index += 1;\n    } else {\n      if (index - maxLength >= k) {\n        maxLength = index;\n        result = s.substr(0, index);\n      }\n      index = 0;\n    }\n  }\n  console.log(result);\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"bbbbb\", k = 1  the result should be \"\"\n  For s = \"pwwkew\", k = 3  the result should be \"wke\"\n  */\nconst longestSubstring = (s, k) => {\n  let result = '';\n  let index = 0;\n  let maxLength = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(index)) {\n      result += s.charAt(i);\n      index += 1;\n    } else {\n      if (index - maxLength >= k) {\n        maxLength = index;\n        result = s.substr(0, index);\n      }\n      index = 0;\n    }\n  }\n  console.log(result);\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"bbbbb\", k = 1  the result should be \"\"\n  For s = \"pwwkew\", k = 3  the result should be \"wke\"\n  */\nconst longestSubstring = (s, k) => {\n  let result = '';\n  let index = 0;\n  let maxLength = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(index)) {\n      result += s.charAt(i);\n      index += 1;\n    } else {\n      if (index - maxLength >= k) {\n        maxLength = index;\n        result = s.substr(0, index);\n      }\n      index = 0;\n    }\n  }\n  console.log(result);\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"bbbbb\", k = 1  the result should be \"\"\n  For s = \"pwwkew\", k = 3  the result should be \"wke\"\n  */\nconst longestSubstring = (s, k) => {\n  let result = '';\n  let index = 0;\n  let maxLength = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(index)) {\n      result += s.charAt(i);\n      index += 1;\n    } else {\n      if (index - maxLength >= k) {\n        maxLength = index;\n        result = s.substr(0, index);\n      }\n      index = 0;\n    }\n  }\n  console.log(result);\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"bbbbb\", k = 1  the result should be \"\"\n  For s = \"pwwkew\", k = 3  the result should be \"wke\"\n  */\nconst longestSubstring = (s, k) => {\n  let result = '';\n  let index = 0;\n  let maxLength = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(index)) {\n      result += s.charAt(i);\n      index += 1;\n    } else {\n      if (index - maxLength >= k) {\n        maxLength = index;\n        result = s.substr(0, index);\n      }\n      index = 0;\n    }\n  }\n  console.log(result);\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"bbbbb\", k = 1  the result should be \"\"\n  For s = \"pwwkew\", k = 3  the result should be \"wke\"\n  */\nconst longestSubstring = (s, k) => {\n  let result = '';\n  let index = 0;\n  let maxLength = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(index)) {\n      result += s.charAt(i);\n      index += 1;\n    } else {\n      if (index - maxLength >= k) {\n        maxLength = index;\n        result = s.substr(0, index);\n      }\n      index = 0;\n    }\n  }\n  console.log(result);\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"bbbbb\", k = 1  the result should be \"\"\n  For s = \"pwwkew\", k = 3  the result should be \"wke\"\n  */\nconst longestSubstring = (s, k) => {\n  let result = '';\n  let index = 0;\n  let maxLength = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(index)) {\n      result += s.charAt(i);\n      index += 1;\n    } else {\n      if (index - maxLength >= k) {\n        maxLength = index;\n        result = s.substr(0, index);\n      }\n      index = 0;\n    }\n  }\n  console.log(result);\n};\n\n/*Task \n   You are given a string s and a number k. \n   You are to find the longest substring in s that contains at most k characters. \n   You should return the substring as a string and print it out on the console.\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let remark = \"\";\n  let oddNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfOdd = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"1\") {\n        numOfOdd += 1;\n      }\n    }\n    remark += `the number of odd elements ${numOfOdd} the str${str.length} ${numOfOdd} of the ${str.length}nput.`;\n  }\n  return [remark];\n};\n\n/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of even component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let remark = \"\";\n  let evenNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEven = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEven += 1;\n      }\n    }\n    remark += `the number of even elements ${numOfEven} the str${str.length} ${numOfEven} of the ${str.length}nput.`;\n  }\n  return [remark];\n};\n\n/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of even component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let remark = \"\";\n  let evenNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEven = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEven += 1;\n      }\n    }\n    remark += `the number of even elements ${numOfEven} the str${str.length} ${numOfEven} of the ${str.length}nput.`;\n  }\n  return [remark];\n};\n\n/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of even component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let remark = \"\";\n  let evenNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEven = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEven += 1;\n      }\n    }\n    remark += `the number of even elements ${numOfEven} the str${str.length} ${numOfEven} of the ${str.length}nput.`;\n  }\n  return [remark];\n};\n\n/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of even component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let remark = \"\";\n  let evenNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEven = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEven += 1;\n      }\n    }\n    remark += `the number of even elements ${numOfEven} the str${str.length} ${numOfEven} of the ${str.length}nput.`;\n  }\n  return [remark];\n};\n\n/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of even component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let remark = \"\";\n  let evenNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEven = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEven += 1;\n      }\n    }\n    remark += `the number of even elements ${numOfEven} the str${str.length} ${numOfEven} of the ${str.length}nput.`;\n  }\n  return [remark];\n};\n\n/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of even component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maximal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == [4, 6]\n  minMaxSubArraySum([-1, -2, -3]) == [-3, 3]\n  */\nconst minMaxSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return [minSum, maxSum];\n};\n\n/*\n  Given an array of integers nums, find the minimal and maxim", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  \n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  \n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  \n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  \n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return -1\n    if (b === 1) return 1\n    return a - b\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in descend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return 1\n    if (b === 1) return -1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return -1\n    if (b === 1) return 1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return 1\n    if (b === 1) return -1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return -1\n    if (b === 1) return 1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return 1\n    if (b === 1) return -1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return -1\n    if (b === 1) return 1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return 1\n    if (b === 1) return -1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return -1\n    if (b === 1) return 1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    if (a === 1) return 1\n    if (b === 1) return -1\n    return b - a\n  })\n  return sortedArr\n}\n\n/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  let currentWordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (currentWordCount === n) {\n      result.push(currentWord);\n      currentWordCount = 0;\n    }\n    currentWord += words[i] + \" \";\n    currentWordCount++;\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n vowels, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  let currentWordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (currentWordCount === n) {\n      result.push(currentWord);\n      currentWordCount = 0;\n    }\n    currentWord += words[i] + \" \";\n    currentWordCount++;\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonants, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  let currentWordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (currentWordCount === n) {\n      result.push(currentWord);\n      currentWordCount = 0;\n    }\n    currentWord += words[i] + \" \";\n    currentWordCount++;\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n vowels, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  let currentWordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (currentWordCount === n) {\n      result.push(currentWord);\n      currentWordCount = 0;\n    }\n    currentWord += words[i] + \" \";\n    currentWordCount++;\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonants, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  let currentWordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (currentWordCount === n) {\n      result.push(currentWord);\n      currentWordCount = 0;\n    }\n    currentWord += words[i] + \" \";\n    currentWordCount++;\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n vowels, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  let currentWordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (currentWordCount === n) {\n      result.push(currentWord);\n      currentWordCount = 0;\n    }\n    currentWord += words[i] + \" \";\n    currentWordCount++;\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let firstVowel = vowels.find((v) => word.startsWith(v));\n  let lastVowel = vowels.find((v) => word.endsWith(v));\n  if (firstVowel && lastVowel) {\n    let firstVowelIndex = vowels.indexOf(firstVowel);\n    let lastVowelIndex = vowels.indexOf(lastVowel);\n    let firstVowelDistance = firstVowelIndex - lastVowelIndex;\n    if (firstVowelDistance < 0) {\n      return firstVowel;\n    } else {\n      return lastVowel;\n    }\n  } else {\n    return \"\";\n  }\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the bad slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel2 = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let firstVowel = vowels.find((v) => word.startsWith(v));\n  let lastVowel = vowels.find((v) => word.endsWith(v));\n  if (firstVowel && lastVowel) {\n    let firstVowelIndex = vowels.indexOf(firstVowel);\n    let lastVowelIndex = vowels.indexOf(lastVowel);\n    let firstVowelDistance = firstVowelIndex - lastVowelIndex;\n    if (firstVowelDistance < 0) {\n      return firstVowel;\n    } else {\n      return lastVowel;\n    }\n  } else {\n    return \"\";\n  }\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel3 = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let firstVowel = vowels.find((v) => word.startsWith(v));\n  let lastVowel = vowels.find((v) => word.endsWith(v));\n  if (firstVowel && lastVowel) {\n    let firstVowelIndex = vowels.indexOf(firstVowel);\n    let lastVowelIndex = vowels.indexOf(lastVowel);\n    let firstVowelDistance = firstVowelIndex - lastVowelIndex;\n    if (firstVowelDistance < 0) {\n      return firstVowel;\n    } else {\n      return lastVowel;\n    }\n  } else {\n    return \"\";\n  }\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the bad slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel4 = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let firstVowel = vowels.find((v) => word.startsWith(v));\n  let lastVowel = vowels.find((v) => word.endsWith(v));\n  if (firstVowel && lastVowel) {\n    let firstVowelIndex = vowels.indexOf(firstVowel);\n    let lastVowelIndex = vowels.indexOf(lastVowel);\n    let firstVowelDistance = firstVowelIndex - lastVowelIndex;\n    if (firstVowelDistance < 0) {\n      return firstVowel;\n    } else {\n      return lastVowel;\n    }\n  } else {\n    return \"\";\n  }\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel5 = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let firstVowel = vowels.find((v) => word.startsWith(v));\n  let lastVowel = vowels.find((v) => word.endsWith(v));\n  if (firstVowel && lastVowel) {\n    let firstVowelIndex = vowels.indexOf(firstVowel);\n    let lastVowelIndex = vowels.indexOf(lastVowel);\n    let firstVowelDistance = firstVowelIndex - lastVowelIndex;\n    if (firstVowelDistance < 0) {\n      return firstVowel;\n    } else {\n      return lastVowel;\n    }\n  } else {\n    return \"\";\n  }\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the bad slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if all strings are equal, false otherwise. \n  >>> allEqual('a', 'a')\n  True\n  >>> allEqual('a', 'b')\n  False\n  >>> allEqual('a', 'aa')\n  False\n  */\nconst allEqual = (...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i]!== strings[0]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n      if (result.length === k) {\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\nexport { maximum, maximumArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the minimum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      result.push(arr[i]);\n      if (result.length === k) {\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\nexport { minimum, minimumArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst median = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  const middle = Math.floor((max - min) / 2);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n      if (result.length === k) {\n        return result;\n      }\n    }\n    if (arr[i] === min) {\n      result.push(arr[i]);\n      if (result.length === k) {\n        return result;\n      }\n    }\n    if (arr[i] === middle) {\n      result.push(arr[i]);\n      if (result.length === k) {\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\nexport { median, medianArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the minimum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst mode = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  const middle = Math.floor((max - min) / 2);\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n      count++;\n      if (result.length === k) {\n        return result;\n      }\n    }\n    if (arr[i] === min) {\n      result.push(arr[i]);\n      count++;\n      if (result.length === k) {\n        return result;\n      }\n    }\n    if (arr[i] === middle) {\n      result.push(arr[i]);\n      count++;\n      if (result.length === k) {\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\nexport { mode, modeArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst modeArray = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  const middle = Math.floor((max - min) / 2);\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n      count++;\n      if (result.length === k) {\n        return result;\n      }\n    }\n    if (arr[i] === min) {\n      result.push(arr[i]);\n      count++;\n      if (result.length === k) {\n        return result;\n      }\n    }\n    if (arr[i] === middle) {\n      result.push(arr[i]);\n      count++;\n      if (result.length === k) {\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\nexport { modeArray, modeArray };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the minimum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst modeArraySort = (arr, k) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in odd military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in odd military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in odd military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in odd military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in odd military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in odd military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in odd military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLast = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLast = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirstLast = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirstLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLastFirstLast = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirstLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFirstLastFirstLastLast = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLastFirstLastLastFirst = (arr, k) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= k; i--) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let curr = 1;\n  while (curr < n) {\n    if (n % 2 === 0) {\n      list.push(curr);\n      curr += 1;\n    } else {\n      curr += 3;\n    }\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that take the curious number in fibonacci sequence. \n\n   The Fibonacci guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let list = [];\n  let curr = 1;\n  while (curr < n) {\n    if (n % 2 === 0) {\n      list.push(curr);\n      curr += 1;\n    } else {\n      curr += 3;\n    }\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that take the curious number in fibonacci sequence. \n\n   The Fibonacci guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let list = [];\n  let curr = 1;\n  while (curr < n) {\n    if (n % 2 === 0) {\n      list.push(curr);\n      curr += 1;\n    } else {\n      curr += 3;\n    }\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that take the curious number in fibonacci sequence. \n\n   The Fibonacci guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let list = [];\n  let curr = 1;\n  while (curr < n) {\n    if (n % 2 === 0) {\n      list.push(curr);\n      curr += 1;\n    } else {\n      curr += 3;\n    }\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that take the curious number in fibonacci sequence. \n\n   The Fibonacci guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let list = [];\n  let curr = 1;\n  while (curr < n) {\n    if (n % 2 === 0) {\n      list.push(curr);\n      curr += 1;\n    } else {\n      curr += 3;\n    }\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that take the curious number in fibonacci sequence. \n\n   The Fibonacci guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Fibonacci(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 5] # The fibonacci sequence for 5 is [5, 8, 13, 11, 2], so the odd numbers are only 1, and 5.\n  */\nconst getOddFibonacci = (n) => {\n  let list = [];\n  let curr = 1;\n  while (curr < n) {\n    if (n % 2 === 0) {\n      list.push(curr);\n      curr += 1;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let day = dateArray[2];\n  let month = dateArray[1];\n  let year = dateArray[0];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonthLeap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let leapMonths = [4, 6, 9, 11];\n  let leapMonthsInv = [4, 6, 9, 11];\n  let leapMonthsInvLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n  let leapMonthsInvLeapLeapLeapLeapLeapLeapLeapLeapLeap = [4, 6, 9, 11];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(\" \");\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length == 2) return lst[0] > lst[1]\n  return false\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDecree = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length == 2) return lst[0] < lst[1]\n  return false\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSortedDecree([5]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5]) ➞ false\n  isSortedDecree([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDecree([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDecree([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDecree2 = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length == 2) return lst[0] > lst[1]\n  return false\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSortedDecree([5]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5]) ➞ false\n  isSortedDecree([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDecree([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDecree([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDecree3 = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length == 2) return lst[0] < lst[1]\n  return false\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSortedDecree([5]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5]) ➞ false\n  isSortedDecree([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDecree([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDecree([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDecree4 = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length == 2) return lst[0] > lst[1]\n  return false\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSortedDecree([5]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5]) ➞ false\n  isSortedDecree([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDecree([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDecree([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDecree5 = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length == 2) return lst[0] < lst[1]\n  return false\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSortedDecree([5]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5]) ➞ false\n  isSortedDecree([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDecree([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDecree([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDecree6 = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length == 2) return lst[0] > lst[1]\n  return false\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSortedDecree([5]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5]) ➞ false\n  isSortedDecree([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDecree([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDecree([1, 3, 2, 4, 5, 6, 7]) ➞", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start];\n  }\n  const [intersectionStart, intersectionEnd] = getIntersection(interval1Start, interval1End, interval2Start, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return \"NO\";\n  }\n  const intersectionLength = interval1End - intersectionStart;\n  if (intersectionLength === 1) {\n    return \"YES\";\n  }\n  if (isPrime(intersectionLength)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start];\n  }\n  const [intersectionStart, intersectionEnd] = getIntersection(interval1Start, interval1End, interval2Start, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return \"NO\";\n  }\n  const intersectionLength = interval1End - intersectionStart;\n  if (intersectionLength === 1) {\n    return \"YES\";\n  }\n  if (isPrime(intersectionLength)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start];\n  }\n  const [intersectionStart, intersectionEnd] = getIntersection(interval1Start, interval1End, interval2Start, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return \"NO\";\n  }\n  const intersectionLength = interval1End - intersectionStart;\n  if (intersectionLength === 1) {\n    return \"YES\";\n  }\n  if (isPrime(intersectionLength)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start];\n  }\n  const [intersectionStart, intersectionEnd] = getIntersection(interval1Start, interval1End, interval2Start, interval2End);\n  if (intersectionStart === intersectionEnd) {\n    return \"NO\";\n  }\n  const intersectionLength = interval1End - intersection", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of all integers in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> sumSigns([1, 2, 2, -4]) == 4\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   product of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == 24\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of all integers in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> sumSigns([1, 2, 2, -4]) == 4\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   product of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSignsOfSigns([1, 2, 2, -4]) == 24\n  >>> prodSignsOfSigns([0, 1]) == 0\n  >>> prodSignsOfSigns([]) == null\n  */\nconst prodSignsOfSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of all integers in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> sumSignsOfSigns([1, 2, 2, -4]) == 4\n  >>> sumSignsOfSigns([0, 1]) == 0\n  >>> sumSignsOfSigns([]) == null\n  */\nconst sumSignsOfSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   product of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSignsOfSignsOfSigns([1, 2, 2, -4]) == 24\n  >>> prodSignsOfSignsOfSigns([0, 1]) == 0\n  >>> prodSignsOfSignsOfSigns([]) == null\n  */\nconst prodSignsOfSignsOfSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of all integers in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> sumSignsOfSignsOfSigns([1, 2, 2, -4]) == 4\n  >>> sumSignsOfSignsOfSigns([0, 1]) == 0\n  >>> sumSignsOfSignsOfSigns([]) == null\n  */\nconst sumSignsOfSignsOfSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   product of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSignsOfSignsOfSignsOfSigns([1, 2, 2, -4]) == 24\n  >>> prodSignsOfSignsOfSignsOfSigns([0, 1]) == 0\n  >>> prodSignsOfSignsOfSignsOfSigns([]) == null\n  */\nconst prodSignsOfSignsOfSignsOfSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of all integers in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> sumSignsOfSignsOfSignsOfSigns([1, 2, 2, -4]) == 4\n  >>> sumSignsOfSignsOfSignsOfSigns([0, 1]) == 0\n  >>> sumSignsOfSignsOfSignsOfSigns([]) == null\n  */\nconst sumSignsOfSignsOfSignsOfSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   product of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSignsOfSignsOfSignsOfSignsOfSigns([1, 2, 2, -4]) == 24\n  >>> prodSignsOfSignsOfSignsOfSignsOfSigns([0, 1]) == 0\n  >>> prodSignsOfSignsOfSignsOfSignsOfSigns([]) == null\n  */\nconst prodSignsOfSignsOfSignsOfSignsOfSignsOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of all integers in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> sumSignsOfSignsOfSignsOfSignsOfSigns([1, 2, 2, -4]) == 4\n  >>> sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const m = grid[0].length\n  const lst_A = new Array(N * N).fill(0)\n  const lst_B = new Array(N * N).fill(0)\n  const lst_C = new Array(N * N).fill(0)\n  const lst_D = new Array(N * N).fill(0)\n  const lst_E = new Array(N * N).fill(0)\n  const lst_F = new Array(N * N).fill(0)\n  const lst_G = new Array(N * N).fill(0)\n  const lst_H = new Array(N * N).fill(0)\n  const lst_I = new Array(N * N).fill(0)\n  const lst_J = new Array(N * N).fill(0)\n  const lst_K = new Array(N * N).fill(0)\n  const lst_L = new Array(N * N).fill(0)\n  const lst_M = new Array(N * N).fill(0)\n  const lst_N = new Array(N * N).fill(0)\n  const lst_O = new Array(N * N).fill(0)\n  const lst_P = new Array(N * N).fill(0)\n  const lst_Q = new Array(N * N).fill(0)\n  const lst_R = new Array(N * N).fill(0)\n  const lst_S = new Array(N * N).fill(0)\n  const lst_T = new Array(N * N).fill(0)\n  const lst_U = new Array(N * N).fill(0)\n  const lst_V = new Array(N * N).fill(0)\n  const lst_W = new Array(N * N).fill(0)\n  const lst_X = new Array(N * N).fill(0)\n  const lst_Y = new Array(N * N).fill(0)\n  const lst_Z = new Array(N * N).fill(0)\n  const lst_A = new Array(N * N).fill(0)\n  const lst_B = new Array(N * N).fill(0)\n  const lst_C = new Array(N * N).fill(0)\n  const lst_D = new Array(N * N).fill(0)\n  const lst_E = new Array(N * N).fill(0)\n  const lst_F = new Array(N * N).fill(0)\n  const lst_G = new Array(N * N).fill(0)\n  const lst_H = new Array(N * N).fill(0)\n  const lst_I = new Array(N * N).fill(0)\n  const lst_J = new Array(N * N).fill(0)\n  const lst_K = new Array(N * N).fill(0)\n  const lst_L = new Array(N * N).fill(0)\n  const lst_M = new Array(N * N).fill(0)\n  const lst_N = new Array(N * N).fill(0)\n  const lst_O = new Array(N * N).fill(0)\n  const lst_P = new Array(N * N).fill(0)\n  const lst_Q = new Array(N * N).fill(0)\n  const lst_R = new Array(N * N).fill(0)\n  const lst_S = new Array(N * N).fill(0)\n  const lst_T = new Array(N * N).fill(0)\n  const lst_U = new Array(N * N).fill(0)\n  const lst_V = new Array(N * N).fill(0)\n  const lst_W = new Array(N * N).fill(0)\n  const lst_X = new Array(N * N).fill(0)\n  const lst_Y = new Array(N * N).fill(0)\n  const lst_Z = new Array(N * N).fill(0)\n  const lst_A = new Array(N * N).fill(0)\n  const lst_B = new Array(N * N).fill(0)\n  const lst_C = new Array(N * N).fill(0)\n  const lst_D = new Array(N * N).fill(0)\n  const lst_E = new Array(N * N).fill(0)\n  const lst_F = new Array(N * N).fill(0)\n  const lst_G = new Array(N * N).fill(0)\n  const lst_H = new Array(N * N).fill(0)\n  const lst_I = new Array(N * N).fill(0)\n  const lst_J = new Array(N * N).fill(0)\n  const lst_K = new Array(N * N).fill(0)\n  const lst_L = new Array(N * N).fill(0)\n  const lst_M = new Array(N * N).fill(0)\n  const lst_N = new Array(N * N).fill(0)\n  const lst_O = new Array(N * N).fill(0)\n  const lst_P = new Array(N * N).fill(0)\n  const lst_Q = new Array(N * N).fill(0)\n  const lst_R = new Array(N * N).fill(0)\n  const lst_S = new Array(N * N).fill(0)\n  const lst_T = new Array(N * N).fill(0)\n  const lst_U = new Array(N * N).fill(0)\n  const lst_V = new Array(N * N).fill(0)\n  const lst_W = new Array(N * N).fill(0)\n  const lst_X = new Array(N * N).fill(0)\n  const lst_Y = new Array(N * N).fill(0)\n  const lst_Z = new Array(N * N).fill(0)\n  const lst_A = new Array(N * N).fill(0)\n  const lst_B = new Array(N * N).fill(0)\n  const lst_C = new Array(N * N).fill(0)\n  const lst_D = new Array(N * N).fill(0)\n  const lst_E = new Array(N * N).fill(0)\n  const lst_F = new Array(N * N).fill(0)\n  const lst_G = new Array(N * N).fill(0)\n  const lst_H = new Array(N * N).fill(0)\n  const lst_I = new Array(N * N).fill(0)\n  const lst_J = new Array(N * N).fill(0)\n  const lst_K = new Array(N * N).fill(0)\n  const lst_L = new Array(N * N).fill(0)\n  const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 0)\n * 7\n */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Spiral sequence. \n   Spiral succession is define by the recurrence: \n   spiral(1) = 1 \n   spiral(n) = n * spiral(n - 1), if n is even. \n   spiral(n) = spiral(n - 1) + spiral(n - 2), if n is curious.\n  For example:\n  spiral(2) = 2\n  spiral(4) = 4\n  spiral(3) = spiral(2) + spiral(1) + spiral(4)\n         = 2 + 1 + 4 = 7\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 4, 7]\n  */\nconst spiral = (n) => {\n  let arr = [n];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * arr[i - 1]);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Spiral sequence. \n   Spiral succession is define by the recurrence: \n   spiral(1) = 1 \n   spiral(n) = n * spiral(n - 1), if n is even. \n   spiral(n) = spiral(n - 1) + spiral(n - 2), if n is curious.\n  For example:\n  spiral(2) = 2\n  spiral(4) = 4\n  spiral(3) = spiral(2) + spiral(1) + spiral(4)\n         = 2 + 1 + 4 = 7\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 4, 7]\n  */\nconst spiral = (n) => {\n  let arr = [n];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * arr[i - 1]);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Spiral sequence. \n   Spiral succession is define by the recurrence: \n   spiral(1) = 1 \n   spiral(n) = n * spiral(n - 1), if n is even. \n   spiral(n) = spiral(n - 1) + spiral(n - 2), if n is curious.\n  For example:\n  spiral(2) = 2\n  spiral(4) = 4\n  spiral(3) = spiral(2) + spiral(1) + spiral(4)\n         = 2 + 1 + 4 = 7\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 4, 7]\n  */\nconst spiral = (n) => {\n  let arr = [n];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * arr[i - 1]);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Spiral sequence. \n   Spiral succession is define by the recurrence: \n   spiral(1) = 1 \n   spiral(n) = n * spiral(n - 1), if n is even. \n   spiral(n) = spiral(n - 1) + spiral(n - 2), if n is curious.\n  For example:\n  spiral(2) = 2\n  spiral(4) = 4\n  spiral(3) = spiral(2) + spiral(1) + spiral(4)\n         = 2 + 1 + 4 = 7\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 4, 7]\n  */\nconst spiral = (n) => {\n  let arr = [n];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * arr[i - 1]);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Spiral sequence. \n   Spiral succession is define by the recurrence: \n   spiral(1) = 1 \n   spiral(n) = n * spiral(n - 1), if n is even. \n   spiral(n) = spiral(n - 1) + spiral(n - 2), if n is curious.\n  For example:\n  spiral(2) = 2\n  spiral(4) = 4\n  spiral(3) = spiral(2) + spiral(1) + spiral(4)\n         = 2 + 1 + 4 = 7\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 4, 7]\n  */\nconst spiral = (n) => {\n  let arr = [n];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * arr[i - 1]);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Spiral sequence. \n   Spiral succession is define by the recurrence: \n   spiral(1) = 1 \n   spiral(n) = n * spiral(n - 1), if n is even. \n   spiral(n) = spiral(n - 1) + spiral(n - 2), if n is curious.\n  For example:\n  spiral(2) = 2\n  spiral(4) = 4\n  spiral(3) = spiral(2) + spiral(1) + spiral(4)\n         = 2 + 1 + 4 = 7\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the number of digits in the number in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitCount = (n) => {\n  let count = 0;\n  while (n > 0) {\n    count++;\n    n /= 10;\n  }\n  return count;\n};\n\n/*Given a positive integer n, return the sum of the digits in the number in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReverse = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitProductReverse = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits in the number in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReversed = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitProductReversed = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReversedd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitProductReversedd = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReverseddd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitProductReverseddd = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReversedddd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitProductReversedddd = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReverseddddd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitProductReverseddddd = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReverseddddddd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitProductReverseddddddd = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits in reverse order.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumReverseddddddddd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   const brackets = string.match(/\\[.*?\\]/g)\n   return brackets && brackets.length >= 2\n }\n*/\nconst isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) => string.match(/\\[.*?\\]/g).length >= 2\n\n/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '-' || lastChar === '_' || lastChar === '!' || lastChar === '?' || lastChar === '/' || lastChar === '\\\\' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '<' || lastChar === '>' || lastChar === '\"' || lastChar === \"'\" || lastChar === '~' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '^' || lastChar === '&' || ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  arr.forEach((el, i) => {\n    if (el > maxExp) {\n      maxExp = el\n    }\n  })\n  return maxExp\n}\n\n/*Create a function which returns the largest exponent of an element which \n   constit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  const biggestPositiveInteger = positiveIntegers.reduce((a, b) => a > b? a : b);\n  const smallestPositiveInteger = positiveIntegers.reduce((a, b) => a < b? a : b);\n  const biggestNegativeInteger = negativeIntegers.reduce((a, b) => a > b? a : b);\n  const smallestNegativeInteger = negativeIntegers.reduce((a, b) => a < b? a : b);\n  return [biggestPositiveInteger, smallestPositiveInteger, biggestNegativeInteger, smallestNegativeInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  const biggestPositiveInteger = positiveIntegers.reduce((a, b) => a > b? a : b);\n  const smallestPositiveInteger = positiveIntegers.reduce((a, b) => a < b? a : b);\n  const biggestNegativeInteger = negativeIntegers.reduce((a, b) => a > b? a : b);\n  const smallestNegativeInteger = negativeIntegers.reduce((a, b) => a < b? a : b);\n  return [biggestPositiveInteger, smallestPositiveInteger, biggestNegativeInteger, smallestNegativeInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  const biggestPositiveInteger = positiveIntegers.reduce((a, b) => a > b? a : b);\n  const smallestPositiveInteger = positiveIntegers.reduce((a, b) => a < b? a : b);\n  const biggestNegativeInteger = negativeIntegers.reduce((a, b) => a > b? a : b);\n  const smallestNegativeInteger = negativeIntegers.reduce((a, b) => a < b? a : b);\n  return [biggestPositiveInteger, smallestPositiveInteger, biggestNegativeInteger, smallestNegativeInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  const biggestPositiveInteger = positiveIntegers.reduce((a, b) => a > b? a : b);\n  const smallestPositiveInteger = positiveIntegers.reduce((a, b) => a < b? a : b);\n  const biggestNegativeInteger = negativeIntegers.reduce((a, b) => a > b? a : b);\n  const smallestNegativeInteger = negativeIntegers.reduce((a, b) => a < b? a : b);\n  return [biggestPositiveInteger, smallestPositiveInteger, biggestNegativeInteger, smallestNegativeInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  const biggestPositiveInteger = positiveIntegers.reduce((a, b) => a > b? a : b);\n  const smallestPositiveInteger = positiveIntegers.reduce((a, b) => a < b? a : b);\n  const biggestNegativeInteger = negativeIntegers.reduce((a, b) => a > b? a : b);\n  const smallestNegativeInteger = negativeIntegers.reduce((a, b) => a < b? a : b);\n  return [biggestPositiveInteger, smallestPositiveInteger, biggestNegativeInteger, smallestNegativeInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(n => n >= 0);\n  const negativeIntegers = lst.filter(n => n < 0);\n  const biggestPositiveInteger = positiveIntegers.reduce((a, b) => a > b? a : b);\n  const smallestPositiveInteger = positiveIntegers.reduce((a, b) => a < b? a : b);\n  const biggestNegativeInteger = negativeIntegers.reduce((a, b) => a > b? a : b);\n  const smallestNegativeInteger = negativeIntegers.reduce((a, b) => a < b? a : b);\n  return [biggestPositiveInteger, smallestPositiveInteger, biggestNegativeInteger, smallestNegativeInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSm", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   const aIsNumber = typeof a === \"number\";\n   const bIsNumber = typeof b === \"number\";\n   const aIsString = typeof a === \"string\";\n   const bIsString = typeof b === \"string\";\n   const aIsFloat = typeof a === \"number\" && a % 1!== 0;\n   const bIsFloat = typeof b === \"number\" && b % 1!== 0;\n   const aIsInt = typeof a === \"number\" && a % 1 === 0;\n   const bIsInt = typeof b === \"number\" && b % 1 === 0;\n   const aIsNull = a === null;\n   const bIsNull = b === null;\n   const aIsUndefined = typeof a === \"undefined\";\n   const bIsUndefined = typeof b === \"undefined\";\n   const aIsNaN = isNaN(a);\n   const bIsNaN = isNaN(b);\n   const aIsInfinite = Number.isFinite(a) && Number.isFinite(b);\n   const bIsInfinite = Number.isFinite(a) && Number.isFinite(b);\n   const aIsFinite = Number.isFinite(a);\n   const bIsFinite = Number.isFinite(b);\n   const aIsEqual = Number.isEqual(a, b);\n   const bIsEqual = Number.isEqual(a, b);\n   const aIsLessThan = a < b;\n   const bIsLessThan = a < b;\n   const aIsGreaterThan = a > b;\n   const bIsGreaterThan = a > b;\n   const aIsLessThanOrEqual = a <= b;\n   const bIsLessThanOrEqual = a <= b;\n   const aIsGreaterThanOrEqual = a >= b;\n   const bIsGreaterThanOrEqual = a >= b;\n   const aIsLessThanOrEqualOrEqual = a <= b;\n   const bIsLessThanOrEqualOrEqual = a <= b;\n   const aIsGreaterThanOrEqualOrEqual = a >= b;\n   const bIsGreaterThanOrEqualOrEqual = a >= b;\n   const aIsLessThanOrEqualOrUndefined = a <= b;\n   const bIsLessThanOrEqualOrUndefined = a <= b;\n   const aIsGreaterThanOrEqualOrUndefined = a >= b;\n   const bIsGreaterThanOrEqualOrUndefined = a >= b;\n   const aIsLessThanOrUndefined = a <= b;\n   const bIsLessThanOrUndefined = a <= b;\n   const aIsGreaterThanOrUndefined = a >= b;\n   const bIsGreaterThanOrUndefined = a >= b;\n   const aIsLessThanOrNaN = a <= b;\n   const bIsLessThanOrNaN = a <= b;\n   const aIsGreaterThanOrNaN = a >= b;\n   const bIsGreaterThanOrNaN = a >= b;\n   const aIsLessThanOrInfinite = a <= b;\n   const bIsLessThanOrInfinite = a <= b;\n   const aIsGreaterThanOrInfinite = a >= b;\n   const bIsGreaterThanOrInfinite = a >= b;\n   const aIsLessThanOrFinite = a <= b;\n   const bIsLessThanOrFinite = a <= b;\n   const aIsGreaterThanOrFinite = a >= b;\n   const bIsGreaterThanOrFinite = a >= b;\n   const aIsLessThanOrEqualOrNaN = a <= b;\n   const bIsLessThanOrEqualOrNaN = a <= b;\n   const aIsGreaterThanOrEqualOrNaN = a >= b;\n   const bIsGreaterThanOrEqualOrNaN = a >= b;\n   const aIsLessThanOrInfiniteOrNaN = a <= b;\n   const bIsLessThanOrInfiniteOrNaN = a <= b;\n   const aIsGreaterThanOrInfiniteOrNaN = a >= b;\n   const bIsGreaterThanOrInfiniteOrNaN = a >= b;\n   const aIsLessThanOrFiniteOrNaN = a <= b;\n   const bIsLessThanOrFiniteOrNaN = a <= b;\n   const aIsGreaterThanOrFiniteOrNaN = a >= b;\n   const bIsGreaterThanOrFiniteOrNaN = a >= b;\n   const aIsLessThanOrEqualOrUndefined = a <= b;\n   const bIsLessThanOrEqualOrUndefined = a <= b;\n   const aIsGreaterThanOrEqualOrUndefined = a >= b;\n   const bIsGreaterThanOrEqualOrUndefined = a >= b;\n   const aIsLessThanOrUndefined = a <= b;\n   const bIsLessThanOrUndefined = a <= b;\n   const aIsGreaterThanOrUndefined = a >= b;\n   const bIsGreaterThanOrUndefined = a >= b;\n   const aIsLessThanOrNaN = a <= b;\n   const bIsLessThanOrNaN = a <= b;\n   const aIsGreaterThanOrNaN = a >= b;\n   const bIsGreaterThanOrNaN = a >= b;\n   const aIsLessThanOrInfinite = a <= b;\n   const bIsLessThanOrInfinite = a <= b;\n   const aIsGreaterThanOrInfinite = a >= b;\n   const bIsGreaterThanOrInfinite = a >= b;\n   const aIsLessThanOrFinite = a <= b;\n   const bIsLessThanOrFinite = a <= b;\n   const aIsGreaterThanOrFinite = a >= b;\n   const bIsGreaterThanOrFinite = a >= b;\n   const aIsLessThanOrEqualOrNaN = a <= b;\n   const bIsLessThanOrEqualOrNaN = a <= b;\n   const aIsGreaterThanOrEqualOrNaN = a >= b;\n   const bIsGreaterThanOrEqualOrNaN = a >= b;\n   const aIsLessThanOrInfiniteOrNaN = a <= b;\n   const bIsLessThanOrInfiniteOrNaN = a <= b;\n   const aIsGreaterThanOrInfiniteOrNaN = a >= b;\n   const bIsGreaterThanOrInfiniteOrNaN = a >= b;\n   const aIsLessThanOrFiniteOrNaN = a <= b;\n   const bIsLessThanOrFiniteOrNaN = a <= b;\n   const aIsGreaterThanOrFiniteOrNaN = a >= b;\n   const bIsGreaterThanOrFiniteOrNaN = a >= b;\n   const aIsLessThanOrEqualOrUndefined = a <= b;\n   const bIs", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 8 cocksure numbers\n  Example\n  isEqualToSum(8) == true\n  isEqualToSum(10) == true\n  isEqualToSum(12) == true\n  isEqualToSum(14) == true\n  isEqualToSum(16) == true\n  isEqualToSum(18) == true\n  isEqualToSum(20) == true\n  isEqualToSum(22) == true\n  isEqualToSum(24) == true\n  isEqualToSum(26) == true\n  isEqualToSum(28) == true\n  isEqualToSum(30) == true\n  isEqualToSum(32) == true\n  isEqualToSum(34) == true\n  isEqualToSum(36) == true\n  isEqualToSum(38) == true\n  isEqualToSum(40) == true\n  isEqualToSum(42) == true\n  isEqualToSum(44) == true\n  isEqualToSum(46) == true\n  isEqualToSum(48) == true\n  isEqualToSum(50) == true\n  isEqualToSum(52) == true\n  isEqualToSum(54) == true\n  isEqualToSum(56) == true\n  isEqualToSum(58) == true\n  isEqualToSum(60) == true\n  isEqualToSum(62) == true\n  isEqualToSum(64) == true\n  isEqualToSum(66) == true\n  isEqualToSum(68) == true\n  isEqualToSum(70) == true\n  isEqualToSum(72) == true\n  isEqualToSum(74) == true\n  isEqualToSum(76) == true\n  isEqualToSum(78) == true\n  isEqualToSum(80) == true\n  isEqualToSum(82) == true\n  isEqualToSum(84) == true\n  isEqualToSum(86) == true\n  isEqualToSum(88) == true\n  isEqualToSum(90) == true\n  isEqualToSum(92) == true\n  isEqualToSum(94) == true\n  isEqualToSum(96) == true\n  isEqualToSum(98) == true\n  isEqualToSum(100) == true\n  isEqualToSum(102) == true\n  isEqualToSum(104) == true\n  isEqualToSum(106) == true\n  isEqualToSum(108) == true\n  isEqualToSum(110) == true\n  isEqualToSum(112) == true\n  isEqualToSum(114) == true\n  isEqualToSum(116) == true\n  isEqualToSum(118) == true\n  isEqualToSum(120) == true\n  isEqualToSum(122) == true\n  isEqualToSum(124) == true\n  isEqualToSum(126) == true\n  isEqualToSum(128) == true\n  isEqualToSum(130) == true\n  isEqualToSum(132) == true\n  isEqualToSum(134) == true\n  isEqualToSum(136) == true\n  isEqualToSum(138) == true\n  isEqualToSum(140) == true\n  isEqualToSum(142) == true\n  isEqualToSum(144) == true\n  isEqualToSum(146) == true\n  isEqualToSum(148) == true\n  isEqualToSum(150) == true\n  isEqualToSum(152) == true\n  isEqualToSum(154) == true\n  isEqualToSum(156) == true\n  isEqualToSum(158) == true\n  isEqualToSum(160) == true\n  isEqualToSum(162) == true\n  isEqualToSum(164) == true\n  isEqualToSum(166) == true\n  isEqualToSum(168) == true\n  isEqualToSum(170) == true\n  isEqualToSum(172) == true\n  isEqualToSum(174) == true\n  isEqualToSum(176) == true\n  isEqualToSum(178) == true\n  isEqualToSum(180) == true\n  isEqualToSum(182) == true\n  isEqualToSum(184) == true\n  isEqualToSum(186) == true\n  isEqualToSum(188) == true\n  isEqualToSum(190) == true\n  isEqualToSum(192) == true\n  isEqualToSum(194) == true\n  isEqualToSum(196) == true\n  isEqualToSum(198) == true\n  isEqualToSum(200) == true\n  isEqualToSum(202) == true\n  isEqualToSum(204) == true\n  isEqualToSum(206) == true\n  isEqualToSum(208) == true\n  isEqualToSum(210) == true\n  isEqualToSum(212) == true\n  isEqualToSum(214) == true\n  isEqualToSum(216) == true\n  isEqualToSum(218) == true\n  isEqualToSum(220) == true\n  isEqualToSum(222) == true\n  isEqualToSum(224) == true\n  isEqualToSum(226) == true\n  isEqualToSum(228) == true\n  isEqualToSum(230) == true\n  isEqualToSum(232) == true\n  isEqualToSum(234) == true\n  isEqualToSum(236) == true\n  isEqualToSum(238) == true\n  isEqualToSum(240) == true\n  isEqualToSum(242) == true\n  isEqualToSum(244) == true\n  isEqualToSum(246) == true\n  isEqualToSum(248) == true\n  isEqualToSum(250) == true\n  isEqualToSum(252) == true\n  isEqualToSum(254) == true\n  isEqualToSum(256) == true\n  isEqualToSum(258) == true\n  isEqualToSum(260) == true\n  isEqualToSum(262) == true\n  isEqualToSum(264) == true\n  isEqualToSum(266) == true\n  isEqualToSum(268) == true\n  isEqualToSum(270) == true\n  isEqualToSum(272) == true\n  isEqualToSum(274) == true\n  isEqualTo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorial = (n, factor) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer divided by a constant factor.\n*/\nconst divideFactorial = (n, factor) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial / factor;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorialByFactor = (n, factor) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer divided by a constant factor.\n*/\nconst divideFactorialByFactor = (n, factor) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial / factor;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorialByFactorAndDivideByFactor = (n, factor1, factor2) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor1 / factor2;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer divided by a constant factor.\n*/\nconst divideFactorialByFactorAndDivideByFactor = (n, factor1, factor2) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial / factor1 / factor2;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorialByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor1 / factor2 / factor3;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer divided by a constant factor.\n*/\nconst divideFactorialByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial / factor1 / factor2 / factor3;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorialByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3, factor4) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor1 / factor2 / factor3 / factor4;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer divided by a constant factor.\n*/\nconst divideFactorialByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3, factor4) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial / factor1 / factor2 / factor3 / factor4;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorialByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3, factor4, factor5) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor1 / factor2 / factor3 / factor4 / factor5;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer divided by a constant factor.\n*/\nconst divideFactorialByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3, factor4, factor5) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial / factor1 / factor2 / factor3 / factor4 / factor5;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorialByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3, factor4, factor5, factor6) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor1 / factor2 / factor3 / factor4 / factor5 / factor6;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer divided by a constant factor.\n*/\nconst divideFactorialByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3, factor4, factor5, factor6) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial / factor1 / factor2 / factor3 / factor4 / factor5 / factor6;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer multiplied by a constant factor.\n*/\nconst multiplyFactorialByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactorAndDivideByFactor = (n, factor1, factor2, factor3, factor4, factor5, factor6, factor7) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial * factor1 / factor2 / factor3 / factor4 / factor5 / factor6 / factor7;\n};\n\n/*\n  A function that will receive ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentPrefix = currentPrefix.trim();\n      if (currentPrefix.length > 0) {\n        prefixes.push(currentPrefix);\n      }\n      currentPrefix = '';\n    } else {\n      currentPrefix = currentPrefix + string[i];\n    }\n  }\n  if (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the remark string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] ==='') {\n      currentSuffix = currentSuffix.trim();\n      if (currentSuffix.length > 0) {\n        suffixes.push(currentSuffix);\n      }\n      currentSuffix = '';\n    } else {\n      currentSuffix = currentSuffix + string[i];\n    }\n  }\n  if (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from shortest to longest of the remark string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      currentWord = currentWord.trim();\n      if (currentWord.length > 0) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n    } else {\n      currentWord = currentWord + string[i];\n    }\n  }\n  if (currentWord.length > 0) {\n    words.push(currentWord);\n  }\n  return words;\n};\n\n/**\n * Return list of all words from ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, \"_\");\n};\n\n/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('-');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 3 === 0 && num % 4!== 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 3 === 0 && num % 4!== 0) {\n      sum += num * num * num;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst product = (lst) => {\n  let product = 1;\n  lst.forEach((num) => {\n    product *= num;\n  });\n  return product;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst average = (lst) => {\n  let sum = 0;\n  let product = 1;\n  lst.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return sum / product;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let low = lst[mid];\n  let high = lst[mid];\n  lst.forEach((num) => {\n    if (num < low) {\n      low = num;\n    }\n    if (num > high) {\n      high = num;\n    }\n  });\n  return ((low + high) / 2);\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst mode = (lst) => {\n  let mode = 0;\n  let max = 0;\n  let maxCount = 0;\n  lst.forEach((num) => {\n    if (num > max) {\n      max = num;\n      maxCount = 1;\n    }\n    if (num === max) {\n      maxCount++;\n    }\n  });\n  lst.forEach((num) => {\n    if (num === max) {\n      mode++;\n    }\n  });\n  return mode;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst mode2 = (lst) => {\n  let mode = 0;\n  let max = 0;\n  let maxCount = 0;\n  lst.forEach((num) => {\n    if (num > max) {\n      max = num;\n      maxCount = 1;\n    }\n    if (num === max) {\n      maxCount++;\n    }\n  });\n  lst.forEach((num) => {\n    if (num === max) {\n      mode++;\n    }\n  });\n  return mode;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst mode3 = (lst) => {\n  let mode = 0;\n  let max = 0;\n  let maxCount = 0;\n  lst.forEach((num) => {\n    if (num > max) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  let currentWordIndex = 0;\n  let currentWordLength = 0;\n  let currentWordIndexInSentence = 0;\n  let currentWordInSentence = \"\";\n  let currentWordInSentenceIndex = 0;\n  let currentWordInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentence = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentenceIndexInSentenceLength = 0;\n  let currentWordInSentence", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   let n1 = n.split(\"/\");\n   let n2 = x.split(\"/\");\n   let n3 = n1.map(x => parseInt(x));\n   let n4 = n2.map(x => parseInt(x));\n   let n5 = n3.map(x => x/n4[0]);\n   let n6 = n5.map(x => x/n4[1]);\n   let n7 = n6.map(x => x/n4[2]);\n   let n8 = n7.map(x => x/n4[3]);\n   let n9 = n8.map(x => x/n4[4]);\n   let n10 = n9.map(x => x/n4[5]);\n   let n11 = n10.map(x => x/n4[6]);\n   let n12 = n11.map(x => x/n4[7]);\n   let n13 = n12.map(x => x/n4[8]);\n   let n14 = n13.map(x => x/n4[9]);\n   let n15 = n14.map(x => x/n4[10]);\n   let n16 = n15.map(x => x/n4[11]);\n   let n17 = n16.map(x => x/n4[12]);\n   let n18 = n17.map(x => x/n4[13]);\n   let n19 = n18.map(x => x/n4[14]);\n   let n20 = n19.map(x => x/n4[15]);\n   let n21 = n20.map(x => x/n4[16]);\n   let n22 = n21.map(x => x/n4[17]);\n   let n23 = n22.map(x => x/n4[18]);\n   let n24 = n23.map(x => x/n4[19]);\n   let n25 = n24.map(x => x/n4[20]);\n   let n26 = n25.map(x => x/n4[21]);\n   let n27 = n26.map(x => x/n4[22]);\n   let n28 = n27.map(x => x/n4[23]);\n   let n29 = n28.map(x => x/n4[24]);\n   let n30 = n29.map(x => x/n4[25]);\n   let n31 = n30.map(x => x/n4[26]);\n   let n32 = n31.map(x => x/n4[27]);\n   let n33 = n32.map(x => x/n4[28]);\n   let n34 = n33.map(x => x/n4[29]);\n   let n35 = n34.map(x => x/n4[30]);\n   let n36 = n35.map(x => x/n4[31]);\n   let n37 = n36.map(x => x/n4[32]);\n   let n38 = n37.map(x => x/n4[33]);\n   let n39 = n38.map(x => x/n4[34]);\n   let n40 = n39.map(x => x/n4[35]);\n   let n41 = n40.map(x => x/n4[36]);\n   let n42 = n41.map(x => x/n4[37]);\n   let n43 = n42.map(x => x/n4[38]);\n   let n44 = n43.map(x => x/n4[39]);\n   let n45 = n44.map(x => x/n4[40]);\n   let n46 = n45.map(x => x/n4[41]);\n   let n47 = n46.map(x => x/n4[42]);\n   let n48 = n47.map(x => x/n4[43]);\n   let n49 = n48.map(x => x/n4[44]);\n   let n50 = n49.map(x => x/n4[45]);\n   let n51 = n50.map(x => x/n4[46]);\n   let n52 = n51.map(x => x/n4[47]);\n   let n53 = n52.map(x => x/n4[48]);\n   let n54 = n53.map(x => x/n4[49]);\n   let n55 = n54.map(x => x/n4[50]);\n   let n56 = n55.map(x => x/n4[51]);\n   let n57 = n56.map(x => x/n4[52]);\n   let n58 = n57.map(x => x/n4[53]);\n   let n59 = n58.map(x => x/n4[54]);\n   let n60 = n59.map(x => x/n4[55]);\n   let n61 = n60.map(x => x/n4[56]);\n   let n62 = n61.map(x => x/n4[57]);\n   let n63 = n62.map(x => x/n4[58]);\n   let n64 = n63.map(x => x/n4[59]);\n   let n65 = n64.map(x => x/n4[60]);\n   let n66 = n65.map(x => x/n4[61]);\n   let n67 = n66.map(x => x/n4[62]);\n   let n68 = n67.map(x => x/n4[63]);\n   let n69 = n68.map(x => x/n4[64]);\n   let n70 = n69.map(x => x/n4[65]);\n   let n71 = n70.map(x => x/n4[66]);\n   let n72 = n71.map(x => x/n4[67]);\n   let n73 = n72.map(x => x/n4[68]);\n   let n74 = n73.map(x => x/n4[69]);\n   let n75 = n74.map(x => x/n4[70]);\n   let n76 = n75.map(x => x/n4[71]);\n   let n77 = n76.map(x => x/n4[72]);\n   let n78 = n77.map(x => x/n4[73]);\n   let n79 = n78.map(x => x/n4[74]);\n   let n80 = n79.map(x => x/n4[75]);\n   let n81 = n80.map(x => x/n4[76]);\n   let n82 = n81.map(x => x/n4[77]);\n   let n83 = n82.map(x => x/n4[78]);\n   let n84 = n83.map(x => x/n4[79]);\n   let n85 = n84.map(x => x/n4[80]);\n   let n86 = n85.map(x => x/n4[8", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const result = [];\n  const kernel = nums.map(n => n.toString()).join('');\n  const kernelMap = {};\n  kernel.split(\"\").forEach((n, i) => {\n    kernelMap[n] = i;\n  });\n\n  nums.sort((a, b) => {\n    const aDigit = a.toString();\n    const bDigit = b.toString();\n    const aIndex = kernelMap[aDigit];\n    const bIndex = kernelMap[bDigit];\n    if (aIndex === bIndex) return 0;\n    return aIndex < bIndex? -1 : 1;\n  });\n\n  nums.forEach((n, i) => {\n    result.push(n);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in descending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const kernel = nums.map(n => n.toString()).join('');\n  const kernelMap = {};\n  kernel.split(\"\").forEach((n, i) => {\n    kernelMap[n] = i;\n  });\n\n  nums.sort((a, b) => {\n    const aDigit = a.toString();\n    const bDigit = b.toString();\n    const aIndex = kernelMap[aDigit];\n    const bIndex = kernelMap[bDigit];\n    if (aIndex === bIndex) return 0;\n    return aIndex > bIndex? -1 : 1;\n  });\n\n  nums.forEach((n, i) => {\n    result.push(n);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const kernel = nums.map(n => n.toString()).join('');\n  const kernelMap = {};\n  kernel.split(\"\").forEach((n, i) => {\n    kernelMap[n] = i;\n  });\n\n  nums.sort((a, b) => {\n    const aDigit = a.toString();\n    const bDigit = b.toString();\n    const aIndex = kernelMap[aDigit];\n    const bIndex = kernelMap[bDigit];\n    if (aIndex === bIndex) return 0;\n    return aIndex > bIndex? -1 : 1;\n  });\n\n  nums.forEach((n, i) => {\n    result.push(n);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const kernel = nums.map(n => n.toString()).join('');\n  const kernelMap = {};\n  kernel.split(\"\").forEach((n, i) => {\n    kernelMap[n] = i;\n  });\n\n  nums.sort((a, b) => {\n    const aDigit = a.toString();\n    const bDigit = b.toString();\n    const aIndex = kernelMap[aDigit];\n    const bIndex = kernelMap[bDigit];\n    if (aIndex === bIndex) return 0;\n    return aIndex > bIndex? -1 : 1;\n  });\n\n  nums.forEach((n, i) => {\n    result.push(n);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const kernel = nums.map(n => n.toString()).join('');\n  const kernelMap = {};\n  kernel.split(\"\").forEach((n, i) => {\n    kernelMap[n] = i;\n  });\n\n  nums.sort((a, b) => {\n    const aDigit = a.toString();\n    const bDigit = b.toString();\n    const aIndex = kernelMap[aDigit];\n    const bIndex = kernelMap[bDigit];\n    if (aIndex === bIndex) return 0;\n    return aIndex > bIndex? -1 : 1;\n  });\n\n  nums.forEach((n, i) => {\n    result.push(n);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const kernel = nums.map(n => n.toString()).join('');\n  const kernelMap = {};\n  kernel.split(\"\").forEach((n, i) => {\n    kernelMap[n] = i;\n  });\n\n  nums.sort((a, b) => {\n    const aDigit = a.toString();\n    const bDigit = b.toString();\n    const aIndex = kernelMap[aDigit];\n    const bIndex = kernelMap[bDigit];\n    if (aIndex === bIndex) return 0;\n    return aIndex > bIndex? -1 : 1;\n  });\n\n  nums.forEach((n, i) => {\n    result.push(n);\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const result = [];\n  const kernel = nums.map(n => n.toString()).join('');\n  const kernelMap = {};\n  kernel.split(\"\").forEach((n, i) => {\n    kernelMap[n] = i;\n  });\n\n  nums.sort((a, b) => {\n    const aDigit = a.toString();\n    const bDigit = b.toString();\n    const aIndex = kernelMap[aDigit];\n    const bIndex = kernelMap[bDigit];\n    if (aIndex === b", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      result = nums.indexOf(i) + 1;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that takes an array of numbers as stimulation and reappearance \n   the numbers of elements in the array that be great than 10 and both \n   first and final digits of a number are ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          a[i] = a[i - 1];\n          a[j] = a[j - 1];\n          a[k] = a[k - 1];\n          return a.length;\n        }\n      }\n    }\n  }\n}\n\nconsole.log(findMaxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks man! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = planet1.toUpperCase();\n  let planet2Orbit = planet2.toUpperCase();\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = planet1.toUpperCase().indexOf(\"EARTH\");\n  let planet2OrbitIndex = planet2.toUpperCase().indexOf(\"EARTH\");\n  let planet1OrbitIndex = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  lst.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  lst.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  lst.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  lst.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  lst.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  lst.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ')\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ')\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZero = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOne = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwo = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThree = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFour = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFive = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSix = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSeven = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEight = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7 8'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndNine = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7 8 9'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTen = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7 8 9 10'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEleven = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7 8 9 10 11'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwelve = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7 8 9 10 11 12'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThirteen = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFourteen = (n) => {\n  return Array.from({ length: n }).map((_, i) => i + 1).join(' ') +'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n}\n\n/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFifteen = (n) => {\n  return Array.from({ length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n equal \n   a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr * curr\n     } else {\n       return acc\n     }\n   }, 0)\n   return sumOfSquares\n }\n\n /* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfSquares = lst.reduce((acc, curr) => {\n     if (curr > 0) {\n       return acc + curr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let guessesLeft = 0;\n  let guessesCorrect = 0;\n  let guessesIncorrect = 0;\n  let guessesIncorrectLeft = 0;\n  let guessesIncorrectRight = 0;\n  let guessesIncorrectBoth = 0;\n  let guessesIncorrectBothLeft = 0;\n  let guessesIncorrectBothRight = 0;\n  let guessesIncorrectBothBoth = 0;\n  let guessesIncorrectBothBothLeft = 0;\n  let guessesIncorrectBothBothRight = 0;\n  let guessesIncorrectBothBothBoth = 0;\n  let guessesIncorrectBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;\n  let guessesIncorrectBothBothBothBoth = 0;\n  let guessesIncorrectBothBothBothBothLeft = 0;\n  let guessesIncorrectBothBothBothRight = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const extension_strength = extension_length - class_name_length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const extension_strength = extension_length - class_name_length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const extension_strength = extension_length - class_name_length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const extension_strength = extension_length - class_name_length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. \n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   const aRotation = aArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const bRotation = bArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const aRotationCost = aLen - aRotation;\n   const bRotationCost = bLen - bRotation;\n   return aRotationCost >= bRotationCost;\n };\n\n /*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   const aRotation = aArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const bRotation = bArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const aRotationCost = aLen - aRotation;\n   const bRotationCost = bLen - bRotation;\n   return aRotationCost >= bRotationCost;\n };\n\n /*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   const aRotation = aArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const bRotation = bArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const aRotationCost = aLen - aRotation;\n   const bRotationCost = bLen - bRotation;\n   return aRotationCost >= bRotationCost;\n };\n\n /*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   const aRotation = aArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const bRotation = bArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const aRotationCost = aLen - aRotation;\n   const bRotationCost = bLen - bRotation;\n   return aRotationCost >= bRotationCost;\n };\n\n /*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   const aRotation = aArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const bRotation = bArr.reduce((acc, cur, index) => {\n     if (index === 0) return cur;\n     return acc + cur;\n   }, 0);\n   const aRotationCost = aLen - aRotation;\n   const bRotationCost = bLen - bRotation;\n   return aRotationCost >= bRotationCost;\n };\n\n /*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const str = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      roman += item;\n    } else if (item > 9) {\n      roman += item;\n    } else {\n      roman += item;\n      roman += numArray[index - 1];\n    }\n  });\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in uppercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  let roman = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      roman += item;\n    } else if (item > 9) {\n      roman += item;\n    } else {\n      roman += item;\n      roman += numArray[index - 1].toUpperCase();\n    }\n  });\n  return roman.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal = (number) => {\n  let decimal = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      decimal += item;\n    } else if (item > 9) {\n      decimal += item;\n    } else {\n      decimal += item;\n      decimal += numArray[index - 1];\n    }\n  });\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string, \n   and return it in uppercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalUpper = (number) => {\n  let decimal = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      decimal += item;\n    } else if (item > 9) {\n      decimal += item;\n    } else {\n      decimal += item;\n      decimal += numArray[index - 1].toUpperCase();\n    }\n  });\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLower = (number) => {\n  let decimal = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      decimal += item;\n    } else if (item > 9) {\n      decimal += item;\n    } else {\n      decimal += item;\n      decimal += numArray[index - 1].toLowerCase();\n    }\n  });\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string, \n   and return it in uppercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalUpperLower = (number) => {\n  let decimal = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      decimal += item;\n    } else if (item > 9) {\n      decimal += item;\n    } else {\n      decimal += item;\n      decimal += numArray[index - 1].toLowerCase();\n      decimal += numArray[index - 1].toUpperCase();\n    }\n  });\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpper = (number) => {\n  let decimal = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      decimal += item;\n    } else if (item > 9) {\n      decimal += item;\n    } else {\n      decimal += item;\n      decimal += numArray[index - 1].toLowerCase();\n      decimal += numArray[index - 1].toUpperCase();\n      decimal += numArray[index - 1].toLowerCase();\n    }\n  });\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string, \n   and return it in uppercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalUpperLowerUpper = (number) => {\n  let decimal = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      decimal += item;\n    } else if (item > 9) {\n      decimal += item;\n    } else {\n      decimal += item;\n      decimal += numArray[index - 1].toLowerCase();\n      decimal += numArray[index - 1].toUpperCase();\n      decimal += numArray[index - 1].toLowerCase();\n      decimal += numArray[index - 1].toUpperCase();\n    }\n  });\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpperUpperUpper = (number) => {\n  let decimal = '';\n  let numArray = Array.from(Array(number).keys());\n  numArray.forEach((item, index) => {\n    if (index === 0) {\n      decimal += item;\n    } else if (item > 9) {\n      decimal += item;\n    } else {\n      decimal += item;\n      decimal += numArray[index - 1].toLowerCase();\n      decimal += numArray[index - 1].toUpperCase();\n      decimal += numArray[index - 1].toLowerCase();\n      decimal += numArray[index - 1].toUpperCase();\n      decimal += numArray[index - 1].toLowerCase();\n      decimal += numArray[index - 1].toUpperCase();\n    }\n  });\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return abc === 0\n   ? false\n    : abc < 0\n   ? true\n    : ac > bc\n   ? true\n    : false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[word] === maxNum[word]) {\n       return word\n     }\n     return acc\n   }, null)\n   return maxKey\n } */\n\n const findMax = (words) => {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[word] === maxNum[word]) {\n       return word\n     }\n     return acc\n   }, null)\n   return maxKey\n }\n\n console.log(findMax([\"name\", \" of \", \" string \" ]))\n console.log(findMax([\"name\", \" enam \", \" plot \" ]))\n console.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]))</code>\n\nThe above code will return the key of the object with the highest number of occurrences. If you want it to return the actual string with the highest number of occurrences, you can do this:\n\n<code>\nconst findMax = (words) => {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[word] === maxNum[word]) {\n       return word\n     }\n     return acc\n   }, null)\n   return maxKey\n }\n\n console.log(findMax([\"name\", \" of \", \" string \" ]))\n console.log(findMax([\"name\", \" enam \", \" plot \" ]))\n console.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]))</code>\n\nThe above code will return the actual string with the highest number of occurrences.\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis does not answer the question. The question asks for the string with the highest number of occurrences.\n<|/ c |>\n<| c |>\nI added a second snippet that returns the actual string with the highest number of occurrences.\n<|/ c |>\n<| c |>\nI added a third snippet that returns the actual string with the highest number of occurrences.\n<|/ c |>\n<| c |>\nI added a fourth snippet that returns the actual string with the highest number of occurrences.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst findMax = (words) => {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[word] === maxNum[word]) {\n       return word\n     }\n     return acc\n   }, null)\n   return maxKey\n }\n\n console.log(findMax([\"name\", \" of \", \" string \" ]))\n console.log(findMax([\"name\", \" enam \", \" plot \" ]))\n console.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]))</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis does not answer the question. The question asks for the string with the highest number of occurrences.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst findMax = (words) => {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[word] === maxNum[word]) {\n       return word\n     }\n     return acc\n   }, null)\n   return maxKey\n }\n\n console.log(findMax([\"name\", \" of \", \" string \" ]))\n console.log(findMax([\"name\", \" enam \", \" plot \" ]))\n console.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]))</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis does not answer the question. The question asks for the string with the highest number of occurrences.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nconst findMax = (words) => {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[word] === maxNum[word]) {\n       return word\n     }\n     return acc\n   }, null)\n   return maxKey\n }\n\n console.log(findMax([\"name\", \" of \", \" string \" ]))\n console.log(findMax([\"name\", \" enam \", \" plot \" ]))\n console.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]))</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not answer the question. The question asks for the string with the highest number of occurrences.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst findMax = (words) => {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[word] === maxNum[word]) {\n       return word\n     }\n     return acc\n   }, null)\n   return maxKey\n }\n\n console.log(findMax([\"name\", \" of \", \" string \" ]))\n console.log(findMax([\"name\", \" enam \", \" plot \" ]))\n console.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]))</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis does not answer the question. The question asks for the string with the highest number of occurrences.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst findMax = (words) => {\n   const maxNum = words.reduce((acc, word) => {\n     if (acc[word] === undefined) {\n       acc[word] = 1\n     } else {\n       acc[word] += 1\n     }\n     return acc\n   }, {})\n   const maxKey = Object.keys(maxNum).reduce((acc, word) => {\n     if (maxNum[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrotEaten = number;\n  const carrotNeed = need;\n  const carrotLeft = remaining;\n  \n  if (carrotEaten > carrotLeft) {\n    return [carrotEaten, carrotLeft];\n  } else {\n    return [carrotEaten - carrotLeft, carrotLeft];\n  }\n};\n\n/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrotEaten = number;\n  const carrotNeed = need;\n  const carrotLeft = remaining;\n  \n  if (carrotEaten > carrotLeft) {\n    return [carrotEaten, carrotLeft];\n  } else {\n    return [carrotEaten - carrotLeft, carrotLeft];\n  }\n};\n\n/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrotEaten = number;\n  const carrotNeed = need;\n  const carrotLeft = remaining;\n  \n  if (carrotEaten > carrotLeft) {\n    return [carrotEaten, carrotLeft];\n  } else {\n    return [carrotEaten - carrotLeft, carrotLeft];\n  }\n};\n\n/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrotEaten = number;\n  const carrotNeed = need;\n  const carrotLeft = remaining;\n  \n  if (carrotEaten > carrotLeft) {\n    return [carrotEaten, carrotLeft];\n  } else {\n    return [carrotEaten - carrotLeft, carrotLeft];\n  }\n};\n\n/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrotEaten = number;\n  const carrotNeed = need;\n  const carrotLeft = remaining;\n  \n  if (carrotEaten > carrotLeft) {\n    return [carrotEaten, carrotLeft];\n  } else {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let currentOperand = operand[i];\n    let currentOperator = operator[i];\n    result += currentOperand * currentOperator;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let currentOperand = operand[i];\n    let currentOperator = operator[i];\n    result += currentOperand * currentOperator;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let currentOperand = operand[i];\n    let currentOperator = operator[i];\n    result += currentOperand * currentOperator;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let currentOperand = operand[i];\n    let currentOperator = operator[i];\n    result += currentOperand * currentOperator;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let currentOperand = operand[i];\n    let currentOperator = operator[i];\n    result += currentOperand * currentOperator;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let currentOperand = operand[i];\n    let currentOperator = operator[i];\n    result += currentOperand * currentOperator;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let currentOperand = operand[i];\n    let currentOperator = operator[i];\n    result += currentOperand * currentOperator;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits, in ascend order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 8\n  sumOfDigits(14) => 1 + 3 + 5 + 7 = 14\n  sumOfDigits(100) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n  sumOfDigits(101) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n  sumOfDigits(999) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 = 66\n  sumOfDigits(1000) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 78\n  sumOfDigits(1001) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 = 89\n  sumOfDigits(1002) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 = 99\n  sumOfDigits(1003) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 109\n  sumOfDigits(1004) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 = 110\n  sumOfDigits(1005) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 = 111\n  sumOfDigits(1006) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 112\n  sumOfDigits(1007) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 = 113\n  sumOfDigits(1008) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 = 114\n  sumOfDigits(1009) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 = 115\n  sumOfDigits(1010) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 = 116\n  sumOfDigits(1011) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 = 117\n  sumOfDigits(1012) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 = 118\n  sumOfDigits(1013) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 = 119\n  sumOfDigits(1014) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 = 120\n  sumOfDigits(1015) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 = 121\n  sumOfDigits(1016) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 = 122\n  sumOfDigits(1017) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 = 123\n  sumOfDigits(1018) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 = 124\n  sumOfDigits(1019) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 = 125\n  sumOfDigits(1020) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 = 126\n  sumOfDigits(1021) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 = 127\n  sumOfDigits(1022) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 = 128\n  sumOfDigits(1023) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 = 129\n  sumOfDigits(1024) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_notes = [];\n  let current_note = 0;\n  let current_beat = 0;\n  let current_pulse = 0;\n  let current_oxygen = 0;\n  let current_o = 0;\n  let current_o2 = 0;\n  let current_o3 = 0;\n  let current_o4 = 0;\n  let current_o5 = 0;\n  let current_o6 = 0;\n  let current_o7 = 0;\n  let current_o8 = 0;\n  let current_o9 = 0;\n  let current_o10 = 0;\n  let current_o11 = 0;\n  let current_o12 = 0;\n  let current_o13 = 0;\n  let current_o14 = 0;\n  let current_o15 = 0;\n  let current_o16 = 0;\n  let current_o17 = 0;\n  let current_o18 = 0;\n  let current_o19 = 0;\n  let current_o20 = 0;\n  let current_o21 = 0;\n  let current_o22 = 0;\n  let current_o23 = 0;\n  let current_o24 = 0;\n  let current_o25 = 0;\n  let current_o26 = 0;\n  let current_o27 = 0;\n  let current_o28 = 0;\n  let current_o29 = 0;\n  let current_o30 = 0;\n  let current_o31 = 0;\n  let current_o32 = 0;\n  let current_o33 = 0;\n  let current_o34 = 0;\n  let current_o35 = 0;\n  let current_o36 = 0;\n  let current_o37 = 0;\n  let current_o38 = 0;\n  let current_o39 = 0;\n  let current_o40 = 0;\n  let current_o41 = 0;\n  let current_o42 = 0;\n  let current_o43 = 0;\n  let current_o44 = 0;\n  let current_o45 = 0;\n  let current_o46 = 0;\n  let current_o47 = 0;\n  let current_o48 = 0;\n  let current_o49 = 0;\n  let current_o50 = 0;\n  let current_o51 = 0;\n  let current_o52 = 0;\n  let current_o53 = 0;\n  let current_o54 = 0;\n  let current_o55 = 0;\n  let current_o56 = 0;\n  let current_o57 = 0;\n  let current_o58 = 0;\n  let current_o59 = 0;\n  let current_o60 = 0;\n  let current_o61 = 0;\n  let current_o62 = 0;\n  let current_o63 = 0;\n  let current_o64 = 0;\n  let current_o65 = 0;\n  let current_o66 = 0;\n  let current_o67 = 0;\n  let current_o68 = 0;\n  let current_o69 = 0;\n  let current_o70 = 0;\n  let current_o71 = 0;\n  let current_o72 = 0;\n  let current_o73 = 0;\n  let current_o74 = 0;\n  let current_o75 = 0;\n  let current_o76 = 0;\n  let current_o77 = 0;\n  let current_o78 = 0;\n  let current_o79 = 0;\n  let current_o80 = 0;\n  let current_o81 = 0;\n  let current_o82 = 0;\n  let current_o83 = 0;\n  let current_o84 = 0;\n  let current_o85 = 0;\n  let current_o86 = 0;\n  let current_o87 = 0;\n  let current_o88 = 0;\n  let current_o89 = 0;\n  let current_o90 = 0;\n  let current_o91 = 0;\n  let current_o92 = 0;\n  let current_o93 = 0;\n  let current_o94 = 0;\n  let current_o95 = 0;\n  let current_o96 = 0;\n  let current_o97 = 0;\n  let current_o98 = 0;\n  let current_o99 = 0;\n  let current_o100 = 0;\n  let current_o101 = 0;\n  let current_o102 = 0;\n  let current_o103 = 0;\n  let current_o104 = 0;\n  let current_o105 = 0;\n  let current_o106 = 0;\n  let current_o107 = 0;\n  let current_o108 = 0;\n  let current_o109 = 0;\n  let current_o110 = 0;\n  let current_o111 = 0;\n  let current_o112 = 0;\n  let current_o113 = 0;\n  let current_o114 = 0;\n  let current_o115 = 0;\n  let current_o116 = 0;\n  let current_o117 = 0;\n  let current_o118 = 0;\n  let current_o119 = 0;\n  let current_o120 = 0;\n  let current_o121 = 0;\n  let current_o122 = 0;\n  let current_o123 = 0;\n  let current_o124 = 0;\n  let current_o125 = 0;\n  let current_o126 = 0;\n  let current_o127 = 0;\n  let current_o128 = 0;\n  let current_o129 = 0;\n  let current_o130 = 0;\n  let current_o131 = 0;\n  let current_o132 = 0;\n  let current_o133 = 0;\n  let current_o134 = 0;\n  let current_o135 = 0;\n  let current_o136 = 0;\n  let current_o137 = 0;\n  let current_o138 = 0;\n  let current_o139 = 0;\n  let current_o140 = 0;\n  let current_o141 = 0;\n  let current_o142 = 0;\n  let current_o143 = 0;\n  let current_o144 = 0;\n  let current_o145 = 0;\n  let current_o146 = 0;\n  let current_o147 = 0;\n  let current_o148 = 0;\n  let current_o149 = 0;\n  let current_o150 = 0;\n  let current_o151 = 0;\n  let current_o152 = 0;\n  let current_o153 = 0;\n  let current_o154 = 0;\n  let current_o155 = 0;\n  let current_o156 = 0;\n  let current_o157 = 0;\n  let current_o158 = 0;\n  let current_o159 = 0;\n  let current_o160 = 0;\n  let current_o161 = 0;\n  let current_o162 = 0;\n  let current_o163 = 0;\n  let current_o164 = 0;\n  let current_o165 = 0;\n  let current_o166 = 0;\n  let current_o167 = 0;\n  let current_o168 = 0;\n  let current_o169 = 0;\n  let current_o170 = 0;\n  let current_o171 = 0;\n  let current_o172 = 0;\n  let current_o173 = 0;\n  let current_o174 = 0;\n  let current_o175 = 0;\n  let current_o176 = 0;\n  let current_o177 = 0;\n  let current_o178 = 0;\n  let current_o179 = 0;\n  let current_o180 = 0;\n  let current_o181 = 0;\n  let current_o182 = 0;\n  let current_o183 = 0;\n  let current_o184 = 0;\n  let current_o185 = 0;\n  let current_o186 = 0;\n  let current_o187 = 0;\n  let current_o188 = 0;\n  let current_o189 = 0;\n  let current_o190 = 0;\n  let current_o191 = 0;\n  let current_o192 = 0;\n  let current_o193 = 0;\n  let current_o194 = 0;\n  let current_o195 = 0;\n  let current_o196 = 0;\n  let current_o197 = 0;\n  let current_o198 = 0;\n  let current_o199 = 0;\n  let current_o200 = 0;\n  let current_o201 = 0;\n  let current_o202 = 0;\n  let current_o203 = 0;\n  let current_o204 = 0;\n  let current_o205 = 0;\n  let current_o206 = 0;\n  let current_o207 = 0;\n  let current_o208 = 0;\n  let current_o209 = 0;\n  let current_o210 = 0;\n  let current_o211 = 0;\n  let current_o212 = 0;\n  let current_o213 = 0;\n  let current_o214 = 0;\n  let current_o215 = 0;\n  let current_o216 = 0;\n  let current_o217 = 0;\n  let current_o218 = 0;\n  let current_o219 = 0;\n  let current_o220 = 0;\n  let current_o221 = 0;\n  let current_o222 = 0;\n  let current_o223 = 0;\n  let current_o224 = 0;\n  let current_o225 = 0;\n  let current_o226 = 0;\n  let current_o227 = 0;\n  let current_o228 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  numberArray.sort((a, b) => {\n    return a - b;\n  });\n  return numberArray.join(\" \");\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* \n  Given a string, return a string with each word capitalized. \n  >>> capitalizeFirstLetter('hello')\n  'Hello'\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world this is fun')\n  'Hello World This Is Fun'\n  */\nconst capitalizeFirstLetter = (str) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal /= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumber = (number) => {\n  let integer = number\n  while (integer > 1) {\n    integer *= 10\n  }\n  return integer\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalNumber = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalNumber = (number) => {\n  let integer = number\n  while (integer > 1) {\n    integer *= 10\n  }\n  return integer\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerNumber = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber2 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber3 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber4 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber5 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber6 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber7 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber8 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber9 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber10 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber11 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimalNumber12 = (number) => {\n  let decimal = number\n  while (decimal > 1) {\n    decimal *= 10\n  }\n  return decimal\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffElement = numbers[0];\n  let minDiffElementIndex = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - minDiffElement;\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffElement = numbers[i];\n      minDiffElementIndex = i;\n    } else if (diff === minDiff) {\n      minDiffElementIndex = i;\n    }\n  }\n\n  return [minDiffElement, minDiffElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsV2 = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffElement = numbers[0];\n  let minDiffElementIndex = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - minDiffElement;\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffElement = numbers[i];\n      minDiffElementIndex = i;\n    } else if (diff === minDiff) {\n      minDiffElementIndex = i;\n    }\n  }\n\n  return [minDiffElement, minDiffElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsV3 = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffElement = numbers[0];\n  let minDiffElementIndex = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - minDiffElement;\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffElement = numbers[i];\n      minDiffElementIndex = i;\n    } else if (diff === minDiff) {\n      minDiffElementIndex = i;\n    }\n  }\n\n  return [minDiffElement, minDiffElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsV4 = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffElement = numbers[0];\n  let minDiffElementIndex = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - minDiffElement;\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffElement = numbers[i];\n      minDiffElementIndex = i;\n    } else if (diff === minDiff) {\n      minDiffElementIndex = i;\n    }\n  }\n\n  return [minDiffElement, minDiffElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsV5 = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffElement = numbers[0];\n  let minDiffElementIndex = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - minDiffElement;\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffElement = numbers[i];\n      minDiffElementIndex = i;\n    } else if (diff === minDiff) {\n      minDiffElementIndex = i;\n    }\n  }\n\n  return [minDiffElement, minDiffElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsV6 = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffElement = numbers[0];\n  let minDiffElementIndex = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - minDiffElement;\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffElement = numbers[i];\n      minDiffElementIndex = i;\n    } else if (diff === minDiff) {\n      minDiffElementIndex = i;\n    }\n  }\n\n  return [minDiffElement, minDiffElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsV7 = (numbers) => {\n  let minDiff = Number.MAX_VALUE;\n  let minDiffIndex = 0;\n  let minDiffElement = numbers[0];\n  let minDiffElementIndex = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - minDiffElement;\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffElement = numbers[i];\n      minDiffElementIndex = i;\n    } else if (diff === minDiff) {\n      minDiffElementIndex = i;\n    }\n  }\n\n  return [minDiffElement, minDiffElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min);\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers, enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (max - min", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for float\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for string\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for boolean\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for dict\n  >>> filterDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only for list\n  >>> filterLists(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for tuple\n  >>> filterTuples(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for set\n  >>> filterSets(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for dict\n  >>> filterDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only for list\n  >>> filterLists(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for tuple\n  >>> filterTuples(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for set\n  >>> filterSets(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for dict\n  >>> filterDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only for list\n  >>> filterLists(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for tuple\n  >>> filterTuples(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for set\n  >>> filterSets(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for dict\n  >>> filterDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only for list\n  >>> filterLists(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for tuple\n  >>> filterTuples(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for set\n  >>> filterSets(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for dict\n  >>> filterDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only for list\n  >>> filterLists(['a', 3.14, 5])\n  [[3.14]]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only for ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break\n    }\n    length++\n  }\n  return length\n}\n\n/* Return string with given length\n  >>> strlen('abc', 3)\n  'abc'\n  >>> strlen('abc', 4)\n  'abc'\n  >>> strlen('abc', 5)\n  'abc'\n  */\nconst strlenWithLength = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLength('abc', 4)\n  'abc'\n  >>> strlenWithLength('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNull = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNull('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNull('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNull('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLength = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLength('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLength('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNull = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNull('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNull('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNull('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLength = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLength('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLength('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLengthWithNull = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 4)\n  'abc'\n  >>> strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull('abc', 5)\n  'abc'\n  */\nconst strlenWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNullWithLengthWithNull = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlen", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n / i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the largest phone number that divide n evenly, and bigger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorBiggerThan = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n / i;\n    }\n  }\n  return maxNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and bigger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and little than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and bigger than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and little than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and bigger than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and little than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and bigger than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and little than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and bigger than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and little than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and bigger than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and little than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number that divide n evenly, and bigger than n\n  >>> smallestDivisorBiggerThan(15)\n  5\n  */\nconst smallestDivisorBiggerThan = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n / i;\n    }\n  }\n  return minNumber;\n};\n\n/* Given a number n, find the smallest phone number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.toUpperCase() === char? char.toLowerCase() : char.toUpperCase();\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lower case.\n  >>> lowerCase('hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n * Given a string, return a new string with each character in upper case.\n  >>> upperCase('hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n * Given a string, return a new string with each character in title case.\n  >>> titleCase('hello')\n  'Hello World'\n  */\nconst titleCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toUpperCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in sentence case.\n  >>> sentenceCase('hello')\n  'Hello World'\n  */\nconst sentenceCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toUpperCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> kebabCase('hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in snake case.\n  >>> snakeCase('hello')\n  'hello'\n  */\nconst snakeCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in title case.\n  >>> titleCase('hello')\n  'Hello World'\n  */\nconst titleCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toUpperCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in sentence case.\n  >>> sentenceCase('hello')\n  'Hello World'\n  */\nconst sentenceCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toUpperCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> kebabCase('hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in snake case.\n  >>> snakeCase('hello')\n  'hello'\n  */\nconst snakeCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in title case.\n  >>> titleCase('hello')\n  'Hello World'\n  */\nconst titleCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toUpperCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in sentence case.\n  >>> sentenceCase('hello')\n  'Hello World'\n  */\nconst sentenceCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toUpperCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> kebabCase('hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in snake case.\n  >>> snakeCase('hello')\n  'hello'\n  */\nconst snakeCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in title case.\n  >>> titleCase('hello')\n  'Hello World'\n  */\nconst titleCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toUpperCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in sentence case.\n  >>> sentenceCase('hello')\n  'Hello World'\n  */\nconst sentenceCase = (string) => {\n  return string\n   .split(' ')\n   .map((word) => {\n      return word[0].toLowerCase() + word.slice(1);\n    })\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that end with a grant suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterBySuffixAndPrefix = (strings, suffix, prefix) => {\n  return strings.filter(s => s.endsWith(suffix) && s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndPrefix = (strings, prefix, suffix, prefix2) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix) && s.startsWith(prefix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffix = (strings, suffix, prefix, suffix2) => {\n  return strings.filter(s => s.endsWith(suffix) && s.startsWith(prefix) && s.endsWith(suffix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefix = (strings, prefix, suffix, prefix2) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix) && s.startsWith(prefix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffix = (strings, suffix, prefix, suffix2) => {\n  return strings.filter(s => s.endsWith(suffix) && s.startsWith(prefix) && s.endsWith(suffix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffix = (strings, prefix, suffix, prefix2, suffix2) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix) && s.startsWith(prefix2) && s.endsWith(suffix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffixAndPrefix = (strings, suffix, prefix, suffix2, prefix2) => {\n  return strings.filter(s => s.endsWith(suffix) && s.startsWith(prefix) && s.endsWith(suffix2) && s.startsWith(prefix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffix = (strings, prefix, suffix, prefix2, suffix2) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix) && s.startsWith(prefix2) && s.endsWith(suffix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffixAndPrefixAndSuffix = (strings, suffix, prefix, suffix2, prefix2, suffix2) => {\n  return strings.filter(s => s.endsWith(suffix) && s.startsWith(prefix) && s.endsWith(suffix2) && s.startsWith(prefix2) && s.endsWith(suffix2));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (strings, prefix, suffix, prefix2, suffix2, prefix3) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix) && s.startsWith(prefix2) && s.endsWith(suffix2) && s.startsWith(prefix3));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffixAndPrefixAndSuffix = (strings, suffix, prefix, suffix2, prefix2, suffix2, prefix3) => {\n  return strings.filter(s => s.endsWith(suffix) && s.startsWith(prefix) && s.endsWith(suffix2) && s.startsWith(prefix2) && s.endsWith(suffix2) && s.startsWith(prefix3));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (strings, prefix, suffix, prefix2, suffix2, prefix3, suffix3) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix) && s.startsWith(prefix", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter(n => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter(n => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter(n => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter(n => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter(n => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter(n => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter(n => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter(n => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisibleBy23([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy23 = (l) => {\n  return l.filter(n => n % 23 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter(n => n % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 27.\n  >>> getDivisibleBy27([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy27 = (l) => {\n  return l.filter(n => n % 27 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter(n => n % 29 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter(n => n % 31 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 33.\n  >>> getDivisibleBy33([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy33([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy33 = (l) => {\n  return l.filter(n => n % 33 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11!== 0) return false;\n  if (n % 13!== 0) return true;\n  if (n % 17!== 0) return false;\n  if (n % 19!== 0) return true;\n  if (n % 23!== 0) return false;\n  if (n % 29!== 0) return true;\n  if (n % 31!== 0) return false;\n  if (n % 37!== 0) return true;\n  if (n % 43!== 0) return false;\n  if (n % 47!== 0) return true;\n  if (n % 53!== 0) return false;\n  if (n % 59!== 0) return true;\n  if (n % 61!== 0) return false;\n  if (n % 67!== 0) return true;\n  if (n % 73!== 0) return false;\n  if (n % 79!== 0) return true;\n  if (n % 83!== 0) return false;\n  if (n % 87!== 0) return true;\n  if (n % 97!== 0) return false;\n  if (n % 101!== 0) return true;\n  if (n % 103!== 0) return false;\n  if (n % 105!== 0) return true;\n  if (n % 107!== 0) return false;\n  if (n % 109!== 0) return true;\n  if (n % 113!== 0) return false;\n  if (n % 115!== 0) return true;\n  if (n % 117!== 0) return false;\n  if (n % 119!== 0) return true;\n  if (n % 121!== 0) return false;\n  if (n % 123!== 0) return true;\n  if (n % 125!== 0) return false;\n  if (n % 127!== 0) return true;\n  if (n % 129!== 0) return false;\n  if (n % 131!== 0) return true;\n  if (n % 133!== 0) return false;\n  if (n % 135!== 0) return true;\n  if (n % 137!== 0) return false;\n  if (n % 139!== 0) return true;\n  if (n % 141!== 0) return false;\n  if (n % 143!== 0) return true;\n  if (n % 145!== 0) return false;\n  if (n % 147!== 0) return true;\n  if (n % 149!== 0) return false;\n  if (n % 151!== 0) return true;\n  if (n % 153!== 0) return false;\n  if (n % 155!== 0) return true;\n  if (n % 157!== 0) return false;\n  if (n % 159!== 0) return true;\n  if (n % 161!== 0) return false;\n  if (n % 163!== 0) return true;\n  if (n % 165!== 0) return false;\n  if (n % 167!== 0) return true;\n  if (n % 169!== 0) return false;\n  if (n % 171!== 0) return true;\n  if (n % 173!== 0) return false;\n  if (n % 175!== 0) return true;\n  if (n % 177!== 0) return false;\n  if (n % 179!== 0) return true;\n  if (n % 181!== 0) return false;\n  if (n % 183!== 0) return true;\n  if (n % 185!== 0) return false;\n  if (n % 187!== 0) return true;\n  if (n % 189!== 0) return false;\n  if (n % 191!== 0) return true;\n  if (n % 193!== 0) return false;\n  if (n % 195!== 0) return true;\n  if (n % 197!== 0) return false;\n  if (n % 199!== 0) return true;\n  if (n % 201!== 0) return false;\n  if (n % 203!== 0) return true;\n  if (n % 205!== 0) return false;\n  if (n % 207!== 0) return true;\n  if (n % 209!== 0) return false;\n  if (n % 211!== 0) return true;\n  if (n % 213!== 0) return false;\n  if (n % 215!== 0) return true;\n  if (n % 217!== 0) return false;\n  if (n % 219!== 0) return true;\n  if (n % 221!== 0) return false;\n  if (n % 223!== 0) return true;\n  if (n % 225!== 0) return false;\n  if (n % 227!== 0) return true;\n  if (n % 229!== 0) return false;\n  if (n % 231!== 0) return true;\n  if (n % 233!== 0) return false;\n  if (n % 235!== 0) return true;\n  if (n % 237!== 0) return false;\n  if (n % 239!== 0) return true;\n  if (n % 241!== 0) return false;\n  if (n % 243!== 0) return true;\n  if (n % 245!== 0) return false;\n  if (n % 247!== 0) return true;\n  if (n % 249!== 0) return false;\n  if (n % 251!== 0) return true;\n  if (n % 253!== 0) return false;\n  if (n % 255!== 0) return true;\n  return false;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11!== 0) return false;\n  if (n % 13!== 0) return true;\n  if (n % 17!== 0) return false;\n  if (n % 19!== 0) return true;\n  if (n % 23!== 0) return false;\n  if (n % 29!== 0) return true;\n  if (n % 31!== 0) return false;\n  if (n % 37!== 0) return true;\n  if (n % 43!== 0) return false;\n  if (n % 47!== 0) return true;\n  if (n % 53!== 0) return false;\n  if (n % 59!== 0) return true;\n  if (n % 61!== 0) return false;\n  if (n % 67!== 0) return true;\n  if (n % 73!== 0) return false;\n  if (n % 79!== 0) return true;\n  if (n % 83!== 0) return false;\n  if (n % 87!== 0) return true;\n  if (n % 97!== 0) return false;\n  if (n % 101!== 0) return true;\n  if (n % 103!== 0) return false;\n  if (n % 105!== 0) return true;\n  if (n % 107!== 0) return false;\n  if (n % 109!== 0) return true;\n  if (n % 113!== 0) return false;\n  if (n % 115!== 0) return true;\n  if (n % 117!== 0) return false;\n  if (n % 119!== 0) return true;\n  if (n % 121!== 0) return false;\n  if (n % 123!== 0) return true;\n  if (n % 125!== 0) return false;\n  if (n % 127!== 0) return true;\n  if (n % 129!== 0) return false;\n  if (n % 131!== 0) return true;\n  if (n % 133!== 0) return false;\n  if (n % 135!== 0) return true;\n  if (n % 137!== 0) return false;\n  if (n % 139!== 0) return true;\n  if (n % 141!== 0) return false;\n  if (n % 143!== 0) return true;\n  if (n % 145!== 0) return false;\n  if (n % 147!== 0) return true;\n  if (n % 149!== 0) return false;\n  if (n % 151!== 0) return true;\n  if (n % 153!== 0) return false;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 1;\n  let zeroPoint = 0;\n  let zeroPoints = [];\n  let zeroPointsCount = 0;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax = 10;\n  let zeroPointsCountMin = 1;\n  let zeroPointsCountMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by five, while its value at the indicies that are divisible by five are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 5 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by seven, while its value at the indicies that are divisible by seven are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 2, 9]\n  */\nconst sortSeven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 7 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by nine, while its value at the indicies that are divisible by nine are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 9 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by ten, while its value at the indicies that are divisible by ten are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 10 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by eleven, while its value at the indicies that are divisible by eleven are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortEleven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 11 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by twelve, while its value at the indicies that are divisible by twelve are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortTwelve([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwelve([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwelve = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 12 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by thirteen, while its value at the indicies that are divisible by thirteen are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThirteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirteen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirteen = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 13 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by fourteen, while its value at the indicies that are divisible by fourteen are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortFourteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourteen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFourteen = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 14 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by fifteen, while its value at the indicies that are divisible by fifteen are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortFifteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifteen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFifteen = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 15 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by sixteen, while its value at the indicies that are divisible by sixteen are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortSixteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixteen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSixteen = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 16 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are less than the specified value.\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  0\n  */\nconst sumLessThan = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the specified value.\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  12\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  0\n  */\nconst sumGreaterThan = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the specified value.\n  >>> sumEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the specified value.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumLessThanOrEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the specified value.\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  12\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  12\n  */\nconst sumGreaterThanOrEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the specified value.\n  >>> sumEqualOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumEqualOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumEqualOrEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value || l[i] === -value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the specified value.\n  >>> sumLessThanOrEqualOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThanOrEqualOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumLessThanOrEqualOrEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= value || l[i] === -value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the specified value.\n  >>> sumGreaterThanOrEqualOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  12\n  >>> sumGreaterThanOrEqualOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  12\n  */\nconst sumGreaterThanOrEqualOrEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= value || l[i] === -value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the specified value.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumLessThanOrEqualOrEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= value || l[i] === -value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the specified value.\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  12\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  12\n  */\nconst sumGreaterThanOrEqualOrEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= value || l[i] === -value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the specified value.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumLessThanOrEqualOrEqual = (l, value) => {\n  let sum", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBu", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the odd indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the even indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the odd indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the even indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the odd indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the odd indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the odd indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups2 = [];\n   for (let i = 0; i < groups.length; i += 1) { \n     if (groups[i].length = 3) \n       groups2.push(groups[i].slice(1) + groups[i][0]);\n     else \n       groups2.push(groups[i]);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const groups = [ ];\n   for (let i = 0; i < s.length; i += 3) { \n     groups.push(s.slice(i, i + 3));\n   } \n   const groups", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, 5, 3, 2]\n  */\nconst primeFibs = (num) => {\n  const arr = [];\n  for (let i = 2; i <= num; i++) {\n    const c = primeFib(i);\n    if (arr.indexOf(c) === -1) {\n      arr.push(c);\n    }\n  }\n  return arr;\n};\n\n/*\n  primeFibs returns array of n-th numbers that is a Fibonacci number and it's also premier.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 2]\n  >>> primeFibs(3)\n  [5, 3, 2]\n  >>> primeFibs(4)\n  [13, 5, 3, 2]\n  >>> primeFibs(5)\n  [89, 13, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.abs(number - meanValue));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation \n   around the mean of this dataset. \n   Mean Squared Deviation is the average squared difference between each \n   element and a centerpoint (mean in this case ): \n   MSD = average | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.pow(number - meanValue, 2));\n};\n\n/* For a given list of input numbers, calculate Median Absolute Deviation \n   around the mean of this dataset. \n   Median Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = median | x - x_mean |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  return numbers.map((number) => Math.abs(number - medianValue));\n};\n\n/* For a given list of input numbers, calculate Median Squared Deviation \n   around the mean of this dataset. \n   Median Squared Deviation is the median squared difference between each \n   element and a centerpoint (mean in this case ): \n   MSD = median | x - x_mean |^2\n  >>> medianSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianSquaredDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  return numbers.map((number) => Math.pow(number - medianValue, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the standard deviation of each element \n   and a centerpoint (mean in this case ): \n   SD = standard deviation | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.pow(Math.pow(number - meanValue, 2), 0.5));\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance is the variance of each element and a centerpoint (mean \n   in this case ): \n   V = variance | x - x_mean |\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.5811388300841898\n  */\nconst variance = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.pow(Math.pow(number - meanValue, 2), 2));\n};\n\n/* For a given list of input numbers, calculate Standard Error \n   around the mean of this dataset. \n   Standard Error is the standard deviation of each element \n   divided by the square root of the number of elements: \n   SE = standard deviation / sqrt(number of elements)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  0.08333333333333333\n  */\nconst standardError = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.sqrt(variance(numbers) / numbers.length));\n};\n\n/* For a given list of input numbers, calculate Percentile \n   around the mean of this dataset. \n   Percentile is the value of a given percentile (25%, 50%, etc.) \n   of a given list of input numbers: \n   P = percentile | x - x_mean | \n  >>> percentile([1.0, 2.0, 3.0, 4.0], 25)\n  2.0\n  */\nconst percentile = (numbers, percentile) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.round((number - meanValue) * percentile / 100));\n};\n\n/* For a given list of input numbers, calculate Percentile Rank \n   around the mean of this dataset. \n   Percentile Rank is the rank of a given percentile (25%, 50%, etc.) \n   of a given list of input numbers: \n   PR = percentile rank | x - x_mean | \n  >>> percentileRank([1.0, 2.0, 3.0, 4.0], 25)\n  2.0\n  */\nconst percentileRank = (numbers, percentile) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.round((number - meanValue) * percentile / 100));\n};\n\n/* For a given list of input numbers, calculate Quartile \n   around the mean of this dataset. \n   Quartile is the value of a given quartile (25%, 50%, etc.) \n   of a given list of input numbers: \n   Q = quartile | x - x_mean | \n  >>> quartile([1.0, 2.0, 3.0, 4.0], 25)\n  2.0\n  */\nconst quartile = (numbers, quartile) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.round((number - meanValue) * quartile / 100));\n};\n\n/* For a given list of input numbers, calculate Quartile Rank \n   around the mean of this dataset. \n   Quartile Rank is the rank of a given quartile (25%, 50%, etc.) \n   of a given list of input numbers: \n   QR = quartile rank | x - x_mean | \n  >>> quartileRank([1.0, 2.0, 3.0, 4.0], 25)\n  2.0\n  */\nconst quartileRank = (numbers, quartile) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.round((number - meanValue) * quartile / 100));\n};\n\n/* For a given list of input numbers, calculate Quintile \n   around the mean of this dataset. \n   Quintile is the value of a given quintile (25%, 50%, etc.) \n   of a given list of input numbers: \n   Q = quintile | x - x_mean | \n  >>> quintile([1.0, 2.0, 3.0, 4.0], 25)\n  2.0\n  */\nconst quintile = (numbers, quintile) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.round((number - meanValue) * quintile / 100));\n};\n\n/* For a given list of input numbers, calculate Quintile Rank \n   around the mean of this dataset. \n   Quintile Rank is the rank of a given quintile (25%, 50%, etc.) \n   of a given list of input numbers: \n   QR = quintile rank | x - x_mean | \n  >>> quintileRank([1.0, 2.0, 3.0, 4.0], 25)\n  2.0\n  */\nconst quintileRank = (numbers, quintile) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => Math.round((number - meanValue) * quintile / 100));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the standard deviation of each element \n   and a centerpoint (median in this case ): \n   SD = standard deviation | x - x_median |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return false\n  }\n  return false\n}\n\n/*\n  triplesSumToOne takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to one, and false differently.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToTwo takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to two, and false differently.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToThree takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to three, and false differently.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToFour takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to four, and false differently.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToFive takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to five, and false differently.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToSix takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to six, and false differently.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToSeven takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to seven, and false differently.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToEight takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to eight, and false differently.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  if (l.length === 3) {\n    return false\n  }\n  if (l.length === 2) {\n    return true\n  }\n  if (l.length === 1) {\n    return true\n  }\n  return false\n}\n\n/*\n  triplesSumToNine takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to nine, and false differently.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   let collisionCount = 0;\n   for (let i = 0; i < n; i++) {\n     for (let j = i + 1; j < n; j++) {\n       if (carRaceCollisionHelper(i, j)) {\n         collisionCount++;\n       }\n     }\n   }\n   return collisionCount;\n }\n const carRaceCollisionHelper = (i, j) => {\n   const carRace = carRaceArray[i];\n   const carRace2 = carRaceArray[j];\n   const carRace1Position = carRace1.position;\n   const carRace2Position = carRace2.position;\n   const carRace1Velocity = carRace1.velocity;\n   const carRace2Velocity = carRace2.velocity;\n   const carRace1Acceleration = carRace1.acceleration;\n   const carRace2Acceleration = carRace2.acceleration;\n   const carRace1Deceleration = carRace1.deceleration;\n   const carRace2Deceleration = carRace2.deceleration;\n   const carRace1AngularVelocity = carRace1.angularVelocity;\n   const carRace2AngularVelocity = carRace2.angularVelocity;\n   const carRace1AngularAcceleration = carRace1.angularAcceleration;\n   const carRace2AngularAcceleration = carRace2.angularAcceleration;\n   const carRace1AngularDeceleration = carRace1.angularDeceleration;\n   const carRace2AngularDeceleration = carRace2.angularDeceleration;\n   const carRace1AngularVelocity2 = carRace1.angularVelocity2;\n   const carRace2AngularVelocity2 = carRace2.angularVelocity2;\n   const carRace1AngularAcceleration2 = carRace1.angularAcceleration2;\n   const carRace2AngularAcceleration2 = carRace2.angularAcceleration2;\n   const carRace1AngularDeceleration2 = carRace1.angularDeceleration2;\n   const carRace2AngularDeceleration2 = carRace2.angularDeceleration2;\n   const carRace1AngularVelocity3 = carRace1.angularVelocity3;\n   const carRace2AngularVelocity3 = carRace2.angularVelocity3;\n   const carRace1AngularAcceleration3 = carRace1.angularAcceleration3;\n   const carRace2AngularAcceleration3 = carRace2.angularAcceleration3;\n   const carRace1AngularDeceleration3 = carRace1.angularDeceleration3;\n   const carRace2AngularDeceleration3 = carRace2.angularDeceleration3;\n   const carRace1AngularVelocity4 = carRace1.angularVelocity4;\n   const carRace2AngularVelocity4 = carRace2.angularVelocity4;\n   const carRace1AngularAcceleration4 = carRace1.angularAcceleration4;\n   const carRace2AngularAcceleration4 = carRace2.angularAcceleration4;\n   const carRace1AngularDeceleration4 = carRace1.angularDeceleration4;\n   const carRace2AngularDeceleration4 = carRace2.angularDeceleration4;\n   const carRace1AngularVelocity5 = carRace1.angularVelocity5;\n   const carRace2AngularVelocity5 = carRace2.angularVelocity5;\n   const carRace1AngularAcceleration5 = carRace1.angularAcceleration5;\n   const carRace2AngularAcceleration5 = carRace2.angularAcceleration5;\n   const carRace1AngularDeceleration5 = carRace1.angularDeceleration5;\n   const carRace2AngularDeceleration5 = carRace2.angularDeceleration5;\n   const carRace1AngularVelocity6 = carRace1.angularVelocity6;\n   const carRace2AngularVelocity6 = carRace2.angularVelocity6;\n   const carRace1AngularAcceleration6 = carRace1.angularAcceleration6;\n   const carRace2AngularAcceleration6 = carRace2.angularAcceleration6;\n   const carRace1AngularDeceleration6 = carRace1.angularDeceleration6;\n   const carRace2AngularDeceleration6 = carRace2.angularDeceleration6;\n   const carRace1AngularVelocity7 = carRace1.angularVelocity7;\n   const carRace2AngularVelocity7 = carRace2.angularVelocity7;\n   const carRace1AngularAcceleration7 = carRace1.angularAcceleration7;\n   const carRace2AngularAcceleration7 = carRace2.angularAcceleration7;\n   const carRace1AngularDeceleration7 = carRace1.angularDeceleration7;\n   const carRace2AngularDeceleration7 = carRace2.angularDeceleration7;\n   const carRace1AngularVelocity8 = carRace1.angularVelocity8;\n   const carRace2AngularVelocity8 = carRace2.angularVelocity8;\n   const carRace1AngularAcceleration8 = carRace1.angularAcceleration8;\n   const carRace2AngularAcceleration8 = carRace2.angularAcceleration8;\n   const carRace1AngularDeceleration8 = carRace1.angularDeceleration8;\n   const carRace2AngularDeceleration8 = carRace2.angularDeceleration8;\n   const carRace1AngularVelocity9 = carRace1.angularVelocity9;\n   const carRace2AngularVelocity9 = carRace2.angularVelocity9;\n   const carRace1AngularAcceleration9 = carRace1.angularAcceleration9;\n   const carRace2AngularAcceleration9 = carRace2.angularAcceleration9;\n   const carRace1AngularDeceleration9 = carRace1.angularDeceleration9;\n   const carRace2AngularDeceleration9 = carRace2.angularDeceleration9;\n   const carRace1AngularVelocity10 = carRace1.angularVelocity10;\n   const carRace2AngularVelocity10 = carRace2.angularVelocity10;\n   const carRace1AngularAcceleration10 = carRace1.angularAcceleration10;\n   const carRace2AngularAcceleration10 = carRace2.angularAcceleration10;\n   const carRace1AngularDeceleration10 = carRace1.angularDeceleration10;\n   const carRace2AngularDeceleration10 = carRace2.angularDeceleration10;\n   const carRace1AngularVelocity11 = carRace1.angularVelocity11;\n   const carRace2AngularVelocity11 = carRace2.angularVelocity11;\n   const carRace1AngularAcceleration11 = carRace1.angularAcceleration11;\n   const carRace2AngularAcceleration11 = carRace2.angularAcceleration11;\n   const carRace1AngularDeceleration11 = carRace1.angularDeceleration11;\n   const carRace2AngularDeceleration11 = carRace2.angularDeceleration11;\n   const carRace1AngularVelocity12 = carRace", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 3, 6, 4, 9, 0, 12]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToOne takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to one, and false differently.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 1\n}\n\n/*\n  pairsSumToTwo takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to two, and false differently.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 2\n}\n\n/*\n  pairsSumToThree takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to three, and false differently.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 3\n}\n\n/*\n  pairsSumToFour takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to four, and false differently.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 4\n}\n\n/*\n  pairsSumToFive takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to five, and false differently.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 5\n}\n\n/*\n  pairsSumToSix takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to six, and false differently.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 6\n}\n\n/*\n  pairsSumToSeven takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to seven, and false differently.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 7\n}\n\n/*\n  pairsSumToEight takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to eight, and false differently.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i)\n  let sum = 0\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i]\n  }\n  return sum === 8\n}\n\n/*\n  pairsSumToNine takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to nine, and false differently.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase2(8, 3)\n  '22'\n  >>> changeBase2(8, 2)\n  '1000'\n  >>> changeBase2(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase3(8, 3)\n  '22'\n  >>> changeBase3(8, 2)\n  '1000'\n  >>> changeBase3(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase4(8, 3)\n  '22'\n  >>> changeBase4(8, 2)\n  '1000'\n  >>> changeBase4(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase5(8, 3)\n  '22'\n  >>> changeBase5(8, 2)\n  '1000'\n  >>> changeBase5(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase6(8, 3)\n  '22'\n  >>> changeBase6(8, 2)\n  '1000'\n  >>> changeBase6(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase7(8, 3)\n  '22'\n  >>> changeBase7(8, 2)\n  '1000'\n  >>> changeBase7(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase8(8, 3)\n  '22'\n  >>> changeBase8(8, 2)\n  '1000'\n  >>> changeBase8(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase9(8, 3)\n  '22'\n  >>> changeBase9(8, 2)\n  '1000'\n  >>> changeBase9(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase10(8, 3)\n  '22'\n  >>> changeBase10(8, 2)\n  '1000'\n  >>> changeBase10(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase11(8, 3)\n  '22'\n  >>> changeBase11(8, 2)\n  '1000'\n  >>> changeBase11(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase12(8, 3)\n  '22'\n  >>> changeBase12(8, 2)\n  '1000'\n  >>> changeBase12(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = \"\";\n  let baseNum = parseInt(base);\n  let baseNumInt = parseInt(x);\n  if (baseNumInt > 0 && baseNumInt < 10) {\n    let numArray = baseNumInt.toString(baseNum);\n    result = numArray.repeat(baseNum);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase13(8, 3)\n  '22'\n  >>> changeBase13(8, 2)\n  '1000'\n  >>> changeBase13(7, 2)\n  '111'\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a side and high return sphere for a circle.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// fib5 function - Calculate the n-th component of the Fibbonacci sequence \n// fib5(0) - > 0 \n// fib5(1) - > 0 \n// fib5(2) - > 1 \n// fib5(3) - > 0 \n// fib5(4) - > 1 \n// fib5(5) - > 1 \n// fib5(6) - > 2 \n// fib5(7) - > 0 \n// fib5(n) - > fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5) + fib5(n-6) + fib5(n-7) + fib5(n-8) + fib5(n-9) + fib5(n-10) + fib5(n-11) + fib5(n-12) + fib5(n-13) + fib5(n-14) + fib5(n-15) + fib5(n-16) + fib5(n-17) + fib5(n-18) + fib5(n-19) + fib5(n-20) + fib5(n-21) + fib5(n-22) + fib5(n-23) + fib5(n-24) + fib5(n-25) + fib5(n-26) + fib5(n-27) + fib5(n-28) + fib5(n-29) + fib5(n-30) + fib5(n-31) + fib5(n-32) + fib5(n-33) + fib5(n-34) + fib5(n-35) + fib5(n-36) + fib5(n-37) + fib5(n-38) + fib5(n-39) + fib5(n-40) + fib5(n-41) + fib5(n-42) + fib5(n-43) + fib5(n-44) + fib5(n-45) + fib5(n-46) + fib5(n-47) + fib5(n-48) + fib5(n-49) + fib5(n-50) + fib5(n-51) + fib5(n-52) + fib5(n-53) + fib5(n-54) + fib5(n-55) + fib5(n-56) + fib5(n-57) + fib5(n-58) + fib5(n-59) + fib5(n-60) + fib5(n-61) + fib5(n-62) + fib5(n-63) + fib5(n-64) + fib5(n-65) + fib5(n-66) + fib5(n-67) + fib5(n-68) + fib5(n-69) + fib5(n-70) + fib5(n-71) + fib5(n-72) + fib5(n-73) + fib5(n-74) + fib5(n-75) + fib5(n-76) + fib5(n-77) + fib5(n-78) + fib5(n-79) + fib5(n-80) + fib5(n-81) + fib5(n-82) + fib5(n-83) + fib5(n-84) + fib5(n-85) + fib5(n-86) + fib5(n-87) + fib5(n-88) + fib5(n-89) + fib5(n-90) + fib5(n-91) + fib5(n-92) + fib5(n-93) + fib5(n-94) + fib5(n-95) + fib5(n-96) + fib5(n-97) + fib5(n-98) + fib5(n-99) + fib5(n-100) + fib5(n-101) + fib5(n-102) + fib5(n-103) + fib5(n-104) + fib5(n-105) + fib5(n-106) + fib5(n-107) + fib5(n-108) + fib5(n-109) + fib5(n-110) + fib5(n-111) + fib5(n-112) + fib5(n-113) + fib5(n-114) + fib5(n-115) + fib5(n-116) + fib5(n-117) + fib5(n-118) + fib5(n-119) + fib5(n-120) + fib5(n-121) + fib5(n-122) + fib5(n-123) + fib5(n-124) + fib5(n-125) + fib5(n-126) + fib5(n-127) + fib5(n-128) + fib5(n-129) + fib5(n-130) + fib5(n-131) + fib5(n-132) + fib5(n-133) + fib5(n-134) + fib5(n-135) + fib5(n-136) + fib5(n-137) + fib5(n-138) + fib5(n-139) + fib5(n-140) + fib5(n-141) + fib5(n-142) + fib5(n-143) + fib5(n-144) + fib5(n-145) + fib5(n-146) + fib5(n-147) + fib5(n-148) + fib5(n-149) + fib5(n-150) + fib5(n-151) + fib5(n-152) + fib5(n-153) + fib5(n-154) + fib5(n-155) + fib5(n-156) + fib5(n-157) + fib5(n-158) + fib5(n-159) + fib5(n-160) + fib5(n-161) + fib5(n-162) + fib5(n-163) + fib5(n-164) + fib5(n-165) + fib5(n-166) + fib5(n-167) + fib5(n-168) + fib5(n-169) + fib5(n-170) + fib5(n-171) + fib5(n-172) + fib5(n-173) + fib5(n-174) + fib5(n-175) + fib5(n-176) + fib5(n-177) + fib5(n-178) + fib5(n-179) + fib5(n-180) + fib5(n-181) + fib5(n-182) + fib5(n-183) + fib5(n-184) + fib5(n-185) + fib5(n-186) + fib5(n-187) + fib5(n-188) + fib5(n-189) + fib5(n-190) + fib5(n-191) + fib5(n-192) + fib5(n-193) + fib5(n-194) + fib5(n-195) + fib5(n-196) + fib5(n-197) + fib5(n-198) + fib5(n-199) + fib5(n-200) + fib5(n-201) + fib5(n-202) + fib5(n-203) + fib5(n-204) + fib5(n-205) + fib5(n-206) + fib5(n-207) + fib5(n-208) + fib5(n-209) + fib5(n-210) + fib5(n-211) + fib5(n-212) + fib5(n-213) + fib5(n-214) + fib5(n-215) + fib5(n-216) + fib5(n-217) + fib5(n-218) + fib5(n-219) + fib5(n-220) + fib5(n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid] + sorted[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  else return (sorted[mid", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCase('i')\n  true\n  >>> isPalindromeCase('I')\n  true\n  >>> isPalindromeCase('z')\n  false\n  */\nconst isPalindromeCase = (text) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp(): arguments must be non-negative and smaller than p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2p(): arguments must be non-negative and smaller than p');\n  }\n  return modp(2 * n, p) + p;\n};\n\n/*\n  >>> modp2p(3, 5)\n  3\n  >>> modp2p(1101, 101)\n  2\n  >>> modp2p(0, 101)\n  1\n  >>> modp2p(3, 11)\n  8\n  >>> modp2p(100, 101)\n  1\n  */\nconst modp2np = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np(): arguments must be non-negative and smaller than p');\n  }\n  return modp(n, p) - p;\n};\n\n/*\n  >>> modp2np(3, 5)\n  3\n  >>> modp2np(1101, 101)\n  2\n  >>> modp2np(0, 101)\n  1\n  >>> modp2np(3, 11)\n  8\n  >>> modp2np(100, 101)\n  1\n  */\nconst modp2np2p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np2p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(2 * n, p) + p;\n};\n\n/*\n  >>> modp2np2p(3, 5)\n  3\n  >>> modp2np2p(1101, 101)\n  2\n  >>> modp2np2p(0, 101)\n  1\n  >>> modp2np2p(3, 11)\n  8\n  >>> modp2np2p(100, 101)\n  1\n  */\nconst modp2np3p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np3p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(3 * n, p) + p;\n};\n\n/*\n  >>> modp2np3p(3, 5)\n  3\n  >>> modp2np3p(1101, 101)\n  2\n  >>> modp2np3p(0, 101)\n  1\n  >>> modp2np3p(3, 11)\n  8\n  >>> modp2np3p(100, 101)\n  1\n  */\nconst modp2np4p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np4p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(4 * n, p) + p;\n};\n\n/*\n  >>> modp2np4p(3, 5)\n  3\n  >>> modp2np4p(1101, 101)\n  2\n  >>> modp2np4p(0, 101)\n  1\n  >>> modp2np4p(3, 11)\n  8\n  >>> modp2np4p(100, 101)\n  1\n  */\nconst modp2np5p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np5p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(5 * n, p) + p;\n};\n\n/*\n  >>> modp2np5p(3, 5)\n  3\n  >>> modp2np5p(1101, 101)\n  2\n  >>> modp2np5p(0, 101)\n  1\n  >>> modp2np5p(3, 11)\n  8\n  >>> modp2np5p(100, 101)\n  1\n  */\nconst modp2np6p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np6p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(6 * n, p) + p;\n};\n\n/*\n  >>> modp2np6p(3, 5)\n  3\n  >>> modp2np6p(1101, 101)\n  2\n  >>> modp2np6p(0, 101)\n  1\n  >>> modp2np6p(3, 11)\n  8\n  >>> modp2np6p(100, 101)\n  1\n  */\nconst modp2np7p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np7p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(7 * n, p) + p;\n};\n\n/*\n  >>> modp2np7p(3, 5)\n  3\n  >>> modp2np7p(1101, 101)\n  2\n  >>> modp2np7p(0, 101)\n  1\n  >>> modp2np7p(3, 11)\n  8\n  >>> modp2np7p(100, 101)\n  1\n  */\nconst modp2np8p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np8p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(8 * n, p) + p;\n};\n\n/*\n  >>> modp2np8p(3, 5)\n  3\n  >>> modp2np8p(1101, 101)\n  2\n  >>> modp2np8p(0, 101)\n  1\n  >>> modp2np8p(3, 11)\n  8\n  >>> modp2np8p(100, 101)\n  1\n  */\nconst modp2np9p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np9p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(9 * n, p) + p;\n};\n\n/*\n  >>> modp2np9p(3, 5)\n  3\n  >>> modp2np9p(1101, 101)\n  2\n  >>> modp2np9p(0, 101)\n  1\n  >>> modp2np9p(3, 11)\n  8\n  >>> modp2np9p(100, 101)\n  1\n  */\nconst modp2np10p = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp2np10p(): arguments must be non-negative and smaller than p');\n  }\n  return modp2p(10 * n, p) + p;\n};\n\n/*\n  >>> modp2np10p(3, 5)\n  3\n  >>> modp2np10p(1101, 101)\n  2\n  >>> modp2np10p(0, 10", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every other element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8])\n  [1, 5, 2, 6, 3, 7, 4, 8, 5, 6, 7]\n  */\nconst interleave = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every third element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9)\n  [1, 5, 7, 2, 6, 8, 3, 7, 4, 8, 5, 6, 9]\n  */\nconst interleave3 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 3;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every fourth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10)\n  [1, 5, 9, 2, 6, 10, 3, 7, 8, 4, 8, 5, 6, 10]\n  */\nconst interleave4 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 4;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every fifth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11)\n  [1, 5, 9, 11, 2, 6, 10, 13, 3, 7, 8, 14, 4, 8, 5, 6, 10, 13]\n  */\nconst interleave5 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 5;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every sixth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12)\n  [1, 5, 9, 12, 2, 6, 10, 13, 3, 7, 8, 14, 4, 8, 5, 6, 10, 13, 12]\n  */\nconst interleave6 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 6;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every seventh element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13)\n  [1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 8, 15, 4, 8, 5, 6, 10, 14, 13]\n  */\nconst interleave7 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 7;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every eighth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14)\n  [1, 5, 9, 14, 2, 6, 10, 15, 3, 7, 8, 16, 4, 8, 5, 6, 10, 14, 15, 16]\n  */\nconst interleave8 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 8;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every ninth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15)\n  [1, 5, 9, 15, 2, 6, 10, 16, 3, 7, 8, 17, 4, 8, 5, 6, 10, 14, 15, 17, 16]\n  */\nconst interleave9 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 9;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every tenth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15, 16)\n  [1, 5, 9, 16, 2, 6, 10, 17, 3, 7, 8, 18, 4, 8, 5, 6, 10, 14, 15, 17, 18, 16]\n  */\nconst interleave10 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 10;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every eleventh element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17)\n  [1, 5, 9, 17, 2, 6, 10, 18, 3, 7, 8, 19, 4, 8, 5, 6, 10, 14, 15, 17, 18, 19, 17]\n  */\nconst interleave11 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 11;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every twelfth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n  [1, 5, 9, 18, 2, 6, 10, 19, 3, 7, 8, 20, 4, 8, 5, 6, 10, 14, 15, 17, 18, 19, 20, 19]\n  */\nconst interleave12 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 12;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every thirteenth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  [1, 5, 9, 20, 2, 6, 10, 21, 3, 7, 8, 22, 4, 8, 5, 6, 10, 14, 15, 17, 18, 19, 20, 21, 22]\n  */\nconst interleave13 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 13;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every fourteenth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n  [1, 5, 9, 23, 2, 6, 10, 24, 3, 7, 8, 25, 4, 8, 5, 6, 10, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24]\n  */\nconst interleave14 = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i += 14;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing every fifteenth element of input list `numbers'\n  >>> interleave([1, 2, 3, 4], [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n */\n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");\n//   return remark2;\n// } \n\n// const decodeShift = (s) = > {\n//   let remark = s.split(\" \").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\"\");\n//   return remark2;\n// } \n\n// const encodeShift = (s) = > { \n//   let remark = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) ) \n//   let remark2 = remark.join(\" \");", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string and returns drawstring without consonant.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string and returns drawstring without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes string and returns drawstring without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'abcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbc'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.?]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThresholdPositive([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdPositive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdNegativePositive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThresholdPositive([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdPositiveNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdNegativePositiveNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThresholdPositive([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdPositiveNegativeNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdNegativePositiveNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThresholdPositive([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdPositiveNegativePositive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdNegativePositivePositive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdNegativePositivePositiveNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThresholdPositive([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdPositive([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdPositiveNegativePositiveNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholdNegativePositivePositiveNegative = (l, t, delta) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of x divided by y\n  >>> quotient(2, 3)\n  2\n  >>> quotient(5, 7)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len === s1_len) {\n    for (let i = 0; i < s0_len; i++) {\n      if (s0.charAt(i)!== s1.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib2 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib3 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib4 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib5 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib6 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib7 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib8 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib9 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib10 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib11 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fib12 = (n) => {\n  let a = 0;\n  let b = 1;\n  let c;\n  while (n > 0) {\n    c = a + b;\n    a = b;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\" < \");\n  const closingBrackets = brackets.split(\" > \");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  if (openingBracketsCount === closingBracketsCount) {\n    for (let i = 0; i < openingBracketsCount; i++) {\n      if (openingBrackets[i]!== closingBrackets[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/* \n   Given a string, return an array of all possible substrings.\n\n   >>> allSubstrings(\"hello\")\n   ['h', 'he', 'hel', 'hell', 'hello']\n   >>> allSubstrings(\"hello\", 2)\n   ['he', 'hel', 'hell', 'hello']\n   >>> allSubstrings(\"hello\", 3)\n   ['hel', 'hell', 'hello']\n   >>> allSubstrings(\"hello\", 4)\n   ['hell', 'hello']\n   >>> allSubstrings(\"hello\", 5)\n   ['hello']\n   >>> allSubstrings(\"hello\", 6)\n   []\n   >>> allSubstrings(\"hello\", 7)\n   []\n   >>> allSubstrings(\"hello\", 8)\n   []\n   >>> allSubstrings(\"hello\", 9)\n   []\n   >>> allSubstrings(\"hello\", 10)\n   []\n   >>> allSubstrings(\"hello\", 11)\n   []\n   >>> allSubstrings(\"hello\", 12)\n   []\n   >>> allSubstrings(\"hello\", 13)\n   []\n   >>> allSubstrings(\"hello\", 14)\n   []\n   >>> allSubstrings(\"hello\", 15)\n   []\n   >>> allSubstrings(\"hello\", 16)\n   []\n   >>> allSubstrings(\"hello\", 17)\n   []\n   >>> allSubstrings(\"hello\", 18)\n   []\n   >>> allSubstrings(\"hello\", 19)\n   []\n   >>> allSubstrings(\"hello\", 20)\n   []\n   >>> allSubstrings(\"hello\", 21)\n   []\n   >>> allSubstrings(\"hello\", 22)\n   []\n   >>> allSubstrings(\"hello\", 23)\n   []\n   >>> allSubstrings(\"hello\", 24)\n   []\n   >>> allSubstrings(\"hello\", 25)\n   []\n   >>> allSubstrings(\"hello\", 26)\n   []\n   >>> allSubstrings(\"hello\", 27)\n   []\n   >>> allSubstrings(\"hello\", 28)\n   []\n   >>> allSubstrings(\"hello\", 29)\n   []\n   >>> allSubstrings(\"hello\", 30)\n   []\n   >>> allSubstrings(\"hello\", 31)\n   []\n   >>> allSubstrings(\"hello\", 32)\n   []\n   >>> allSubstrings(\"hello\", 33)\n   []\n   >>> allSubstrings(\"hello\", 34)\n   []\n   >>> allSubstrings(\"hello\", 35)\n   []\n   >>> allSubstrings(\"hello\", 36)\n   []\n   >>> allSubstrings(\"hello\", 37)\n   []\n   >>> allSubstrings(\"hello\", 38)\n   []\n   >>> allSubstrings(\"hello\", 39)\n   []\n   >>> allSubstrings(\"hello\", 40)\n   []\n   >>> allSubstrings(\"hello\", 41)\n   []\n   >>> allSubstrings(\"hello\", 42)\n   []\n   >>> allSubstrings(\"hello\", 43)\n   []\n   >>> allSubstrings(\"hello\", 44)\n   []\n   >>> allSubstrings(\"hello\", 45)\n   []\n   >>> allSubstrings(\"hello\", 46)\n   []\n   >>> allSubstrings(\"hello\", 47)\n   []\n   >>> allSubstrings(\"hello\", 48)\n   []\n   >>> allSubstrings(\"hello\", 49)\n   []\n   >>> allSubstrings(\"hello\", 50)\n   []\n   >>> allSubstrings(\"hello\", 51)\n   []\n   >>> allSubstrings(\"hello\", 52)\n   []\n   >>> allSubstrings(\"hello\", 53)\n   []\n   >>> allSubstrings(\"hello\", 54)\n   []\n   >>> allSubstrings(\"hello\", 55)\n   []\n   >>> allSubstrings(\"hello\", 56)\n   []\n   >>> allSubstrings(\"hello\", 57)\n   []\n   >>> allSubstrings(\"hello\", 58)\n   []\n   >>> allSubstrings(\"hello\", 59)\n   []\n   >>> allSubstrings(\"hello\", 60)\n   []\n   >>> allSubstrings(\"hello\", 61)\n   []\n   >>> allSubstrings(\"hello\", 62)\n   []\n   >>> allSubstrings(\"hello\", 63)\n   []\n   >>> allSubstrings(\"hello\", 64)\n   []\n   >>> allSubstrings(\"hello\", 65)\n   []\n   >>> allSubstrings(\"hello\", 66)\n   []\n   >>> allSubstrings(\"hello\", 67)\n   []\n   >>> allSubstrings(\"hello\", 68)\n   []\n   >>> allSubstrings(\"hello\", 69)\n   []\n   >>> allSubstrings(\"hello\", 70)\n   []\n   >>> allSubstrings(\"hello\", 71)\n   []\n   >>> allSubstrings(\"hello\", 72)\n   []\n   >>> allSubstrings(\"hello\", 73)\n   []\n   >>> allSubstrings(\"hello\", 74)\n   []\n   >>> allSubstrings(\"hello\", 75)\n   []\n   >>> allSubstrings(\"hello\", 76)\n   []\n   >>> allSubstrings(\"hello\", 77)\n   []\n   >>> allSubstrings(\"hello\", 78)\n   []\n   >>> allSubstrings(\"hello\", 79)\n   []\n   >>> allSubstrings(\"hello\", 80)\n   []\n   >>> allSubstrings(\"hello\", 81)\n   []\n   >>> allSubstrings(\"hello\", 82)\n   []\n   >>> allSubstrings(\"hello\", 83)\n   []\n   >>> allSubstrings(\"hello\", 84)\n   []\n   >>> allSubstrings(\"hello\", 85)\n   []\n   >>> allSubstrings(\"hello\", 86)\n   []\n   >>> allSubstrings(\"hello\", 87)\n   []\n   >>> allSubstrings(\"hello\", 88)\n   []\n   >>> allSubstrings(\"hello\", 89)\n   []\n   >>> allSubstrings(\"hello\", 90)\n   []\n   >>> allSubstrings(\"hello\", 91)\n   []\n   >>> allSubstrings(\"hello\", 92)\n   []\n   >>> allSubstrings(\"hello\", 93)\n   []\n   >>> allSubstrings(\"hello\", 94)\n   []\n   >>> allSubstrings(\"hello\", 95)\n   []\n   >>> all", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false\n    }\n    prev = l[i]\n  }\n  return true\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])\n  false\n  >>> monotonic([4, 1, 0])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n      } else {\n        l3.push(l2[0]);\n        l5--;\n      }\n    } else if (l4 > 0) {\n      l3.push(l1[0]);\n      l4--;\n    } else if (l5 > 0) {\n      l3.push(l2[0]);\n      l5--;\n    }\n  }\n  return l3;\n};\n\n/*Return sorted unique common elements for two tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l3 = [];\n  let l4 = l1.length;\n  let l5 = l2.length;\n  while (l4 > 0 || l5 > 0) {\n    if (l4 > 0 && l5 > 0) {\n      if (l1[0] === l2[0]) {\n        l3.push(l1[0]);\n        l4--;\n        l5--;\n      } else if (l1[0] < l2[0]) {\n        l3.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  8\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(4, 6)\n  1\n  >>> numberOfDivisors(4, 8)\n  2\n  >>> numberOfDivisors(4, 10)\n  1\n  >>> numberOfDivisors(4, 12)\n  1\n  >>> numberOfDivisors(4, 14)\n  2\n  >>> numberOfDivisors(4, 16)\n  2\n  >>> numberOfDivisors(4, 18)\n  2\n  >>> numberOfDivisors(4, 20)\n  2\n  >>> numberOfDivisors(4, 22)\n  2\n  >>> numberOfDivisors(4, 24)\n  2\n  >>> numberOfDivisors(4, 26)\n  2\n  >>> numberOfDivisors(4, 28)\n  2\n  >>> numberOfDivisors(4, 30)\n  2\n  >>> numberOfDivisors(4, 32)\n  2\n  >>> numberOfDivisors(4, 34)\n  2\n  >>> numberOfDivisors(4, 36)\n  2\n  >>> numberOfDivisors(4, 38)\n  2\n  >>> numberOfDivisors(4, 40)\n  2\n  >>> numberOfDivisors(4, 42)\n  2\n  >>> numberOfDivisors(4, 44)\n  2\n  >>> numberOfDivisors(4, 46)\n  2\n  >>> numberOfDivisors(4, 48)\n  2\n  >>> numberOfDivisors(4, 50)\n  2\n  >>> numberOfDivisors(4, 52)\n  2\n  >>> numberOfDivisors(4, 54)\n  2\n  >>> numberOfDivisors(4, 56)\n  2\n  >>> numberOfDivisors(4, 58)\n  2\n  >>> numberOfDivisors(4, 60)\n  2\n  >>> numberOfDivisors(4, 62)\n  2\n  >>> numberOfDivisors(4, 64)\n  2\n  >>> numberOfDivisors(4, 66)\n  2\n  >>> numberOfDivisors(4, 68)\n  2\n  >>> numberOfDivisors(4, 70)\n  2\n  >>> numberOfDivisors(4, 72)\n  2\n  >>> numberOfDivisors(4, 74)\n  2\n  >>> numberOfDivisors(4, 76)\n  2\n  >>> numberOfDivisors(4, 78)\n  2\n  >>> numberOfDivisors(4, 80)\n  2\n  >>> numberOfDivisors(4, 82)\n  2\n  >>> numberOfDivisors(4, 84)\n  2\n  >>> numberOfDivisors(4, 86)\n  2\n  >>> numberOfDivisors(4, 88)\n  2\n  >>> numberOfDivisors(4, 90)\n  2\n  >>> numberOfDivisors(4, 92)\n  2\n  >>> numberOfDivisors(4, 94)\n  2\n  >>> numberOfDivisors(4, 96)\n  2\n  >>> numberOfDivisors(4, 98)\n  2\n  >>> numberOfDivisors(4, 100)\n  2\n  >>> numberOfDivisors(4, 102)\n  2\n  >>> numberOfDivisors(4, 104)\n  2\n  >>> numberOfDivisors(4, 106)\n  2\n  >>> numberOfDivisors(4, 108)\n  2\n  >>> numberOfDivisors(4, 110)\n  2\n  >>> numberOfDivisors(4, 112)\n  2\n  >>> numberOfDivisors(4, 114)\n  2\n  >>> numberOfDivisors(4, 116)\n  2\n  >>> numberOfDivisors(4, 118)\n  2\n  >>> numberOfDivisors(4, 120)\n  2\n  >>> numberOfDivisors(4, 122)\n  2\n  >>> numberOfDivisors(4, 124)\n  2\n  >>> numberOfDivisors(4, 126)\n  2\n  >>> numberOfDivisors(4, 128)\n  2\n  >>> numberOfDivisors(4, 130)\n  2\n  >>> numberOfDivisors(4, 132)\n  2\n  >>> numberOfDivisors(4, 134)\n  2\n  >>> numberOfDivisors(4, 136)\n  2\n  >>> numberOfDivisors(4, 138)\n  2\n  >>> numberOfDivisors(4, 140)\n  2\n  >>> numberOfDivisors(4, 142)\n  2\n  >>> numberOfDivisors(4, 144)\n  2\n  >>> numberOfDivisors(4, 146)\n  2\n  >>> numberOfDivisors(4, 148)\n  2\n  >>> numberOfDivisors(4, 150)\n  2\n  >>> numberOfDivisors(4, 152)\n  2\n  >>> numberOfDivisors(4, 154)\n  2\n  >>> numberOfDivisors(4, 156)\n  2\n  >>> numberOfDivisors(4, 158)\n  2\n  >>> numberOfDivisors(4, 160)\n  2\n  >>> numberOfDivisors(4, 162)\n  2\n  >>> numberOfDivisors(4, 164)\n  2\n  >>> numberOfDivisors(4, 166)\n  2\n  >>> numberOfDivisors(4, 168)\n  2\n  >>> numberOfDivisors(4, 170)\n  2\n  >>> numberOfDivisors(4, 172)\n  2\n  >>> numberOfDivisors(4, 174)\n  2\n  >>> numberOfDivisors(4, 176)\n  2\n  >>> numberOfDivisors(4, 178)\n  2\n  >>> numberOfDivisors(4, 180)\n  2\n  >>> numberOfDivisors(4, 182)\n  2\n  >>> numberOfDivisors(4, 184)\n  2\n  >>> numberOfDivisors(4, 186)\n  2\n  >>> numberOfDivisors(4, 188)\n  2\n  >>> numberOfDivisors(4, 190)\n  2\n  >>> numberOfDivisors(4, 192)\n  2\n  >>> numberOfDivisors(4, 194)\n  2\n  >>> numberOfDivisors(4, 196)\n  2\n  >>> numberOfDivisors(4, 198)\n  2\n  >>> numberOfDivisors(4, 200)\n  2\n  >>> numberOfDivisors(4, 202)\n  2\n  >>> numberOfDivisors(4, 204)\n  2\n  >>> numberOfDivisors(4, 206)\n  2\n  >>> numberOfDivisors(4, 208)\n  2\n  >>> numberOfDivisors(4, 210)\n  2\n  >>> numberOfDivisors(4, 212)\n  2\n  >>> numberOfDivisors(4, 214", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_array = [];\n  let paren_level = 0;\n  let paren_nesting = 0;\n  let paren_nesting_max = 0;\n  let paren_nesting_max_index = 0;\n  let paren_nesting_max_index2 = 0;\n  let paren_nesting_max_index3 = 0;\n  let paren_nesting_max_index4 = 0;\n  let paren_nesting_max_index5 = 0;\n  let paren_nesting_max_index6 = 0;\n  let paren_nesting_max_index7 = 0;\n  let paren_nesting_max_index8 = 0;\n  let paren_nesting_max_index9 = 0;\n  let paren_nesting_max_index10 = 0;\n  let paren_nesting_max_index11 = 0;\n  let paren_nesting_max_index12 = 0;\n  let paren_nesting_max_index13 = 0;\n  let paren_nesting_max_index14 = 0;\n  let paren_nesting_max_index15 = 0;\n  let paren_nesting_max_index16 = 0;\n  let paren_nesting_max_index17 = 0;\n  let paren_nesting_max_index18 = 0;\n  let paren_nesting_max_index19 = 0;\n  let paren_nesting_max_index20 = 0;\n  let paren_nesting_max_index21 = 0;\n  let paren_nesting_max_index22 = 0;\n  let paren_nesting_max_index23 = 0;\n  let paren_nesting_max_index24 = 0;\n  let paren_nesting_max_index25 = 0;\n  let paren_nesting_max_index26 = 0;\n  let paren_nesting_max_index27 = 0;\n  let paren_nesting_max_index28 = 0;\n  let paren_nesting_max_index29 = 0;\n  let paren_nesting_max_index30 = 0;\n  let paren_nesting_max_index31 = 0;\n  let paren_nesting_max_index32 = 0;\n  let paren_nesting_max_index33 = 0;\n  let paren_nesting_max_index34 = 0;\n  let paren_nesting_max_index35 = 0;\n  let paren_nesting_max_index36 = 0;\n  let paren_nesting_max_index37 = 0;\n  let paren_nesting_max_index38 = 0;\n  let paren_nesting_max_index39 = 0;\n  let paren_nesting_max_index40 = 0;\n  let paren_nesting_max_index41 = 0;\n  let paren_nesting_max_index42 = 0;\n  let paren_nesting_max_index43 = 0;\n  let paren_nesting_max_index44 = 0;\n  let paren_nesting_max_index45 = 0;\n  let paren_nesting_max_index46 = 0;\n  let paren_nesting_max_index47 = 0;\n  let paren_nesting_max_index48 = 0;\n  let paren_nesting_max_index49 = 0;\n  let paren_nesting_max_index50 = 0;\n  let paren_nesting_max_index51 = 0;\n  let paren_nesting_max_index52 = 0;\n  let paren_nesting_max_index53 = 0;\n  let paren_nesting_max_index54 = 0;\n  let paren_nesting_max_index55 = 0;\n  let paren_nesting_max_index56 = 0;\n  let paren_nesting_max_index57 = 0;\n  let paren_nesting_max_index58 = 0;\n  let paren_nesting_max_index59 = 0;\n  let paren_nesting_max_index60 = 0;\n  let paren_nesting_max_index61 = 0;\n  let paren_nesting_max_index62 = 0;\n  let paren_nesting_max_index63 = 0;\n  let paren_nesting_max_index64 = 0;\n  let paren_nesting_max_index65 = 0;\n  let paren_nesting_max_index66 = 0;\n  let paren_nesting_max_index67 = 0;\n  let paren_nesting_max_index68 = 0;\n  let paren_nesting_max_index69 = 0;\n  let paren_nesting_max_index70 = 0;\n  let paren_nesting_max_index71 = 0;\n  let paren_nesting_max_index72 = 0;\n  let paren_nesting_max_index73 = 0;\n  let paren_nesting_max_index74 = 0;\n  let paren_nesting_max_index75 = 0;\n  let paren_nesting_max_index76 = 0;\n  let paren_nesting_max_index77 = 0;\n  let paren_nesting_max_index78 = 0;\n  let paren_nesting_max_index79 = 0;\n  let paren_nesting_max_index80 = 0;\n  let paren_nesting_max_index81 = 0;\n  let paren_nesting_max_index82 = 0;\n  let paren_nesting_max_index83 = 0;\n  let paren_nesting_max_index84 = 0;\n  let paren_nesting_max_index85 = 0;\n  let paren_nesting_max_index86 = 0;\n  let paren_nesting_max_index87 = 0;\n  let paren_nesting_max_index88 = 0;\n  let paren_nesting_max_index89 = 0;\n  let paren_nesting_max_index90 = 0;\n  let paren_nesting_max_index91 = 0;\n  let paren_nesting_max_index92 = 0;\n  let paren_nesting_max_index93 = 0;\n  let paren_nesting_max_index94 = 0;\n  let paren_nesting_max_index95 = 0;\n  let paren_nesting_max_index96 = 0;\n  let paren_nesting_max_index97 = 0;\n  let paren_nesting_max_index98 = 0;\n  let paren_nesting_max_index99 = 0;\n  let paren_nesting_max_index100 = 0;\n  let paren_nesting_max_index101 = 0;\n  let paren_nesting_max_index102 = 0;\n  let paren_nesting_max_index103 = 0;\n  let paren_nesting_max_index104 = 0;\n  let paren_nesting_max_index105 = 0;\n  let paren_nesting_max_index106 = 0;\n  let paren_nesting_max_index107 = 0;\n  let paren_nesting_max_index108 = 0;\n  let paren_nesting_max_index109 = 0;\n  let paren_nesting_max_index110 = 0;\n  let paren_nesting_max_index111 = 0;\n  let paren_nesting_max_index112 = 0;\n  let paren_nesting_max_index113 = 0;\n  let paren_nesting_max_index114 = 0;\n  let paren_nesting_max_index115 = 0;\n  let paren_nesting_max_index116 = 0;\n  let paren_nesting_max_index117 = 0;\n  let paren_nesting_max_index118 = 0;\n  let paren_nesting_max_index119 = 0;\n  let paren_nesting_max_index120 = 0;\n  let paren_nesting_max_index121 = 0;\n  let paren_nesting_max_index122 = 0;\n  let paren_nesting_max_index123 = 0;\n  let paren_nesting_max_index124 = 0;\n  let paren_nesting_max_index125 = 0;\n  let paren_nesting_max_index126 = 0;\n  let paren_nesting_max_index127 = 0;\n  let paren_nesting_max_index128 = 0;\n  let paren_nesting_max_index129 = 0;\n  let paren_nesting_max_index130 = 0;\n  let paren_nesting_max_index131 = 0;\n  let paren_nesting_max_index132 = 0;\n  let paren_nesting_max_index133 = 0;\n  let paren_nesting_max_index134 = 0;\n  let paren_nesting_max_index135 = 0;\n  let paren_nesting_max_index136 = 0;\n  let paren_nesting_max_index137 = 0;\n  let paren_nesting_max_index138 = 0;\n  let paren_nesting_max_index139 = 0;\n  let paren_nesting_max_index140 = 0;\n  let paren_nesting_max_index141 = 0;\n  let paren_nesting_max_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openingBrackets = brackets.split(\" \");\n  let closingBrackets = brackets.split(\" \").map(x => x.replace(\"(\", \"\").replace(\")\", \"\"));\n  let openingBracketsCount = openingBrackets.length;\n  let closingBracketsCount = closingBrackets.length;\n  let isCorrect = true;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      isCorrect = false;\n      break;\n    }\n  }\n\n  return isCorrect;\n};\n\n/* \n  Given a string, return an array of all unique substrings \n  that appear in the string. \n  \n  >>> uniqueSubstrings(\"abcabcbb\")\n  [\"ab\", \"bb\"]\n  >>> uniqueSubstrings(\"a\")\n  [\"a\"]\n  >>> uniqueSubstrings(\"ab\")\n  [\"ab\"]\n  >>> uniqueSubstrings(\"aba\")\n  [\"ab\", \"a\"]\n  >>> uniqueSubstrings(\"abca\")\n  [\"ab\", \"ca\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"g\"]\n  >>> uniqueSubstrings(\"abcadefg\")\n  [\"ab\", \"ca\", \"def\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * derivative(xs.slice(2))];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial. \n  Return them in descending order.\n  >>> roots([3, 1, 2, 4, 5])\n  [5, 2, 1]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots = (xs) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * roots(xs.slice(2))];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in descending order.\n  >>> rootsUpTo([3, 1, 2, 4, 5], 3)\n  [5, 2, 1]\n  >>> rootsUpTo([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpTo = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpTo(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in ascending order.\n  >>> rootsUpToAscending([3, 1, 2, 4, 5], 3)\n  [1, 2, 5]\n  >>> rootsUpToAscending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToAscending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToAscending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in ascending order.\n  >>> rootsUpToAscending([3, 1, 2, 4, 5], 3)\n  [1, 2, 5]\n  >>> rootsUpToAscending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToAscending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToAscending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in descending order.\n  >>> rootsUpToDescending([3, 1, 2, 4, 5], 3)\n  [5, 2, 1]\n  >>> rootsUpToDescending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToDescending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToDescending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in descending order.\n  >>> rootsUpToDescending([3, 1, 2, 4, 5], 3)\n  [5, 2, 1]\n  >>> rootsUpToDescending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToDescending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToDescending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in ascending order.\n  >>> rootsUpToAscending([3, 1, 2, 4, 5], 3)\n  [1, 2, 5]\n  >>> rootsUpToAscending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToAscending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToAscending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in ascending order.\n  >>> rootsUpToAscending([3, 1, 2, 4, 5], 3)\n  [1, 2, 5]\n  >>> rootsUpToAscending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToAscending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToAscending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in descending order.\n  >>> rootsUpToDescending([3, 1, 2, 4, 5], 3)\n  [5, 2, 1]\n  >>> rootsUpToDescending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToDescending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToDescending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in descending order.\n  >>> rootsUpToDescending([3, 1, 2, 4, 5], 3)\n  [5, 2, 1]\n  >>> rootsUpToDescending([1, 2, 3], 3)\n  [1, 2]\n  */\nconst rootsUpToDescending = (xs, n) => {\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [xs[0]];\n  const dx = xs[1];\n  return [xs[0] + dx * rootsUpToDescending(xs.slice(2), n)];\n};\n\n/* \n  Given a polynomial x^n + x^(n-1) + x^(n-2) +... + x^2 + x + 1, \n  find all roots of this polynomial up to some integer n.\n  Return them in ascending order.\n  >>> rootsUpToAscending", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string exemplify \n   a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  let result = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[(digits.length - 1 - i) % digits.length] + digits[i];\n  }\n  return result;\n};\n\n/*\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/i)) {\n      sum += c.charCodeAt(0) - 97;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let apples = Number(s.split(\" \")[0]);\n   let oranges = Number(s.split(\" \")[1]);\n   let mangos = Number(s.split(\" \")[2]);\n   let totalIssue = apples + oranges + mangos;\n   let totalFruits = apples + oranges + mangos;\n   let fruitsInBasket = totalFruits - totalIssue;\n   let mangoFruits = fruitsInBasket - mangos;\n   return mangoFruits;\n }\n */\n const fruitDistribution = (s, n) = > {\n   let apples = Number(s.split(\" \")[0]);\n   let oranges = Number(s.split(\" \")[1]);\n   let mangos = Number(s.split(\" \")[2]);\n   let totalIssue = apples + oranges + mangos;\n   let totalFruits = apples + oranges + mangos;\n   let fruitsInBasket = totalFruits - totalIssue;\n   let mangoFruits = fruitsInBasket - mangos;\n   return mangoFruits;\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges \", 19));\n console.log(fruitDistribution(\"0 apple and 1 oranges\",3));\n console.log(fruitDistribution(\"2 apples and 3 orange \", 100));\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120));</code>\n\nI hope this helps!\n<|/ a tags=javascript,algorithm,arrays,string |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(str, n) {\n    let apples = Number(str.split(\" \")[0]);\n    let oranges = Number(str.split(\" \")[1]);\n    let mangos = Number(str.split(\" \")[2]);\n    let totalIssue = apples + oranges + mangos;\n    let totalFruits = apples + oranges + mangos;\n    let fruitsInBasket = totalFruits - totalIssue;\n    let mangoFruits = fruitsInBasket - mangos;\n    return mangoFruits;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges \", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 orange \", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n</code>\n<|/ a tags=javascript,algorithm,arrays,string |>\n<| a tags=javascript,algorithm,arrays,string |>\n<code>\nfunction fruitDistribution(str, n) {\n    let apples = Number(str.split(\" \")[0]);\n    let oranges = Number(str.split(\" \")[1]);\n    let mangos = Number(str.split(\" \")[2]);\n    let totalIssue = apples + oranges + mangos;\n    let totalFruits = apples + oranges + mangos;\n    let fruitsInBasket = totalFruits - totalIssue;\n    let mangoFruits = fruitsInBasket - mangos;\n    return mangoFruits;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges \", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 orange \", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(str, n) {\n    let apples = Number(str.split(\" \")[0]);\n    let oranges = Number(str.split(\" \")[1]);\n    let mangos = Number(str.split(\" \")[2]);\n    let totalIssue = apples + oranges + mangos;\n    let totalFruits = apples + oranges + mangos;\n    let fruitsInBasket = totalFruits - totalIssue;\n    let mangoFruits = fruitsInBasket - mangos;\n    return mangoFruits;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges \", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 orange \", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n</code>\n<|/ a tags=javascript,algorithm,arrays,string |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(str, n) {\n    let apples = Number(str.split(\" \")[0]);\n    let oranges = Number(str.split(\" \")[1]);\n    let mangos = Number(str.split(\" \")[2]);\n    let totalIssue = apples + oranges + mangos;\n    let totalFruits = apples + oranges + mangos;\n    let fruitsInBasket = totalFruits - totalIssue;\n    let mangoFruits = fruitsInBasket - mangos;\n    return mangoFruits;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges \", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 orange \", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n</code>\n<|/ a tags=javascript,algorithm,arrays,string |>\n<| a tags=javascript,algorithm,arrays,string |>\n<code>\nfunction fruitDistribution(str, n) {\n    let apples = Number(str.split(\" \")[0]);\n    let oranges = Number(str.split(\" \")[1]);\n    let mangos = Number(str.split(\" \")[2]);\n    let totalIssue = apples + oranges + mangos;\n    let totalFruits = apples + oranges + mangos;\n    let fruitsInBasket = totalFruits - totalIssue;\n    let mangoFruits = fruitsInBasket - mangos;\n    return mangoFruits;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges \", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 orange \", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(str, n) {\n    let apples = Number(str.split(\" \")[0]);\n    let oranges = Number(str.split(\" \")[1]);\n    let mangos = Number(str.split(\" \")[2]);\n    let totalIssue = apples + oranges + ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex = i;\n      minValue = arr[i];\n    } else if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport { pluck, smallestEvenValue, smallestEvenIndex }\n</code></pre>\n        </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n    <h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"Matrix.html\">Matrix</a></li><li><a href=\"Vector.html\">Vector</a></li><li><a href=\"Utility.html\">Utility</a></li></ul><h3>Global</h3><ul><li><a href=\"global.html#bigNumber\">bigNumber</a></li><li><a href=\"global.html#compareArray\">compareArray</a></li><li><a href=\"global.html#compareStrings\">compareStrings</a></li><li><a href=\"global.html#generate\">generate</a></li><li><a href=\"global.html#isPrime\">isPrime</a></li><li><a href=\"global.html#random\">random</a></li></ul>\n</nav>\n\n<br class=\"clear\">\n\n<footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.5.5</a> on Wed May 02 2018 10:20:21 GMT-0500 (Central Daylight Time)\n</footer>\n\n<script> prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"> </script>\n</body>\n</html>\n\n<|/ file source=github filename=index.html |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain grant substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSub", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let sortedList = [minValue];\n  for (let i = minValue; i < maxValue; i++) {\n    sortedList.push(i);\n  }\n  for (let i = maxValue; i > minValue; i--) {\n    sortedList.push(i);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []\n  */\nconst descSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in ascending order.\n\n  Examples:\n  ascSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascSortList([]) == []\n  */\nconst ascSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []\n  */\nconst descSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in ascending order.\n\n  Examples:\n  ascSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascSortList([]) == []\n  */\nconst ascSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []\n  */\nconst descSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in ascending order.\n\n  Examples:\n  ascSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascSortList([]) == []\n  */\nconst ascSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []\n  */\nconst descSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in ascending order.\n\n  Examples:\n  ascSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascSortList([]) == []\n  */\nconst ascSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []\n  */\nconst descSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in ascending order.\n\n  Examples:\n  ascSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascSortList([]) == []\n  */\nconst ascSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []\n  */\nconst descSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in ascending order.\n\n  Examples:\n  ascSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascSortList([]) == []\n  */\nconst ascSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []\n  */\nconst descSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in ascending order.\n\n  Examples:\n  ascSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascSortList([]) == []\n  */\nconst ascSortList = (lst) => {\n  let sortedList = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return list sorted in descending order.\n\n  Examples:\n  descSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descSortList([]) == []", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a) / (2 * (b - a));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c) => {\n  if (a < b + c || b < a + c || c < a + b) {\n    return -1;\n  }\n  return (b - a) * (c - b) * (c - a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let maxWeightUnit = 0;\n  let maxWeightUnitIndex = 0;\n  let maxWeightUnitValue = 0;\n  let maxWeightUnitValueIndex = 0;\n  let maxWeightUnitValueSum = 0;\n  let maxWeightUnitValueSumIndex = 0;\n  let maxWeightUnitValueSumValue = 0;\n  let maxWeightUnitValueSumValueIndex = 0;\n  let maxWeightUnitValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValue = 0;\n  let maxWeightUnitValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValue = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSumValueSumIndex = 0;\n  let maxWeightUnitValueSumValueSumValueSumValueSum = 0;\n  let maxWeightUnitValueSumValueSum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChar = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const totalChar2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return lst1.filter((item) => item.length < totalChar).concat(lst2.filter((item) => item.length < totalChar2));\n};\n\n/*\n  Write a function that accepts two strings and return true if both strings \n   are palindromes.\n\n  Examples\n  palindrome('abc') ➞ true\n  palindrome('aba') ➞ true\n  palindrome('abca') ➞ false\n  palindrome('ab') ➞ false\n  palindrome('') ➞ false\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome('abba') ➞ true\n  palindrome", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let b = 2;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return true;\n  if (a % 7 === 0) return true;\n  if (a % 11 === 0) return true;\n  if (a % 13 === 0) return true;\n  if (a % 17 === 0) return true;\n  if (a % 19 === 0) return true;\n  if (a % 23 === 0) return true;\n  if (a % 29 === 0) return true;\n  if (a % 37 === 0) return true;\n  if (a % 43 === 0) return true;\n  if (a % 51 === 0) return true;\n  if (a % 59 === 0) return true;\n  if (a % 67 === 0) return true;\n  if (a % 73 === 0) return true;\n  if (a % 81 === 0) return true;\n  if (a % 89 === 0) return true;\n  if (a % 97 === 0) return true;\n  if (a % 103 === 0) return true;\n  if (a % 111 === 0) return true;\n  if (a % 129 ===0) return true;\n  if (a % 137 ===0) return true;\n  if (a % 145 ===0) return true;\n  if (a % 153 ===0) return true;\n  if (a % 161 ===0) return true;\n  if (a % 169 ===0) return true;\n  if (a % 177 ===0) return true;\n  if (a % 185 ===0) return true;\n  if (a % 193 ===0) return true;\n  if (a % 201 ===0) return true;\n  if (a % 209 ===0) return true;\n  if (a % 217 ===0) return true;\n  if (a % 225 ===0) return true;\n  if (a % 233 ===0) return true;\n  if (a % 241 ===0) return true;\n  if (a % 249 ===0) return true;\n  if (a % 257 ===0) return true;\n  if (a % 265 ===0) return true;\n  if (a % 273 ===0) return true;\n  if (a % 281 ===0) return true;\n  if (a % 289 ===0) return true;\n  if (a % 297 ===0) return true;\n  if (a % 305 ===0) return true;\n  if (a % 313 ===0) return true;\n  if (a % 321 ===0) return true;\n  if (a % 329 ===0) return true;\n  if (a % 337 ===0) return true;\n  if (a % 345 ===0) return true;\n  if (a % 353 ===0) return true;\n  if (a % 361 ===0) return true;\n  if (a % 369 ===0) return true;\n  if (a % 377 ===0) return true;\n  if (a % 385 ===0) return true;\n  if (a % 393 ===0) return true;\n  if (a % 401 ===0) return true;\n  if (a % 409 ===0) return true;\n  if (a % 417 ===0) return true;\n  if (a % 425 ===0) return true;\n  if (a % 433 ===0) return true;\n  if (a % 441 ===0) return true;\n  if (a % 449 ===0) return true;\n  if (a % 457 ===0) return true;\n  if (a % 465 ===0) return true;\n  if (a % 473 ===0) return true;\n  if (a % 481 ===0) return true;\n  if (a % 489 ===0) return true;\n  if (a % 497 ===0) return true;\n  if (a % 505 ===0) return true;\n  if (a % 513 ===0) return true;\n  if (a % 521 ===0) return true;\n  if (a % 529 ===0) return true;\n  if (a % 537 ===0) return true;\n  if (a % 545 ===0) return true;\n  if (a % 553 ===0) return true;\n  if (a % 561 ===0) return true;\n  if (a % 569 ===0) return true;\n  if (a % 577 ===0) return true;\n  if (a % 585 ===0) return true;\n  if (a % 593 ===0) return true;\n  if (a % 601 ===0) return true;\n  if (a % 609 ===0) return true;\n  if (a % 617 ===0) return true;\n  if (a % 625 ===0) return true;\n  if (a % 633 ===0) return true;\n  if (a % 641 ===0) return true;\n  if (a % 649 ===0) return true;\n  if (a % 657 ===0) return true;\n  if (a % 665 ===0) return true;\n  if (a % 673 ===0) return true;\n  if (a % 681 ===0) return true;\n  if (a % 689 ===0) return true;\n  if (a % 697 ===0) return true;\n  if (a % 705 ===0) return true;\n  if (a % 713 ===0) return true;\n  if (a % 721 ===0) return true;\n  if (a % 729 ===0) return true;\n  if (a % 737 ===0) return true;\n  if (a % 745 ===0) return true;\n  if (a % 753 ===0) return true;\n  if (a % 761 ===0) return true;\n  if (a % 769 ===0) return true;\n  if (a % 777 ===0) return true;\n  if (a % 785 ===0) return true;\n  if (a % 793 ===0) return true;\n  if (a % 801 ===0) return true;\n  if (a % 809 ===0) return true;\n  if (a % 817 ===0) return true;\n  if (a % 825 ===0) return true;\n  if (a % 833 ===0) return true;\n  if (a % 841 ===0) return true;\n  if (a % 849 ===0) return true;\n  if (a % 857 ===0) return true;\n  if (a % 866 ===0) return true;\n  if (a % 873 ===0) return true;\n  if (a % 881 ===0) return true;\n  if (a % 889 ===0) return true;\n  if (a % 897 ===0) return true;\n  if (a % 905 ===0) return true;\n  if (a % 913 ===0) return true;\n  if (a % 921 ===0) return true;\n  if (a % 929 ===0) return true;\n  if (a % 937 ===0) return true;\n  if (a % 945 ===0) return true;\n  if (a % 953 ===0) return true;\n  if (a % 961 ===0) return true;\n  if (a % 969 ===0) return true;\n  if (a % 967 ===0) return true;\n  if (a % 975 ===0) return true;\n  if (a % 983 ===0) return true;\n  if (a % 991 ===0) return true;\n  if (a % 999 ===0) return true;\n  if (a % 1007 ===0) return true;\n  if (a % 1015 === 0) return true;\n  if (a % 1023 === 0) return true;\n  if (a % 1031 === 0) return true;\n  if (a % 1039 === 0) return true;\n  if (a % 1047 === 0) return true;\n  if (a % 1055 === 0) return true;\n  if (a % 1063 === 0) return true;\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArr = hexNum.split('');\n  let hexNumArrLen = hexNumArr.length;\n  let hexNumArrLen2 = hexNumArrLen / 2;\n  let hexNumArrLen3 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen4 = hexNumArrLen3 - hexNumArrLen2;\n  let hexNumArrLen5 = hexNumArrLen4 - hexNumArrLen3;\n  let hexNumArrLen6 = hexNumArrLen5 - hexNumArrLen4;\n  let hexNumArrLen7 = hexNumArrLen6 - hexNumArrLen5;\n  let hexNumArrLen8 = hexNumArrLen7 - hexNumArrLen6;\n  let hexNumArrLen9 = hexNumArrLen8 - hexNumArrLen7;\n  let hexNumArrLen10 = hexNumArrLen9 - hexNumArrLen8;\n  let hexNumArrLen11 = hexNumArrLen10 - hexNumArrLen9;\n  let hexNumArrLen12 = hexNumArrLen11 - hexNumArrLen10;\n  let hexNumArrLen13 = hexNumArrLen12 - hexNumArrLen11;\n  let hexNumArrLen14 = hexNumArrLen13 - hexNumArrLen12;\n  let hexNumArrLen15 = hexNumArrLen14 - hexNumArrLen13;\n  let hexNumArrLen16 = hexNumArrLen15 - hexNumArrLen14;\n  let hexNumArrLen17 = hexNumArrLen16 - hexNumArrLen15;\n  let hexNumArrLen18 = hexNumArrLen17 - hexNumArrLen16;\n  let hexNumArrLen19 = hexNumArrLen18 - hexNumArrLen17;\n  let hexNumArrLen20 = hexNumArrLen19 - hexNumArrLen18;\n  let hexNumArrLen21 = hexNumArrLen20 - hexNumArrLen19;\n  let hexNumArrLen22 = hexNumArrLen21 - hexNumArrLen20;\n  let hexNumArrLen23 = hexNumArrLen22 - hexNumArrLen21;\n  let hexNumArrLen24 = hexNumArrLen23 - hexNumArrLen22;\n  let hexNumArrLen25 = hexNumArrLen24 - hexNumArrLen23;\n  let hexNumArrLen26 = hexNumArrLen25 - hexNumArrLen24;\n  let hexNumArrLen27 = hexNumArrLen26 - hexNumArrLen25;\n  let hexNumArrLen28 = hexNumArrLen27 - hexNumArrLen26;\n  let hexNumArrLen29 = hexNumArrLen28 - hexNumArrLen27;\n  let hexNumArrLen30 = hexNumArrLen29 - hexNumArrLen28;\n  let hexNumArrLen31 = hexNumArrLen30 - hexNumArrLen29;\n  let hexNumArrLen32 = hexNumArrLen31 - hexNumArrLen30;\n  let hexNumArrLen33 = hexNumArrLen32 - hexNumArrLen31;\n  let hexNumArrLen34 = hexNumArrLen33 - hexNumArrLen32;\n  let hexNumArrLen35 = hexNumArrLen34 - hexNumArrLen33;\n  let hexNumArrLen36 = hexNumArrLen35 - hexNumArrLen34;\n  let hexNumArrLen37 = hexNumArrLen36 - hexNumArrLen35;\n  let hexNumArrLen38 = hexNumArrLen37 - hexNumArrLen36;\n  let hexNumArrLen39 = hexNumArrLen38 - hexNumArrLen37;\n  let hexNumArrLen40 = hexNumArrLen39 - hexNumArrLen38;\n  let hexNumArrLen41 = hexNumArrLen40 - hexNumArrLen39;\n  let hexNumArrLen42 = hexNumArrLen41 - hexNumArrLen40;\n  let hexNumArrLen43 = hexNumArrLen42 - hexNumArrLen41;\n  let hexNumArrLen44 = hexNumArrLen43 - hexNumArrLen42;\n  let hexNumArrLen45 = hexNumArrLen44 - hexNumArrLen43;\n  let hexNumArrLen46 = hexNumArrLen45 - hexNumArrLen44;\n  let hexNumArrLen47 = hexNumArrLen46 - hexNumArrLen45;\n  let hexNumArrLen48 = hexNumArrLen47 - hexNumArrLen46;\n  let hexNumArrLen49 = hexNumArrLen48 - hexNumArrLen47;\n  let hexNumArrLen50 = hexNumArrLen49 - hexNumArrLen48;\n  let hexNumArrLen51 = hexNumArrLen50 - hexNumArrLen49;\n  let hexNumArrLen52 = hexNumArrLen51 - hexNumArrLen50;\n  let hexNumArrLen53 = hexNumArrLen52 - hexNumArrLen51;\n  let hexNumArrLen54 = hexNumArrLen53 - hexNumArrLen52;\n  let hexNumArrLen55 = hexNumArrLen54 - hexNumArrLen53;\n  let hexNumArrLen56 = hexNumArrLen55 - hexNumArrLen54;\n  let hexNumArrLen57 = hexNumArrLen56 - hexNumArrLen55;\n  let hexNumArrLen58 = hexNumArrLen57 - hexNumArrLen56;\n  let hexNumArrLen59 = hexNumArrLen58 - hexNumArrLen57;\n  let hexNumArrLen60 = hexNumArrLen59 - hexNumArrLen58;\n  let hexNumArrLen61 = hexNumArrLen60 - hexNumArrLen59;\n  let hexNumArrLen62 = hexNumArrLen61 - hexNumArrLen60;\n  let hexNumArrLen63 = hexNumArrLen62 - hexNumArrLen61;\n  let hexNumArrLen64 = hexNumArrLen63 - hexNumArrLen62;\n  let hexNumArrLen65 = hexNumArrLen64 - hexNumArrLen63;\n  let hexNumArrLen66", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let quality = '';\n  let excess = '';\n  \n  while(decimal > 0){\n    quality = decimal % 2;\n    excess = decimal % 10;\n    decimal = decimal / 10;\n    \n    if(excess > 0){\n      binary += quality;\n      binary += excess;\n    }\n  }\n  \n  return binary;\n}\n\n/*\n  Write a function that will convert a binary string to decimal.\n  \n  Examples:\n  binaryToDecimal(\"db1111db\") # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  \n  for(let i = 0; i < binary.length; i++){\n    decimal += parseInt(binary[i]) * Math.pow(2, i);\n  }\n  \n  return decimal;\n}\n\n/*\n  Write a function that will convert a decimal number to binary.\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n*/\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let quality = '';\n  let excess = '';\n  \n  while(decimal > 0){\n    quality = decimal % 2;\n    excess = decimal % 10;\n    decimal = decimal / 10;\n    \n    if(excess > 0){\n      binary += quality;\n      binary += excess;\n    }\n  }\n  \n  return binary;\n}\n\n/*\n  Write a function that will convert a binary string to decimal.\n  \n  Examples:\n  binaryToDecimal(\"db1111db\") # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  \n  for(let i = 0; i < binary.length; i++){\n    decimal += parseInt(binary[i]) * Math.pow(2, i);\n  }\n  \n  return decimal;\n}\n\n/*\n  Write a function that will convert a decimal number to binary.\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n*/\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let quality = '';\n  let excess = '';\n  \n  while(decimal > 0){\n    quality = decimal % 2;\n    excess = decimal % 10;\n    decimal = decimal / 10;\n    \n    if(excess > 0){\n      binary += quality;\n      binary += excess;\n    }\n  }\n  \n  return binary;\n}\n\n/*\n  Write a function that will convert a binary string to decimal.\n  \n  Examples:\n  binaryToDecimal(\"db1111db\") # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  \n  for(let i = 0; i < binary.length; i++){\n    decimal += parseInt(binary[i]) * Math.pow(2, i);\n  }\n  \n  return decimal;\n}\n\n/*\n  Write a function that will convert a decimal number to binary.\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n*/\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let quality = '';\n  let excess = '';\n  \n  while(decimal > 0){\n    quality = decimal % 2;\n    excess = decimal % 10;\n    decimal = decimal / 10;\n    \n    if(excess > 0){\n      binary += quality;\n      binary += excess;\n    }\n  }\n  \n  return binary;\n}\n\n/*\n  Write a function that will convert a binary string to decimal.\n  \n  Examples:\n  binaryToDecimal(\"db1111db\") # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  \n  for(let i = 0; i < binary.length; i++){\n    decimal += parseInt(binary[i]) * Math.pow(2, i);\n  }\n  \n  return decimal;\n}\n\n/*\n  Write a function that will convert a decimal number to binary.\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n*/\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let quality = '';\n  let excess = '';\n  \n  while(decimal > 0){\n    quality = decimal % 2;\n    excess = decimal % 10;\n    decimal = decimal / 10;\n    \n    if(excess > 0){\n      binary += quality;\n      binary += excess;\n    }\n  }\n  \n  return binary;\n}\n\n/*\n  Write a function that will convert a binary string to decimal.\n  \n  Examples:\n  binaryToDecimal(\"db1111db\") # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  \n  for(let i = 0; i < binary.length; i++){\n    decimal += parseInt(binary[i]) * Math.pow(2, i);\n  }\n  \n  return decimal;\n}\n\n/*\n  Write a function that will convert a decimal number to binary.\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n*/\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let quality = '';\n  let excess = '';\n  \n  while(decimal > 0){\n    quality = decimal % 2;\n    excess = decimal % 10;\n    decimal = decimal / 10;\n    \n    if(excess > 0){\n      binary += quality;\n      binary += excess;\n    }\n  }\n  \n  return binary;\n}\n\n/*\n  Write a function that will convert a binary string to decimal.\n  \n  Examples:\n  binaryToDecimal(\"db1111db\") # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  \n  for(let i = 0; i < binary.length; i++){\n    decimal += parseInt(binary[i]) * Math.pow(2, i);\n  }\n  \n  return decimal;\n}\n\n/*\n  Write a function that will convert a decimal number to binary.\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n*/\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let quality = '';\n  let excess = '';\n  \n  while(decimal > 0){\n    quality = decimal % 2;\n    excess = decimal % 10;\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intersection += int;\n  }\n  return [sum, intersection];\n};\n\n/* Given a list, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([0, 1])\n  (0, 1)\n  >>> sumProduct([0, 1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intersection = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'e' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'i' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'o' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'u' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  if (count >= 3) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'e' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'i' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'o' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'u' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  if (count >= 3) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'e' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'i' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'o' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'u' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  if (count >= 3) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'e' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'i' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'o' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'u' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  if (count >= 3) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'e' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'i' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'o' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'u' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  if (count >= 3) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'e' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'i' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'o' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'u' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  if (count >= 3) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  let gradesAverage = gradesSum / grades.length;\n  let gradesLetterGrade;\n  if (gradesAverage >= 4.0) {\n    gradesLetterGrade = 'A+';\n  } else if (gradesAverage >= 3.7) {\n    gradesLetterGrade = 'A';\n  } else if (gradesAverage >= 3.3) {\n    gradesLetterGrade = 'A-';\n  } else if (gradesAverage >= 3.0) {\n    gradesLetterGrade = 'B+';\n  } else if (gradesAverage >= 2.7) {\n    gradesLetterGrade = 'B';\n  } else if (gradesAverage >= 2.3) {\n    gradesLetterGrade = 'B-';\n  } else if (gradesAverage >= 2.0) {\n    gradesLetterGrade = 'C+';\n  } else if (gradesAverage >= 1.7) {\n    gradesLetterGrade = 'C';\n  } else if (gradesAverage >= 1.2) {\n    gradesLetterGrade = 'C-';\n  } else if (gradesAverage >= 1.0) {\n    gradesLetterGrade = 'D+';\n  } else if (gradesAverage >= 0.7) {\n    gradesLetterGrade = 'D';\n  } else if (gradesAverage >= 0.0) {\n    gradesLetterGrade = 'D-';\n  } else {\n    gradesLetterGrade = 'east';\n  }\n  return gradesLetterGrade;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following mesa:\n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n*/\nconst letterGrade = (grades) => {\n  let gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  let gradesAverage = gradesSum / grades.length;\n  let gradesLetterGrade;\n  if (gradesAverage >= 4.0) {\n    gradesLetterGrade = 'A+';\n  } else if (gradesAverage >= 3.7) {\n    gradesLetterGrade = 'A';\n  } else if (gradesAverage >= 3.3) {\n    gradesLetterGrade = 'A-';\n  } else if (gradesAverage >= 3.0) {\n    gradesLetterGrade = 'B+';\n  } else if (gradesAverage >= 2.7) {\n    gradesLetterGrade = 'B';\n  } else if (gradesAverage >= 2.3) {\n    gradesLetterGrade = 'B-';\n  } else if (gradesAverage >= 2.0) {\n    gradesLetterGrade = 'C+';\n  } else if (gradesAverage >= 1.7) {\n    gradesLetterGrade = 'C';\n  } else if (gradesAverage >= 1.2) {\n    gradesLetterGrade = 'C-';\n  } else if (gradesAverage >= 1.0) {\n    gradesLetterGrade = 'D+';\n  } else if (gradesAverage >= 0.7) {\n    gradesLetterGrade = 'D';\n  } else if (gradesAverage >= 0.0) {\n    gradesLetterGrade = 'D-';\n  } else {\n    gradesLetterGrade = 'east';\n  }\n  return gradesLetterGrade;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following mesa:\n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n*/\nconst letterGrade = (grades) => {\n  let gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  let gradesAverage = gradesSum / grades.length;\n  let gradesLetterGrade;\n  if (gradesAverage >= 4.0) {\n    gradesLetterGrade = 'A+';\n  } else if (gradesAverage >= 3.7) {\n    gradesLetterGrade = 'A';\n  } else if (gradesAverage >= 3.3) {\n    gradesLetterGrade = 'A-';\n  } else if (gradesAverage >= 3.0) {\n    gradesLetterGrade = 'B+';\n  } else if (gradesAverage >= 2.7) {\n    gradesLetterGrade = 'B';\n  } else if (gradesAverage >= 2.3) {\n    gradesLetterGrade = 'B-';\n  } else if (gradesAverage >= 2.0) {\n    gradesLetterGrade = 'C+';\n  } else if (gradesAverage >= 1.7) {\n    gradesLetterGrade = 'C';\n  } else if (gradesAverage >= 1.2) {\n    gradesLetterGrade = 'C-';\n  } else if (gradesAverage >= 1.0) {\n    gradesLetterGrade = 'D+';\n  } else if (gradesAverage >= 0.7) {\n    gradesLetterGrade = 'D';\n  } else if (gradesAverage >= 0.0) {\n    gradesLetterGrade = 'D-';\n  } else {\n    gradesLetterGrade = 'east';\n  }\n  return gradesLetterGrade;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following mesa:\n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n*/\nconst letterGrade = (grades) => {\n  let gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  let gradesAverage = gradesSum / grades.length;\n  let gradesLetterGrade;\n  if (gradesAverage >= 4.0) {\n    gradesLetterGrade = 'A+';", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primes = primesStrings\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false\n    }\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0\n   let lastDigit = n % 10\n   while (lastDigit!= 1) {\n     lastDigit = lastDigit % 10\n     count += 1\n   }\n   return count\n }\n */\nconst startsOneEnds = (n) => {\n  let count = 0\n  let lastDigit = n % 10\n  while (lastDigit!= 1) {\n    lastDigit = lastDigit % 10\n    count += 1\n  }\n  return count\n}\n\n// Test Cases\nconsole.log(startsOneEnds(123))\nconsole.log(startsOneEnds(1234))\nconsole.log(startsOneEnds(12345))\nconsole.log(startsOneEnds(123456))\nconsole.log(startsOneEnds(1234567))\nconsole.log(startsOneEnds(12345678))\nconsole.log(startsOneEnds(123456789))\nconsole.log(startsOneEnds(1234567890))\nconsole.log(startsOneEnds(123456789012))\nconsole.log(startsOneEnds(1234567890123))\nconsole.log(startsOneEnds(12345678901234))\nconsole.log(startsOneEnds(123456789012345))\nconsole.log(startsOneEnds(1234567890123456))\nconsole.log(startsOneEnds(12345678901234567))\nconsole.log(startsOneEnds(123456789012345678))\nconsole.log(startsOneEnds(1234567890123456789))\nconsole.log(startsOneEnds(12345678901234567890))\nconsole.log(startsOneEnds(1234567890123456789012))\nconsole.log(startsOneEnds(12345678901234567890123))\nconsole.log(startsOneEnds(123456789012345678901234))\nconsole.log(startsOneEnds(1234567890123456789012345))\nconsole.log(startsOneEnds(12345678901234567890123456))\nconsole.log(startsOneEnds(123456789012345678901234567))\nconsole.log(startsOneEnds(1234567890123456789012345678))\nconsole.log(startsOneEnds(12345678901234567890123456789))\nconsole.log(startsOneEnds(123456789012345678901234567890))\nconsole.log(startsOneEnds(12345678901234567890123456789012))\nconsole.log(startsOneEnds(123456789012345678901234567890123))\nconsole.log(startsOneEnds(1234567890123456789012345678901234))\nconsole.log(startsOneEnds(12345678901234567890123456789012345))\nconsole.log(startsOneEnds(123456789012345678901234567890123456))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234))\nconsole.log(startsOneEnds(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345))\nconsole.log(startsOneEnds(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456))\nconsole.log(startsOneEnds(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = sum.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6 the output should be \"110\".\n      For N = 147, the product will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let product = 1;\n  let result = '';\n  while (N) {\n    product *= N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = product.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6 the output should be \"110\".\n      For N = 147, the product will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let product = 1;\n  let result = '';\n  while (N) {\n    product *= N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = product.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6 the output should be \"110\".\n      For N = 147, the product will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let product = 1;\n  let result = '';\n  while (N) {\n    product *= N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = product.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6 the output should be \"110\".\n      For N = 147, the product will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let product = 1;\n  let result = '';\n  while (N) {\n    product *= N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = product.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6 the output should be \"110\".\n      For N = 147, the product will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let product = 1;\n  let result = '';\n  while (N) {\n    product *= N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = product.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6 the output should be \"110\".\n      For N = 147, the product will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let product = 1;\n  let result = '';\n  while (N) {\n    product *= N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = product.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6 the output should be \"110\".\n      For N = 147, the product will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let product = 1;\n  let result = '';\n  while (N) {\n    product *= N % 2;\n    N = Math.floor(N / 2);\n  }\n  result = product.toString(2);\n  while (result.length < N) {\n    result += '0';\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total product of its digit in binary star.\n  \n  Example\n      For N = 1000, the product will be 1 the output should be \"1\".\n      For N = 150, the product will be 6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 5\n  */\nconst addOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6\n  */\nconst addEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 7\n  */\nconst addOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst addEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 9\n  */\nconst addOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst addEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 11\n  */\nconst addOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 12\n  */\nconst addEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 13\n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14\n  */\nconst addEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 15\n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 16\n  */\nconst addEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 17\n  */\nconst addOddEvenOddEvenOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 18\n  */\nconst addEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 19\n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 20\n  */\nconst addEvenOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the odd element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 21\n  */\nconst addOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] === '?') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] ==='') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   descending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] === '?') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] ==='') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value and \n   then reverse the string in descending order based on ascii value.\n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescReverse = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] === '?') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] ==='') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value and \n   then reverse the string in descending order based on ascii value.\n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescReverseDesc = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] === '?') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] ==='') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value and \n   then reverse the string in descending order based on ascii value.\n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescReverseDescReverse = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] === '?') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] ==='') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value and \n   then reverse the string in descending order based on ascii value.\n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescReverseDescReverseDesc = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] === '?') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else if (s[i] ==='') {\n      newStr += s.slice(i, i + 1);\n      i += 1;\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value and \n   then reverse the string in descending order based on ascii value.\n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescReverseDescReverseDescReverse = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!') {\n      newStr += s.slice(i, i + 1);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = [];\n  let columns = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    if (item === x) {\n      row.push(i);\n      columns.push(item);\n    }\n  }\n  row = row.sort((a, b) => a - b);\n  columns = columns.sort((a, b) => b - a);\n  return [...new Array(row.length).keys()].map((i) => {\n    return [columns[i], row[i]];\n  });\n};\n\n/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getColumn([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  getColumn([], 1) == []\n  getColumn([[], [1], [1, 2, 3]], 3) == [(2, 3), (3, 2)]\n  */\nconst getColumn = (lst, x) => {\n  let row = [];\n  let columns = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    if (item === x) {\n      row.push(i);\n      columns.push(item);\n    }\n  }\n  row = row.sort((a, b) => a - b);\n  columns = columns.sort((a, b) => b - a);\n  return [...new Array(row.length).keys()].map((i) => {\n    return [row[i], columns[i]];\n  });\n};\n\n/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiagonal = (lst, x) => {\n  let row = [];\n  let columns = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    if (item === x) {\n      row.push(i);\n      columns.push(item);\n    }\n  }\n  row = row.sort((a, b) => a - b);\n  columns = columns.sort((a, b) => b - a);\n  return [...new Array(row.length).keys()].map((i) => {\n    return [row[i], columns[i], row[i + row.length]];\n  });\n};\n\n/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiagonal = (lst, x) => {\n  let row = [];\n  let columns = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    if (item === x) {\n      row.push(i);\n      columns.push(item);\n    }\n  }\n  row = row.sort((a, b) => a - b);\n  columns = columns.sort((a, b) => b - a);\n  return [...new Array(row.length).keys()].map((i) => {\n    return [row[i], columns[i], row[i + row.length], row[i + row.length + row.length]];\n  });\n};\n\n/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiagonal = (lst, x) => {\n  let row = [];\n  let columns = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    if (item === x) {\n      row.push(i);\n      columns.push(item);\n    }\n  }\n  row = row.sort((a, b) => a - b);\n  columns = columns.sort((a, b) => b - a);\n  return [...new Array(row.length).keys()].map((i) => {\n    return [row[i], columns[i], row[i + row.length], row[i + row.length + row.length]];\n  });\n};\n\n/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const result = [];\n  const len = array.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    j = i;\n    while (j < len && array[j] < array[j + 1]) {\n      j++;\n    }\n    if (j - i > 1) {\n      k = j;\n      while (k < len && array[k] > array[k + 1]) {\n        k++;\n      }\n      if (k - j > 1) {\n        result.push(array[k]);\n      }\n    }\n    result.push(array[j]);\n    i = j;\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in descend order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [];\n  const len = array.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    j = i;\n    while (j < len && array[j] > array[j + 1]) {\n      j++;\n    }\n    if (j - i > 1) {\n      k = j;\n      while (k < len && array[k] < array[k + 1]) {\n        k++;\n      }\n      if (k - j > 1) {\n        result.push(array[k]);\n      }\n    }\n    result.push(array[j]);\n    i = j;\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [];\n  const len = array.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    j = i;\n    while (j < len && array[j] > array[j + 1]) {\n      j++;\n    }\n    if (j - i > 1) {\n      k = j;\n      while (k < len && array[k] < array[k + 1]) {\n        k++;\n      }\n      if (k - j > 1) {\n        result.push(array[k]);\n      }\n    }\n    result.push(array[j]);\n    i = j;\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [];\n  const len = array.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    j = i;\n    while (j < len && array[j] > array[j + 1]) {\n      j++;\n    }\n    if (j - i > 1) {\n      k = j;\n      while (k < len && array[k] < array[k + 1]) {\n        k++;\n      }\n      if (k - j > 1) {\n        result.push(array[k]);\n      }\n    }\n    result.push(array[j]);\n    i = j;\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [];\n  const len = array.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    j = i;\n    while (j < len && array[j] > array[j + 1]) {\n      j++;\n    }\n    if (j - i > 1) {\n      k = j;\n      while (k < len && array[k] < array[k + 1]) {\n        k++;\n      }\n      if (k - j > 1) {\n        result.push(array[k]);\n      }\n    }\n    result.push(array[j]);\n    i = j;\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [];\n  const len = array.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    j = i;\n    while (j < len && array[j] > array[j + 1]) {\n      j++;\n    }\n    if (j - i > 1) {\n      k = j;\n      while (k < len && array[k] < array[k + 1]) {\n        k++;\n      }\n      if (k - j > 1) {\n        result.push(array[k]);\n      }\n    }\n    result.push(array[j]);\n    i = j;\n  }\n  return result;\n};\n\n/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = alphabet.split('')\n  let newAlphabet2 = alphabet.split('')\n  newAlphabet2.reverse()\n  newAlphabet2.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet[index] = alphabet[newAlphabet2.length - index - 1]\n    }\n  })\n  let newAlphabet3 = newAlphabet.join('')\n  let newAlphabet4 = newAlphabet3.split('')\n  newAlphabet4.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet4[index] = alphabet[newAlphabet4.length - index - 1]\n    }\n  })\n  let newAlphabet5 = newAlphabet4.join('')\n  let newAlphabet6 = newAlphabet5.split('')\n  newAlphabet6.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet6[index] = alphabet[newAlphabet6.length - index - 1]\n    }\n  })\n  let newAlphabet7 = newAlphabet6.join('')\n  let newAlphabet8 = newAlphabet7.split('')\n  newAlphabet8.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet8[index] = alphabet[newAlphabet8.length - index - 1]\n    }\n  })\n  let newAlphabet9 = newAlphabet8.join('')\n  let newAlphabet10 = newAlphabet9.split('')\n  newAlphabet10.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet10[index] = alphabet[newAlphabet10.length - index - 1]\n    }\n  })\n  let newAlphabet11 = newAlphabet10.join('')\n  let newAlphabet12 = newAlphabet11.split('')\n  newAlphabet12.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet12[index] = alphabet[newAlphabet12.length - index - 1]\n    }\n  })\n  let newAlphabet13 = newAlphabet12.join('')\n  let newAlphabet14 = newAlphabet13.split('')\n  newAlphabet14.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet14[index] = alphabet[newAlphabet14.length - index - 1]\n    }\n  })\n  let newAlphabet15 = newAlphabet14.join('')\n  let newAlphabet16 = newAlphabet15.split('')\n  newAlphabet16.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet16[index] = alphabet[newAlphabet16.length - index - 1]\n    }\n  })\n  let newAlphabet17 = newAlphabet16.join('')\n  let newAlphabet18 = newAlphabet17.split('')\n  newAlphabet18.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet18[index] = alphabet[newAlphabet18.length - index - 1]\n    }\n  })\n  let newAlphabet19 = newAlphabet18.join('')\n  let newAlphabet20 = newAlphabet19.split('')\n  newAlphabet20.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet20[index] = alphabet[newAlphabet20.length - index - 1]\n    }\n  })\n  let newAlphabet21 = newAlphabet20.join('')\n  let newAlphabet22 = newAlphabet21.split('')\n  newAlphabet22.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet22[index] = alphabet[newAlphabet22.length - index - 1]\n    }\n  })\n  let newAlphabet23 = newAlphabet22.join('')\n  let newAlphabet24 = newAlphabet23.split('')\n  newAlphabet24.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet24[index] = alphabet[newAlphabet24.length - index - 1]\n    }\n  })\n  let newAlphabet25 = newAlphabet24.join('')\n  let newAlphabet26 = newAlphabet25.split('')\n  newAlphabet26.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet26[index] = alphabet[newAlphabet26.length - index - 1]\n    }\n  })\n  let newAlphabet27 = newAlphabet26.join('')\n  let newAlphabet28 = newAlphabet27.split('')\n  newAlphabet28.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet28[index] = alphabet[newAlphabet28.length - index - 1]\n    }\n  })\n  let newAlphabet29 = newAlphabet28.join('')\n  let newAlphabet30 = newAlphabet29.split('')\n  newAlphabet30.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet30[index] = alphabet[newAlphabet30.length - index - 1]\n    }\n  })\n  let newAlphabet31 = newAlphabet30.join('')\n  let newAlphabet32 = newAlphabet31.split('')\n  newAlphabet32.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet32[index] = alphabet[newAlphabet32.length - index - 1]\n    }\n  })\n  let newAlphabet33 = newAlphabet32.join('')\n  let newAlphabet34 = newAlphabet33.split('')\n  newAlphabet34.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet34[index] = alphabet[newAlphabet34.length - index - 1]\n    }\n  })\n  let newAlphabet35 = newAlphabet34.join('')\n  let newAlphabet36 = newAlphabet35.split('')\n  newAlphabet36.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet36[index] = alphabet[newAlphabet36.length - index - 1]\n    }\n  })\n  let newAlphabet37 = newAlphabet36.join('')\n  let newAlphabet38 = newAlphabet37.split('')\n  newAlphabet38.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet38[index] = alphabet[newAlphabet38.length - index - 1]\n    }\n  })\n  let newAlphabet39 = newAlphabet38.join('')\n  let newAlphabet40 = newAlphabet39.split('')\n  newAlphabet40.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet40[index] = alphabet[newAlphabet40.length - index - 1]\n    }\n  })\n  let newAlphabet41 = newAlphabet40.join('')\n  let newAlphabet42 = newAlphabet41.split('')\n  newAlphabet42.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet42[index] = alphabet[newAlphabet42.length - index - 1]\n    }\n  })\n  let newAlphabet43 = newAlphabet42.join('')\n  let newAlphabet44 = newAlphabet43.split('')\n  newAlphabet44.forEach((letter, index) => {\n    if (letter === alphabet[index]) {\n      newAlphabet44[index] = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let currentMax = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n      currentMax = numbers[i];\n    }\n    result.push(currentMax);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimal element determine until establish here and now \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let currentMin = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < currentMin) {\n      currentMin = numbers[i];\n    }\n    result.push(currentMin);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element determine until establish here and now \n   in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n    currentCount++;\n  }\n  const average = currentSum / currentCount;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element determine until establish here and now \n   in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element determine until establish here and now \n   in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntroy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntropy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntropy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntropy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntropy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntropy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntropy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling entropy element determine until establish here and now \n   in the sequence.\n  >>> rollingEntropy([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingEntropy = (numbers) => {\n  const result = [];\n  let currentSum = 0;\n  let currentCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += Math.pow(numbers[i] - average, 2);\n    currentCount++;\n  }\n  const average = Math.sqrt(currentSum / currentCount);\n  for (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   if(lst.length < 2) return null;\n   let minIndex = lst.findIndex((el, i) => el < lst[minIndex]);\n   return minIndex < lst.length - 1? lst[minIndex + 1] : null;\n };\n*/\nconst nextSmallest = (lst) => {\n  if(lst.length < 2) return null;\n  let minIndex = lst.findIndex((el, i) => el < lst[minIndex]);\n  return minIndex < lst.length - 1? lst[minIndex + 1] : null;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5 ]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2 ]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1 ]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction nextSmallest(arr) {\n  var smallest = arr[0];\n  var index = arr.indexOf(smallest);\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }\n  \n  if(index > 0) {\n    smallest = arr[index - 1];\n    index = arr.indexOf(smallest);\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split(' ').forEach((word) => {\n    if (word.startsWith('I')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z\n  return sum === (x + y + z) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n};\n\n/*\n  Write a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(dict[keys[i]].toLowerCase()!== dict[keys[i]]){\n        return false;\n      }\n    }\n    else{\n      if(dict[keys[i]]!== dict[keys[i]].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(dict[keys[i]].toLowerCase()!== dict[keys[i]]){\n        return false;\n      }\n    }\n    else{\n      if(dict[keys[i]]!== dict[keys[i]].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(dict[keys[i]].toLowerCase()!== dict[keys[i]]){\n        return false;\n      }\n    }\n    else{\n      if(dict[keys[i]]!== dict[keys[i]].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(dict[keys[i]].toLowerCase()!== dict[keys[i]]){\n        return false;\n      }\n    }\n    else{\n      if(dict[keys[i]]!== dict[keys[i]].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(dict[keys[i]].toLowerCase()!== dict[keys[i]]){\n        return false;\n      }\n    }\n    else{\n      if(dict[keys[i]]!== dict[keys[i]].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(dict[keys[i]].toLowerCase()!== dict[keys[i]]){\n        return false;\n      }\n    }\n    else{\n      if(dict[keys[i]]!== dict[keys[i]].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 2; i--) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the product of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the sum of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the product of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the sum of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the product of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the sum of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the product of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the sum of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the product of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the sum of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the product of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and return \n   the sum of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  let product = 0;\n  while (b) {\n    product = product * 10 + ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'B' || s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'C' || s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'D' || s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'E' || s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'F' || s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'G' || s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'H' || s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'I' || s[i] === 'i') {\n      count += 1;\n    } else if (s[i] === 'J' || s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'K' || s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'L' || s[i] === 'l') {\n      count += 1;\n    } else if (s[i] === 'M' || s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'N' || s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'O' || s[i] === 'o') {\n      count += 1;\n    } else if (s[i] === 'P' || s[i] === 'p') {\n      count += 1;\n    } else if (s[i] === 'Q' || s[i] === 'q') {\n      count += 1;\n    } else if (s[i] === 'R' || s[i] === 'r') {\n      count += 1;\n    } else if (s[i] === 'S' || s[i] ==='s') {\n      count += 1;\n    } else if (s[i] === 'T' || s[i] === 't') {\n      count += 1;\n    } else if (s[i] === 'U' || s[i] === 'u') {\n      count += 1;\n    } else if (s[i] === 'V' || s[i] === 'v') {\n      count += 1;\n    } else if (s[i] === 'W' || s[i] === 'w') {\n      count += 1;\n    } else if (s[i] === 'X' || s[i] === 'x') {\n      count += 1;\n    } else if (s[i] === 'Y' || s[i] === 'y') {\n      count += 1;\n    } else if (s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'B' || s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'C' || s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'D' || s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'E' || s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'F' || s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'G' || s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'H' || s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'I' || s[i] === 'i') {\n      count += 1;\n    } else if (s[i] === 'J' || s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'K' || s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'L' || s[i] === 'l') {\n      count += 1;\n    } else if (s[i] === 'M' || s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'N' || s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'O' || s[i] === 'o') {\n      count += 1;\n    } else if (s[i] === 'P' || s[i] === 'p') {\n      count += 1;\n    } else if (s[i] === 'Q' || s[i] === 'q') {\n      count += 1;\n    } else if (s[i] === 'R' || s[i] === 'r') {\n      count += 1;\n    } else if (s[i] === 'S' || s[i] ==='s') {\n      count += 1;\n    } else if (s[i] === 'T' || s[i] === 't') {\n      count += 1;\n    } else if (s[i] === 'U' || s[i] === 'u') {\n      count += 1;\n    } else if (s[i] === 'V' || s[i] === 'v') {\n      count += 1;\n    } else if (s[i] === 'W' || s[i] === 'w') {\n      count += 1;\n    } else if (s[i] === 'X' || s[i] === 'x') {\n      count += 1;\n    } else if (s[i] === 'Y' || s[i] === 'y') {\n      count += 1;\n    } else if (s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'C' || s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'D' || s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'F' || s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'G' || s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'H' || s[i] === 'h') {\n      count += 1;\n    } else if (s[i] === 'J' || s[i] === 'j') {\n      count += 1;\n    } else if (s[i] === 'K' || s[i] === 'k') {\n      count += 1;\n    } else if (s[i] === 'M' || s[i] ==='m') {\n      count += 1;\n    } else if (s[i] === 'N' || s[i] === 'n') {\n      count += 1;\n    } else if (s[i] === 'P' || s[i] === 'p') {\n      count += 1;\n    } else if (s[i] === 'Q' || s[i] === 'q') {\n      count += 1;\n    } else if (s[i] === 'R' || s[i] === 'r') {\n      count += 1;\n    } else if (s[i] === 'S' || s[i] ==='s') {\n      count += 1;\n    } else if (s[i] === 'T' || s[i] === 't') {\n      count += 1;\n    } else if (s[i] === 'V' || s[i] === 'v') {\n      count += 1;\n    } else if (s[i] === 'W' || s[i] === 'w') {\n      count += 1;\n    } else if (s[i] === 'X' || s[i] === 'x') {\n      count += 1;\n    } else if (s[i] === 'Y' || s[i] === 'y') {\n      count += 1;\n    } else if (s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    } else if (s[i] === 'B' || s[i] === 'b') {\n      count += 1;\n    } else if (s[i] === 'C' || s[i] === 'c') {\n      count += 1;\n    } else if (s[i] === 'D' || s[i] === 'd') {\n      count += 1;\n    } else if (s[i] === 'E' || s[i] === 'e') {\n      count += 1;\n    } else if (s[i] === 'F' || s[i] === 'f') {\n      count += 1;\n    } else if (s[i] === 'G' || s[i] === 'g') {\n      count += 1;\n    } else if (s[i] === 'H' || s[i] ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest;\n  let diff;\n  let diffAbs;\n  let diffAbsMax;\n  let diffAbsMaxIndex;\n  let diffAbsMaxValue;\n  let diffAbsMaxValueIndex;\n  let diffAbsMaxValueValue;\n  let diffAbsMaxValueValueIndex;\n  let diffAbsMaxValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let diffAbsMaxValueValueValueValue;\n  let diffAbsMaxValueValueValueIndex;\n  let ", "passed": 0, "run_status": 2}
