{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const currentElement = numbers[i];\n    const nextElement = numbers[i + 1];\n    if (Math.abs(currentElement - nextElement) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_groups = [];\n  let paren_group_string = '';\n  let paren_group_open = false;\n  let paren_group_closed = false;\n  let paren_group_open_string = '';\n  let paren_group_close_string = '';\n  let paren_group_open_string_count = 0;\n  let paren_group_close_string_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (paren_group_open) {\n        paren_group_open_string = paren_group_open_string + char;\n        paren_group_open_string_count++;\n      } else {\n        paren_group_open = true;\n        paren_group_open_string = char;\n        paren_group_open_string_count = 1;\n      }\n    } else if (char === ')') {\n      if (paren_group_closed) {\n        paren_group_close_string = paren_group_close_string + char;\n        paren_group_close_string_count++;\n      } else {\n        paren_group_closed = true;\n        paren_group_close_string = char;\n        paren_group_close_string_count = 1;\n      }\n    } else if (char ==='') {\n      if (paren_group_open_string_count) {\n        paren_group_open_string_count--;\n      }\n      if (paren_group_close_string_count) {\n        paren_group_close_string_count--;\n      }\n    } else {\n      if (paren_group_open_string_count) {\n        paren_group_open_string_count--;\n      }\n      if (paren_group_close_string_count) {\n        paren_group_close_string_count--;\n      }\n      paren_group_string = paren_group_string + char;\n    }\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    paren_group_open_string_count--;\n  }\n  if (paren_group_close_string_count) {\n    paren_group_close_string_count--;\n  }\n  if (paren_group_open_string_count) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const longestPalindrome = string.split('')\n   .slice(0, string.length)\n   .reverse()\n   .join('');\n  return `${longestPalindrome}${reversedString}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reversedString = string.split('').reverse().join('');\n  const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((i % 2 === 0)? (i + 1) : (i + 1));\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stone", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order.\n  \n  For example:\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b).sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and in ascending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a).sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b).sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and in ascending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a).sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b).sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and in ascending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a).sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b).sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and in ascending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a).sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b).sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and in ascending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a).sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b).sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and in ascending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a).sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => a - b).sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and in ascending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n  numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  numbers([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n  */\nconst numbers = (arr) => {\n  return arr.sort((a, b) => b - a).sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and in descending order.\n  \n  For example:\n  numbers([5, 4, 3, 2, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n// Write a function that returns the factorial of a number\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorial = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorial(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n  return num * factorialRecursion(num - 1);\n};\n\n// Write a function that returns the factorial of a number using recursion\n/*\n  Factorial of a number is the product of all positive integers less than or equal to that number. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 720.\n*/\nconst factorialRecursion = (num) => {\n  if (num === 0) {\n    return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const result = (n - m) / 2 + m;\n  return result > n? -1 : result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of all numbers in the array.\n  Example:\n  sumOfArray([1, 2, 3]) => 6\n  sumOfArray([10, 20, 30]) => 60\n  sumOfArray([-1, -2, -3]) => -3\n*/\nconst sumOfArray = arr => {\n  return arr.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the average of all numbers in the array.\n  Example:\n  averageOfArray([1, 2, 3]) => 1.5\n  averageOfArray([10, 20, 30]) => 20\n  averageOfArray([-1, -2, -3]) => -1\n*/\nconst averageOfArray = arr => {\n  return sumOfArray(arr) / arr.length;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the median of all numbers in the array.\n  Example:\n  medianOfArray([1, 2, 3]) => 2\n  medianOfArray([10, 20, 30]) => 20\n  medianOfArray([-1, -2, -3]) => -1\n*/\nconst medianOfArray = arr => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArr.length / 2);\n  return sortedArr[middleIndex];\n};\n\n/*\n  Write a function that takes an array of numbers and returns the mode of all numbers in the array.\n  Example:\n  modeOfArray([1, 2, 3]) => 1\n  modeOfArray([10, 20, 30]) => 20\n  modeOfArray([-1, -2, -3]) => -1\n*/\nconst modeOfArray = arr => {\n  const counts = {};\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (counts[num] === undefined) {\n      counts[num] = 1;\n    } else {\n      counts[num] += 1;\n    }\n  }\n  const mode = [];\n  for (let num in counts) {\n    if (counts[num] === arr.length) {\n      mode.push(num);\n    }\n  }\n  return mode;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the standard deviation of all numbers in the array.\n  Example:\n  standardDeviationOfArray([1, 2, 3]) => 1\n  standardDeviationOfArray([10, 20, 30]) => 5\n  standardDeviationOfArray([-1, -2, -3]) => -1\n*/\nconst standardDeviationOfArray = arr => {\n  const average = averageOfArray(arr);\n  const variance = sumOfArray(arr.map(val => (val - average) ** 2)) / arr.length;\n  return Math.sqrt(variance);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the variance of numbers in the array.\n  Example:\n  varianceOfArray([1, 2, 3]) => 1\n  varianceOfArray([10, 20, 30]) => 20\n  varianceOfArray([-1, -2, -3]) => -1\n*/\nconst varianceOfArray = arr => {\n  const average = averageOfArray(arr);\n  const variance = sumOfArray(arr.map(val => (val - average) ** 2)) / arr.length;\n  return variance;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squares of numbers in the array.\n  Example:\n  sumOfSquaresArray([1, 2, 3]) => 6\n  sumOfSquaresArray([10, 20, 30]) => 1440\n  sumOfSquaresArray([-1, -2, -3]) => -6\n*/\nconst sumOfSquaresArray = arr => {\n  return arr.map(val => val * val).reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the product of all numbers in the array.\n  Example:\n  productOfArray([1, 2, 3]) => 6\n  productOfArray([10, 20, 30]) => 100\n  productOfArray([-1, -2, -3]) => -3\n*/\nconst productOfArray = arr => {\n  return arr.reduce((acc, val) => acc * val, 1);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that have even indexes.\n  Example:\n  evenIndexesOfArray([1, 2, 3]) => [1, 3]\n  evenIndexesOfArray([10, 20, 30]) => [10, 20]\n  evenIndexesOfArray([-1, -2, -3]) => []\n*/\nconst evenIndexesOfArray = arr => {\n  const evenIndexes = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(arr[i]);\n    }\n  }\n  return evenIndexes;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that have odd indexes.\n  Example:\n  oddIndexesOfArray([1, 2, 3]) => [1, 3]\n  oddIndexesOfArray([10, 20, 30]) => [10, 30]\n  oddIndexesOfArray([-1, -2, -3]) => []\n*/\nconst oddIndexesOfArray = arr => {\n  const oddIndexes = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2!== 0) {\n      oddIndexes.push(arr[i]);\n    }\n  }\n  return oddIndexes;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that have even or odd indexes.\n  Example:\n  evenOddIndexesOfArray([1, 2, 3]) => [1, 3]\n  evenOddIndexesOfArray([10, 20, 30]) => [10, 20]\n  evenOddIndexesOfArray([-1, -2, -3]) => []\n*/\nconst evenOddIndexesOfArray = arr => {\n  const evenIndexes = evenIndexesOfArray(arr);\n  const oddIndexes = oddIndexesOfArray(arr);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that have even or odd indexes.\n  Example:\n  evenOddIndexesOfArray([1, 2, 3]) => [1, 3]\n  evenOddIndexesOfArray([10, 20, 30]) => [10, 20]\n  evenOddIndexesOfArray([-1, -2, -3]) => []\n*/\nconst evenOddIndexesOfArray = arr => {\n  const evenIndexes = evenIndexesOfArray(arr);\n  const oddIndexes = oddIndexesOfArray(arr);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that have even or odd indexes.\n  Example:\n  evenOddIndexesOfArray([1, 2, 3]) => [1, 3]\n  evenOddIndexesOfArray([10, 20, 30]) => [10, 20]\n  evenOddIndexesOfArray([-1, -2, -3]) => []\n*/\nconst evenOddIndexesOfArray = arr => {\n  const evenIndexes = evenIndexesOfArray(arr);\n  const oddIndexes = oddIndexesOfArray(arr);\n  return evenIndexes.concat(oddIndexes);\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 3. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy3 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 3 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 7. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy7 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 7 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 11. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy11 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 11 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 13. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy13 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 13 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 17. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy17 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 17 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 19. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy19 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 19 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 23. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy23 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 23 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 29. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy29 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || x[i] % 2!== 0 && x[i] % 29 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit or odd digit and are divisible by 31. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDivisibleBy31 = (x) => {\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 || ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1) {\n    return ['One'];\n  }\n  if (len === 2) {\n    return ['One', 'Two'];\n  }\n  if (len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if (len === 4) {\n    return ['One', 'Two', 'Three', 'Four'];\n  }\n  if (len === 5) {\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n  }\n  if (len === 6) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n  }\n  if (len === 7) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven'];\n  }\n  if (len === 8) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight'];\n  }\n  if (len === 9) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight', 'Nine'];\n  }\n};\n\nconst byLengthReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1) {\n    return ['One'];\n  }\n  if (len === 2) {\n    return ['One', 'Two'];\n  }\n  if (len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if (len === 4) {\n    return ['One', 'Two', 'Three', 'Four'];\n  }\n  if (len === 5) {\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n  }\n  if (len === 6) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n  }\n  if (len === 7) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven'];\n  }\n  if (len === 8) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight'];\n  }\n  if (len === 9) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight', 'Nine'];\n  }\n};\n\nconst byLengthSort = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1) {\n    return ['One'];\n  }\n  if (len === 2) {\n    return ['One', 'Two'];\n  }\n  if (len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if (len === 4) {\n    return ['One', 'Two', 'Three', 'Four'];\n  }\n  if (len === 5) {\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n  }\n  if (len === 6) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n  }\n  if (len === 7) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven'];\n  }\n  if (len === 8) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight'];\n  }\n  if (len === 9) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight', 'Nine'];\n  }\n};\n\nconst byLengthSortReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1) {\n    return ['One'];\n  }\n  if (len === 2) {\n    return ['One', 'Two'];\n  }\n  if (len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if (len === 4) {\n    return ['One', 'Two', 'Three', 'Four'];\n  }\n  if (len === 5) {\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n  }\n  if (len === 6) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n  }\n  if (len === 7) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven'];\n  }\n  if (len === 8) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight'];\n  }\n  if (len === 9) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight', 'Nine'];\n  }\n};\n\nconst byLengthSortSort = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1) {\n    return ['One'];\n  }\n  if (len === 2) {\n    return ['One', 'Two'];\n  }\n  if (len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if (len === 4) {\n    return ['One', 'Two', 'Three', 'Four'];\n  }\n  if (len === 5) {\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n  }\n  if (len === 6) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n  }\n  if (len === 7) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven'];\n  }\n  if (len === 8) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight'];\n  }\n  if (len === 9) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight', 'Nine'];\n  }\n};\n\nconst byLengthSortSortReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1) {\n    return ['One'];\n  }\n  if (len === 2) {\n    return ['One', 'Two'];\n  }\n  if (len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if (len === 4) {\n    return ['One', 'Two', 'Three', 'Four'];\n  }\n  if (len === 5) {\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n  }\n  if (len === 6) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n  }\n  if (len === 7) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven'];\n  }\n  if (len === 8) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight'];\n  }\n  if (len === 9) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Seven', 'Eight', 'Nine'];\n  }\n};\n\nconst byLengthSortSortSort = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1) {\n    return ['One'];\n  }\n  if (len === 2) {\n    return ['One', 'Two'];\n  }\n  if (len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function g, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function h, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 9, 27, 81]\n  */\nconst h = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function i, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 3, 9, 27, 81]\n  */\nconst i = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function j, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 9, 27, 81]\n  */\nconst j = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function k, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 9, 27, 81]\n  */\nconst k = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function l, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 3, 9, 27, 81]\n  */\nconst l = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function m, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 9, 27, 81]\n  */\nconst m = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function n, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 3, 9, 27, 81]\n  */\nconst n = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function o, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 9, 27, 81]\n  */\nconst o = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function p, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 9, 27, 81]\n  */\nconst p = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement function q, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 3, 9, 27, 81]\n  */\nconst q = (n) => {\n  let factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorial", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n                  3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n            3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:\n      Given binary tree {3,9,20,#,#,15,7},\n      3\n         / \\\n        9  20\n       /   /\n      15  7\n      return\n       [\n         [15,7],\n         [9,20],\n         [3]\n       ]\n*/\nconst levelOrder = (root) => {\n  const queue = [];\n  const result = [];\n  queue.push(root);\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n    result.push(node.val);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n  For example:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function sumDigits that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits([-1, 11, -11]) == 1 + 11 + 11 = 100.\n  >>> sumDigits([]) == 0\n  >>> sumDigits([-1, 11, -11]) == 100\n  */\nconst sumDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits2 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits2([]) == 0.\n  >>> sumDigits2([]) == 0\n  >>> sumDigits2([-1, 11, -11]) == 100\n  */\nconst sumDigits2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits3 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits3([]) == 0.\n  >>> sumDigits3([]) == 0\n  >>> sumDigits3([-1, 11, -11]) == 100\n  */\nconst sumDigits3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits4 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits4([]) == 0.\n  >>> sumDigits4([]) == 0\n  >>> sumDigits4([-1, 11, -11]) == 100\n  */\nconst sumDigits4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits5 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits5([]) == 0.\n  >>> sumDigits5([]) == 0\n  >>> sumDigits5([-1, 11, -11]) == 100\n  */\nconst sumDigits5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits6 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits6([]) == 0.\n  >>> sumDigits6([]) == 0\n  >>> sumDigits6([-1, 11, -11]) == 100\n  */\nconst sumDigits6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits7 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits7([]) == 0.\n  >>> sumDigits7([]) == 0\n  >>> sumDigits7([-1, 11, -11]) == 100\n  */\nconst sumDigits7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits8 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits8([]) == 0.\n  >>> sumDigits8([]) == 0\n  >>> sumDigits8([-1, 11, -11]) == 100\n  */\nconst sumDigits8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits9 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits9([]) == 0.\n  >>> sumDigits9([]) == 0\n  >>> sumDigits9([-1, 11, -11]) == 100\n  */\nconst sumDigits9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits10 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits10([]) == 0.\n  >>> sumDigits10([]) == 0\n  >>> sumDigits10([-1, 11, -11]) == 100\n  */\nconst sumDigits10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits11 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits11([]) == 0.\n  >>> sumDigits11([]) == 0\n  >>> sumDigits11([-1, 11, -11]) == 100\n  */\nconst sumDigits11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits12 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits12([]) == 0.\n  >>> sumDigits12([]) == 0\n  >>> sumDigits12([-1, 11, -11]) == 100\n  */\nconst sumDigits12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits13 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits13([]) == 0.\n  >>> sumDigits13([]) == 0\n  >>> sumDigits13([-1, 11, -11]) == 100\n  */\nconst sumDigits13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits14 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits14([]) == 0.\n  >>> sumDigits14([]) == 0\n  >>> sumDigits14([-1, 11, -11]) == 100\n  */\nconst sumDigits14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits15 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits15([]) == 0.\n  >>> sumDigits15([]) == 0\n  >>> sumDigits15([-1, 11, -11]) == 100\n  */\nconst sumDigits15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits16 that takes an array of integers and returns the sum of the digits in each number. For example, sumDigits16([]) == 0.\n  >>> sumDigits16([]) == 0\n  >>> sumDigits16", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let temp;\n  \n  for(let i = 0; i < n; i++) {\n    temp = arr[i];\n    arr[i] = arr[n-1];\n    arr[n-1] = temp;\n    n--;\n  }\n  \n  return true;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted2 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted3 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted4 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted5 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted6 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted7 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted8 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted9 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted10 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted11 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted12 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted13 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted14 = (arr) => {\n  let n = arr.length;\n  \n  for(let i = 1; i < n; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that returns true if a given array is sorted in non-decreasing\n  order else return false.\n  \n  Note: The given array is guaranteed to have unique elements.\n*/\nconst isSorted15 = (arr) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/**\n * Returns the number of decimal places used to represent a number\n * when converting to base 10.\n *\n * @param {number} num\n * @returns {number}\n */\nconst decimalPlaces = num => {\n  let count = 0;\n  while (num >= 10) {\n    num = num / 10;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base 10.\n *\n * @param {number} num\n * @returns {string}\n */\nconst numberToBase10 = num => {\n  const places = decimalPlaces(num);\n  const result = num.toString(10);\n  return result.length > places? result.slice(0, places) : result;\n};\n\n/**\n * Converts a number to a string in base ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n}\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMin = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  let min = Infinity\n  let minLetter = ''\n  for (let letter in histogram) {\n    if (histogram[letter] < min) {\n      min = histogram[letter]\n      minLetter = letter\n    }\n  }\n  return {'letter': minLetter, 'number': min}\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMax = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  let max = -Infinity\n  let maxLetter = ''\n  for (let letter in histogram) {\n    if (histogram[letter] > max) {\n      max = histogram[letter]\n      maxLetter = letter\n    }\n  }\n  return {'letter': maxLetter, 'number': max}\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramAvg = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  let sum = 0\n  let sumLetter = ''\n  for (let letter in histogram) {\n    sum += histogram[letter]\n    sumLetter = letter\n  }\n  let avg = sum / letters.length\n  return {'letter': sumLetter, 'number': avg}\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMedian = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  let letterCount = 0\n  let letterCountLetter = ''\n  let letterCountNumber = 0\n  for (let letter in histogram) {\n    letterCount += histogram[letter]\n    letterCountLetter = letter\n    letterCountNumber = histogram[letter]\n  }\n  let median = letterCount / letters.length\n  return {'letter': letterCountLetter, 'number': median}\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMode = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  let modeCount = 0\n  let modeCountLetter = ''\n  let modeCountNumber = 0\n  let modeLetter = ''\n  let modeNumber = 0\n  let modeLetterCount = 0\n  let modeNumberCount = 0\n  for (let letter in histogram) {\n    modeCount += histogram[letter]\n    if (histogram[letter] > modeCount) {\n      modeCount = histogram[letter]\n      modeLetter = letter\n      modeNumber = histogram[letter]\n    }\n    if (histogram[letter] == modeCount) {\n      modeLetterCount += histogram[letter]\n    }\n    if (histogram[letter] < modeCount) {\n      modeCount = histogram[letter]\n      modeNumberCount = histogram[letter]\n      modeLetter = letter\n      modeNumber = histogram[letter]\n    }\n  }\n  return {'letter': modeLetter, 'number': modeNumber}\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramVariance = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  let variance = 0\n  let varianceLetter = ''\n  let varianceNumber = 0\n  let varianceLetterCount = 0\n  let varianceNumber", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let result = '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n      isPalindrome = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete8 = (s, c) => {\n  let result = '';\n  let isPalindro", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        oddCount++;\n      }\n    }\n    oddCountArr.push(`${oddCount} odd elements in the str${i} of ${lst[i]}`);\n  }\n  return oddCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even elements in the string i of input,\" with all i's being replaced by the number of even digits in the i'th string of input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} even elements in the str${i} of ${lst[i]}`);\n  }\n  return evenCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddEvenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        oddEvenCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        oddEvenCount++;\n      }\n    }\n    oddEvenCountArr.push(`${oddEvenCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return oddEvenCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddEvenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        oddEvenCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        oddEvenCount++;\n      }\n    }\n    oddEvenCountArr.push(`${oddEvenCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return oddEvenCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddEvenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        oddEvenCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        oddEvenCount++;\n      }\n    }\n    oddEvenCountArr.push(`${oddEvenCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return oddEvenCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddEvenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        oddEvenCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        oddEvenCount++;\n      }\n    }\n    oddEvenCountArr.push(`${oddEvenCount} even and odd elements in the str${i} of ${lst[i]}`);\n  }\n  return oddEvenCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even and odd elements in the string i of input,\" with all i's being replaced by the number of even and odd digits in the i'th string of input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, val) => acc + val, 0);\n    if (currentSum < minSum) {\n      minSum = currentSum;\n      minSumIndex = i;\n    }\n  }\n  return nums[minSumIndex];\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [3, 4, 5]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-3, -4, -5]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the product of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [24, 12, 6]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-24, -12, -6]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc * val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [3, 4, 5]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-3, -4, -5]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc + val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the product of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [24, 12, 6]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-24, -12, -6]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc * val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [3, 4, 5]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-3, -4, -5]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc + val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the product of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [24, 12, 6]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-24, -12, -6]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc * val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [3, 4, 5]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-3, -4, -5]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc + val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the product of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [24, 12, 6]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-24, -12, -6]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc * val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [3, 4, 5]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-3, -4, -5]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc + val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the product of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [24, 12, 6]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-24, -12, -6]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc * val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [3, 4, 5]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-3, -4, -5]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc + val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the product of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [24, 12, 6]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-24, -12, -6]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc * val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [3, 4, 5]\n  arrayExceptAtIndex([-1, -2, -3, 4, -1, -2, -3, 4], 0) == [-3, -4, -5]\n  */\nconst arrayExceptAtIndex = (nums, index) => {\n  return nums.filter((_, i) => i!== index).reduce((acc, val) => acc + val);\n};\n\n/*\n  Given an array of integers, return a new array where each element is the product of the original array except for the element at that index.\n  Example\n  arrayExceptAtIndex([2, 3, 4, 1, 2, 4], 0) == [24, 12, 6]\n  arrayExceptAtIndex([-1, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  bucket in a well. \n  You want to empty the bucket and return the amount of water you need to empty \n  the bucket.\n  \n  Example 1:\n      Input: [1,0,1,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0]\n      Output: 1\n\n  Example 3:\n      Input: [1,0,0,1]\n      Output: 0\n\n  Constraints:\n      * 0 <= amount <= 10^9\n      * 0 <= wells[i] <= 10^9\n      * wells.length == amount.length\n      * wells[i] == amount[i]\n*/\nconst maxEmpty = (wells, amount) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 0) {\n      count += amount[i];\n    }\n  }\n  return count;\n};\n\nexport { maxEmpty };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  bucket in a well. \n  You want to empty the bucket and return the amount of water you need to empty \n  the bucket.\n  \n  Example 1:\n      Input: [1,0,1,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0]\n      Output: 1\n\n  Example 3:\n      Input: [1,0,0,1]\n      Output: 0\n\n  Constraints:\n      * 0 <= amount <= 10^9\n      * 0 <= wells[i] <= 10^9\n      * wells.length == amount.length\n      * wells[i] == amount[i]\n*/\nconst maxEmpty = (wells, amount) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 0) {\n      count += amount[i];\n    }\n  }\n  return count;\n};\n\nexport { maxEmpty };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  bucket in a well. \n  You want to empty the bucket and return the amount of water you need to empty \n  the bucket.\n  \n  Example 1:\n      Input: [1,0,1,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0]\n      Output: 1\n\n  Example 3:\n      Input: [1,0,0,1]\n      Output: 0\n\n  Constraints:\n      * 0 <= amount <= 10^9\n      * 0 <= wells[i] <= 10^9\n      * wells.length == amount.length\n      * wells[i] == amount[i]\n*/\nconst maxEmpty = (wells, amount) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 0) {\n      count += amount[i];\n    }\n  }\n  return count;\n};\n\nexport { maxEmpty };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  bucket in a well. \n  You want to empty the bucket and return the amount of water you need to empty \n  the bucket.\n  \n  Example 1:\n      Input: [1,0,1,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0]\n      Output: 1\n\n  Example 3:\n      Input: [1,0,0,1]\n      Output: 0\n\n  Constraints:\n      * 0 <= amount <= 10^9\n      * 0 <= wells[i] <= 10^9\n      * wells.length == amount.length\n      * wells[i] == amount[i]\n*/\nconst maxEmpty = (wells, amount) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 0) {\n      count += amount[i];\n    }\n  }\n  return count;\n};\n\nexport { maxEmpty };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  bucket in a well. \n  You want to empty the bucket and return the amount of water you need to empty \n  the bucket.\n  \n  Example 1:\n      Input: [1,0,1,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0]\n      Output: 1\n\n  Example 3:\n      Input: [1,0,0,1]\n      Output: 0\n\n  Constraints:\n      * 0 <= amount <= 10^9\n      * 0 <= wells[i] <= 10^9\n      * wells.length == amount.length\n      * wells[i] == amount[i]\n*/\nconst maxEmpty = (wells, amount) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 0) {\n      count += amount[i];\n    }\n  }\n  return count;\n};\n\nexport { maxEmpty };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  bucket in a well. \n  You want to empty the bucket and return the amount of water you need to empty \n  the bucket.\n  \n  Example 1:\n      Input: [1,0,1,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0]\n      Output: 1\n\n  Example 3:\n      Input: [1,0,0,1]\n      Output: 0\n\n  Constraints:\n      * 0 <= amount <= 10^9\n      * 0 <= wells[i] <= 10^9\n      * wells.length == amount.length\n      * wells[i] == amount[i]\n*/\nconst maxEmpty = (wells, amount) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 0) {\n      count += amount[i];\n    }\n  }\n  return count;\n};\n\nexport { maxEmpty };\n\n/*\n  You are given an array of integers representing the amount of water in a given \n  bucket in a well. \n  You want to empty the bucket and return the amount of water you need to empty \n  the bucket.\n  \n  Example 1:\n      Input: [1,0,1,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0]\n      Output: 1\n\n  Example 3:\n      Input: [1,0,0,1]\n      Output: 0\n\n  Constraints:\n      * 0 <= amount <= 10^9\n      * 0 <= wells[i] <= 10^9\n      * wells.length == amount.length\n      * wells[i] == amount[i]\n*/\nconst maxEmpty = (wells, amount) => {\n  let count = 0;\n  for (let i = 0; i < wells.length; i++) {\n    if (wells[i] === 0) {\n      count += amount[i];\n    }\n  }\n  return count;\n};\n\nexport { maxEmpty };\n\n/*\n  You are given an array of integers representing the amount of water in a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => a - b)\n  } else {\n    return arr.sort((a, b) => b - a)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 0, 2, 3, 4]) == [4, 3, 2, 1, 0]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in descending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + val\n  }, 0)\n  if (ones > 0) {\n    return arr.sort((a, b) => b - a)\n  } else {\n    return arr.sort((a, b) => a - b)\n  }\n}\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) =='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length!= 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) =='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) == n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) =='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length!= 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) =='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) == n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) =='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length!= 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) =='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) == n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) =='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length!= 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) =='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) == n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) =='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length!= 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) =='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) == n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) =='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length!= 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) =='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.split(\"\");\n  let vowelsArr48 = vowels.split(\"\");\n  let vowelsArr49 = vowels.split(\"\");\n  let vowelsArr50 = vowels.split(\"\");\n  let vowelsArr51 = vowels.split(\"\");\n  let vowelsArr52 = vowels.split(\"\");\n  let vowelsArr53 = vowels.split(\"\");\n  let vowelsArr54 = vowels.split(\"\");\n  let vowelsArr55 = vowels.split(\"\");\n  let vowelsArr56 = vowels.split(\"\");\n  let vowelsArr57 = vowels.split(\"\");\n  let vowelsArr58 = vowels.split(\"\");\n  let vowelsArr59 = vowels.split(\"\");\n  let vowelsArr60 = vowels.split(\"\");\n  let vowelsArr61 = vowels.split(\"\");\n  let vowelsArr62 = vowels.split(\"\");\n  let vowelsArr63 = vowels.split(\"\");\n  let vowelsArr64 = vowels.split(\"\");\n  let vowelsArr65 = vowels.split(\"\");\n  let vowelsArr66 = vowels.split(\"\");\n  let vowelsArr67 = vowels.split(\"\");\n  let vowelsArr68 = vowels.split(\"\");\n  let vowelsArr69 = vowels.split(\"\");\n  let vowelsArr70 = vowels.split(\"\");\n  let vowelsArr71 = vowels.split(\"\");\n  let vowelsArr72 = vowels.split(\"\");\n  let vowelsArr73 = vowels.split(\"\");\n  let vowelsArr74 = vowels.split(\"\");\n  let vowelsArr75 = vowels.split(\"\");\n  let vowelsArr76 = vowels.split(\"\");\n  let vowelsArr77 = vowels.split(\"\");\n  let vowelsArr78 = vowels.split(\"\");\n  let vowelsArr79 = vowels.split(\"\");\n  let vowelsArr80 = vowels.split(\"\");\n  let vowelsArr81 = vowels.split(\"\");\n  let vowelsArr82 = vowels.split(\"\");\n  let vowelsArr83 = vowels.split(\"\");\n  let vowelsArr84 = vowels.split(\"\");\n  let vowelsArr85 = vowels.split(\"\");\n  let vowelsArr86 = vowels.split(\"\");\n  let vowelsArr87 = vowels.split(\"\");\n  let vowelsArr88 = vowels.split(\"\");\n  let vowelsArr89 = vowels.split(\"\");\n  let vowelsArr90 = vowels.split(\"\");\n  let vowelsArr91 = vowels.split(\"\");\n  let vowelsArr92 = vowels.split(\"\");\n  let vowelsArr93 = vowels.split(\"\");\n  let vowelsArr94 = vowels.split(\"\");\n  let vowelsArr95 = vowels.split(\"\");\n  let vowelsArr96 = vowels.split(\"\");\n  let vowelsArr97 = vowels.split(\"\");\n  let vowelsArr98 = vowels.split(\"\");\n  let vowelsArr99 = vowels.split(\"\");\n  let vowelsArr100 = vowels.split(\"\");\n  let vowelsArr101 = vowels.split(\"\");\n  let vowelsArr102 = vowels.split(\"\");\n  let vowelsArr103 = vowels.split(\"\");\n  let vowelsArr104 = vowels.split(\"\");\n  let vowelsArr105 = vowels.split(\"\");\n  let vowelsArr106 = vowels.split(\"\");\n  let vowelsArr107 = vowels.split(\"\");\n  let vowelsArr108 = vowels.split(\"\");\n  let vowelsArr109 = vowels.split(\"\");\n  let vowelsArr110 = vowels.split(\"\");\n  let vowelsArr111 = vowels.split(\"\");\n  let vowelsArr112 = vowels.split(\"\");\n  let vowelsArr113 = vowels.split(\"\");\n  let vowelsArr114 = vowels.split(\"\");\n  let vowelsArr115 = vowels.split(\"\");\n  let vowelsArr116 = vowels.split(\"\");\n  let vowelsArr117 = vowels.split(\"\");\n  let vowelsArr118 = vowels.split(\"\");\n  let vowelsArr119 = vowels.split(\"\");\n  let vowelsArr120 = vowels.split(\"\");\n  let vowelsArr121 = vowels.split(\"\");\n  let vowelsArr122 = vowels.split(\"\");\n  let vowelsArr123 = vowels.split(\"\");\n  let vowelsArr124 = vowels.split(\"\");\n  let vowelsArr125 = vowels.split(\"\");\n  let vowelsArr126 = vowels.split(\"\");\n  let vowelsArr127 = vowels.split(\"\");\n  let vowelsArr128 = vowels.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  // Your code here\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      str += lst[i];\n    }\n  }\n  if (str === '') {\n    return 'No';\n  }\n  if (str.includes('(') && str.includes(')')) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n// keep this function call here\nconst result = matchParens(['(', ')']);\nconsole.log(result);</code>\n\nThe above code will work for any number of brackets.\n<|/ a dscore=1 |>\n<| c |>\nThank you for your answer. Could you please explain why you used `lst.length` instead of `lst.length - 1`?\n<|/ c |>\n<| c |>\n`lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you the length of the array minus 1. So `lst.length` will give you the length of the array and `lst.length - 1` will give you ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n  const longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};\n\n/**\n * Returns the shortest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n  const shortestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortestString.length) {\n      shortestString = strings[i];\n    }\n  }\n  return shortestString;\n};\n\n/**\n * Returns the string with the first letter capitalized.\n  >>> capitalize('a')\n  'A'\n  >>> capitalize('b')\n  'B'\n  >>> capitalize('c')\n  'C'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Returns the string with the first letter lower-cased.\n  >>> lower('a')\n  'a'\n  >>> lower('b')\n  'b'\n  >>> lower('c')\n  'c'\n  */\nconst lower = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Returns the string with the first letter upper-cased.\n  >>> upper('a')\n  'A'\n  >>> upper('b')\n  'B'\n  >>> upper('c')\n  'C'\n  */\nconst upper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Returns the string with the first letter title-cased.\n  >>> title('a')\n  'A'\n  >>> title('b')\n  'B'\n  >>> title('c')\n  'C'\n  */\nconst title = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Returns the string with the first letter upper-cased and a trailing \"I\".\n  >>> upperWithI('a')\n  'AI'\n  >>> upperWithI('b')\n  'BI'\n  >>> upperWithI('c')\n  'CI'\n  */\nconst upperWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter lower-cased and a trailing \"i\".\n  >>> lowerWithI('a')\n  'ai'\n  >>> lowerWithI('b')\n  'bi'\n  >>> lowerWithI('c')\n  'ci'\n  */\nconst lowerWithI = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1) +'i';\n};\n\n/**\n * Returns the string with the first letter title-cased and a trailing \"I\".\n  >>> titleWithI('a')\n  'AI'\n  >>> titleWithI('b')\n  'BI'\n  >>> titleWithI('c')\n  'CI'\n  */\nconst titleWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter upper-cased and a trailing \"I\".\n  >>> upperWithI('a')\n  'AI'\n  >>> upperWithI('b')\n  'BI'\n  >>> upperWithI('c')\n  'CI'\n  */\nconst upperWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter lower-cased and a trailing \"i\".\n  >>> lowerWithI('a')\n  'ai'\n  >>> lowerWithI('b')\n  'bi'\n  >>> lowerWithI('c')\n  'ci'\n  */\nconst lowerWithI = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1) +'i';\n};\n\n/**\n * Returns the string with the first letter title-cased and a trailing \"I\".\n  >>> titleWithI('a')\n  'AI'\n  >>> titleWithI('b')\n  'BI'\n  >>> titleWithI('c')\n  'CI'\n  */\nconst titleWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter upper-cased and a trailing \"I\".\n  >>> upperWithI('a')\n  'AI'\n  >>> upperWithI('b')\n  'BI'\n  >>> upperWithI('c')\n  'CI'\n  */\nconst upperWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter lower-cased and a trailing \"i\".\n  >>> lowerWithI('a')\n  'ai'\n  >>> lowerWithI('b')\n  'bi'\n  >>> lowerWithI('c')\n  'ci'\n  */\nconst lowerWithI = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1) +'i';\n};\n\n/**\n * Returns the string with the first letter title-cased and a trailing \"I\".\n  >>> titleWithI('a')\n  'AI'\n  >>> titleWithI('b')\n  'BI'\n  >>> titleWithI('c')\n  'CI'\n  */\nconst titleWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter upper-cased and a trailing \"I\".\n  >>> upperWithI('a')\n  'AI'\n  >>> upperWithI('b')\n  'BI'\n  >>> upperWithI('c')\n  'CI'\n  */\nconst upperWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter lower-cased and a trailing \"i\".\n  >>> lowerWithI('a')\n  'ai'\n  >>> lowerWithI('b')\n  'bi'\n  >>> lowerWithI('c')\n  'ci'\n  */\nconst lowerWithI = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1) +'i';\n};\n\n/**\n * Returns the string with the first letter title-cased and a trailing \"I\".\n  >>> titleWithI('a')\n  'AI'\n  >>> titleWithI('b')\n  'BI'\n  >>> titleWithI('c')\n  'CI'\n  */\nconst titleWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter upper-cased and a trailing \"I\".\n  >>> upperWithI('a')\n  'AI'\n  >>> upperWithI('b')\n  'BI'\n  >>> upperWithI('c')\n  'CI'\n  */\nconst upperWithI = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1) +'I';\n};\n\n/**\n * Returns the string with the first letter lower-cased and a trailing \"i\".\n  >>> lowerWithI('a')\n  'ai'\n  >>> lowerWithI('b')\n  'bi'\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  const len = arr.length;\n  const max = Math.max(...arr);\n\n  for (let i = 0; i < k; i++) {\n    const index = arr.indexOf(max);\n    result.push(arr[index]);\n    arr.splice(index, 1);\n  }\n\n  return result;\n};\n\nexport { maximum, maximumArray };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  You may assume no duplicates in the array.\n\n  Example 1:\n\n      Input: nums = [1,3,5,6], target = 5\n      Output: 2\n\n  Example 2:\n\n      Input: nums = [1,3,5,6], target = 6\n      Output: 1\n\n  Example 3:\n\n      Input: nums = [], target = 3\n      Output: 0\n*/\nconst binarySearch = (nums, target) => {\n  let lo = 0;\n  let hi = nums.length - 1;\n\n  while (lo <= hi) {\n    const mid = Math.floor((lo + hi) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] > target) {\n      hi = mid - 1;\n    } else {\n      lo = mid + 1;\n    }\n  }\n\n  return -1;\n};\n\nexport { binarySearch };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  You may assume no duplicates in the array.\n\n  Example 1:\n\n      Input: nums = [1,3,5,6], target = 5\n      Output: 2\n\n  Example 2:\n\n      Input: nums = [1,3,5,6], target = 6\n      Output: 1\n\n  Example 3:\n\n      Input: nums = [], target = 3\n      Output: 0\n*/\nconst binarySearchInsert = (nums, target) => {\n  let lo = 0;\n  let hi = nums.length - 1;\n\n  while (lo <= hi) {\n    const mid = Math.floor((lo + hi) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] > target) {\n      hi = mid - 1;\n    } else {\n      lo = mid + 1;\n    }\n  }\n\n  return lo;\n};\n\nexport { binarySearchInsert };\n\n/*\n  Given a non-empty binary search tree and a node in that tree, find if that node has a left child.\n\n  For example:\n      Given a binary search tree and node with value 5,\n                  5\n     / \\\n    4   8\n   / \\\n  1   3\nOutput: false\nExplanation: There is a node with value 5, and it's right is 8. Therefore, 5 is not a left child of 8.\n*/\nconst hasLeftChild = (root, node) => {\n  if (!root) {\n    return false;\n  }\n\n  if (root.val === node.val) {\n    return true;\n  }\n\n  return hasLeftChild(root.left, node) || hasLeftChild(root.right, node);\n};\n\nexport { hasLeftChild };\n\n/*\n  Given a non-empty binary search tree and a node in that tree, find if that node has a right child.\n\n  For example:\n      Given a binary search tree and node with value 5,\n      5\n     / \\\n    4   8\n   / \\\n  1   3\nOutput: true\nExplanation: There is a node with value 5, and it's left is 4. Therefore, 5 is a right child of 4.\n*/\nconst hasRightChild = (root, node) => {\n  if (!root) {\n    return false;\n  }\n\n  if (root.val === node.val) {\n    return true;\n  }\n\n  return hasRightChild(root.left, node) || hasRightChild(root.right, node);\n};\n\nexport { hasRightChild };\n\n/*\n  Given a non-empty binary search tree and a node in that tree, find if it has a parent (if it exists).\n\n  For example:\n      Given a binary search tree and node with value 5,\n      5\n     / \\\n    4   8\n   / \\\n  1   3\nOutput: node with value 4 has a parent (if it exists)\nExplanation: In the above binary search tree, the number 4 has a parent (because it is the parent of the node with value 8)\n*/\nconst hasParent = (root, node) => {\n  if (!root) {\n    return false;\n  }\n\n  if (root.val === node.val) {\n    return true;\n  }\n\n  return hasParent(root.left, node) || hasParent(root.right, node);\n};\n\nexport { hasParent };\n\n/*\n  Given a non-empty binary search tree and a node containing an element, remove that element from the tree. \n  \n  For example:\n      Given a binary search tree and node with value 5,\n      5\n     / \\\n    4   8\n   / \\\n  1   3\n  Input: 5\n  Output: 4\n  Explanation: \n  5\n / \\\n1   3\n  4\n*/\nconst deleteNode = (root, node) => {\n  if (!root) {\n    return null;\n  }\n\n  if (root.val === node.val) {\n    return deleteNode(root.left, node) || deleteNode(root.right, node);\n  }\n\n  if (root.val > node.val) {\n    return deleteNode(root.right, node);\n  }\n\n  return deleteNode(root.left, node);\n};\n\nexport { deleteNode };\n\n/*\n  Given a binary search tree and a node containing an element, remove that element from the tree.\n  \n  For example:\n      Given a binary search tree and node with value 5,\n      5\n     / \\\n    4   8\n   / \\\n  1   3\n  Input: 5\n  Output: 4\n  Explanation: \n  5\n / \\\n1   3\n  4\n*/\nconst deleteNodeInOrder = (root, node) => {\n  if (!root) {\n    return null;\n  }\n\n  if (root.val === node.val) {\n    return deleteNodeInOrder(root.left, node) || deleteNodeInOrder(root.right, node);\n  }\n\n  if (root.val > node.val) {\n    return deleteNodeInOrder(root.right, node);\n  }\n\n  return deleteNodeInOrder(root.left, node);\n};\n\nexport { deleteNodeInOrder };\n\n/*\n  Given a binary search tree and a node containing an element, remove that element from the tree.\n  \n  For example:\n      Given a binary search tree and node with value 5,\n      5\n     / \\\n    4   8\n   / \\\n  1   3\n  Input: 5\n  Output: 4\n  Explanation: \n  5\n / \\\n1   3\n  4\n*/\nconst deleteNodeInOrderRecursive = (root, node) => {\n  if (!root) {\n    return null;\n  }\n\n  if (root.val === node.val) {\n    return deleteNodeInOrderRecursive(root.left, node) || deleteNodeInOrderRecursive(root.right, node);\n  }\n\n  if (root.val > node.val) {\n    return deleteNodeInOrderRecursive(root.right, node);\n  }\n\n  return deleteNodeInOrderRecursive(root.left, node);\n};\n\nexport { deleteNodeInOrderRecursive };\n\n/*\n  Given a binary search tree and a node containing an element, remove that element from the tree.\n  \n  For example:\n      Given a binary search tree and node with value ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 12\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of three digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsThree = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of four digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFour = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of five digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFive = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of six digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsSix = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of seven digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsSeven = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of eight digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsEight = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of nine digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0 + 0 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNine = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of ten digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0 + 0 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTen = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of eleven digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0 + 0 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsEleven = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of twelve digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0 + 0 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwelve = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the elements with a maximum of thirteen digits from the first k elements of arr. \n  \n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 19 # sum of 3 + 5 + 8 + 9 + 0 + 0 + 0 + 0 + 0\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsThirteen = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, find the sum of the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsArray = [];\n  words.forEach((word) => {\n    if (word) {\n      wordsArray.push(word);\n    }\n  });\n  return wordsArray;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  split", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Write a function named isEven. This function should take one argument, an array, and return true if the array contains only even numbers. If the array contains any non-even numbers, return false.\n  Examples\n  isEven([2, 4]) ➞ true\n  isEven([2, 3, 4, 5]) ➞ false\n  isEven([2, 4, 6, 8]) ➞ true\n  isEven([2, 4, 6, 8, 10]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132]) ➞ true\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136]) ➞ false\n  isEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1\n  const [interval2Start, interval2End] = interval2\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End]\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End]\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start]\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start]\n  }\n  const [intersectionStart, intersectionEnd] = interval1\n   .sort((a, b) => a - b)\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval2[i + 1]])\n   .sort((a, b) => a[0] - b[0])\n   .map((x, i) => [x, interval1[i + 1]])\n   .sort((a, b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  const visited = new Array(N * N).fill(false);\n  const ans = new Array(N * N).fill(0);\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    lst_A[i] = i;\n    lst_B[i] = j;\n    for (let k = j + 1; k < M; k++) {\n      dfs(i, j + 1);\n      dfs(i + 1, j);\n      dfs(i, j - 1);\n      dfs(i - 1, j);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (grid[i][j] > 0) {\n        dfs(i, j);\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (lst_A[i] < lst_B[j]) {\n        ans[lst_A[i]] = grid[i][j];\n      }\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a 2D array grid of N rows and M columns. \n  Each cell of the grid contains a character. \n  You have to find the number of paths of length k starting from each \n  cell in the grid. You can start from any cell, and in each step you \n  can move to any of the neighbor cells, in other words, you can go to \n  cells which share an edge with you current cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an integer that represents the number of paths of length k starting \n  from each cell in the grid.\n\n  Examples:\n\n      Input: grid = [ [ 'A', 'B', 'C' ], [ 'D', 'E', 'F' ], [ 'G', 'H', 'I' ] ], k = 2\n      Output: 4\n\n      Input: grid = [ [ 'A', 'B', 'C' ], [ 'D', 'E', 'F' ], [ 'G', 'H', 'I' ] ], k = 3\n      Output: 3\n  */\nconst pathCount = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  const visited = new Array(N * N).fill(false);\n  const ans = new Array(N * N).fill(0);\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    lst_A[i] = i;\n    lst_B[i] = j;\n    for (let k = j + 1; k < M; k++) {\n      dfs(i, j + 1);\n      dfs(i + 1, j);\n      dfs(i, j - 1);\n      dfs(i - 1, j);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (grid[i][j] > 0) {\n        dfs(i, j);\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (lst_A[i] < lst_B[j]) {\n        ans[lst_A[i]] = grid[i][j];\n      }\n    }\n  }\n  return ans.length;\n};\n\n/*\n  Given a 2D array grid of N rows and M columns. \n  Each cell of the grid contains a character. \n  You have to find the number of paths of length k starting from each \n  cell in the grid. You can start from any cell, and in each step you \n  can move to any of the neighbor cells, in other words, you can go to \n  cells which share an edge with you current cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an integer that represents the number of paths of length k starting \n  from each cell in the grid.\n\n  Examples:\n\n      Input: grid = [ [ 'A', 'B', 'C' ], [ 'D', 'E', 'F' ], [ 'G', 'H', 'I' ] ], k = 2\n      Output: 4\n\n      Input: grid = [ [ 'A', 'B', 'C' ], [ 'D', 'E', 'F' ], [ 'G', 'H', 'I' ] ], k = 3\n      Output: 3\n  */\nconst pathCount2 = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  const visited = new Array(N * N).fill(false);\n  const ans = new Array(N * N).fill(0);\n  const dfs = (i, j) => {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    lst_A[i] = i;\n    lst_B[i] = j;\n    for (let k = j + 1; k < M; k++) {\n      dfs(i, j", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf2(5)\n  8\n  */\nconst nextPowerOf2 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 2;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the largest number less than or equal to its argument\n  >>> nextPowerOf2(10)\n  1024\n  */\nconst nextPowerOf3 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 3;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf3(5)\n  16\n  */\nconst nextPowerOf4 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 4;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf4(5)\n  32\n  */\nconst nextPowerOf5 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 5;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf5(5)\n  64\n  */\nconst nextPowerOf6 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 6;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf6(5)\n  128\n  */\nconst nextPowerOf7 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 7;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf7(5)\n  256\n  */\nconst nextPowerOf8 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 8;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf8(5)\n  512\n  */\nconst nextPowerOf9 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 9;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf9(5)\n  1024\n  */\nconst nextPowerOf10 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 10;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf10(5)\n  2048\n  */\nconst nextPowerOf11 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 11;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf11(5)\n  4096\n  */\nconst nextPowerOf12 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 12;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf12(5)\n  8192\n  */\nconst nextPowerOf13 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 13;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf13(5)\n  16384\n  */\nconst nextPowerOf14 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 14;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf14(5)\n  32768\n  */\nconst nextPowerOf15 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 15;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf15(5)\n  65536\n  */\nconst nextPowerOf16 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 16;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf16(5)\n  131072\n  */\nconst nextPowerOf17 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 17;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf17(5)\n  262144\n  */\nconst nextPowerOf18 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 18;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf18(5)\n  524288\n  */\nconst nextPowerOf19 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 19;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf19(5)\n  1048576\n  */\nconst nextPowerOf20 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 20;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf20(5)\n  2097152\n  */\nconst nextPowerOf21 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (a & 1) {\n      result = result * 21;\n    }\n    a = a >> 1;\n  }\n  return result;\n};\n\n/**\n * Returns the smallest number greater than or equal to its argument\n  >>> nextPowerOf21(5)\n  4194304\n  */\nconst nextPowerOf22 = a => {\n  let result = 1;\n  while (a!== 0) {\n    if (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  if (n === 0) return result;\n  if (n === 1) return [1, 3];\n  if (n === 2) return [2, 1];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  if (n === 0) return result;\n  if (n === 1) return [1, 3];\n  if (n === 2) return [2, 1];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  if (n === 0) return result;\n  if (n === 1) return [1, 3];\n  if (n === 2) return [2, 1];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  if (n === 0) return result;\n  if (n === 1) return [1, 3];\n  if (n === 2) return [2, 1];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  if (n === 0) return result;\n  if (n === 1) return [1, 3];\n  if (n === 2) return [2, 1];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  if (n === 0) return result;\n  if (n === 1) return [1, 3];\n  if (n === 2) return [2, 1];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 0) return 0;\n  if (n < 10) return 1;\n  if (n < 100) return 2;\n  if (n < 1000) return 3;\n  if (n < 10000) return 4;\n  if (n < 100000) return 5;\n  if (n < 1000000) return 6;\n  if (n < 10000000) return 7;\n  if (n < 100000000) return 8;\n  if (n < 1000000000) return 9;\n  if (n < 10000000000) return 10;\n  if (n < 100000000000) return 11;\n  if (n < 1000000000000) return 12;\n  if (n < 10000000000000) return 13;\n  if (n < 100000000000000) return 14;\n  if (n < 1000000000000000) return 15;\n  if (n < 10000000000000000) return 16;\n  if (n < 100000000000000000) return 17;\n  if (n < 1000000000000000010) return 18;\n  if (n < 10000000000000000100) return 19;\n  if (n < 100000000000000001000) return 20;\n  if (n < 1000000000000000010000) return 21;\n  if (n < 10000000000000000100000) return 22;\n  if (n < 100000000000000001000000) return 23;\n  if (n < 1000000000000000010000000) return 24;\n  if (n < 10000000000000000100000000) return 25;\n  if (n < 100000000000000001000000000) return 26;\n  if (n < 1000000000000000010000000000) return 27;\n  if (n < 10000000000000000100000000000) return 28;\n  if (n < 100000000000000001000000000000) return 29;\n  if (n < 1000000000000000010000000000000) return 30;\n  if (n < 10000000000000000100000000000000) return 31;\n  if (n < 100000000000000001000000000000000) return 32;\n  if (n < 1000000000000000010000000000000000) return 33;\n  if (n < 10000000000000000100000000000000000) return 34;\n  if (n < 100000000000000001000000000000000000) return 35;\n  if (n < 1000000000000000010000000000000000000) return 36;\n  if (n < 10000000000000000100000000000000000000) return 37;\n  if (n < 100000000000000001000000000000000000000) return 38;\n  if (n < 1000000000000000010000000000000000000000) return 39;\n  if (n < 100000000000000001000000000000000000000000) return 40;\n  if (n < 1000000000000000010000000000000000000000000) return 41;\n  if (n < 100000000000000000000000000000000) return 42;\n  if (n < 1000000000000000000000000000000000) return 43;\n  if (n < 1000000000000000000000000000000000) return 44;\n  if (n < 1000000000000000000000000000000000) return 45;\n  if (n < 1000000000000000000000000000000000) return 46;\n  if (n < 1000000000000000000000000000000000) return 47;\n  if (n < 1000000000000000000000000000000000) return 48;\n  if (n < 1000000000000000000000000000000000) return 49;\n  if (n < 1000000000000000000000000000000000) return 50;\n  if (n < 1000000000000000000000000000000000) return 51;\n  if (n < 1000000000000000000000000000000000) return 52;\n  if (n < 1000000000000000000000000000000000) return 53;\n  if (n < 1000000000000000000000000000000000) return 54;\n  if (n < 1000000000000000000000000000000000) return 55;\n  if (n < 1000000000000000000000000000000000) return 56;\n  if (n < 1000000000000000000000000000000000) return 57;\n  if (n < 1000000000000000000000000000000000) return 58;\n  if (n < 1000000000000000000000000000000000) return 59;\n  if (n < 1000000000000000000000000000000000) return 60;\n  if (n < 1000000000000000000000000000000000) return 61;\n  if (n < 1000000000000000000000000000000000) return 62;\n  if (n < 1000000000000000000000000000000000) return 63;\n  if (n < 1000000000000000000000000000000000) return 64;\n  if (n < 1000000000000000000000000000000000) return 65;\n  if (n < 1000000000000000000000000000000000) return 66;\n  if (n < 1000000000000000000000000000000000) return 67;\n  if (n < 1000000000000000000000000000000000) return 68;\n  if (n < 1000000000000000000000000000000000) return 69;\n  if (n < 1000000000000000000000000000000000) return 70;\n  if (n < 1000000000000000000000000000000000) return 71;\n  if (n < 1000000000000000000000000000000000) return 72;\n  if (n < 1000000000000000000000000000000000) return 73;\n  if (n < 1000000000000000000000000000000000) return 74;\n  if (n < 1000000000000000000000000000000000) return 75;\n  if (n < 1000000000000000000000000000000000) return 76;\n  if (n < 1000000000000000000000000000000000) return 77;\n  if (n < 1000000000000000000000000000000000) return 78;\n  if (n < 1000000000000000000000000000000000) return 79;\n  if (n < 1000000000000000000000000000000000) return 80;\n  if (n < 1000000000000000000000000000000000) return 81;\n  if (n < 1000000000000000000000000000000000) return 82;\n  if (n < 1000000000000000000000000000000000) return 83;\n  if (n < 1000000000000000000000000000000000) return 84;\n  if (n < 1000000000000000000000000000000000) return 85;\n  if (n < 1000000000000000000000000000000000) return 86;\n  if (n < 1000000000000000000000000000000000) return 87;\n  if (n < 1000000000000000000000000000000000) return 88;\n  if (n < 1000000000000000000000000000000000) return 89;\n  if (n < 1000000000000000000000000000000000) return 90;\n  if (n < 1000000000000000000000000000000000) return 91;\n  if (n < 1000000000000000000000000000000000) return 92;\n  if (n < 1000000000000000000000000000000000) return 93;\n  if (n < 1000000000000000000000000000000000) return 94;\n  if (n < 1000000000000000000000000000000000) return 95;\n  if (n < 1000000000000000000000000000000000) return 96;\n  if (n < 1000000000000000000000000000000000) return 97;\n  if (n < 1000000000000000000000000000000000) return 98;\n  if (n < 1000000000000000000000000000000000) return 99;\n  if (n < 1000000000000000000000000000000000) return 100;\n  if (n < 1000000000000000000000000000000000) return 101;\n  if (n < 1000000000000000000000000000000000) return 102;\n  if (n < 1000000000000000000000000000000000) return 103;\n  if (n < 1000000000000000000000000000000000) return 104;\n  if (n < 1000000000000000000000000000000000) return 105;\n  if (n < 1000000000000000000000000000000000) return 106;\n  if (n < 1000000000000000000000000000000000) return 107;\n  if (n < 1000000000000000000000000000000000) return 108;\n  if (n < 1000000000000000000000000000000000) return 109;\n  if (n < 1000000000000000000000000000000000) return 110;\n  if (n < 1000000000000000000000000000000000) return 111;\n  if (n < 1000000000000000000000000000000000) return 112;\n  if (n < 1000000000000000000000000000000000) return 113;\n  if (n < 1000000000000000000000000000000000) return 114;\n  if (n < 1000000000000000000000000000000000) return 115;\n  if (n < 1000000000000000000000000000000000) return 116;\n  if (n < 1000000000000000000000000000000000) return 117;\n  if (n < 1000000000000000000000000000000000) return 118;\n  if (n < 1000000000000000000000000000000000) return 119;\n  if (n < 1000000000000000000000000000000000) return 120;\n  if (n < 1000000000000000000000000000000000) return 121;\n  if (n < 1000000000000000000000000000000000) return 122;\n  if (n < 1000000000000000000000000000000000) return 123;\n  if (n < 1000000000000000000000000000000000) return 124;\n  if (n < 1000000000000000000000000000000000) return 125;\n  if (n < 1000000000000000000000000000000000) return 126;\n  if (n < 1000000000000000000000000000000000) return 127;\n  if (n < 1000000000000000000000000000000000) return 128;\n  if (n < 1000000000000000000000000000000000) return 129;\n  if (n < 1000000000000000000000000000000000) return 130;\n  if (n < 1000000000000000000000000000000000) return 131;\n  if (n < 1000000000000000000000000000000000) return 132;\n  if (n < 1000000000000000000000000000000000) return 133;\n  if (n < 1000000000000000000000000000000000) return 134;\n  if (n < 1000000000000000000000000000000000) return 135;\n  if (n < 1000000000000000000000000000000000) return 136;\n  if (n < 1000000000000000000000000000000000) return 137;\n  if (n < 1000000000000000000000000000000000) return 138;\n  if (n < 1000000000000000000000000000000000) return 139;\n  if (n < 1000000000000000000000000000000000) return 140;\n  if (n < 1000000000000000000000000000000000) return 141;\n  if (n < 1000000000000000000000000000000000) return 142;\n  if (n < 1000000000000000000000000000000000) return 143;\n  if (n < 1000000000000000000000000000000000) return 144;\n  if (n < 1000000000000000000000000000000000) return 145;\n  if (n < 1000000000000000000000000000000000) return 146;\n  if (n < 1000000000000000000000000000000000) return 147;\n  if (n < 1000000000000000000000000000000000) return 148;\n  if (n < 1000000000000000000000000000000000) return 149;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let openBrackets = 0\n  let closeBrackets = 0\n  let openBracketsStack = []\n  let closeBracketsStack = []\n  let currentChar = ''\n  let lastChar = ''\n  let isNested = false\n\n  for (let i = 0; i < string.length; i++) {\n    currentChar = string[i]\n    lastChar = string[i - 1]\n\n    if (currentChar === '[') {\n      openBracketsStack.push(currentChar)\n      openBrackets++\n    } else if (currentChar === ']') {\n      closeBracketsStack.push(currentChar)\n      closeBrackets++\n    } else if (currentChar === '[' && closeBracketsStack.length && closeBracketsStack[closeBracketsStack.length - 1] === '[') {\n      closeBracketsStack.pop()\n      closeBrackets--\n    } else if (currentChar === ']' && openBracketsStack.length && openBracketsStack[openBracketsStack.length - 1] === ']') {\n      openBracketsStack.pop()\n      openBrackets--\n    }\n\n    if (openBrackets === 0 && closeBrackets === 0) {\n      isNested = true\n    }\n  }\n\n  return isNested\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNotNested = (string) => {\n  let openBrackets = 0\n  let closeBrackets = 0\n  let openBracketsStack = []\n  let closeBracketsStack = []\n  let currentChar = ''\n  let lastChar = ''\n  let isNested = false\n\n  for (let i = 0; i < string.length; i++) {\n    currentChar = string[i]\n    lastChar = string[i - 1]\n\n    if (currentChar === '[') {\n      openBracketsStack.push(currentChar)\n      openBrackets++\n    } else if (currentChar === ']') {\n      closeBracketsStack.push(currentChar)\n      closeBrackets++\n    } else if (currentChar === '[' && closeBracketsStack.length && closeBracketsStack[closeBracketsStack.length - 1] === '[') {\n      closeBracketsStack.pop()\n      closeBrackets--\n    } else if (currentChar === ']' && openBracketsStack.length && openBracketsStack[openBracketsStack.length - 1] === ']') {\n      openBracketsStack.pop()\n      openBrackets--\n    }\n\n    if (openBrackets === 0 && closeBrackets === 0) {\n      isNested = false\n    }\n  }\n\n  return isNested\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNotNested2 = (string, openBrackets, closeBrackets) => {\n  let currentChar = ''\n  let lastChar = ''\n  let isNested = false\n\n  for (let i = 0; i < string.length; i++) {\n    currentChar = string[i]\n    lastChar = string[i - 1]\n\n    if (currentChar === '[') {\n      if (openBrackets === 0 && closeBrackets === 0) {\n        isNested = false\n      }\n      openBrackets++\n    } else if (currentChar === ']') {\n      if (openBrackets === 0 && closeBrackets === 0) {\n        isNested = false\n      }\n      closeBrackets++\n    } else if (currentChar === '[' && closeBracketsStack.length && closeBracketsStack[closeBracketsStack.length - 1] === '[') {\n      closeBracketsStack.pop()\n      closeBrackets--\n    } else if (currentChar === ']' && openBracketsStack.length && openBracketsStack[openBracketsStack.length - 1] === ']') {\n      openBracketsStack.pop()\n      openBrackets--\n    }\n  }\n\n  return isNested\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNotNested3 = (string, openBrackets, closeBrackets) => {\n  let currentChar = ''\n  let lastChar = ''\n  let isNested = false\n\n  for (let i = 0; i < string.length; i++) {\n    currentChar = string[i]\n    lastChar = string[i - 1]\n\n    if (currentChar === '[') {\n      if (openBrackets === 0 && closeBrackets === 0) {\n        isNested = false\n      }\n      openBrackets++\n    } else if (currentChar === ']') {\n      if (openBrackets === 0 && closeBrackets === 0) {\n        isNested = false\n      }\n      closeBrackets++\n    } else if (currentChar === '[' && closeBracketsStack.length && closeBracketsStack[closeBracketsStack.length - 1] === '[') {\n      closeBracketsStack.pop()\n      closeBrackets--\n    } else if (currentChar === ']' && openBracketsStack.length && openBracketsStack[openBracketsStack.length - 1] === ']') {\n      openBracketsStack.pop()\n      openBrackets--\n    }\n  }\n\n  return isNested\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z]/i)!== null;\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character in a given string is a numeric character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsANumber = lastChar.match(/[0-9]/i)!== null;\n  return lastCharIsANumber;\n};\n\n/* Create a function that returns true if the last character in a given string is a special character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsASpecial(\"apple pie\") ➞ false\n  checkIfLastCharIsASpecial(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpecial(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpecial(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpecial = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsASpecial = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)!== null;\n  return lastCharIsASpecial;\n};\n\n/* Create a function that returns true if the last character in a given string is a punctuation character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsAPunctuation(\"apple pie\") ➞ false\n  checkIfLastCharIsAPunctuation(\"apple pi e\") ➞ true\n  checkIfLastCharIsAPunctuation(\"apple pi e \") ➞ false\n  checkIfLastCharIsAPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsAPunctuation = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsAPunctuation = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)!== null;\n  return lastCharIsAPunctuation;\n};\n\n/* Create a function that returns true if the last character in a given string is a word character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsAWord(\"apple pie\") ➞ false\n  checkIfLastCharIsAWord(\"apple pi e\") ➞ true\n  checkIfLastCharIsAWord(\"apple pi e \") ➞ false\n  checkIfLastCharIsAWord(\"\") ➞ false\n  */\nconst checkIfLastCharIsAWord = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsAWord = lastChar.match(/[a-z]+/i)!== null;\n  return lastCharIsAWord;\n};\n\n/* Create a function that returns true if the last character in a given string is a numeric character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrSpecialChar = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsANumberOrSpecialChar = lastChar.match(/[a-z0-9!,@,#,$,%,^,&,*,?,_,~]/i)!== null;\n  return lastCharIsANumberOrSpecialChar;\n};\n\n/* Create a function that returns true if the last character in a given string is a special character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsASpecial(\"apple pie\") ➞ false\n  checkIfLastCharIsASpecial(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpecial(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpecial(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpecialOrPunctuationChar = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsASpecialOrPunctuationChar = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)!== null;\n  return lastCharIsASpecialOrPunctuationChar;\n};\n\n/* Create a function that returns true if the last character in a given string is a punctuation character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsAPunctuation(\"apple pie\") ➞ false\n  checkIfLastCharIsAPunctuation(\"apple pi e\") ➞ true\n  checkIfLastCharIsAPunctuation(\"apple pi e \") ➞ false\n  checkIfLastCharIsAPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsAPunctuationOrPunctuationChar = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsAPunctuationOrPunctuationChar = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i)!== null;\n  return lastCharIsAPunctuationOrPunctuationChar;\n};\n\n/* Create a function that returns true if the last character in a given string is a word character and not part of a word, and otherwise incorrect. Note: \"Word\" ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*CReturns the smallest index of an element that is not smaller than or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is less than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is less than the given element or less than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] < arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is greater than the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or less than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] < arr[index] || arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or greater than the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] < arr[index] || arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or less than the given element or greater than the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or less than the given element or greater than the given element or greater than the given element or less than the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or less than the given element or greater than the given element or greater than the given element or less than the given element or greater than the given element or less than the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index] || arr[i] < arr[index] || arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or less than the given element or greater than the given element or greater than the given element ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegative = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersZero = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativeZero = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersZeroNegative = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativeZeroNegative = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersZeroNegativeZero = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativeZeroNegativeZero = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativeZeroNegativeZeroNegative = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (7, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativeZeroNegativeZeroNegativeZero = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest integer in a list, \"b\" is the smallest integer in a list. If there are no integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \"==\") return b\n  if (b === \"==\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(5) == false\n  isEqualToSumOdd(7) == false\n  isEqualToSumOdd(9) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-5) == false\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-9) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-5) == false\n  isEqualToSumOdd(-7) == false\n  isEqualToSumOdd(-9) == true\n  */\nconst isEqualToSumOddNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(10) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == false\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == false\n  isEqualToSumOdd(-10) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(11) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(7) == false\n  isEqualToSumOdd(9) == false\n  isEqualToSumOdd(11) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-9) == false\n  isEqualToSumEven(-11) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the iterative method (factorial(n) = n * factorial(n-1))\n*/\nconst factorialIterative = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a given number\n  using the recursive method (factorial(n) = n * factorial(n - 1))\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i);\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const suffix = string.slice(i);\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 1)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 2)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 3)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 4)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 5)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 6)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 7)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 8)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 9)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 10)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 11)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 12)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 13)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 14)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 15)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 16)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 17)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, count) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const substring = string.slice(0, i);\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc', 18)\n  ['', 'a', 'ab', 'abc']\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    return match.replace(/ /g, \"_\");\n  });\n};\n\n/*\n  Convert a string to camelCase\n  camelCase(\"example\") == \"example\"\n  camelCase(\"Example 1\") == \"example1\"\n  camelCase(\"Example 1 2\") == \"example12\"\n  camelCase(\"Example 1 2 3\") == \"example123\"\n  camelCase(\"Example 1 2 3 4\") == \"example1234\"\n  camelCase(\"Example 1 2 3 4 5\") == \"example12345\"\n  camelCase(\"Example 1 2 3 4 5 6\") == \"example123456\"\n  camelCase(\"Example 1 2 3 4 5 6 7\") == \"example1234567\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8\") == \"example12345678\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9\") == \"example123456789\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0\") == \"example1234567890\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1\") == \"example12345678901\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2\") == \"example123456789012\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3\") == \"example1234567890123\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4\") == \"example12345678901234\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\") == \"example123456789012345\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") == \"example1234567890123456\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\") == \"example12345678901234567\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\") == \"example123456789012345678\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"example123456789012345679\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\") == \"example123456789012345680\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\") == \"example1234567890123456801\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\") == \"example12345678901234568012\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\") == \"example123456789012345680123\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\") == \"example1234567890123456801234\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\") == \"example12345678901234568012345\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") == \"example123456789012345680123456\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\") == \"example1234567890123456801234567\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\") == \"example12345678901234568012345678\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"example12345678901234568012345679\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\") == \"example12345678901234568080\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\") == \"example123456789012345680801\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\") == \"example1234567890123456808012\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\") == \"example12345678901234568080123\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\") == \"example123456789012345680801234\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\") == \"example1234567890123456808012345\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") == \"example12345678901234568080123456\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\") == \"example123456789012345680801234567\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\") == \"example1234567890123456808012345678\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"example1234567890123456808012345679\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\") == \"example1234567890123456808012345680\"\n  camelCase(\"Example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.substring(0, 3);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length; i++) {\n    let prime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] === words[i].length) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      primes.push(words[i].length);\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separate", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| c |>\nI added a more efficient solution that doesn't use regular expressions.\n<|/ c |>\n<| c |>\nThanks again. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| a dscore=0 |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done more efficiently and simpler. Thanks again\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simplify(x, n) {\n  const [numer, denom] = x.split(\"/\");\n  return numer * parseInt(n) === parseInt(denom);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return nums.sort((a, b) => sum - a - b);\n};\n\n/*\n  Write a function that returns a new list containing only the even numbers in the original list. Example:\n  >>> evens([1, 2, 3, 4]) == [2, 4]\n  >>> evens([]) == []\n  */\nconst evens = (nums) => {\n  return nums.filter((num) => num % 2 === 0);\n};\n\n/*\n  Write a function that returns a new list containing only the odd numbers in the original list. Example:\n  >>> odds([1, 2, 3, 4]) == [1, 3]\n  >>> odds([]) == []\n  */\nconst odds = (nums) => {\n  return nums.filter((num) => num % 2 === 1);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument. Example:\n  >>> notIn([1, 3, 5], [1, 3, 5]) == [1, 3, 5]\n  >>> notIn([1, 3, 5], []) == []\n  */\nconst notIn = (nums, orig) => {\n  return orig.filter((num) =>!nums.includes(num));\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are less than the number passed as an argument. Example:\n  >>> lessThan([5, 3, 1], 5) == [1, 3, 5]\n  >>> lessThan([5, 3, 1], 6) == []\n  */\nconst lessThan = (nums, num) => {\n  return nums.filter((num) => num < num);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are less than or equal to the number passed as an argument. Example:\n  >>> lessThanOrEqual([5, 3, 1], 5) == [1, 3, 5]\n  >>> lessThanOrEqual([5, 3, 1], 6) == []\n  */\nconst lessThanOrEqual = (nums, num) => {\n  return nums.filter((num) => num <= num);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are greater than the number passed as an argument. Example:\n  >>> greaterThan([5, 3, 1], 5) == [5, 3, 1]\n  >>> greaterThan([5, 3, 1], 6) == []\n  */\nconst greaterThan = (nums, num) => {\n  return nums.filter((num) => num > num);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are greater than or equal to the number passed as an argument. Example:\n  >>> greaterThanOrEqual([5, 3, 1], 5) == [5, 3, 1]\n  >>> greaterThanOrEqual([5, 3, 1], 6) == []\n  */\nconst greaterThanOrEqual = (nums, num) => {\n  return nums.filter((num) => num >= num);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are equal to the number passed as an argument. Example:\n  >>> equal([5, 3, 1], 5) == [5, 3, 1]\n  >>> equal([5, 3, 1], 6) == []\n  */\nconst equal = (nums, num) => {\n  return nums.filter((num) => num === num);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are equal to the number passed as an argument and are less than the number passed as an argument. Example:\n  >>> equalAndLessThan([5, 3, 1], 5, 3) == [5, 3, 1]\n  >>> equalAndLessThan([5, 3, 1], 6, 3) == []\n  */\nconst equalAndLessThan = (nums, num, num2) => {\n  return nums.filter((num) => num === num && num < num2);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are equal to the number passed as an argument and are less than or equal to the number passed as an argument. Example:\n  >>> equalAndLessThanOrEqual([5, 3, 1], 5, 3) == [5, 3, 1]\n  >>> equalAndLessThanOrEqual([5, 3, 1], 6, 3) == []\n  */\nconst equalAndLessThanOrEqual = (nums, num, num2) => {\n  return nums.filter((num) => num === num && num <= num2);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are equal to the number passed as an argument and are greater than the number passed as an argument. Example:\n  >>> equalAndGreaterThan([5, 3, 1], 5, 3) == [5, 3, 1]\n  >>> equalAndGreaterThan([5, 3, 1], 6, 3) == []\n  */\nconst equalAndGreaterThan = (nums, num, num2) => {\n  return nums.filter((num) => num === num && num > num2);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are equal to the number passed as an argument and are greater than or equal to the number passed as an argument. Example:\n  >>> equalAndGreaterThanOrEqual([5, 3, 1], 5, 3) == [5, 3, 1]\n  >>> equalAndGreaterThanOrEqual([5, 3, 1], 6, 3) == []\n  */\nconst equalAndGreaterThanOrEqual = (nums, num, num2) => {\n  return nums.filter((num) => num === num && num >= num2);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are divisible by the number passed as an argument. Example:\n  >>> divisibleBy3([5, 3, 1], 5) == [5, 3, 1]\n  >>> divisibleBy3([5, 3, 1], 6) == []\n  */\nconst divisibleBy3 = (nums, num) => {\n  return nums.filter((num) => num % 3 === 0);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are divisible by the number passed as an argument and are less than the number passed as an argument. Example:\n  >>> divisibleBy3AndLessThan([5, 3, 1], 5, 3) == [5, 3, 1]\n  >>> divisibleBy3AndLessThan([5, 3, 1], 6, 3) == []\n  */\nconst divisibleBy3AndLessThan = (nums, num, num2) => {\n  return nums.filter((num) => num % 3 === 0 && num < num2);\n};\n\n/*\n  Write a function that returns a new list containing only the numbers in the original list that are not in the original list passed as an argument and are divisible by the number passed as an argument and are less than or equal to the number passed as an argument. Example:\n  >>> divisibleBy3AndLessThanOrEqual([5, 3, 1], 5, 3) == [5, 3, 1]\n  >>> divisibleBy3AndLessThanOrEqual([5, 3, 1], 6, 3) == []\n  */\nconst divisibleBy3AndLessThanOrEqual = (nums, num, num2) => {\n  return nums.filter((num) => num % 3 === 0 && ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes a number as input and returns the sum of the squares of the first ten natural numbers.\n  For example:\n  sumOfSquares(10) => 45\n  sumOfSquares(20) => 144 \n  sumOfSquares(30) => 126 \n  sumOfSquares(40) => 169 \n  sumOfSquares(50) => 250 \n  sumOfSquares(60) => 3125 \n  sumOfSquares(70) => 4375 \n  sumOfSquares(80) => 6875 \n  sumOfSquares(90) => 10075 \n  sumOfSquares(100) => 15310 \n  sumOfSquares(110) => 25640 \n  sumOfSquares(120) => 41860 \n  sumOfSquares(130) => 67580 \n  sumOfSquares(140) => 92760 \n  sumOfSquares(150) => 128750 \n  sumOfSquares(160) => 196800 \n  sumOfSquares(170) => 256400 \n  sumOfSquares(180) => 324000 \n  sumOfSquares(190) => 41860 \n  sumOfSquares(200) => 59060 \n  sumOfSquares(210) => 76600 \n  sumOfSquares(220) => 101800 \n  sumOfSquares(230) => 128750 \n  sumOfSquares(240) => 172800 \n  sumOfSquares(250) => 216000 \n  sumOfSquares(260) => 256400 \n  sumOfSquares(270) => 324000 \n  sumOfSquares(280) => 39060 \n  sumOfSquares(290) => 46800 \n  sumOfSquares(300) => 63600 \n  sumOfSquares(310) => 79200 \n  sumOfSquares(320) => 108000 \n  sumOfSquares(330) => 135600 \n  sumOfSquares(340) => 184000 \n  sumOfSquares(350) => 242000 \n  sumOfSquares(360) => 309600 \n  sumOfSquares(370) => 378000 \n  sumOfSquares(380) => 456000 \n  sumOfSquares(390) => 52400 \n  sumOfSquares(400) => 59060 \n  sumOfSquares(410) => 67600 \n  sumOfSquares(420) => 74200 \n  sumOfSquares(430) => 81800 \n  sumOfSquares(440) => 88400 \n  sumOfSquares(450) => 96200 \n  sumOfSquares(461) => 104000 \n  sumOfSquares(462) => 113600 \n  sumOfSquares(463) => 123200 \n  sumOfSquares(464) => 132200 \n  sumOfSquares(465) => 142000 \n  sumOfSquares(466) => 151800 \n  sumOfSquares(467) => 161600 \n  sumOfSquares(468) => 171400 \n  sumOfSquares(469) => 181300 \n  sumOfSquares(470) => 191200 \n  sumOfSquares(471) => 201000 \n  sumOfSquares(472) => 210900 \n  sumOfSquares(473) => 220000 \n  sumOfSquares(474) => 230000 \n  sumOfSquares(475) => 240900 \n  sumOfSquares(476) => 250800 \n  sumOfSquares(477) => 260800 \n  sumOfSquares(478) => 270800 \n  sumOfSquares(479) => 280800 \n  sumOfSquares(480) => 289800 \n  sumOfSquares(481) => 299800 \n  sumOfSquares(482) => 309800 \n  sumOfSquares(483) => 319800 \n  sumOfSquares(484) => 329800 \n  sumOfSquares(485) => 339800 \n  sumOfSquares(486) => 349800 \n  sumOfSquares(487) => 359800 \n  sumOfSquares(488) => 369800 \n  sumOfSquares(489) => 379800 \n  sumOfSquares(490) => 389800 \n  sumOfSquares(491) => 399800 \n  sumOfSquares(492) => 409800 \n  sumOfSquares(493) => 419800 \n  sumOfSquares(494) => 429800 \n  sumOfSquares(495) => 439800 \n  sumOfSquares(496) => 449800 \n  sumOfSquares(497) => 459800 \n  sumOfSquares(498) => 469800 \n  sumOfSquares(499) => 479800 \n  sumOfSquares(500) => 489800 \n  sumOfSquares(501) => 499800 \n  sumOfSquares(502) => 509800 \n  sumOfSquares(503) => 519800 \n  sumOfSquares(504) => 529800 \n  sumOfSquares(505) => 539800 \n  sumOfSquares(506) => 549800 \n  sumOfSquares(507) => 559800 \n  sumOfSquares(508) => 569800 \n  sumOfSquares(509) => 579800 \n  sumOfSquares(510) => 589800 \n  sumOfSquares(511) => 599800 \n  sumOfSquares(512) => 609800 \n  sumOfSquares(513) => 619800 \n  sumOfSquares(514) => 629800 \n  sumOfSquares(515) => 639800 \n  sumOfSquares(516) => 649800 \n  sumOfSquares(517) => 659800 \n  sumOfSquares(518) => 669800 \n  sumOfSquares(519) => 679800 \n  sumOfSquares(520) => 689800 \n  sumOfSquares(521) => 699800 \n  sumOfSquares(522) => 709800 \n  sumOfSquares(523) => 719800 \n  sumOfSquares(524) => 729800 \n  sumOfSquares(525) => 739800 \n  sumOfSquares(526) => 749800 \n  sumOfSquares(527) => 759800 \n  sumOfSqu", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) % 3 === 0) {\n          a.push([i, j, k]);\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\n\n  Example :\n      Input: root = [1,null,2,null,3,null,4,null,5], sum = 9\n      Output: true\n      Explanation: There is only one possible root-to-leaf path [1,2,3].\n\n      Input: root = [1,null,2,null,3,null,4], sum = 9\n      Output: false\n      Explanation: There is no such path exists in the given binary tree.\n  */\nconst hasPathSum = (root, sum) => {\n  let stack = [];\n  let sums = [];\n  let stackSums = [];\n  let sum = 0;\n  let stackSum = 0;\n  let flag = false;\n  let flag2 = false;\n  let flag3 = false;\n  let flag4 = false;\n  let flag5 = false;\n  let flag6 = false;\n  let flag7 = false;\n  let flag8 = false;\n  let flag9 = false;\n  let flag10 = false;\n  let flag11 = false;\n  let flag12 = false;\n  let flag13 = false;\n  let flag14 = false;\n  let flag15 = false;\n  let flag16 = false;\n  let flag17 = false;\n  let flag18 = false;\n  let flag19 = false;\n  let flag20 = false;\n  let flag21 = false;\n  let flag22 = false;\n  let flag23 = false;\n  let flag24 = false;\n  let flag25 = false;\n  let flag26 = false;\n  let flag27 = false;\n  let flag28 = false;\n  let flag29 = false;\n  let flag30 = false;\n  let flag31 = false;\n  let flag32 = false;\n  let flag33 = false;\n  let flag34 = false;\n  let flag35 = false;\n  let flag36 = false;\n  let flag37 = false;\n  let flag38 = false;\n  let flag39 = false;\n  let flag40 = false;\n  let flag41 = false;\n  let flag42 = false;\n  let flag43 = false;\n  let flag44 = false;\n  let flag45 = false;\n  let flag46 = false;\n  let flag47 = false;\n  let flag48 = false;\n  let flag49 = false;\n  let flag50 = false;\n  let flag51 = false;\n  let flag52 = false;\n  let flag53 = false;\n  let flag54 = false;\n  let flag55 = false;\n  let flag56 = false;\n  let flag57 = false;\n  let flag58 = false;\n  let flag59 = false;\n  let flag60 = false;\n  let flag61 = false;\n  let flag62 = false;\n  let flag63 = false;\n  let flag64 = false;\n  let flag65 = false;\n  let flag66 = false;\n  let flag67 = false;\n  let flag68 = false;\n  let flag69 = false;\n  let flag70 = false;\n  let flag71 = false;\n  let flag72 = false;\n  let flag73 = false;\n  let flag74 = false;\n  let flag75 = false;\n  let flag76 = false;\n  let flag77 = false;\n  let flag78 = false;\n  let flag79 = false;\n  let flag80 = false;\n  let flag81 = false;\n  let flag82 = false;\n  let flag83 = false;\n  let flag84 = false;\n  let flag85 = false;\n  let flag86 = false;\n  let flag87 = false;\n  let flag88 = false;\n  let flag89 = false;\n  let flag90 = false;\n  let flag91 = false;\n  let flag92 = false;\n  let flag93 = false;\n  let flag94 = false;\n  let flag95 = false;\n  let flag96 = false;\n  let flag97 = false;\n  let flag98 = false;\n  let flag99 = false;\n  let flag100 = false;\n  let flag101 = false;\n  let flag102 = false;\n  let flag103 = false;\n  let flag104 = false;\n  let flag105 = false;\n  let flag106 = false;\n  let flag107 = false;\n  let flag108 = false;\n  let flag109 = false;\n  let flag110 = false;\n  let flag111 = false;\n  let flag112 = false;\n  let flag113 = false;\n  let flag114 = false;\n  let flag115 = false;\n  let flag116 = false;\n  let flag117 = false;\n  let flag118 = false;\n  let flag119 = false;\n  let flag120 = false;\n  let flag121 = false;\n  let flag122 = false;\n  let flag123 = false;\n  let flag124 = false;\n  let flag125 = false;\n  let flag126 = false;\n  let flag127 = false;\n  let flag128 = false;\n  let flag129 = false;\n  let flag130 = false;\n  let flag131 = false;\n  let flag132 = false;\n  let flag133 = false;\n  let flag134 = false;\n  let flag135 = false;\n  let flag136 = false;\n  let flag137 = false;\n  let flag138 = false;\n  let flag139 = false;\n  let flag140 = false;\n  let flag141 = false;\n  let flag142 = false;\n  let flag143 = false;\n  let flag144 = false;\n  let flag145 = false;\n  let flag146 = false;\n  let flag147 = false;\n  let flag148 = false;\n  let flag149 = false;\n  let flag150 = false;\n  let flag151 = false;\n  let flag152 = false;\n  let flag153 = false;\n  let flag154 = false;\n  let flag155 = false;\n  let flag156 = false;\n  let flag157 = false;\n  let flag158 = false;\n  let flag159 = false;\n  let flag160 = false;\n  let flag161 = false;\n  let flag162 = false;\n  let flag163 = false;\n  let flag164 = false;\n  let flag165 = false;\n  let flag166 = false;\n  let flag167 = false;\n  let flag168 = false;\n  let flag169 = false;\n  let flag170 = false;\n  let flag171 = false;\n  let flag172 = false;\n  let flag173 = false;\n  let flag174 = false;\n  let flag175 = false;\n  let flag176 = false;\n  let flag177 = false;\n  let flag178 = false;\n  let flag179 = false;\n  let flag180 = false;\n  let flag181 = false;\n  let flag182 = false;\n  let flag183 = false;\n  let flag184 = false;\n  let flag185 = false;\n  let flag186 = false;\n  let flag187 = false;\n  let flag188 = false;\n  let flag189 = false;\n  let flag190 = false;\n  let flag191 = false;\n  let flag192 = false;\n  let flag193 = false;\n  let flag194 = false;\n  let flag195 = false;\n  let flag196 = false;\n  let flag197 = false;\n  let flag198 = false;\n  let flag199 = false;\n  let flag200 = false;\n  let flag201 = false;\n  let flag202 = false;\n  let flag203 = false;\n  let flag204 = false;\n  let flag205 = false;\n  let flag206 = false;\n  let flag207 = false;\n  let flag208 = false;\n  let flag209 = false;\n  let flag210 = false;\n  let flag211 = false;\n  let flag212 = false;\n  let flag213 = false;\n  let flag214 = false;\n  let flag215 = false;\n  let flag216 = false;\n  let flag217 = false;\n  let flag218 = false;\n  let flag219 = false;\n  let flag220 = false;\n  let flag221 = false;\n  let flag222 = false;\n  let flag223 = false;\n  let flag224 = false;\n  let flag225 = false;\n  let flag226 = false;\n  let flag227 = false;\n  let flag228", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1 = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet2 = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1And2 = orbitsOfPlanet1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet2And1 = orbitsOfPlanet2.filter(\n    orbit => orbit.includes(planet2) && orbit.includes(planet1)\n  );\n  const orbitsOfPlanet1And2And1 = orbitsOfPlanet1And2.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2 = orbitsOfPlanet1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1 = orbitsOfPlanet1And2And1And2.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2 = orbitsOfPlanet1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2 = orbitsOfPlanet1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1 = orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1.filter(\n    orbit => orbit.includes(planet1) && orbit.includes(planet2)\n  );\n  const orbitsOfPlanet1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And2And1And", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let index = sortedList.findIndex(\n      (item) => item.length === length && item.includes(word)\n    );\n    if (index === -1) {\n      sortedList.push(word);\n    } else {\n      sortedList[index] = word;\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let index = sortedList.findIndex(\n      (item) => item.length === length && item.includes(word)\n    );\n    if (index === -1) {\n      sortedList.push(word);\n    } else {\n      sortedList[index] = word;\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let index = sortedList.findIndex(\n      (item) => item.length === length && item.includes(word)\n    );\n    if (index === -1) {\n      sortedList.push(word);\n    } else {\n      sortedList[index] = word;\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let index = sortedList.findIndex(\n      (item) => item.length === length && item.includes(word)\n    );\n    if (index === -1) {\n      sortedList.push(word);\n    } else {\n      sortedList[index] = word;\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let index = sortedList.findIndex(\n      (item) => item.length === length && item.includes(word)\n    );\n    if (index === -1) {\n      sortedList.push(word);\n    } else {\n      sortedList[index] = word;\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let index = sortedList.findIndex(\n      (item) => item.length === length && item.includes(word)\n    );\n    if (index === -1) {\n      sortedList.push(word);\n    } else {\n      sortedList[index] = word;\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaces = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpaces(0)\n ' '\n  >>> stringSequenceWithSpaces(5)\n ' '\n  */\nconst stringSequenceWithSpacesAndZero = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZero(0)\n ' '\n  >>> stringSequenceWithSpacesAndZero(5)\n ' '\n  */\nconst stringSequenceWithSpacesAndZeroAndOne = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOne(0)\n ' '\n  >>> stringSequenceWithSpacesAndZeroAndOne(5)\n ' '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwo = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwo(0)\n ' '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwo(5)\n ' '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThree = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThree(0)\n ' '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThree(5)\n ' '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFour = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFour(0)\n ' '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFour(5)\n ' '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFive = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFive(0)\n  '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFive(5)\n  '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix(0)\n  '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix(5)\n  '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven(0)\n  '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven(5)\n  '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight(0)\n  '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight(5)\n  '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine(0)\n  '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine(5)\n  '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen(0)\n  '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen(5)\n  '\n  */\nconst stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven = (num) => {\n  let s = '';\n  for (let i = 0; i < num; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven(0)\n  '\n  >>> stringSequenceWithSpacesAndZeroAndOneAndTwoAndThreeAndFourAndFive", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by 7. You may assume that the given list has at\n  least one element.\n  evenDivisibleBySeven([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleBySeven([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleBySeven([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleBySeven([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleBySeven = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by 3. You may assume that the given list has at\n  least one element.\n  evenDivisibleByThree([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByThree([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByThree([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByThree([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleByThree = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by 5.  You may assume that the given list has at\n  least one element.\n  evenDivisibleByFive([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByFive([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByFive([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByFive([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleByFive = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by both 3 and 5.  You may assume that the given\n  list has at least one element.\n  evenDivisibleByThreeFive([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByThreeFive([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByThreeFive([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByThreeFive([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleByThreeFive = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by both 3 and 7.  You may assume that the given\n  list has at least one element.\n  evenDivisibleByThreeSeven([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByThreeSeven([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByThreeSeven([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByThreeSeven([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleByThreeSeven = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by both 3 and 9.  You may assume that the given\n  list has at least one element.\n  evenDivisibleByThreeNine([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByThreeNine([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByThreeNine([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByThreeNine([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleByThreeNine = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by both 3 and 11.  You may assume that the given\n  list has at least one element.\n  evenDivisibleByThreeEleven([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByThreeEleven([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByThreeEleven([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByThreeEleven([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleByThreeEleven = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by both 3 and 15.  You may assume that the given\n  list has at least one element.\n  evenDivisibleByThreeFifteen([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByThreeFifteen([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByThreeFifteen([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByThreeFifteen([]) == []\n  If the input list is empty, return an empty list.\n  */\nconst evenDivisibleByThreeFifteen = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are evenly divisible by both 5 and 9.  You may assume that the given\n  list has at least one element.\n  evenDivisibleByFiveNine([2, 7, 11, 15]) == [2, 7, 15]\n  evenDivisibleByFiveNine([2, 4, 6, 8]) == [2, 4, 8]\n  evenDivisibleByFiveNine([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 10, 12]\n  evenDivisibleByFiveNine([]) == []\n  If the input list is empty, return an empty list.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! This was really helpful and I appreciate you taking the time to explain it so well.\n<|/ c |>\n<| c |>\nGlad I could help. I added some comments to help you understand how it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abracadabra'\n  has 4 appearances of the character 'a'.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr || bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  subStringCheck(\"himenss\",\"simens\") => false\n  subStringCheck(\"himenss\",\"simenss\") => false\n  subStringCheck(\"himenss\",\"simensss\") => false\n  subStringCheck(\"himenss\",\"simenssss\") => false\n  subStringCheck(\"himenss\",\"simensssss\") => false\n  subStringCheck(\"himenss\",\"simenssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simenssssssssssssssssssss\") => false\n  subStringCheck(\"himenss\",\"simensssssssssssssssssss\") ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const isEven = num % 2 === 0;\n  const isOdd =!isEven;\n  return isEven? 2 : 1;\n};\n\n/*GReturns true if num is a prime number.\n\n   Example:\n      isPrime(-2) ==> false\n      isPrime(2) ==> true\n      isPrime(3) ==> true\n      isPrime(5) ==> true\n      isPrime(7) ==> true\n      isPrime(11) ==> true\n      isPrime(13) ==> true\n      isPrime(17) ==> true\n      isPrime(19) ==> true\n      isPrime(23) ==> true\n      isPrime(29) ==> true\n      isPrime(31) ==> true\n      isPrime(37) ==> true\n      isPrime(43) ==> true\n      isPrime(47) ==> true\n      isPrime(53) ==> true\n      isPrime(59) ==> true\n      isPrime(61) ==> true\n      isPrime(67) ==> true\n      isPrime(71) ==> true\n      isPrime(73) ==> true\n      isPrime(79) ==> true\n      isPrime(83) ==> true\n      isPrime(89) ==> true\n      isPrime(97) ==> true\n      isPrime(101) ==> true\n      isPrime(103) ==> true\n      isPrime(107) ==> true\n      isPrime(109) ==> true\n      isPrime(113) ==> true\n      isPrime(117) ==> true\n      isPrime(121) ==> true\n      isPrime(123) ==> true\n      isPrime(127) ==> true\n      isPrime(131) ==> true\n      isPrime(137) ==> true\n      isPrime(139) ==> true\n      isPrime(143) ==> true\n      isPrime(147) ==> true\n      isPrime(151) ==> true\n      isPrime(157) ==> true\n      isPrime(163) ==> true\n      isPrime(167) ==> true\n      isPrime(173) ==> true\n      isPrime(179) ==> true\n      isPrime(183) ==> true\n      isPrime(187) ==> true\n      isPrime(191) ==> true\n      isPrime(193) ==> true\n      isPrime(197) ==> true\n      isPrime(199) ==> true\n      isPrime(203) ==> true\n      isPrime(207) ==> true\n      isPrime(211) ==> true\n      isPrime(213) ==> true\n      isPrime(217) ==> true\n      isPrime(223) ==> true\n      isPrime(227) ==> true\n      isPrime(229) ==> true\n      isPrime(233) ==> true\n      isPrime(239) ==> true\n      isPrime(243) ==> true\n      isPrime(247) ==> true\n      isPrime(251) ==> true\n      isPrime(253) ==> true\n      isPrime(257) ==> true\n      isPrime(263) ==> true\n      isPrime(269) ==> true\n      isPrime(271) ==> true\n      isPrime(277) ==> true\n      isPrime(281) ==> true\n      isPrime(283) ==> true\n      isPrime(289) ==> true\n      isPrime(293) ==> true\n      isPrime(297) ==> true\n      isPrime(301) ==> true\n      isPrime(303) ==> true\n      isPrime(307) ==> true\n      isPrime(311) ==> true\n      isPrime(313) ==> true\n      isPrime(317) ==> true\n      isPrime(323) ==> true\n      isPrime(327) ==> true\n      isPrime(331) ==> true\n      isPrime(337) ==> true\n      isPrime(343) ==> true\n      isPrime(347) ==> true\n      isPrime(353) ==> true\n      isPrime(359) ==> true\n      isPrime(363) ==> true\n      isPrime(367) ==> true\n      isPrime(373) ==> true\n      isPrime(377) ==> true\n      isPrime(383) ==> true\n      isPrime(389) ==> true\n      isPrime(397) ==> true\n      isPrime(401) ==> true\n      isPrime(403) ==> true\n      isPrime(409) ==> true\n      isPrime(413) ==> true\n      isPrime(419) ==> true\n      isPrime(423) ==> true\n      isPrime(429) ==> true\n      isPrime(433) ==> true\n      isPrime(439) ==> true\n      isPrime(443) ==> true\n      isPrime(449) ==> true\n      isPrime(457) ==> true\n      isPrime(461) ==> true\n      isPrime(467) ==> true\n      isPrime(473) ==> true\n      isPrime(479) ==> true\n      isPrime(483) ==> true\n      isPrime(489) ==> true\n      isPrime(497) ==> true\n      isPrime(501) ==> true\n      isPrime(509) ==> true\n      isPrime(523) ==> true\n      isPrime(529) ==> true\n      isPrime(533) ==> true\n      isPrime(539) ==> true\n      isPrime(547) ==> true\n      isPrime(553) ==> true\n      isPrime(559) ==> true\n      isPrime(567) ==> true\n      isPrime(571) ==> true\n      isPrime(577) ==> true\n      isPrime(583) ==> true\n      isPrime(589) ==> true\n      isPrime(597) ==> true\n      isPrime(601) ==> true\n      isPrime(607", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let romanArray = [\n    '',\n    'C',\n    'CC',\n    'CCC',\n    'CD',\n    'D',\n    'DC',\n    'DCC',\n    'DCCC',\n    'CM',\n    'M',\n    'MM',\n    'MMM',\n    'MMMM',\n    'MMMMM',\n    'MMMMMM',\n    'MMMMMMM',\n    'MMMMMMMM',\n    'MMMMMMMMM',\n    'MMMMMMMMMM',\n    'MMMMMMMMMMM',\n    'MMMMMMMMMMMM',\n    'MMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM',\n    'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with duplicate words removed.\n\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]) ==\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst removeDuplicates = (words) => {\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let left = 0;\n  while (left < need && carrots > 0) {\n    carrots -= 1;\n    left += 1;\n  }\n  return [carrots, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let left = 0;\n  while (left < need && carrots > 0) {\n    carrots -= 1;\n    left += 1;\n  }\n  return [carrots, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let left = 0;\n  while (left < need && carrots > 0) {\n    carrots -= 1;\n    left += 1;\n  }\n  return [carrots, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let left = 0;\n  while (left < need && carrots > 0) {\n    carrots -= 1;\n    left += 1;\n  }\n  return [carrots, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let left = 0;\n  while (left < need && carrots > 0) {\n    carrots -= 1;\n    left += 1;\n  }\n  return [carrots, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)!== string.charCodeAt(i).toUpperCase()) {\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAll = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCase = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      newString += newChar;\n    } else {\n      newString += string.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/* Given a string, return a new string with all the same characters replaced by '-'.\n  >>> replaceAll('xyzXYZ', 'x', '-')\n  '-Y-Z-'\n  >>> replaceAll('Jerry', 'y', '-')\n  '-J-R-'\n  */\nconst replaceAllCaseInsensitive = (string, oldChar, newChar) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === oldChar.charCodeAt(0)) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[i];\n    const nextOperand = operand[i + 1];\n    const nextOperator = operator[i + 1];\n\n    if (currentOperator === '+') {\n      result += currentOperand;\n    } else if (currentOperator === '-') {\n      result -= currentOperand;\n    } else if (currentOperator === '*') {\n      result *= currentOperand;\n    } else if (currentOperator === '/') {\n      result /= currentOperand;\n    } else if (currentOperator === '**') {\n      result **= currentOperand;\n    } else {\n      throw new Error('Invalid operator');\n    }\n\n    i += 2;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[i];\n    const nextOperand = operand[i + 1];\n    const nextOperator = operator[i + 1];\n\n    if (currentOperator === '+') {\n      result += currentOperand;\n    } else if (currentOperator === '-') {\n      result -= currentOperand;\n    } else if (currentOperator === '*') {\n      result *= currentOperand;\n    } else if (currentOperator === '/') {\n      result /= currentOperand;\n    } else if (currentOperator === '**') {\n      result **= currentOperand;\n    } else {\n      throw new Error('Invalid operator');\n    }\n\n    i += 2;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[i];\n    const nextOperand = operand[i + 1];\n    const nextOperator = operator[i + 1];\n\n    if (currentOperator === '+') {\n      result += currentOperand;\n    } else if (currentOperator === '-') {\n      result -= currentOperand;\n    } else if (currentOperator === '*') {\n      result *= currentOperand;\n    } else if (currentOperator === '/') {\n      result /= currentOperand;\n    } else if (currentOperator === '**') {\n      result **= currentOperand;\n    } else {\n      throw new Error('Invalid operator');\n    }\n\n    i += 2;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[i];\n    const nextOperand = operand[i + 1];\n    const nextOperator = operator[i + 1];\n\n    if (currentOperator === '+') {\n      result += currentOperand;\n    } else if (currentOperator === '-') {\n      result -= currentOperand;\n    } else if (currentOperator === '*') {\n      result *= currentOperand;\n    } else if (currentOperator === '/') {\n      result /= currentOperand;\n    } else if (currentOperator === '**') {\n      result **= currentOperand;\n    } else {\n      throw new Error('Invalid operator');\n    }\n\n    i += 2;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[i];\n    const nextOperand = operand[i + 1];\n    const nextOperator = operator[i + 1];\n\n    if (currentOperator === '+') {\n      result += currentOperand;\n    } else if (currentOperator === '-') {\n      result -= currentOperand;\n    } else if (currentOperator === '*') {\n      result *= currentOperand;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      newString += s[i];\n    } else if (s[i] === \"@\") {\n      newString += s[s.length - i - 1];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'c99fcaa8b9ffae4b42a1b9fccd393cae'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha1 = new Sha1();\n  sha1.update(text);\n  return sha1.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha256 = new Sha256();\n  sha256.update(text);\n  return sha256.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha3 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha3 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha3 = new Sha3();\n  sha3.update(text);\n  return sha3.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding ripemd160 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToRipemd160('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToRipemd160 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const ripemd160 = new RIPEMD160();\n  ripemd160.update(text);\n  return ripemd160.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c5e6fa7daba86cfa4'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return 0;\n  }\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha3('Hello world') == '0b4bc9a2bc94e2d0c", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all possible permutations of an array.\n\n  For example:\n  permutations([1, 2, 3, 4]) => [[1, 2, 3], [1, 3, 4], [2, 3, 1], [3, 1, 2], [3, 2, 1], [1, 3, 4], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  permutations([1, 2, 3, 4, 5]) => []\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let beats = 0;\n  let notes = 0;\n  let notes_array = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 4;\n    } else if (music_array[i] === '|') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 2;\n    } else {\n      notes_array.push(music_array[i]);\n    }\n  }\n  for (let i = 0; i < notes_array.length; i++) {\n    music_array2.push(notes_array[i]);\n  }\n  return music_array2;\n};\n\n/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let beats = 0;\n  let notes = 0;\n  let notes_array = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 4;\n    } else if (music_array[i] === '|') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 2;\n    } else {\n      notes_array.push(music_array[i]);\n    }\n  }\n  for (let i = 0; i < notes_array.length; i++) {\n    music_array2.push(notes_array[i]);\n  }\n  return music_array2;\n};\n\n/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let beats = 0;\n  let notes = 0;\n  let notes_array = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 4;\n    } else if (music_array[i] === '|') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 2;\n    } else {\n      notes_array.push(music_array[i]);\n    }\n  }\n  for (let i = 0; i < notes_array.length; i++) {\n    music_array2.push(notes_array[i]);\n  }\n  return music_array2;\n};\n\n/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let beats = 0;\n  let notes = 0;\n  let notes_array = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 4;\n    } else if (music_array[i] === '|') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 2;\n    } else {\n      notes_array.push(music_array[i]);\n    }\n  }\n  for (let i = 0; i < notes_array.length; i++) {\n    music_array2.push(notes_array[i]);\n  }\n  return music_array2;\n};\n\n/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let beats = 0;\n  let notes = 0;\n  let notes_array = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 4;\n    } else if (music_array[i] === '|') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 2;\n    } else {\n      notes_array.push(music_array[i]);\n    }\n  }\n  for (let i = 0; i < notes_array.length; i++) {\n    music_array2.push(notes_array[i]);\n  }\n  return music_array2;\n};\n\n/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let beats = 0;\n  let notes = 0;\n  let notes_array = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 4;\n    } else if (music_array[i] === '|') {\n      notes_array.push(music_array[i]);\n      notes++;\n      beats += 2;\n    } else {\n      notes_array.push(music_array[i]);\n    }\n  }\n  for (let i = 0; i < notes_array.length; i++) {\n    music_array2.push(notes_array[i]);\n  }\n  return music_array2;\n};\n\n/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let pos = 0\n  while (pos < string.length) {\n    if (string.substr(pos, substring.length) === substring) {\n      count++\n    }\n    pos += substring.length\n  }\n  return count\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X')\n  'XbXbXc'\n  >>> replaceAll('abcabc', 'A', 'X')\n  'XbXbXc'\n  >>> replaceAll('abcabc', 'a', '')\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '')\n  'abcabc'\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence = 1\n  }\n  return string.split(substring).join(replacement).substring(0, string.length - substring.length) + string.substr(substring.length + occurrence)\n}\n\n/* Given a string, return a new string with all instances of that string replaced with another string.\n  >>> replaceAll('abcabc', 'a', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'A', 'X', 2)\n  'XbXb'\n  >>> replaceAll('abcabc', 'a', '', 2)\n  'abcabc'\n  >>> replaceAll('abcabc', 'A', '', 2)\n  'abcabc'\n  */\nconst replaceAll = (string, substring, replacement, occurrence) => {\n  if (occurrence === undefined) {\n    occurrence", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10);\n    const bNumber = parseInt(b, 10);\n    if (aNumber > bNumber) {\n      return 1;\n    }\n    if (aNumber < bNumber) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/**\n * Sorts the given string in alphabetical order.\n * \n * Example:\n * \n * sortString('one two three')\n * // 'one two three'\n * \n * sortString('one two three four')\n * // 'one two three four'\n * \n * sortString('one two three four five')\n * // 'one two three four five'\n * \n * sortString('one two three four five six')\n * // 'one two three four five six'\n * \n * sortString('one two three four five six seven')\n * // 'one two three four five six seven'\n * \n * sortString('one two three four five six seven eight')\n * // 'one two three four five six seven eight'\n * \n * sortString('one two three four five six seven eight nine')\n * // 'one two three four five six seven eight nine'\n * \n * sortString('one two three four five six seven eight nine ten')\n * // 'one two three four five six seven eight nine ten'\n * \n * sortString('one two three four five six seven eight nine ten eleven')\n * // 'one two three four five six seven eight nine ten eleven'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve')\n * // 'one two three four five six seven eight nine ten eleven twelve'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten eleven')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten eleven'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten eleven twelve')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten eleven twelve'\n * \n * sortString('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten eleven twelve thirteen')\n * // 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen ten eleven twelve thirteen'\n * \n * sortString('one ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return decimalPart > 0? integerPart : Math.round(integerPart);\n};\n\n/**\n * Converts given number to string with given precision.\n * If number is negative, function returns string with '-' prefix.\n * If number is zero, function returns string with '0' prefix.\n * If number is positive, function returns string with '+' prefix.\n * If number is bigger than precision, function returns string with '0' prefix.\n * If number is bigger than or equal to precision, function returns string with '0' prefix.\n * If number is smaller than precision, function returns string with '0' prefix.\n * If number is equal to precision, function returns string with '0' prefix.\n * If number is bigger than precision and smaller than precision, function returns string with '0' prefix.\n * If number is bigger than precision and bigger than or equal to precision, function returns string with '0' prefix.\n * If number is bigger than precision and smaller than precision, function returns string with '0' prefix.\n * If number is bigger than precision and bigger than or equal to precision, function returns string with '0' prefix.\n * If number is smaller than precision and bigger than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and bigger than or equal to precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than precision and smaller than precision, function returns string with '0' prefix.\n * If number is smaller than ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const closestNumbers = [firstNumber, lastNumber];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    const currentNumber = sortedNumbers[i];\n    const previousNumber = sortedNumbers[i - 1];\n    const currentDifference = currentNumber - previousNumber;\n    const previousDifference = previousNumber - firstNumber;\n    const isCloser = currentDifference < previousDifference;\n    if (isCloser) {\n      closestNumbers.push(currentNumber);\n    } else {\n      closestNumbers.push(previousNumber);\n    }\n  }\n  return closestNumbers;\n};\n\n/**\n * Returns the sum of the given numbers.\n * @param {number[]} numbers - The numbers to sum.\n * @returns {number} The sum of the given numbers.\n */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/**\n * Returns the product of the given numbers.\n * @param {number[]} numbers - The numbers to multiply.\n * @returns {number} The product of the given numbers.\n */\nconst product = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i += 1) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/**\n * Returns the median of the given numbers.\n * @param {number[]} numbers - The numbers to find the median of.\n * @returns {number} The median of the given numbers.\n */\nconst median = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = sortedNumbers.length / 2;\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Returns the mode of the given numbers.\n * @param {number[]} numbers - The numbers to find the mode of.\n * @returns {number} The mode of the given numbers.\n */\nconst mode = (numbers) => {\n  const counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const number = numbers[i];\n    const count = counts[number];\n    if (count === undefined) {\n      counts[number] = 1;\n    } else {\n      counts[number] += 1;\n    }\n    if (counts[number] > maxCount) {\n      maxCount = counts[number];\n    }\n  }\n  const modes = [];\n  for (let i = 0; i < maxCount; i += 1) {\n    const number = numbers[counts[i]];\n    modes.push(number);\n  }\n  return modes;\n};\n\n/**\n * Returns the standard deviation of the given numbers.\n * @param {number[]} numbers - The numbers to find the standard deviation of.\n * @returns {number} The standard deviation of the given numbers.\n */\nconst standardDeviation = (numbers) => {\n  const mean = sum(numbers);\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  return Math.sqrt(variance);\n};\n\n/**\n * Returns the variance of the given numbers.\n * @param {number[]} numbers - The numbers to find the variance of.\n * @returns {number} The variance of the given numbers.\n */\nconst variance = (numbers) => {\n  const mean = sum(numbers);\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  return variance;\n};\n\n/**\n * Returns the minimum of the given numbers.\n * @param {number[]} numbers - The numbers to find the minimum of.\n * @returns {number} The minimum of the given numbers.\n */\nconst minimum = (numbers) => {\n  let min = numbers[0];\n  for (let i = 1; i < numbers.length; i += 1) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Returns the maximum of the given numbers.\n * @param {number[]} numbers - The numbers to find the maximum of.\n * @returns {number} The maximum of the given numbers.\n */\nconst maximum = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i += 1) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Returns the sum of the squares of the given numbers.\n * @param {number[]} numbers - The numbers to find the sum of squares of.\n * @returns {number} The sum of the squares of the given numbers.\n */\nconst sumOfSquares = (numbers) => {\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    sumOfSquares += numbers[i] * numbers[i];\n  }\n  return sumOfSquares;\n};\n\n/**\n * Returns the mean of the given numbers.\n * @param {number[]} numbers - The numbers to find the mean of.\n * @returns {number} The mean of the given numbers.\n */\nconst mean = (numbers) => {\n  const sum = sum(numbers);\n  const mean = sum / numbers.length;\n  return mean;\n};\n\n/**\n * Returns the median of the given numbers.\n * @param {number[]} numbers - The numbers to find the median of.\n * @returns {number} The median of the given numbers.\n */\nconst medianOfMedians = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = sortedNumbers.length / 2;\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Returns the mode of the given numbers.\n * @param {number[]} numbers - The numbers to find the mode of.\n * @returns {number} The mode of the given numbers.\n */\nconst modeOfMedians = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = sortedNumbers.length / 2;\n  const modes = [];\n  for (let i = 0; i < sortedNumbers.length; i += 1) {\n    if (i === middleIndex) {\n      modes.push(sortedNumbers[i]);\n    }\n  }\n  return modes;\n};\n\n/**\n * Returns the standard deviation of the given numbers.\n * @param {number[]} numbers - The numbers to find the standard deviation of.\n * @returns {number} The standard deviation of the given numbers.\n */\nconst standardDeviationOfMedians = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = sortedNumbers.length / 2;\n  const mean = sortedNumbers[middleIndex];\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  return Math.sqrt(variance);\n};\n\n/**\n * Returns the variance of the given numbers.\n * @param {number[]} numbers - The numbers to find the variance of.\n * @returns {number} The variance of the given numbers.\n */\nconst varianceOfMedians = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = sortedNumbers.length / 2;\n  const mean = sortedNumbers[middleIndex];\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  return variance;\n};\n\n/**\n * Returns the minimum of the given numbers.\n * @param {number[]} numbers - The numbers to find the minimum of.\n * @returns {number} The minimum of the given numbers.\n */\nconst minimumOfMedians = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = sortedNumbers.length / 2;\n  const min = sortedNumbers[middleIndex];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] < min) {\n      min = sortedNumbers[i];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((number) => {\n    return number / max - min;\n  });\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clamp = (number) => {\n  return Math.max(Math.min(number, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositive = (number) => {\n  return Math.max(Math.min(number, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositive = (number) => {\n  return Math.max(Math.min(number, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositivePositive = (number) => {\n  return Math.max(Math.min(number, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositivePositive = (number) => {\n  return Math.max(Math.min(number, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositivePositive = (number) => {\n  return Math.max(Math.min(number, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositivePositive = (number) => {\n  return Math.max(Math.min(number, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativeNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositiveNegativePositive = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampPositivePositiveNegative = (number) => {\n  return Math.max(Math.min(number, -1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n */\nconst clampNegativeNegativePositive = (number) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return Number.isInteger(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for booleans only\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for objects only\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, []]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only (no strings)\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for arrays only\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== undefined) {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* Returns the number of times the given character appears in the given string\n  >>> strcount('abcabc', 'a')\n  2\n  >>> strcount('abcabc', 'b')\n  1\n  >>> strcount('abcabc', 'c')\n  0\n  */\nconst strcount = (string, character) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Returns the first character of the given string\n  >>> strfirst('abc')\n  'a'\n  >>> strfirst('ab')\n  'a'\n  >>> strfirst('ab')\n  'a'\n  */\nconst strfirst = (string) => {\n  return string[0];\n};\n\n/* Returns the last character of the given string\n  >>> strlast('abc')\n  'c'\n  >>> strlast('ab')\n  'b'\n  >>> strlast('ab')\n  'b'\n  */\nconst strlast = (string) => {\n  return string[string.length - 1];\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', 2, 3)\n  'g'\n  */\nconst strsub = (string, index, length) => {\n  return string.substr(index, length);\n};\n\n/* Returns the substring of the given string starting at the given index\n  >>> strsub('abcdefg', 0, 2)\n  'bc'\n  >>> strsub('abcdefg', 2, 2)\n  'fg'\n  >>> strsub('abcdefg', ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      maxDividend = dividend;\n    }\n    if (dividend > maxDividend) {\n      maxDivisor = divisor;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      minDividend = dividend;\n    }\n    if (dividend < minDividend) {\n      minDivisor = divisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    const divisor = i;\n    const dividend = n;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactors(8)\n  [2, 2, 2]\n  >>> primeFactors(25)\n  [5, 5]\n  >>> primeFactors(70)\n  [2, 5, 7]\n  */\nconst primeFactors = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactors(8)\n  [2, 2, 2]\n  >>> primeFactors(25)\n  [5, 5]\n  >>> primeFactors(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorsOf(8)\n  [2, 2, 2]\n  >>> primeFactorsOf(25)\n  [5, 5]\n  >>> primeFactorsOf(70)\n  [2, 5, 7]\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newNumbers.indexOf(numbers[i]) === -1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Tests\n\nconst tests = [\n  { name:'removeDuplicates', func: removeDuplicates },\n];\n\n// Run tests\ntests.forEach((test) => {\n  const { name, func } = test;\n  test(name, () => {\n    const numbers = [1, 2, 3, 2, 4];\n    const result = func(numbers);\n    assert.deepEqual(result, numbers);\n  });\n});\n\n// Exercise\n// Write a function `removeDuplicatesEx` that takes an array of integers and returns a new array without duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exists in an array.\n// Hint: You can use the `filter` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `reduce` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `map` method to create a new array from an existing array that does not contain any duplicates.\n// Hint: You can use the `indexOf` method to check if an element exist", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((letter) => {\n      return letter.toUpperCase() === letter? letter.toLowerCase() : letter.toUpperCase();\n    })\n   .join('');\n};\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * Using Math.round() will give you a non-uniform distribution!\n */\nconst randomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Returns a random element from array\n */\nconst randomChoice = (arr) => {\n  return arr[randomInt(0, arr.length)];\n};\n\n/**\n * Returns a random color string\n */\nconst randomColorString = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i += 1) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n/**\n * Converts milliseconds into a readable time string\n */\nconst formatTime = (milliseconds) => {\n  const minutes = Math.floor(milliseconds / 60000);\n  const seconds = ((milliseconds % 60000) / 1000).toFixed(0);\n  return `${minutes}:${seconds}`;\n};\n\n/**\n * Converts milliseconds into a readable date string\n */\nconst formatDate = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return dateString;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDuration = (milliseconds) => {\n  const minutes = Math.floor(milliseconds / 60000);\n  const seconds = ((milliseconds % 60000) / 1000).toFixed(0);\n  return `${minutes}:${seconds}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatTimeWithDate = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatTime(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDate = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatTimeWithDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDateWithDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndTime = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatTime(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndTime = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date = new Date(milliseconds);\n  const dateString = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  return `${dateString}: ${formatDuration(milliseconds)}`;\n};\n\n/**\n * Converts milliseconds into a readable duration string\n */\nconst formatDurationWithDateAndDuration = (milliseconds) => {\n  const date", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert an Array of Numbers into a String\n  >>> numbers([1, 2, 3])\n  '1,2,3'\n  */\nconst numbers = (nums) => {\n  return nums.map(num => num.toString()).join(\",\");\n};\n\n/* Convert an Array of Objects into a String\n  >>> objects([{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }])\n  '{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}'\n  */\nconst objects = (objs) => {\n  return objs.map(obj => JSON.stringify(obj)).join(\",\");\n};\n\n/* Convert an Array of Dates into a String\n  >>> dates([new Date(\"2018-01-01\"), new Date(\"2018-01-02\")])\n  '2018-01-01,2018-01-02'\n  */\nconst dates = (dates) => {\n  return dates.map(date => date.toISOString()).join(\",\");\n};\n\n/* Convert an Array of Booleans into a String\n  >>> booleans([true, false])\n  'true,false'\n  */\nconst booleans = (bools) => {\n  return bools.map(bool => bool? \"true\" : \"false\").join(\",\");\n};\n\n/* Convert an Array of Arrays into a String\n  >>> arrays([\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ... ])\n  '[{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40},{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}]'\n  */\nconst arrays = (arrs) => {\n  return arrs.map(arr => JSON.stringify(arr)).join(\",\");\n};\n\n/* Convert an Array of Objects into a String\n  >>> objects([{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }])\n  '{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}'\n  */\nconst objects = (objs) => {\n  return objs.map(obj => JSON.stringify(obj)).join(\",\");\n};\n\n/* Convert an Array of Dates into a String\n  >>> dates([new Date(\"2018-01-01\"), new Date(\"2018-01-02\")])\n  '2018-01-01,2018-01-02'\n  */\nconst dates = (dates) => {\n  return dates.map(date => date.toISOString()).join(\",\");\n};\n\n/* Convert an Array of Booleans into a String\n  >>> booleans([true, false])\n  'true,false'\n  */\nconst booleans = (bools) => {\n  return bools.map(bool => bool? \"true\" : \"false\").join(\",\");\n};\n\n/* Convert an Array of Arrays into a String\n  >>> arrays([\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ... ])\n  '[{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40},{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}]'\n  */\nconst arrays = (arrs) => {\n  return arrs.map(arr => JSON.stringify(arr)).join(\",\");\n};\n\n/* Convert an Array of Objects into a String\n  >>> objects([{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }])\n  '{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}'\n  */\nconst objects = (objs) => {\n  return objs.map(obj => JSON.stringify(obj)).join(\",\");\n};\n\n/* Convert an Array of Dates into a String\n  >>> dates([new Date(\"2018-01-01\"), new Date(\"2018-01-02\")])\n  '2018-01-01,2018-01-02'\n  */\nconst dates = (dates) => {\n  return dates.map(date => date.toISOString()).join(\",\");\n};\n\n/* Convert an Array of Booleans into a String\n  >>> booleans([true, false])\n  'true,false'\n  */\nconst booleans = (bools) => {\n  return bools.map(bool => bool? \"true\" : \"false\").join(\",\");\n};\n\n/* Convert an Array of Arrays into a String\n  >>> arrays([\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ... ])\n  '[{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40},{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}]'\n  */\nconst arrays = (arrs) => {\n  return arrs.map(arr => JSON.stringify(arr)).join(\",\");\n};\n\n/* Convert an Array of Objects into a String\n  >>> objects([{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }])\n  '{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}'\n  */\nconst objects = (objs) => {\n  return objs.map(obj => JSON.stringify(obj)).join(\",\");\n};\n\n/* Convert an Array of Dates into a String\n  >>> dates([new Date(\"2018-01-01\"), new Date(\"2018-01-02\")])\n  '2018-01-01,2018-01-02'\n  */\nconst dates = (dates) => {\n  return dates.map(date => date.toISOString()).join(\",\");\n};\n\n/* Convert an Array of Booleans into a String\n  >>> booleans([true, false])\n  'true,false'\n  */\nconst booleans = (bools) => {\n  return bools.map(bool => bool? \"true\" : \"false\").join(\",\");\n};\n\n/* Convert an Array of Arrays into a String\n  >>> arrays([\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ...   [{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }],\n ... ])\n  '[{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40},{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}]'\n  */\nconst arrays = (arrs) => {\n  return arrs.map(arr => JSON.stringify(arr)).join(\",\");\n};\n\n/* Convert an Array of Objects into a String\n  >>> objects([{ name: \"Jane\", age: 30 }, { name: \"John\", age: 40 }])\n  '{\"name\":\"Jane\",\"age\":30},{\"name\":\"John\",\"age\":40}'\n  */\nconst objects = (objs) => {\n  return objs.map(obj => JSON.stringify(obj)).join(\",\");\n};\n\n/* Convert an Array of Dates into a String\n  >>> dates([new Date(\"2018-01-01\"), new Date(\"2018-01-02\")])\n  '2018-01-01,2018-01-02'\n  */\nconst dates = (dates) => {\n  return dates.map(date => date.toISOString()).join(\",\");\n};\n\n/* Convert an Array of Booleans into a String\n  >>> booleans([true, false])\n  'true,false'\n  */\nconst booleans = (bools) => {\n  return bools.map(bool => bool? \"true\" : \"false\").join(\",\");\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings ending with certain suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*Return true if a given number is a perfect power of 2 and false otherwise.\n  >>> isPerfectPower(2)\n  true\n  >>> isPerfectPower(3)\n  false\n  >>> isPerfectPower(4)\n  false\n  >>> isPerfectPower(5)\n  false\n  >>> isPerfectPower(6)\n  false\n  >>> isPerfectPower(7)\n  false\n  >>> isPerfectPower(8)\n  false\n  >>> isPerfectPower(9)\n  false\n  >>> isPerfectPower(10)\n  false\n  >>> isPerfectPower(11)\n  false\n  >>> isPerfectPower(12)\n  false\n  >>> isPerfectPower(13)\n  false\n  >>> isPerfectPower(14)\n  false\n  >>> isPerfectPower(15)\n  false\n  >>> isPerfectPower(16)\n  false\n  >>> isPerfectPower(17)\n  false\n  >>> isPerfectPower(18)\n  false\n  >>> isPerfectPower(19)\n  false\n  >>> isPerfectPower(20)\n  false\n  >>> isPerfectPower(21)\n  false\n  >>> isPerfectPower(22)\n  false\n  >>> isPerfectPower(23)\n  false\n  >>> isPerfectPower(24)\n  false\n  >>> isPerfectPower(25)\n  false\n  >>> isPerfectPower(26)\n  false\n  >>> isPerfectPower(27)\n  false\n  >>> isPerfectPower(28)\n  false\n  >>> isPerfectPower(29)\n  false\n  >>> isPerfectPower(30)\n  false\n  >>> isPerfectPower(31)\n  false\n  >>> isPerfectPower(32)\n  false\n  >>> isPerfectPower(33)\n  false\n  >>> isPerfectPower(34)\n  false\n  >>> isPerfectPower(35)\n  false\n  >>> isPerfectPower(36)\n  false\n  >>> isPerfectPower(37)\n  false\n  >>> isPerfectPower(38)\n  false\n  >>> isPerfectPower(39)\n  false\n  >>> isPerfectPower(40)\n  false\n  >>> isPerfectPower(41)\n  false\n  >>> isPerfectPower(42)\n  false\n  >>> isPerfectPower(43)\n  false\n  >>> isPerfectPower(44)\n  false\n  >>> isPerfectPower(45)\n  false\n  >>> isPerfectPower(46)\n  false\n  >>> isPerfectPower(47)\n  false\n  >>> isPerfectPower(48)\n  false\n  >>> isPerfectPower(49)\n  false\n  >>> isPerfectPower(50)\n  false\n  >>> isPerfectPower(51)\n  false\n  >>> isPerfectPower(52)\n  false\n  >>> isPerfectPower(53)\n  false\n  >>> isPerfectPower(54)\n  false\n  >>> isPerfectPower(55)\n  false\n  >>> isPerfectPower(56)\n  false\n  >>> isPerfectPower(57)\n  false\n  >>> isPerfectPower(58)\n  false\n  >>> isPerfectPower(59)\n  false\n  >>> isPerfectPower(60)\n  false\n  >>> isPerfectPower(61)\n  false\n  >>> isPerfectPower(62)\n  false\n  >>> isPerfectPower(63)\n  false\n  >>> isPerfectPower(64)\n  false\n  >>> isPerfectPower(65)\n  false\n  >>> isPerfectPower(66)\n  false\n  >>> isPerfectPower(67)\n  false\n  >>> isPerfectPower(68)\n  false\n  >>> isPerfectPower(69)\n  false\n  >>> isPerfectPower(70)\n  false\n  >>> isPerfectPower(71)\n  false\n  >>> isPerfectPower(72)\n  false\n  >>> isPerfectPower(73)\n  false\n  >>> isPerfectPower(74)\n  false\n  >>> isPerfectPower(75)\n  false\n  >>> isPerfectPower(76)\n  false\n  >>> isPerfectPower(77)\n  false\n  >>> isPerfectPower(78)\n  false\n  >>> isPerfectPower(79)\n  false\n  >>> isPerfectPower(80)\n  false\n  >>> isPerfectPower(81)\n  false\n  >>> isPerfectPower(82)\n  false\n  >>> isPerfectPower(83)\n  false\n  >>> isPerfectPower(84)\n  false\n  >>> isPerfectPower(85)\n  false\n  >>> isPerfectPower(86)\n  false\n  >>> isPerfectPower(87)\n  false\n  >>> isPerfectPower(88)\n  false\n  >>> isPerfectPower(89)\n  false\n  >>> isPerfectPower(90)\n  false\n  >>> isPerfectPower(91)\n  false\n  >>> isPerfectPower(92)\n  false\n  >>> isPerfectPower(93)\n  false\n  >>> isPerfectPower(94)\n  false\n  >>> isPerfectPower(95)\n  false\n  >>> isPerfectPower(96)\n  false\n  >>> isPerfectPower(97)\n  false\n  >>> isPerfectPower(98)\n  false\n  >>> isPerfectPower(99)\n  false\n  >>> isPerfectPower(100)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      zeroPoint = i;\n      break;\n    }\n    if (xs[i] > maxNonZeroCoefficient) {\n      maxNonZeroCoefficient = xs[i];\n    }\n  }\n  return zeroPoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = maxNonZeroCoefficient.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] > maxNonZeroCoefficient) {\n      maxNonZeroCoefficient = xs[i];\n    }\n  }\n  return maxNonZeroCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest x such that poly(x) = minNonZeroCoefficient.\n  findMin returns only smallest x even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < minNonZeroCoefficient) {\n      minNonZeroCoefficient = xs[i];\n    }\n  }\n  return minNonZeroCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = maxNonZeroCoefficient.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < minNonZeroCoefficient) {\n      minNonZeroCoefficient = xs[i];\n    }\n  }\n  return minNonZeroCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = maxNonZeroCoefficient.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] > maxNonZeroCoefficient) {\n      maxNonZeroCoefficient = xs[i];\n    }\n  }\n  return maxNonZeroCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest x such that poly(x) = minNonZeroCoefficient.\n  findMin returns only smallest x even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let minNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < minNonZeroCoefficient) {\n      minNonZeroCoefficient = xs[i];\n    }\n  }\n  return minNonZeroCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = maxNonZeroCoefficient.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < minNonZeroCoefficient) {\n      minNonZeroCoefficient = xs[i];\n    }\n  }\n  return minNonZeroCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest x such that poly(x) = maxNonZeroCoefficient.\n  findMax returns only largest x even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    l1.push(l2[i]);\n  }\n  for (let i = 0; i < l3.length; i++) {\n    l1.push(l3[i]);\n  }\n  return l1;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by four, while its values for indices divisible by four correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 4 === 0) {\n      l4.push(l[i]);\n    } else {\n      l3.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l3.length; i++) {\n    l2.push(l3[i]);\n  }\n  for (let i = 0; i < l4.length; i++) {\n    l1.push(l4[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    l1.push(l2[i]);\n  }\n  return l1;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by five, while its values for indices divisible by five correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l5.push(l[i]);\n    } else {\n      l4.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l4.length; i++) {\n    l3.push(l4[i]);\n  }\n  for (let i = 0; i < l5.length; i++) {\n    l2.push(l5[i]);\n  }\n  for (let i = 0; i < l3.length; i++) {\n    l1.push(l3[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    l1.push(l2[i]);\n  }\n  return l1;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by six, while its values for indices divisible by six correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortSixth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 6 === 0) {\n      l6.push(l[i]);\n    } else {\n      l5.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l5.length; i++) {\n    l4.push(l5[i]);\n  }\n  for (let i = 0; i < l4.length; i++) {\n    l3.push(l4[i]);\n  }\n  for (let i = 0; i < l3.length; i++) {\n    l2.push(l3[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    l1.push(l2[i]);\n  }\n  for (let i = 0; i < l1.length; i++) {\n    l1.push(l1[i]);\n  }\n  return l1;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by seven, while its values for indices divisible by seven correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l7.push(l[i]);\n    } else {\n      l6.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l6.length; i++) {\n    l5.push(l6[i]);\n  }\n  for (let i = 0; i < l5.length; i++) {\n    l4.push(l5[i]);\n  }\n  for (let i = 0; i < l4.length; i++) {\n    l3.push(l4[i]);\n  }\n  for (let i = 0; i < l3.length; i++) {\n    l2.push(l3[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    l1.push(l2[i]);\n  }\n  for (let i = 0; i < l1.length; i++) {\n    l1.push(l1[i]);\n  }\n  return l1;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by eight, while its values for indices divisible by eight correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortEighth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 8 === 0) {\n      l8.push(l[i]);\n    } else {\n      l7.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l7.length; i++) {\n    l6.push(l7[i]);\n  }\n  for (let i = 0; i < l6.length; i++) {\n    l5.push(l6[i]);\n  }\n  for (let i = 0; i < l5.length; i++) {\n    l4.push(l5[i]);\n  }\n  for (let i = 0; i < l4.length; i++) {\n    l3.push(l4[i]);\n  }\n  for (let i = 0; i < l3.length; i++) {\n    l2.push(l3[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    l1.push(l2[i]);\n  }\n  for (let i = 0; i < l1.length; i++) {\n    l1.push(l1[i]);\n  }\n  return l1;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by nine, while its values for indices divisible by nine correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortNinth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNinth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l9.push(l[i]);\n    } else {\n      l8.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l8.length; i++) {\n    l7.push(l8[i]);\n  }\n  for (let i = 0; i < l7.length; i++) {\n    l6.push(l7[i]);\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return an array of all items in list that match a predicate\n  >>> match([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 2}, {a: 3}]\n  */\nconst match = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> diff([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 3}]\n  */\nconst diff = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!pred(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that match a predicate and do not\n  match another predicate\n  >>> intersect([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}]\n  */\nconst intersect = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) &&!pred2(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that do not match a predicate and\n  match another predicate\n  >>> union([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}, {a: 3}]\n  */\nconst union = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) && pred2(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that match a predicate and match\n  another predicate\n  >>> intersect2([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}]\n  */\nconst intersect2 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) && pred2(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that do not match a predicate and\n  match another predicate\n  >>> union2([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}, {a: 3}]\n  */\nconst union2 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) &&!pred2(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that match a predicate and match\n  another predicate\n  >>> intersect3([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}]\n  */\nconst intersect3 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) && pred2(l[i]) && pred3(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that do not match a predicate and\n  match another predicate\n  >>> union3([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}, {a: 3}]\n  */\nconst union3 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) &&!pred2(l[i]) &&!pred3(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that match a predicate and match\n  another predicate\n  >>> intersect4([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}]\n  */\nconst intersect4 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) && pred2(l[i]) && pred3(l[i]) && pred4(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that do not match a predicate and\n  match another predicate\n  >>> union4([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}, {a: 3}]\n  */\nconst union4 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) &&!pred2(l[i]) &&!pred3(l[i]) &&!pred4(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that match a predicate and match\n  another predicate\n  >>> intersect5([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}]\n  */\nconst intersect5 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) && pred2(l[i]) && pred3(l[i]) && pred4(l[i]) &&\n      pred5(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that do not match a predicate and\n  match another predicate\n  >>> union5([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}, {a: 3}]\n  */\nconst union5 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) &&!pred2(l[i]) &&!pred3(l[i]) &&!pred4(l[i]) &&\n     !pred5(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that match a predicate and match\n  another predicate\n  >>> intersect6([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}]\n  */\nconst intersect6 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) && pred2(l[i]) && pred3(l[i]) && pred4(l[i]) &&\n      pred5(l[i]) && pred6(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that do not match a predicate and\n  match another predicate\n  >>> union6([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}, {a: 3}]\n  */\nconst union6 = (l, pred) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i]) &&!pred2(l[i]) &&!pred3(l[i]) &&!pred4(l[i]) &&\n     !pred5(l[i]) &&!pred6(l[i])) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*Return an array of all items in list that match a predicate and match\n  another predicate\n  >>> intersect7([{a: 1}, {a: 2}, {a: 3}], {a: 2}) //[{a: 1}, {a: 2}]\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElements([1, 2, 3])\n  6\n  >>> sumOfElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum;\n};\n\n/*\n  >>> sumOfElementsOf([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  45\n  >>> sumOfElementsOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -77\n*/\nconst sumOfElementsOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += sumOfElements(l[i]);\n  }\n  return sum", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return n\n  }\n  if (n % 11 === 0 && n % 13 === 1) {\n    return n - 11\n  }\n  if (n % 11 === 1 && n % 13 === 0) {\n    return n - 13\n  }\n  if (n % 11 === 1 && n % 13 === 1) {\n    return n - 11\n  }\n}\n\n/*\n  >>> fizzBuzz(100)\n  1\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109)\n  9\n  >>> fizzBuzz(110)\n  10\n  >>> fizzBuzz(111)\n  11\n  >>> fizzBuzz(112)\n  12\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  14\n  >>> fizzBuzz(115)\n  15\n  >>> fizzBuzz(116)\n  16\n  >>> fizzBuzz(117)\n  17\n  >>> fizzBuzz(118)\n  18\n  >>> fizzBuzz(119)\n  19\n  >>> fizzBuzz(120)\n  20\n  >>> fizzBuzz(121)\n  21\n  >>> fizzBuzz(122)\n  22\n  >>> fizzBuzz(123)\n  23\n  >>> fizzBuzz(124)\n  24\n  >>> fizzBuzz(125)\n  25\n  >>> fizzBuzz(126)\n  26\n  >>> fizzBuzz(127)\n  27\n  >>> fizzBuzz(128)\n  28\n  >>> fizzBuzz(129)\n  29\n  >>> fizzBuzz(130)\n  30\n  >>> fizzBuzz(131)\n  31\n  >>> fizzBuzz(132)\n  32\n  >>> fizzBuzz(133)\n  33\n  >>> fizzBuzz(134)\n  34\n  >>> fizzBuzz(135)\n  35\n  >>> fizzBuzz(136)\n  36\n  >>> fizzBuzz(137)\n  37\n  >>> fizzBuzz(138)\n  38\n  >>> fizzBuzz(139)\n  39\n  >>> fizzBuzz(140)\n  40\n  >>> fizzBuzz(141)\n  41\n  >>> fizzBuzz(142)\n  42\n  >>> fizzBuzz(143)\n  43\n  >>> fizzBuzz(144)\n  44\n  >>> fizzBuzz(145)\n  45\n  >>> fizzBuzz(146)\n  46\n  >>> fizzBuzz(147)\n  47\n  >>> fizzBuzz(148)\n  48\n  >>> fizzBuzz(149)\n  49\n  >>> fizzBuzz(150)\n  50\n  >>> fizzBuzz(151)\n  51\n  >>> fizzBuzz(152)\n  52\n  >>> fizzBuzz(153)\n  53\n  >>> fizzBuzz(154)\n  54\n  >>> fizzBuzz(155)\n  55\n  >>> fizzBuzz(156)\n  56\n  >>> fizzBuzz(157)\n  57\n  >>> fizzBuzz(158)\n  58\n  >>> fizzBuzz(159)\n  59\n  >>> fizzBuzz(160)\n  60\n  >>> fizzBuzz(161)\n  61\n  >>> fizzBuzz(162)\n  62\n  >>> fizzBuzz(163)\n  63\n  >>> fizzBuzz(164)\n  64\n  >>> fizzBuzz(165)\n  65\n  >>> fizzBuzz(166)\n  66\n  >>> fizzBuzz(167)\n  67\n  >>> fizzBuzz(168)\n  68\n  >>> fizzBuzz(169)\n  69\n  >>> fizzBuzz(170)\n  70\n  >>> fizzBuzz(171)\n  71\n  >>> fizzBuzz(172)\n  72\n  >>> fizzBuzz(173)\n  73\n  >>> fizzBuzz(174)\n  74\n  >>> fizzBuzz(175)\n  75\n  >>> fizzBuzz(176)\n  76\n  >>> fizzBuzz(177)\n  77\n  >>> fizzBuzz(178)\n  78\n  >>> fizzBuzz(179)\n  79\n  >>> fizzBuzz(180)\n  80\n  >>> fizzBuzz(181)\n  81\n  >>> fizzBuzz(182)\n  82\n  >>> fizzBuzz(183)\n  83\n  >>> fizzBuzz(184)\n  84\n  >>> fizzBuzz(185)\n  85\n  >>> fizzBuzz(186)\n  86\n  >>> fizzBuzz(187)\n  87\n  >>> fizzBuzz(188)\n  88\n  >>> fizzBuzz(189)\n  89\n  >>> fizzBuzz(190)\n  90\n  >>> fizzBuzz(191)\n  91\n  >>> fizzBuzz(192)\n  92\n  >>> fizzBuzz(193)\n  93\n  >>> fizzBuzz(194)\n  94\n  >>> fizzBuzz(195)\n  95\n  >>> fizzBuzz(196)\n  96\n  >>> fizzBuzz(197)\n  97\n  >>> fizzBuzz(198)\n  98\n  >>> fizzBuzz(199)\n  99\n  >>> fizzBuzz(200)\n  100\n  >>> fizzBuzz(201)\n  101\n  >>> fizzBuzz(202)\n  102\n  >>> fizzBuzz(203)\n  103\n  >>> fizzBuzz(204)\n  104\n  >>> fizzBuzz(205)\n  105\n  >>> fizzBuzz(206)\n  106\n  >>> fizzBuzz(207)\n  107\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  return even.sort((a, b) => a - b);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  const odd = l.filter((x) => x % 2 === 1);\n  return odd.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOddThenEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddThenEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddThenEven = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  return even.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenThenOdd = (l) => {\n  const odd = l.filter((x) => x % 2 === 1);\n  return odd.sort((a, b) => a - b);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenThenOdd = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  return even.sort((a, b) => a - b);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddThenEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddThenEvenThenOdd = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  return even.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenThenOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenThenOddThenEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenThenOddThenEvenThenOdd = (l) => {\n  const odd = l.filter((x) => x % 2 === 1);\n  return odd.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenThenOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenThenOddThenEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenThenOddThenEvenThenOdd = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  return even.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOddThenEvenThenOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddThenEvenThenOddThenEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddThenEvenThenOddThenEvenThenOdd = (l) => {\n  const odd = l.filter((x) => x % 2 === 1);\n  return odd.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenThenOddThenEvenThenOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenThenOddThenEvenThenOddThenEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenThenOddThenEvenThenOddThenEvenThenOdd = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  return even.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenThenOddThenEvenThenOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenThenOddThenEvenThenOddThenEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenThenOddThenEvenThenOddThenEvenThenOdd = (l) => {\n  const odd = l.filter((x) => x % 2 === 1);\n  return odd.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenThenOddThenEvenThenOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenThenOddThenEvenThenOddThenEvenThenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenThenOddThenEvenThenOddThenEvenThenOdd = (l) => {\n  const even = l.filter((x) => x % 2 === 0);\n  return even.sort((a, b) => b - a);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOddThenEvenThenOddThenEvenThenOddThenEvenThenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddThenEvenThenOddThenEvenThenOddThenEvenThenOd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic0 = (s) => {\n  var ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 31) {\n    return 31;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 41) {\n    return 41;\n  }\n  if (n < 43) {\n    return 43;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 53) {\n    return 53;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 61) {\n    return 61;\n  }\n  if (n < 67) {\n    return 67;\n  }\n  if (n < 71) {\n    return 71;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 79) {\n    return 79;\n  }\n  if (n < 83) {\n    return 83;\n  }\n  if (n < 89) {\n    return 89;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  if (n < 101) {\n    return 101;\n  }\n  if (n < 1031) {\n    return 1031;\n  }\n  if (n < 1047) {\n    return 1047;\n  }\n  if (n < 1059) {\n    return 1059;\n  }\n  if (n < 1071) {\n    return 1071;\n  }\n  if (n < 1091) {\n    return 1091;\n  }\n  if (n < 1113) {\n    return 1113;\n  }\n  if (n < 1117) {\n    return 1117;\n  }\n  if (n < 1123) {\n    return 1123;\n  }\n  if (n < 1127) {\n    return 1127;\n  }\n  if (n < 1131) {\n    return 1131\n  }\n  if (n < 1163) {\n    return 1163;\n  }\n  if (n < 1167) {\n    return 1167;\n  }\n  if (n < 1171) {\n    return 1171;\n  }\n  if (n < 1173) {\n    return 1173;\n  }\n  if (n < 1189) {\n    return 1189;\n  }\n  if (n < 1201) {\n    return 1201;\n  }\n  if (n < 1213) {\n    return 1213;\n  }\n  if (n < 1217) {\n    return 1217;\n  }\n  if (n < 1223) {\n    return 1223;\n  }\n  if (n < 1229) {\n    return 1229;\n  }\n  if (n < 1231) {\n    return 1231\n  }\n  if (n < 1237) {\n    return 1237;\n  }\n  if (n < 1249) {\n    return 1249;\n  }\n  if (n < 1259) {\n    return 1259;\n  }\n  if (n < 1277) {\n    return 1277;\n  }\n  if (n < 1279) {\n    return 1279;\n  }\n  if (n < 1283) {\n    return 1283;\n  }\n  if (n < 1289) {\n    return 1289;\n  }\n  if (n < 1291) {\n    return 1291;\n  }\n  if (n < 1297) {\n    return 1297\n  }\n  if (n < 1301) {\n    return 1301;\n  }\n  if (n < 1303) {\n    return 1303;\n  }\n  if (n < 1307) {\n    return 1307\n  }\n  if (n < 1311) {\n    return 1311;\n  }\n  if (n < 1317) {\n    return 1317;\n  }\n  if (n < 1329) {\n    return 1329;\n  }\n  if (n < 1367) {\n    return 1367;\n  }\n  if (n < 1369) {\n    return 1369;\n  }\n  if (n < 1373) {\n    return 1373;\n  }\n  if (n < 1381) {\n    return 1381;\n  }\n  if (n < 1399) {\n    return 1399;\n  }\n  if (n < 1407) {\n    return 1407\n  }\n  if (n < 1411) {\n    return 1411;\n  }\n  if (n < 1423) {\n    return 1423;\n  }\n  if (n < 1429) {\n    return 1429;\n  }\n  if (n < 1433) {\n    return 1433;\n  }\n  if (n < 1439) {\n    return 1439;\n  }\n  if (n < 1447) {\n    return 1457;\n  }\n  if (n < 1459) {\n    return 1459;\n  }\n  if (n < 1477) {\n    return 1477;\n  }\n  if (n < 1481) {\n    return 1481;\n  }\n  if (n < 1499) {\n    return 1499;\n  }\n  if (n < 1511) {\n    return 1511;\n  }\n  if (n < 1519) {\n    return 1519;\n  }\n  if (n < 1523) {\n    return 1523;\n  }\n  if (n < 1529) {\n    return 1529;\n  }\n  if (n < 1531) {\n    return 1531;\n  }\n  if (n < 1537) {\n    return 1537;\n  }\n  if (n < 1543) {\n    return 1543;\n  }\n  if (n < 1549) {\n    return 1549;\n  }\n  if (n < 1567) {\n    return 1567;\n  }\n  if (n < 1569) {\n    return 1569;\n  }\n  if (n < 1579) {\n    return 1579;\n  }\n  if (n < 1583) {\n    return 1583;\n  }\n  if (n < 1599) {\n    return 1599;\n  }\n  if (n < 1609) {\n    return 1609\n  }\n  if (n < 1619) {\n    return 1619;\n  }\n  if (n < 1629) {\n    return 1629;\n  }\n  if (n < 1639) {\n    return 1639;\n  }\n  if (n < 1647) {\n    return 1647\n  }\n  if (n < 1659) {\n    return 1659;\n  }\n  if (n < 1669) {\n    return 1669;\n  }\n  if (n < 1679) {\n    return 1679;\n  }\n  if (n < 1689) {\n    return 1689;\n  }\n  if (n < 1697) {\n    return 1697\n  }\n  if (n < 1701) {\n    return 1701;\n  }\n  if (n < 1707) {\n    return 1707\n  }\n  if (n < 1711) {\n    return 1711;\n  }\n  if (n < 1719) {\n    return 1719;\n  }\n  if (n < 1723) {\n    return 1723;\n  }\n  if (n < 1729) {\n    return 1729;\n  }\n  if (n < 1733) {\n    return 1733;\n  }\n  if (n < 1739) {\n    return 1739;\n  }\n  if (n < 1747) {\n    return 1747\n  }\n  if (n < 1749) {\n    return 1749;\n  }\n  if (n < 1759) {\n    return 1759;\n  }\n  if (n < 1777) {\n    return 1777;\n  }\n  if (n < 1781) {\n    return 1781;\n  }\n  if (n < 1799) {\n    return 1799;\n  }\n  if (n < 1807) {\n    return 1807\n  }\n  if (n < 1811) {\n    return 1811;\n  }\n  if (n < 1823) {\n    return 1823;\n  }\n  if (n < 1831) {\n    return 1831;\n  }\n  if (n < 1837) {\n    return 1837;\n  }\n  if (n < 1841) {\n    return 1841;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - meanValue), 2);\n  });\n  return mean(deviations);\n};\n\n/**\n * Calculate the mean absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the mean absolute deviation for.\n * @returns {number} The mean absolute deviation.\n * @example\n * meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst meanAbsoluteDeviationNumber = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - meanValue), 2);\n  });\n  return mean(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationNumber = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArray = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArrayNumber = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArrayNumberString = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArrayNumberStringNumber = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArrayNumberStringNumberString = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArrayNumberStringNumberStringNumber = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArrayNumberStringNumberStringNumberString = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} numbers - An array of numbers to calculate the median absolute deviation for.\n * @returns {number} The median absolute deviation.\n * @example\n * medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * // ~1.414\n */\nconst medianAbsoluteDeviationArrayNumberStringNumberStringNumberStringNumber = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow((number - median), 2);\n  });\n  return median(deviations);\n};\n\n/**\n * Calculate the median absolute deviation for a list of numbers. This is equivalent to the standard deviation but more robust to outliers.\n * @param {Array<number>} ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const uniqueElementsSumToZero = l.filter((n) => l.indexOf(n) === l.lastIndexOf(n))\n  return uniqueElementsSumToZero.length === 3\n}\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not colli", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase2(8, 3)\n  '22'\n  >>> changeBase2(8, 2)\n  '1000'\n  >>> changeBase2(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase3(8, 3)\n  '22'\n  >>> changeBase3(8, 2)\n  '1000'\n  >>> changeBase3(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase4(8, 3)\n  '22'\n  >>> changeBase4(8, 2)\n  '1000'\n  >>> changeBase4(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase5(8, 3)\n  '22'\n  >>> changeBase5(8, 2)\n  '1000'\n  >>> changeBase5(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase6(8, 3)\n  '22'\n  >>> changeBase6(8, 2)\n  '1000'\n  >>> changeBase6(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase7(8, 3)\n  '22'\n  >>> changeBase7(8, 2)\n  '1000'\n  >>> changeBase7(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase8(8, 3)\n  '22'\n  >>> changeBase8(8, 2)\n  '1000'\n  >>> changeBase8(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase9(8, 3)\n  '22'\n  >>> changeBase9(8, 2)\n  '1000'\n  >>> changeBase9(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase10(8, 3)\n  '22'\n  >>> changeBase10(8, 2)\n  '1000'\n  >>> changeBase10(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase11(8, 3)\n  '22'\n  >>> changeBase11(8, 2)\n  '1000'\n  >>> changeBase11(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase12(8, 3)\n  '22'\n  >>> changeBase12(8, 2)\n  '1000'\n  >>> changeBase12(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase13(8, 3)\n  '22'\n  >>> changeBase13(8, 2)\n  '1000'\n  >>> changeBase13(7, 2)\n  '111'\n  */\nconst changeBase14 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase14(8, 3)\n  '22'\n  >>> changeBase14(8, 2)\n  '1000'\n  >>> changeBase14(7, 2)\n  '111'\n  */\nconst changeBase15 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String.fromCharCode(base - remainder);\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase15(8, 3)\n  '22'\n  >>> changeBase15(8, 2)\n  '1000'\n  >>> changeBase15(7, 2)\n  '111'\n  */\nconst changeBase16 = (x, base) => {\n  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 5)\n  0\n  >>> triangleArea(5, 4)\n  0\n  >>> triangleArea(5, 6)\n  0\n  >>> triangleArea(5, 7)\n  0\n  >>> triangleArea(5, 8)\n  0\n  >>> triangleArea(5, 9)\n  0\n  >>> triangleArea(5, 10)\n  0\n  >>> triangleArea(5, 11)\n  0\n  >>> triangleArea(5, 12)\n  0\n  >>> triangleArea(5, 13)\n  0\n  >>> triangleArea(5, 14)\n  0\n  >>> triangleArea(5, 15)\n  0\n  >>> triangleArea(5, 16)\n  0\n  >>> triangleArea(5, 17)\n  0\n  >>> triangleArea(5, 18)\n  0\n  >>> triangleArea(5, 19)\n  0\n  >>> triangleArea(5, 20)\n  0\n  >>> triangleArea(5, 21)\n  0\n  >>> triangleArea(5, 22)\n  0\n  >>> triangleArea(5, 23)\n  0\n  >>> triangleArea(5, 24)\n  0\n  >>> triangleArea(5, 25)\n  0\n  >>> triangleArea(5, 26)\n  0\n  >>> triangleArea(5, 27)\n  0\n  >>> triangleArea(5, 28)\n  0\n  >>> triangleArea(5, 29)\n  0\n  >>> triangleArea(5, 30)\n  0\n  >>> triangleArea(5, 31)\n  0\n  >>> triangleArea(5, 32)\n  0\n  >>> triangleArea(5, 33)\n  0\n  >>> triangleArea(5, 34)\n  0\n  >>> triangleArea(5, 35)\n  0\n  >>> triangleArea(5, 36)\n  0\n  >>> triangleArea(5, 37)\n  0\n  >>> triangleArea(5, 38)\n  0\n  >>> triangleArea(5, 39)\n  0\n  >>> triangleArea(5, 40)\n  0\n  >>> triangleArea(5, 41)\n  0\n  >>> triangleArea(5, 42)\n  0\n  >>> triangleArea(5, 43)\n  0\n  >>> triangleArea(5, 44)\n  0\n  >>> triangleArea(5, 45)\n  0\n  >>> triangleArea(5, 46)\n  0\n  >>> triangleArea(5, 47)\n  0\n  >>> triangleArea(5, 48)\n  0\n  >>> triangleArea(5, 49)\n  0\n  >>> triangleArea(5, 50)\n  0\n  >>> triangleArea(5, 51)\n  0\n  >>> triangleArea(5, 52)\n  0\n  >>> triangleArea(5, 53)\n  0\n  >>> triangleArea(5, 54)\n  0\n  >>> triangleArea(5, 55)\n  0\n  >>> triangleArea(5, 56)\n  0\n  >>> triangleArea(5, 57)\n  0\n  >>> triangleArea(5, 58)\n  0\n  >>> triangleArea(5, 59)\n  0\n  >>> triangleArea(5, 60)\n  0\n  >>> triangleArea(5, 61)\n  0\n  >>> triangleArea(5, 62)\n  0\n  >>> triangleArea(5, 63)\n  0\n  >>> triangleArea(5, 64)\n  0\n  >>> triangleArea(5, 65)\n  0\n  >>> triangleArea(5, 66)\n  0\n  >>> triangleArea(5, 67)\n  0\n  >>> triangleArea(5, 68)\n  0\n  >>> triangleArea(5, 69)\n  0\n  >>> triangleArea(5, 70)\n  0\n  >>> triangleArea(5, 71)\n  0\n  >>> triangleArea(5, 72)\n  0\n  >>> triangleArea(5, 73)\n  0\n  >>> triangleArea(5, 74)\n  0\n  >>> triangleArea(5, 75)\n  0\n  >>> triangleArea(5, 76)\n  0\n  >>> triangleArea(5, 77)\n  0\n  >>> triangleArea(5, 78)\n  0\n  >>> triangleArea(5, 79)\n  0\n  >>> triangleArea(5, 80)\n  0\n  >>> triangleArea(5, 81)\n  0\n  >>> triangleArea(5, 82)\n  0\n  >>> triangleArea(5, 83)\n  0\n  >>> triangleArea(5, 84)\n  0\n  >>> triangleArea(5, 85)\n  0\n  >>> triangleArea(5, 86)\n  0\n  >>> triangleArea(5, 87)\n  0\n  >>> triangleArea(5, 88)\n  0\n  >>> triangleArea(5, 89)\n  0\n  >>> triangleArea(5, 90)\n  0\n  >>> triangleArea(5, 91)\n  0\n  >>> triangleArea(5, 92)\n  0\n  >>> triangleArea(5, 93)\n  0\n  >>> triangleArea(5, 94)\n  0\n  >>> triangleArea(5, 95)\n  0\n  >>> triangleArea(5, 96)\n  0\n  >>> triangleArea(5, 97)\n  0\n  >>> triangleArea(5, 98)\n  0\n  >>> triangleArea(5, 99)\n  0\n  >>> triangleArea(5, 100)\n  0\n  >>> triangleArea(5, 101)\n  0\n  >>> triangleArea(5, 102)\n  0\n  >>> triangleArea(5, 103)\n  0\n  >>> triangleArea(5, 104)\n  0\n  >>> triangleArea(5, 105)\n  0\n  >>> triangleArea(5, 106)\n  0\n  >>> triangleArea(5, 107)\n  0\n  >>> triangleArea(5, 108)\n  0\n  >>> triangleArea(5, 109)\n  0\n  >>> triangleArea(5, 110)\n  0\n  >>> triangleArea(5, 111)\n  0\n  >>> triangleArea(5, 112)\n  0\n  >>> triangleArea(5, 113)\n  0\n  >>> triangleArea(5, 114)\n  0\n  >>> triangleArea(5, 115)\n  0\n  >>> triangleArea(5, 116)\n  0\n  >>> triangleArea(5, 117)\n  0\n  >>> triangleArea(5, 118)\n  0\n  >>> triangleArea(5, 119)\n  0\n  >>> triangleArea(5, 120)\n  0\n  >>> triangleArea(5, 121)\n  0\n  >>> triangleArea(5, 122)\n  0\n  >>> triangleArea(5, 123)\n  0\n  >>> triangleArea(5, 124)\n  0\n  >>> triangleArea(5, 125)\n  0\n  >>> triangleArea(5, 126)\n  0\n  >>> triangleArea(5, 127)\n  0\n  >>> triangleArea(5, 128)\n  0\n  >>> triangleArea(5, 129)\n  0\n  >>> triangleArea(5, 130)\n  0\n  >>> triangleArea(5, 131)\n  0\n  >>> triangleArea(5, 132)\n  0\n  >>> triangleArea(5, 133)\n  0\n  >>> triangleArea(5, 134)\n  0\n  >>> triangleArea(5, 135)\n  0\n  >>> triangleArea(5, 136)\n  0\n  >>> triangleArea(5, 137)\n  0\n  >>> triangleArea(5, 138)\n  0\n  >>> triangleArea(5, 139)\n  0\n  >>> triangleArea(5, 140)\n  0\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n}\n\n/*\n  >>> fib5(5)\n  55\n  >>> fib5(6)\n  89\n  >>> fib5(7)\n  144\n  >>> fib5(8)\n  233\n  >>> fib5(9)\n  377\n  >>> fib5(10)\n  610\n  >>> fib5(11)\n  987\n  >>> fib5(12)\n  1597\n  >>> fib5(13)\n  2584\n  >>> fib5(14)\n  4181\n  >>> fib5(15)\n  6765\n  >>> fib5(16)\n  10946\n  >>> fib5(17)\n  17711\n  >>> fib5(18)\n  28657\n  >>> fib5(19)\n  46368\n  >>> fib5(20)\n  75025\n  >>> fib5(21)\n  121393\n  >>> fib5(22)\n  196418\n  >>> fib5(23)\n  317811\n  >>> fib5(24)\n  514229\n  >>> fib5(25)\n  832040\n  >>> fib5(26)\n  1346269\n  >>> fib5(27)\n  2178309\n  >>> fib5(28)\n  3524578\n  >>> fib5(29)\n  5702887\n  >>> fib5(30)\n  9227465\n  >>> fib5(31)\n  14930352\n  >>> fib5(32)\n  24157817\n  >>> fib5(33)\n  39088169\n  >>> fib5(34)\n  63245986\n  >>> fib5(35)\n  102334155\n  >>> fib5(36)\n  165580141\n  >>> fib5(37)\n  267914296\n  >>> fib5(38)\n  433494437\n  >>> fib5(39)\n  701408733\n  >>> fib5(40)\n  1134903170\n  >>> fib5(41)\n  1836311903\n  >>> fib5(42)\n  2971215073\n  >>> fib5(43)\n  4807526976\n  >>> fib5(44)\n  6557470319\n  >>> fib5(45)\n  9765582094\n  >>> fib5(46)\n  15480087559\n  >>> fib5(47)\n  25047307819\n  >>> fib5(48)\n  40527395376\n  >>> fib5(49)\n  5702887228\n  >>> fib5(50)\n  8320406452\n  >>> fib5(51)\n  12139320171\n  >>> fib5(52)\n  19641846671\n  >>> fib5(53)\n  31781178263\n  >>> fib5(54)\n  51422908055\n  >>> fib5(55)\n  83204296979\n  >>> fib5(56)\n  134626907417\n  >>> fib5(57)\n  217830964283\n  >>> fib5(58)\n  352457812587\n  >>> fib5(59)\n  570288729273\n  >>> fib5(60)\n  922746656013\n  >>> fib5(61)\n  1493035357241\n  >>> fib5(62)\n  2415781726074\n  >>> fib5(63)\n  3908816926373\n  >>> fib5(64)\n  6324598610942\n  >>> fib5(65)\n  1023341549439\n  >>> fib5(66)\n  16558014086771\n  >>> fib5(67)\n  26791429616113\n  >>> fib5(68)\n  43349443700538\n  >>> fib5(69)\n  70140873348835\n  >>> fib5(70)\n  11349031704993\n  >>> fib5(71)\n  183631190310959\n  >>> fib5(72)\n  297121507314463\n  >>> fib5(73)\n  480752697652573\n  >>> fib5(74)\n  655747031944073\n  >>> fib5(75)\n  976558209400607\n  >>> fib5(76)\n  154800875592969\n  >>> fib5(77)\n  250473078190683\n  >>> fib5(78)\n  405273953763217\n  >>> fib5(79)\n  570288729277551\n  >>> fib5(80)\n  832040645163951\n  >>> fib5(81)\n  121393201713395\n  >>> fib5(82)\n  196418466709787\n  >>> fib5(83)\n  317811782631741\n  >>> fib5(84)\n  514229080540087\n  >>> fib5(85)\n  832042969797423\n  >>> fib5(86)\n  1346269074174767\n  >>> fib5(87)\n  2178309642830183\n  >>> fib5(88)\n  352457812587009\n  >>> fib5(89)\n  570288729277423\n  >>> fib5(90)\n  922746656013077\n  >>> fib5(91)\n  1493035357241261\n  >>> fib5(92)\n  2415781726074787\n  >>> fib5(93)\n  3908816926373357\n  >>> fib5(94)\n  6324598610941987\n  >>> fib5(95)\n  1023341549439557\n  >>> fib5(96)\n  1655801408677121\n  >>> fib5(97)\n  2679142961611373\n  >>> fib5(98)\n  4334944370053871\n  >>> fib5(99)\n  7014087334883517\n  >>> fib5(100)\n  11349031704993091\n  >>> fib5(101)\n  18363119031095819\n  >>> fib5(102)\n  29712150731446343\n  >>> fib5(103)\n  48075269765257371\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n};\n\n/*\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return b - a})\n  [-10, -20, -30, -40, -50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n  [10, 20, 30, 40, 50]\n  >>> [10, 20, 30, 40, 50].sort(function(a, b) {return a - b})\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return 0;\n  }\n  return p - (n / p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Remove a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> removeDelimeter([1, 4, 2, 4, 3], 4)\n  [1, 4, 2, 3]\n  */\nconst removeDelimeter = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === delimeter) {\n      index++;\n    } else {\n      result.push(numbers[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 1 - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 2 - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -3 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 3 - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -4 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 4 - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -5 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -6 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 6 - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -7 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 7 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes strings and returns strings without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes strings and returns strings without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removePunctuation('abcdef')\n  'abcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbc'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.?]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeWhitespace('abcdef')\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are equal to the t threshold.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold or equal to the\n  t threshold.\n  >>> aboveOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] === t) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in list l are below the t threshold or equal to the\n  t threshold.\n  >>> belowOrEqualThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowOrEqualThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are equal to the t threshold or equal to the\n  t threshold.\n  >>> equalOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t && l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold or equal to the\n  t threshold or equal to t.\n  >>> aboveOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] === t || l[i] === t) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in list l are below the t threshold or equal to the\n  t threshold or equal to t.\n  >>> belowOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] === t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are equal to the t threshold or equal to the\n  t threshold or equal to t.\n  >>> equalOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t && l[i]!== t && l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold or equal to the\n  t threshold or equal to t.\n  >>> aboveOrEqualOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveOrEqualOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveOrEqualOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] === t || l[i] === t || l[i] === t) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in list l are below the t threshold or equal to the\n  t threshold or equal to t.\n  >>> belowOrEqualOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowOrEqualOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowOrEqualOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] === t || l[i] === t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are equal to the t threshold or equal to the\n  t threshold or equal to t.\n  >>> equalOrEqualOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrEqualOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalOrEqualOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t && l[i]!== t && l[i]!== t && l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold or equal to the\n  t threshold or equal to t.\n  >>> aboveOrEqualOrEqualOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveOrEqualOrEqualOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveOrEqualOrEqualOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] === t || l[i] === t || l[i] === t || l[i] === t) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in list l are below the t threshold or equal to the\n  t threshold or equal to t.\n  >>> belowOrEqualOrEqualOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowOrEqualOrEqualOrEqualOrEqualThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowOrEqualOrEqualOrEqualOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] === t || l[i] === t || l[i] === t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are equal to the t threshold or equal to the\n  t threshold or equal to t.\n  >>> equalOrEqualOrEqualOrEqualOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrEqualOrEqualOrEqual", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the positive value of number x\n  >>> positive(-5)\n  -5\n  >>> positive(5)\n  5\n  */\nconst positive = x => {\n  return x > 0? x : -x;\n};\n\n/*Get the negative value of number x\n  >>> negative(-5)\n  5\n  >>> negative(5)\n  -5\n  */\nconst negative = x => {\n  return x < 0? x : -x;\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = x => {\n  return x < 0? NaN : x > 1? x * factorial(x - 1) : NaN;\n};\n\n/*Get the square root of number x\n  >>> sqrt(-5)\n  5\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  return x < 0? NaN : x > 1? Math.sqrt(x) : NaN;\n};\n\n/*Get the cube root of number x\n  >>> cbrt(-5)\n  5\n  >>> cbrt(5)\n  5\n  */\nconst cbrt = x => {\n  return x < 0? NaN : x > 1? Math.pow(x, 1 / 3) : NaN;\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-5)\n  -5\n  >>> ceil(5)\n  5\n  */\nconst ceil = x => {\n  return x < 0? NaN : Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-5)\n  -5\n  >>> floor(5)\n  5\n  */\nconst floor = x => {\n  return x < 0? NaN : Math.floor(x);\n};\n\n/*Get the logarithm of number x in base y\n  >>> log(10, 2)\n  2\n  >>> log(10, 10)\n  1\n  >>> log(10, 16)\n  4\n  */\nconst log = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*Get the natural logarithm of number x\n  >>> ln(-5)\n  -5\n  >>> ln(5)\n  5\n  */\nconst ln = x => {\n  return x < 0? NaN : Math.log(x);\n};\n\n/*Get the tangent of number x\n  >>> tan(-5)\n  -5\n  >>> tan(5)\n  5\n  */\nconst tan = x => {\n  return x < 0? NaN : Math.tan(x);\n};\n\n/*Get the hyperbolic tangent of number x\n  >>> tanh(-5)\n  -5\n  >>> tanh(5)\n  5\n  */\nconst tanh = x => {\n  return x < 0? NaN : Math.tanh(x);\n};\n\n/*Get the exponential of number x in base y\n  >>> exp(10, 2)\n  2\n  >>> exp(10, 10)\n  100\n  >>> exp(10, 16)\n  64\n  */\nconst exp = (x, y) => {\n  return Math.exp(x) / Math.log(y);\n};\n\n/*Get the exponential of number x\n  >>> expm1(10)\n  100\n  >>> expm1(16)\n  64\n  */\nconst expm1 = x => {\n  return x < 0? NaN : Math.expm1(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log1p(-5)\n  -5\n  >>> log1p(5)\n  5\n  */\nconst log1p = x => {\n  return x < 0? NaN : Math.log(1 + x);\n};\n\n/*Get the logarithm of number x in base y\n  >>> log2(10)\n  2\n  >>> log2(16)\n  4\n  */\nconst log2 = x => {\n  return x < 0? NaN : Math.log(x + 2);\n};\n\n/*Get the sine of number x\n  >>> sin(-5)\n  -5\n  >>> sin(5)\n  5\n  */\nconst sin = x => {\n  return x < 0? NaN : Math.sin(x);\n};\n\n/*Get the cosine of number x\n  >>> cos(-5)\n  -5\n  >>> cos(5)\n  5\n  */\nconst cos = x => {\n  return x < 0? NaN : Math.cos(x);\n};\n\n/*Get the tangent of number x\n  >>> tan(-5)\n  -5\n  >>> tan(5)\n  5\n  */\nconst tan = x => {\n  return x < 0? NaN : Math.tan(x);\n};\n\n/*Get the hyperbolic tangent of number x\n  >>> tanh(-5)\n  -5\n  >>> tanh(5)\n  5\n  */\nconst tanh = x => {\n  return x < 0? NaN : Math.tanh(x);\n};\n\n/*Get the exponential of number x in base y\n  >>> exp(10, 2)\n  2\n  >>> exp(10, 10)\n  100\n  >>> exp(10, 16)\n  64\n  */\nconst exp = (x, y) => {\n  return Math.exp(x) / Math.log(y);\n};\n\n/*Get the exponential of number x\n  >>> expm1(10)\n  100\n  >>> expm1(16)\n  64\n  */\nconst expm1 = x => {\n  return x < 0? NaN : Math.expm1(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log1p(-5)\n  -5\n  >>> log1p(5)\n  5\n  */\nconst log1p = x => {\n  return x < 0? NaN : Math.log(1 + x);\n};\n\n/*Get the logarithm of number x in base y\n  >>> log2(10)\n  2\n  >>> log2(16)\n  4\n  */\nconst log2 = x => {\n  return x < 0? NaN : Math.log(x + 2);\n};\n\n/*Get the sine of number x\n  >>> sin(-5)\n  -5\n  >>> sin(5)\n  5\n  */\nconst sin = x => {\n  return x < 0? NaN : Math.sin(x);\n};\n\n/*Get the cosine of number x\n  >>> cos(-5)\n  -5\n  >>> cos(5)\n  5\n  */\nconst cos = x => {\n  return x < 0? NaN : Math.cos(x);\n};\n\n/*Get the tangent of number x\n  >>> tan(-5)\n  -5\n  >>> tan(5)\n  5\n  */\nconst tan = x => {\n  return x < 0? NaN : Math.tan(x);\n};\n\n/*Get the hyperbolic tangent of number x\n  >>> tanh(-5)\n  -5\n  >>> tanh(5)\n  5\n  */\nconst tanh = x => {\n  return x < 0? NaN : Math.tanh(x);\n};\n\n/*Get the exponential of number x in base ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length)\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Find the longest common subsequence between two strings.\n  >>> longestCommonSubsequence('ab', 'abc')\n  ['ab']\n  >>> longestCommonSubsequence('ab', 'abcd')\n  ['ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbc')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcc')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbccc')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', 'ab', 'ab']\n  >>> longestCommonSubsequence('ab', 'abbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  ['ab', 'ab', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  */\nconst fib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is defined to be the sum of the two preceding ones, starting from 0 and ending with n.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<[/]?>/g);\n  const closingBrackets = brackets.match(/<[/]?>/g);\n  if (openingBrackets && closingBrackets) {\n    const openingBracketsCount = openingBrackets.length;\n    const closingBracketsCount = closingBrackets.length;\n    if (openingBracketsCount === closingBracketsCount) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Takes a string and returns the string with any HTML tags removed.\n *\n * Examples:\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\")\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", false)\n * //returns \"Hello <b>World!</b>\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n * ```\n *\n * ``` javascript\n * removeHTMLTags(\"<b>Hello</b> World!\", true)\n * //returns \"Hello World!\"\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length <= 1) return true;\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) return false;\n    if (current > first) break;\n  }\n  return true;\n};\n\n/**\n * Returns a new list containing all but the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = tail(list, n)\n * result === ['bar', 'baz']\n */\nconst tail = (list, n) => {\n  return list.slice(0, n);\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = take(list, n)\n * result === ['foo']\n */\nconst take = (list, n) => {\n  return list.slice(0, n);\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeLast(list, n)\n * result === ['baz']\n */\nconst takeLast = (list, n) => {\n  return list.slice(-n);\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeLastWhile(list, n => n < 3)\n * result === ['baz']\n */\nconst takeLastWhile = (list, predicate) => {\n  const result = [];\n  let i = 0;\n  while (i < list.length) {\n    if (predicate(list[i])) {\n      result.push(list[i]);\n      i += 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeWhile(list, n => n < 3)\n * result === ['foo', 'bar']\n */\nconst takeWhile = (list, predicate) => {\n  const result = [];\n  let i = 0;\n  while (i < list.length) {\n    if (predicate(list[i])) {\n      result.push(list[i]);\n      i += 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeUntil(list, n => n < 3)\n * result === ['foo', 'bar', 'baz']\n */\nconst takeUntil = (list, predicate) => {\n  const result = [];\n  let i = 0;\n  while (i < list.length) {\n    if (!predicate(list[i])) {\n      result.push(list[i]);\n      i += 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeWhileBackwards(list, n => n < 3)\n * result === ['baz']\n */\nconst takeWhileBackwards = (list, predicate) => {\n  const result = [];\n  let i = list.length - 1;\n  while (i >= 0) {\n    if (predicate(list[i])) {\n      result.push(list[i]);\n      i -= 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeUntilBackwards(list, n => n < 3)\n * result === ['foo', 'bar', 'baz']\n */\nconst takeUntilBackwards = (list, predicate) => {\n  const result = [];\n  let i = list.length - 1;\n  while (i >= 0) {\n    if (!predicate(list[i])) {\n      result.push(list[i]);\n      i -= 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeWhileBackwardsWhile(list, n => n < 3)\n * result === ['baz']\n */\nconst takeWhileBackwardsWhile = (list, predicate) => {\n  const result = [];\n  let i = list.length - 1;\n  while (i >= 0) {\n    if (predicate(list[i])) {\n      result.push(list[i]);\n      i -= 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeUntilBackwardsWhile(list, n => n < 3)\n * result === ['foo', 'bar', 'baz']\n */\nconst takeUntilBackwardsWhile = (list, predicate) => {\n  const result = [];\n  let i = list.length - 1;\n  while (i >= 0) {\n    if (!predicate(list[i])) {\n      result.push(list[i]);\n      i -= 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeWhileBackwardsUntil(list, n => n < 3)\n * result === ['baz']\n */\nconst takeWhileBackwardsUntil = (list, predicate) => {\n  const result = [];\n  let i = list.length - 1;\n  while (i >= 0) {\n    if (!predicate(list[i])) {\n      result.push(list[i]);\n      i -= 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeUntilBackwardsUntil(list, n => n < 3)\n * result === ['foo', 'bar', 'baz']\n */\nconst takeUntilBackwardsUntil = (list, predicate) => {\n  const result = [];\n  let i = list.length - 1;\n  while (i >= 0) {\n    if (!predicate(list[i])) {\n      result.push(list[i]);\n      i -= 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeLastWhileBackwards(list, n => n < 3)\n * result === ['baz']\n */\nconst takeLastWhileBackwards = (list, predicate) => {\n  const result = [];\n  let i = list.length - 1;\n  while (i >= 0) {\n    if (predicate(list[i])) {\n      result.push(list[i]);\n      i -= 1;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the first n elements of the given list.\n *\n * Examples:\n * const list = ['foo', 'bar', 'baz']\n * const n = 1\n * const result = takeLastWhileBackwardsWhile(list, n => n < 3)\n * result === ['baz']\n */\nconst takeLastWhileBackwardsWhile = (list, predicate) => {\n  const result", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  l2.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item);\n    } else {\n      hash[item] = [item];\n    }\n  });\n  Object.keys(hash).forEach((key) => {\n    const list = hash[key];\n    if (list.length > 1) {\n      result.push(list[0]);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash = {};\n  l1.forEach((item) => {\n    if (hash[item]) {\n      hash[item].push(item", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  >>> primeFactors(13195)\n  [2, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> primeFactors(13195)\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.trim().split(' ');\n  const max_level = Math.max.apply(null, paren_array.map(el => el.length));\n  const levels = [];\n  for (let i = 0; i < max_level; i++) {\n    levels.push(0);\n  }\n  for (let i = 0; i < paren_array.length; i++) {\n    for (let j = 0; j < paren_array[i].length; j++) {\n      if (paren_array[i][j] === '(') {\n        levels[j]++;\n      } else if (paren_array[i][j] === ')') {\n        levels[j]--;\n      }\n    }\n  }\n  return levels;\n};\n\n/**\n * Takes a string representing a mathematical expression and outputs the corresponding postfix expression.\n * \n * A postfix expression is represented as a string where each opening bracket is preceded by a space and each closing bracket is preceded by a minus sign. E.g. ((3+4)*5+6) becomes 3 4 5 6 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are used to group terms together, e.g. 2+(3+4) can be represented as 2 3 4 (+). Operators are used to perform operations on terms, e.g. 2+3*4 can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain numbers and other operators. Numbers are represented as a string where each number is preceded by a space and each operator is preceded by a minus sign. E.g. 2 3 4 + * + can be represented as 2 3 4 + * +\n * \n * A postfix expression can contain parentheses and other operators. Parentheses are ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that adds numbers from 1 to n.\nconst sumToN", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  return openingBrackets.length === closingBrackets.length && openingBrackets.every((bracket, i) => {\n    return closingBrackets[i] === bracket;\n  });\n};\n\n/* Returns true if a string is all uppercase letters.\n\n  >>> isUpperCase(\"a\")\n  true\n  >>> isUpperCase(\"A\")\n  true\n  >>> isUpperCase(\"Aa\")\n  false\n  */\nconst isUpperCase = (string) => {\n  return string === string.toUpperCase();\n};\n\n/* Returns true if a string is all lowercase letters.\n\n  >>> isLowerCase(\"a\")\n  true\n  >>> isLowerCase(\"A\")\n  true\n  >>> isLowerCase(\"Aa\")\n  false\n  */\nconst isLowerCase = (string) => {\n  return string === string.toLowerCase();\n};\n\n/* Returns true if a string is all numbers.\n\n  >>> isNumber(\"a\")\n  true\n  >>> isNumber(\"A\")\n  true\n  >>> isNumber(\"Aa\")\n  false\n  */\nconst isNumber = (string) => {\n  return!isNaN(parseFloat(string)) && isFinite(string);\n};\n\n/* Returns true if a string is all symbols.\n\n  >>> isSymbol(\"a\")\n  true\n  >>> isSymbol(\"A\")\n  true\n  >>> isSymbol(\"Aa\")\n  false\n  */\nconst isSymbol = (string) => {\n  return /^[A-Za-z0-9_]+$/.test(string);\n};\n\n/* Returns true if a string is all alphanumeric characters.\n\n  >>> isAlphanumeric(\"a\")\n  true\n  >>> isAlphanumeric(\"A\")\n  true\n  >>> isAlphanumeric(\"Aa\")\n  false\n  */\nconst isAlphanumeric = (string) => {\n  return /^[A-Za-z0-9]+$/.test(string);\n};\n\n/* Returns true if a string is all alphanumeric characters or symbols.\n\n  >>> isAlphanumericOrSymbol(\"a\")\n  true\n  >>> isAlphanumericOrSymbol(\"A\")\n  true\n  >>> isAlphanumericOrSymbol(\"Aa\")\n  false\n  */\nconst isAlphanumericOrSymbol = (string) => {\n  return isAlphanumeric(string) || isSymbol(string);\n};\n\n/* Returns true if a string is all alphabetic characters.\n\n  >>> isAlphabetic(\"a\")\n  true\n  >>> isAlphabetic(\"A\")\n  true\n  >>> isAlphabetic(\"Aa\")\n  false\n  */\nconst isAlphabetic = (string) => {\n  return /^[A-Za-z]+$/.test(string);\n};\n\n/* Returns true if a string is all alphabetic characters or symbols.\n\n  >>> isAlphabeticOrSymbol(\"a\")\n  true\n  >>> isAlphabeticOrSymbol(\"A\")\n  true\n  >>> isAlphabeticOrSymbol(\"Aa\")\n  false\n  */\nconst isAlphabeticOrSymbol = (string) => {\n  return isAlphabetic(string) || isSymbol(string);\n};\n\n/* Returns true if a string is all alphanumeric characters or symbols or numbers.\n\n  >>> isAlphanumericOrNumber(\"a\")\n  true\n  >>> isAlphanumericOrNumber(\"A\")\n  true\n  >>> isAlphanumericOrNumber(\"Aa\")\n  false\n  >>> isAlphanumericOrNumber(\"A1\")\n  false\n  >>> isAlphanumericOrNumber(\"A1\")\n  false\n  */\nconst isAlphanumericOrNumber = (string) => {\n  return isAlphanumeric(string) || isNumber(string) || isSymbol(string);\n};\n\n/* Returns true if a string is all alphabetic characters or symbols or numbers or uppercase letters.\n\n  >>> isAlphabeticOrNumberOrUpperCase(\"a\")\n  true\n  >>> isAlphabeticOrNumberOrUpperCase(\"A\")\n  true\n  >>> isAlphabeticOrNumberOrUpperCase(\"Aa\")\n  false\n  >>> isAlphabeticOrNumberOrUpperCase(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrUpperCase(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrUpperCase(\"A1\")\n  false\n  */\nconst isAlphabeticOrNumberOrUpperCase = (string) => {\n  return isAlphabetic(string) || isNumber(string) || isSymbol(string) || isUpperCase(string);\n};\n\n/* Returns true if a string is all alphabetic characters or symbols or numbers or uppercase letters or lowercase letters.\n\n  >>> isAlphabeticOrNumberOrLowerCase(\"a\")\n  true\n  >>> isAlphabeticOrNumberOrLowerCase(\"A\")\n  true\n  >>> isAlphabeticOrNumberOrLowerCase(\"Aa\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCase(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCase(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCase(\"A1\")\n  false\n  */\nconst isAlphabeticOrNumberOrLowerCase = (string) => {\n  return isAlphabetic(string) || isNumber(string) || isSymbol(string) || isLowerCase(string) || isUpperCase(string);\n};\n\n/* Returns true if a string is all alphabetic characters or symbols or numbers or uppercase letters or lowercase letters or numbers.\n\n  >>> isAlphabeticOrNumberOrLowerCaseOrNumber(\"a\")\n  true\n  >>> isAlphabeticOrNumberOrLowerCaseOrNumber(\"A\")\n  true\n  >>> isAlphabeticOrNumberOrLowerCaseOrNumber(\"Aa\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCaseOrNumber(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCaseOrNumber(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCaseOrNumber(\"A1\")\n  false\n  */\nconst isAlphabeticOrNumberOrLowerCaseOrNumber = (string) => {\n  return isAlphabetic(string) || isNumber(string) || isSymbol(string) || isLowerCase(string) || isUpperCase(string) || isNumber(string);\n};\n\n/* Returns true if a string is all alphabetic characters or symbols or numbers or uppercase letters or lowercase letters or numbers or symbols.\n\n  >>> isAlphabeticOrNumberOrLowerCaseOrSymbol(\"a\")\n  true\n  >>> isAlphabeticOrNumberOrLowerCaseOrSymbol(\"A\")\n  true\n  >>> isAlphabeticOrNumberOrLowerCaseOrSymbol(\"Aa\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCaseOrSymbol(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCaseOrSymbol(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCaseOrSymbol(\"A1\")\n  false\n  >>> isAlphabeticOrNumberOrLowerCaseOrSymbol(\"A1\")\n  false\n  */\nconst isAlphabeticOrNumberOrLowerCaseOrSymbol = (string) => {\n  return isAlphabetic(string) || is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial in the same form.\n * \n * >>> integral([3, 1, 2, 4, 5])\n * 12\n * >>> integral([1, 2, 3])\n * 6\n */\nconst integral = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/**\n * Calculates the integral of a polynomial function using trapezoidal rule.\n * \n * Trapezoidal rule is defined as:\n * \n * f(x) = a + (b - a) * (x / xs)\n * \n * where xs represents the coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return integral of this polynomial", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on and so forth. The first two numbers in the sequence are 0 and 1, respectively. The next number in the sequence is calculated by adding the previous two numbers. For example, when n is 2, the sequence is 0, 1, 1, 2, and so on. Write a function to efficiently calculate the nth element of the Fibonacci sequence.\n  >>> fibonacci(0)\n  0\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  10946\n  >>> fibonacci(22)\n  17711\n  >>> fibonacci(23)\n  28657\n  >>> fibonacci(24)\n  46368\n  >>> fibonacci(25)\n  75025\n  >>> fibonacci(26)\n  121393\n  >>> fibonacci(27)\n  196418\n  >>> fibonacci(28)\n  317811\n  >>> fibonacci(29)\n  514229\n  >>> fibonacci(30)\n  832040\n  >>> fibonacci(31)\n  1346269\n  >>> fibonacci(32)\n  2178309\n  >>> fibonacci(33)\n  3524578\n  >>> fibonacci(34)\n  5702887\n  >>> fibonacci(35)\n  9227465\n  >>> fibonacci(36)\n  14930352\n  >>> fibonacci(37)\n  24157817\n  >>> fibonacci(38)\n  39088169\n  >>> fibonacci(39)\n  63245986\n  >>> fibonacci(40)\n  102334155\n  >>> fibonacci(41)\n  165580141\n  >>> fibonacci(42)\n  267914296\n  >>> fibonacci(43)\n  433494437\n  >>> fibonacci(44)\n  701408733\n  >>> fibonacci(45)\n  1134903170\n  >>> fibonacci(46)\n  1836311903\n  >>> fibonacci(47)\n  2971215073\n  >>> fibonacci(48)\n  4807526976\n  >>> fibonacci(49)\n  7778742049\n  >>> fibonacci(50)\n  12586269025\n  >>> fibonacci(51)\n  20365011074\n  >>> fibonacci(52)\n  32951280099\n  >>> fibonacci(53)\n  53316291171\n  >>> fibonacci(54)\n  86267571272\n  >>> fibonacci(55)\n  13475013890\n  >>> fibonacci(56)\n  217830980296\n  >>> fibonacci(57)\n  352457812539\n  >>> fibonacci(58)\n  570288729278\n  >>> fibonacci(59)\n  922746511871\n  >>> fibonacci(60)\n  1493035397457\n  >>> fibonacci(61)\n  2415781780141\n  >>> fibonacci(62)\n  3908816957815\n  >>> fibonacci(63)\n  6324598632813\n  >>> fibonacci(64)\n  10233415502657\n  >>> fibonacci(65)\n  16558014290037\n  >>> fibonacci(66)\n  26791429615703\n  >>> fibonacci(67)\n  43349443700073\n  >>> fibonacci(68)\n  70140873346761\n  >>> fibonacci(69)\n  113490317991613\n  >>> fibonacci(70)\n  183631190310067\n  >>> fibonacci(71)\n  297121507317261\n  >>> fibonacci(72)\n  480752697663467\n  >>> fibonacci(73)\n  777874204939229\n  >>> fibonacci(74)\n  1258626902590293\n  >>> fibonacci(75)\n  2036501107476447\n  >>> fibonacci(76)\n  3295128009902787\n  >>> fibonacci(77)\n  5331629117126451\n  >>> fibonacci(78)\n  862675712725776\n  >>> fibonacci(79)\n  134750138900987\n  >>> fibonacci(80)\n  217830980296487\n  >>> fibonacci(81)\n  3524578125394197\n  >>> fibonacci(82)\n  5702887292781113\n  >>> ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let displacement = shift;\n  while (displacement > 0) {\n    result += x.toString().charAt(displacement--);\n  }\n  return result;\n};\n\n/*\n  >>> getDigits(123)\n  [\"1\", \"2\", \"3\"]\n  >>> getDigits(1234)\n  [\"1\", \"2\", \"3\", \"4\"]\n  >>> getDigits(12345)\n  [\"1\", \"2\", \"3\", \"4\", \"5\"]\n  >>> getDigits(123456)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  >>> getDigits(1234567)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\n  >>> getDigits(12345678)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]\n  >>> getDigits(123456789)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n  >>> getDigits(1234567890)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n  >>> getDigits(12345678901)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\"]\n  >>> getDigits(123456789012)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\"]\n  >>> getDigits(1234567890123)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\"]\n  >>> getDigits(12345678901234)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\"]\n  >>> getDigits(123456789012345)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n  >>> getDigits(1234567890123456)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  >>> getDigits(12345678901234567)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\n  >>> getDigits(123456789012345678)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]\n  >>> getDigits(1234567890123456788)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n  >>> getDigits(12345678901234567889)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n  >>> getDigits(123456789012345678891)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\"]\n  >>> getDigits(1234567890123456788912)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\"]\n  >>> getDigits(12345678901234567889123)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\"]\n  >>> getDigits(123456789012345678891234)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\"]\n  >>> getDigits(1234567890123456788912345)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n  >>> getDigits(12345678901234567889123456)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n  >>> getDigits(123456789012345678891234567)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\n  >>> getDigits(1234567890123456788912345678)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]\n  >>> getDigits(12345678901234567889123456788)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n  >>> getDigits(123456789012345678891234567889)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n  >>> getDigits(1234567890123456788912345678891)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\"]\n  >>> getDigits(12345678901234567889123456788912)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\"]\n  >>> getDigits(123456789012345678891234567889123)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\"]\n  >>> getDigits(1234567890123456788912345678891234)\n  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"1\", \"2\", \"3\", \"4\"]\n  >>> getDigits(12345678901234567889", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the digits of the string 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const mangos = n - apples - oranges;\n  return mangos;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));</code>\n\nHope this helps! :)\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help! :)\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction fruitDistribution(apples, oranges, mangos) {\n  let total = 0;\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0) {\n    total = apples + oranges;\n  }\n  if(apples > 0 && mangos > 0) {\n    total = apples + mangos;\n  }\n  if(oranges > 0 && mangos > 0) {\n    total = oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n  if(apples > 0 && oranges > 0 && mangos > 0) {\n    total = apples + oranges + mangos;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let evenNodes = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenNodes.push(arr[i]);\n      if (evenNodes.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (evenNodes.length === 0 && arr.length === 0) {\n    return [];\n  }\n  if (evenNodes.length === 1) {\n    return [evenNodes[0], smallestIndex];\n  }\n  let smallestValue = evenNodes[0];\n  for (let i = 0; i < evenNodes.length; i++) {\n    if (evenNodes[i] < smallestValue) {\n      smallestValue = evenNodes[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  let oddNodes = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNodes.push(arr[i]);\n      if (oddNodes.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (oddNodes.length === 0 && arr.length === 0) {\n    return [];\n  }\n  if (oddNodes.length === 1) {\n    return [oddNodes[0], smallestIndex];\n  }\n  let smallestValue = oddNodes[0];\n  for (let i = 0; i < oddNodes.length; i++) {\n    if (oddNodes[i] < smallestValue) {\n      smallestValue = oddNodes[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  let oddNodes = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNodes.push(arr[i]);\n      if (oddNodes.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (oddNodes.length === 0 && arr.length === 0) {\n    return [];\n  }\n  if (oddNodes.length === 1) {\n    return [oddNodes[0], smallestIndex];\n  }\n  let smallestValue = oddNodes[0];\n  for (let i = 0; i < oddNodes.length; i++) {\n    if (oddNodes[i] < smallestValue) {\n      smallestValue = oddNodes[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValue = (arr) => {\n  let oddNodes = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNodes.push(arr[i]);\n      if (oddNodes.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (oddNodes.length === 0 && arr.length === 0) {\n    return [];\n  }\n  if (oddNodes.length === 1) {\n    return [oddNodes[0], smallestIndex];\n  }\n  let smallestValue = oddNodes[0];\n  for (let i = 0; i < oddNodes.length; i++) {\n    if (oddNodes[i] < smallestValue) {\n      smallestValue = oddNodes[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex, arr[0]];\n};\n\nexport { pluckOddsIndexAndValue };\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] > max) {\n      max = sorted[i];\n      maxCount = 1;\n    } else if (sorted[i] === max) {\n      maxCount++;\n    }\n  }\n  return maxCount > 0? max : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the smallest integer number, which is less than zero and has a frequency less than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] < min) {\n      min = sorted[i];\n      minCount = 1;\n    } else if (sorted[i] === min) {\n      minCount++;\n    }\n  }\n  return minCount > 0? min : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the sum of all numbers in the list, including negative numbers. If the list is empty, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1])) == 10\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 15\n      sum([5, 5, 4, 4, 4])) == 10\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the product of all numbers in the list, including negative numbers. If the list is empty, return 1.\n  Examples:\n      product([4, 1, 2, 2, 3, 1])) == 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 24\n      product([5, 5, 4, 4, 4])) == 120\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns a list containing all the numbers in the list, except for those that appear exactly twice.\n  Examples:\n      listRemoveDup([1, 2, 2, 3]) == [1, 2, 3]\n      listRemoveDup([1, 2, 2, 3]) == [1, 3]\n      listRemoveDup([1, 2, 2, 3]) == [2]\n      listRemoveDup([1, 2, 2, 3]) == []\n  */\nconst listRemoveDup = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (result.indexOf(lst[i]) === -1) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns a list containing all the numbers in the list, except for those that appear exactly three times.\n  Examples:\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      listRemove3([1, 2, 2, 3]) == [1, 3]\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterBy", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = temp;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  const sortedListLength = sortedList.length;\n  for (let i = 0; i < sortedListLength; i++) {\n    for (let j = i + 1; j < sortedListLength; j++) {\n      if (sortedList[i] > sortedList[j]) {\n        const temp = sortedList[i];\n        sortedList[i] = sortedList[j];\n        sortedList[j] = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  return Math.round((side1 + side2 + side3) / 2);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d);\n  const side3 = Math.abs(a) + Math.abs(b) - Math.abs(c) + Math.abs(d);\n  const side4 = Math.abs(a) + Math.abs(b) - Math.abs(c) - Math.abs(d);\n  return Math.round((side1 + side2 + side3 + side4) / 4);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) + Math.abs(e);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) - Math.abs(e);\n  const side3 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d) + Math.abs(e);\n  const side4 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d) - Math.abs(e);\n  return Math.round((side1 + side2 + side3 + side4) / 4);\n};\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c, d, e, f) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) + Math.abs(e) + Math.abs(f);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) + Math.abs(e) - Math.abs(f);\n  const side3 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) - Math.abs(e) + Math.abs(f);\n  const side4 = Math.abs(a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum < maxWeight;\n};\n\nconst isPalindromic = (arr) => {\n  const reversed = arr.reverse();\n  return arr === reversed;\n};\n\nconst isBalanced = (arr) => {\n  const maxSum = arr.reduce((acc, val) => acc + val, 0);\n  return maxSum === arr.length;\n};\n\nconst isPalindromicAndBalanced = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr);\n};\n\nconst isPalindromicAndBalancedAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFly = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAndWontFlyAnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min <= max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      min = mid + 1;\n    } else if (arr[mid] < arr[min]) {\n      max = mid - 1;\n    } else {\n      return mid - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a string, return a new string where all characters have been reversed.\n\n  For example:\n  reverseString(\"hello\") == \"olleh\"\n  reverseString(\"abracadabra\") == \"rabracadabra\"\n  reverseString(\"\") == \"\"\n  reverseString(null) == null\n  reverseString(undefined) == undefined\n  */\nconst reverseString = (str) => {\n  if (str === null || str === undefined) {\n    return str;\n  }\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been incremented by 1.\n\n  For example:\n  increment([]) == []\n  increment([1,2,3]) == [2,3,4]\n  increment([1,2,3]) == [2,3,4]\n  increment([1,2]) == [3,4]\n  increment([1,2]) == [3,4]\n  increment([1,2]) == [3,4]\n  increment([1,2,3]) == [2,3,4]\n  */\nconst increment = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] + 1);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been decremented by 1.\n\n  For example:\n  decrement([]) == []\n  decrement([1,2,3]) == [3,2,1]\n  decrement([1,2,3]) == [3,2,1]\n  decrement([1,2]) == [2,1]\n  decrement([1,2]) == [2,1]\n  decrement([1,2]) == [2,1]\n  decrement([1,2,3]) == [3,2,1]\n  */\nconst decrement = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] - 1);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been multiplied by 2.\n\n  For example:\n  double([1,2,3]) == [2,4,6]\n  double([1,2,3]) == [2,4,6]\n  double([1,2]) == [2,4]\n  double([1,2]) == [2,4]\n  double([1,2]) == [2,4]\n  double([1,2,3]) == [2,4,6]\n  */\nconst double = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] * 2);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been divided by 2.\n\n  For example:\n  halve([1,2,3]) == [1,1.5,2]\n  halve([1,2,3]) == [1,1.5,2]\n  halve([1,2]) == [1,1]\n  halve([1,2]) == [1,1]\n  halve([1,2]) == [1,1]\n  halve([1,2,3]) == [1,1.5,2]\n  */\nconst halve = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] / 2);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been added together.\n\n  For example:\n  add([1,2,3]) == [2,3,4]\n  add([1,2,3]) == [2,3,4]\n  add([1,2]) == [3,4]\n  add([1,2]) == [3,4]\n  add([1,2]) == [3,4]\n  add([1,2,3]) == [2,3,4]\n  */\nconst add = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] + arr[i + 1]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been subtracted together.\n\n  For example:\n  subtract([1,2,3]) == [1,0,-1]\n  subtract([1,2,3]) == [1,0,-1]\n  subtract([1,2]) == [0,-1]\n  subtract([1,2]) == [0,-1]\n  subtract([1,2]) == [0,-1]\n  subtract([1,2,3]) == [1,0,-1]\n  */\nconst subtract = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] - arr[i + 1]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been multiplied together.\n\n  For example:\n  multiply([1,2,3]) == [1,2,3]\n  multiply([1,2,3]) == [1,2,3]\n  multiply([1,2]) == [1,2]\n  multiply([1,2]) == [1,2]\n  multiply([1,2]) == [1,2]\n  multiply([1,2,3]) == [1,2,3]\n  */\nconst multiply = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] * arr[i + 1]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been divided together.\n\n  For example:\n  divide([1,2,3]) == [1,0.5,1]\n  divide([1,2,3]) == [1,0.5,1]\n  divide([1,2]) == [1,0]\n  divide([1,2]) == [1,0]\n  divide([1,2]) == [1,0]\n  divide([1,2,3]) == [1,0.5,1]\n  */\nconst divide = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] / arr[i + 1]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been added together.\n\n  For example:\n  sum([1,2,3]) == 6\n  sum([1,2,3]) == 6\n  sum([1,2]) == 3\n  sum([1,2]) == 3\n  sum([1,2]) == 3\n  sum([1,2,3]) == 6\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been subtracted together.\n\n  For example:\n  difference([1,2,3]) == [1,2,2]\n  difference([1,2,3]) == [1,2,2]\n  difference([1,2]) == [0,-1]\n  difference([1,2]) == [0,-1]\n  difference([1,2]) == [0,-1]\n  difference([1,2,3]) == [1,2,2]\n  */\nconst difference = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] - arr[i + 1]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of numbers, return a new array where each element has been divided together.\n\n  For example:\n  average([1,2,3]) == 1.5\n  average([1,2,3]) == 1.5\n  average([1,2]) == 1.5\n  average([1,2]) == 1.5\n  average([1,2]) == 1.5\n  average([1,2,3]) == 1.5\n  */\nconst average = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] < lst2[i]) {\n      result.push(lst1[i]);\n      i++;\n    } else {\n      result.push(lst2[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string. You may assume that the string contains only lowercase letters.\n\n  Examples\n  countLetter('hi') ➞ 1\n  countLetter('hihi') ➞ 2\n  countLetter('hihihi') ➞ 3\n  countLetter('hihihihi') ➞ 4\n  countLetter('hihihihihi') ➞ 5\n  countLetter('hihihihihihi') ➞ 6\n  countLetter('hihihihihihihi') ➞ 7\n  countLetter('hihihihihihihihi') ➞ 8\n  countLetter('hihihihihihihihihi') ➞ 9\n  countLetter('hihihihihihihihihihi') ➞ 10\n  countLetter('hihihihihihihihihihihi') ➞ 11\n  countLetter('hihihihihihihihihihihihi') ➞ 12\n  countLetter('hihihihihihihihihihihihi') ➞ 13\n  countLetter('hihihihihihihihihihihihihi') ➞ 14\n  countLetter('hihihihihihihihihihihihihi') ➞ 15\n  countLetter('hihihihihihihihihihihihihihi') ➞ 16\n  countLetter('hihihihihihihihihihihihihihi') ➞ 17\n  countLetter('hihihihihihihihihihihihihihihi') ➞ 18\n  countLetter('hihihihihihihihihihihihihihihi') ➞ 19\n  countLetter('hihihihihihihihihihihihihihihi') ➞ 20\n  countLetter('hihihihihihihihihihihihihihihi') ➞ 21\n  countLetter('hihihihihihihihihihihihihihihihi') ➞ 22\n  countLetter('hihihihihihihihihihihihihihihihihi') ➞ 23\n  countLetter('hihihihihihihihihihihihihihihihihi') ➞ 24\n  countLetter('hihihihihihihihihihihihihihihihihi') ➞ 25\n  countLetter('hihihihihihihihihihihihihihihihihihi') ➞ 26\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 27\n  countLetter('hihihihihihihihihihihihihihihihihihihihi') ➞ 28\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 29\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 30\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 31\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 32\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 33\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 34\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 35\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 36\n  countLetter('hihihihihihihihihihihihihihihihihihihihi') ➞ 37\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 38\n  countLetter('hihihihihihihihihihihihihihihihihihihihi') ➞ 39\n  countLetter('hihihihihihihihihihihihihihihihihihihihi') ➞ 40\n  countLetter('hihihihihihihihihihihihihihihihihihihihihi') ➞ 41\n  countLetter('hihihihihihihihihihihihihihihihihihihihi') ➞ 42\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 43\n  countLetter('hihihihihihihihihihihihihihihihihihihi') ➞ 44\n  countLetter('hihihihihihihihihihihihihihihihihihihihi') ➞ 45\n  countLetter('hihihihihihihihihihihihihihihihihihihihihi') ➞ 46\n  countLetter('hihihihihihihihihihihihihihihihihihihihihi') ➞ 47\n  countLetter('hihihihihihihihihihihihihihihihihihihihihi') ➞ 48\n  countLetter('hihihihihihihihihihihihihihihihihihihihihi') ➞ 49\n  count", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let primesLength = primes.length\n    for (let i = 0; i < primesLength; i++) {\n      if (primes[i] === a) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n * * int = x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and in other cases a false one. x is a power of n if n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false;\n  return a === 1 || a === 3 || a === 5 || a === 7 || a === 9 || a === 11;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of a given size. Note: You can assume that the input is always valid.\n  Examples:\n  isdie(1) ==> true\n  isdie(2) ==> false\n  isdie(-1) ==> true\n  isdie(64) ==> true\n  isdie(0) ==> true\n  isdie(180) ==> false\n  isdie(100) ==> true\n  isdie(200) ==> false\n  isdie(300) ==> true\n  isdie(400) ==> false\n  isdie(500) ==> true\n  isdie(600) ==> false\n  isdie(700) ==> true\n  isdie(800) ==> false\n  isdie(900) ==> true\n  isdie(1000) ==> false\n  isdie(1100) ==> true\n  isdie(1200) ==> false\n  isdie(1300) ==> true\n  isdie(1400) ==> false\n  isdie(1500) ==> true\n  isdie(1600) ==> false\n  isdie(1700) ==> true\n  isdie(1800) ==> false\n  isdie(1900) ==> true\n  isdie(2000) ==> false\n  isdie(2100) ==> true\n  isdie(2200) ==> false\n  isdie(2300) ==> true\n  isdie(2400) ==> false\n  isdie(2500) ==> true\n  isdie(2600) ==> false\n  isdie(2700) ==> true\n  isdie(2800) ==> false\n  isdie(2900) ==> true\n  isdie(3000) ==> false\n  isdie(3100) ==> true\n  isdie(3200) ==> false\n  isdie(3300) ==> true\n  isdie(3400) ==> false\n  isdie(3500) ==> true\n  isdie(3600) ==> false\n  isdie(3700) ==> true\n  isdie(3800) ==> false\n  isdie(3900) ==> true\n  isdie(4000) ==> false\n  isdie(4100) ==> true\n  isdie(4200) ==> false\n  isdie(4300) ==> true\n  isdie(4400) ==> false\n  isdie(4500) ==> true\n  isdie(4600) ==> false\n  isdie(4700) ==> true\n  isdie(4800) ==> false\n  isdie(4900) ==> true\n  isdie(5000) ==> false\n  isdie(5100) ==> true\n  isdie(5200) ==> false\n  isdie(5300) ==> true\n  isdie(5400) ==> false\n  isdie(5500) ==> true\n  isdie(5600) ==> false\n  isdie(5700) ==> true\n  isdie(5800) ==> false\n  isdie(5900) ==> true\n  isdie(6000) ==> false\n  isdie(6100) ==> true\n  isdie(6200) ==> false\n  isdie(6300) ==> true\n  isdie(6400) ==> false\n  isdie(6500) ==> true\n  isdie(6600) ==> false\n  isdie(6700) ==> true\n  isdie(6800) ==> false\n  isdie(6900) ==> true\n  isdie(7000) ==> false\n  isdie(7100) ==> true\n  isdie(7200) ==> false\n  isdie(7300) ==> true\n  isdie(7400) ==> false\n  isdie(7500) ==> true\n  isdie(7600) ==> false\n  isdie(7700) ==> true\n  isdie(7800) ==> false\n  isdie(7900) ==> true\n  isdie(8000) ==> false\n  isdie(8100) ==> true\n  isdie(8200) ==> false\n  isdie(8300) ==> true\n  isdie(8400) ==> false\n  isdie(8500) ==> true\n  isdie(8600) ==> false\n  isdie(8700) ==> true\n  isdie(8800) ==> false\n  isdie(8900) ==> true\n  isdie(9000) ==> false\n  isdie(9100) ==> true\n  isdie(9200) ==> false\n  isdie(9300) ==> true\n  isdie(9400) ==> false\n  isdie(9500) ==> true\n  isdie(9600) ==> false\n  isdie(9700) ==> true\n  isdie(9800) ==> false\n  isdie(9900) ==> true\n  isdie(10000) ==> false\n  isdie(10100) ==> true\n  isdie(10200) ==> false\n  isdie(10300) ==> true\n  isdie(10400) ==> false\n  isdie(10500) ==> true\n  isdie(10600) ==> false\n  isdie(10700) ==> true\n  isdie(10800) ==> false\n  isdie(10900) ==> true\n  isdie(11000) ==> false\n  isdie(11100) ==> true\n  isdie(11200) ==> false\n  isdie(11300) ==> true\n  isdie(11400) ==> false\n  isdie(11500) ==> true\n  isdie(11600) ==> false\n  isdie(11700) ==> true\n  isdie(11800) ==> false\n  isdie(11900) ==> true\n  isdie(12000) ==> false\n  isdie(12100) ==> true\n  isdie(12200) ==> false\n  isdie(12300) ==> true\n  isdie(12400) ==> false\n  isdie(12500) ==> true\n  isdie(12600) ==> false\n  isdie(12700) ==> true\n  isdie(12800) ==> false\n  isdie(12900) ==> true\n  isdie(13000) ==> false\n  isdie(13100) ==> true\n  isdie(13200) ==> false\n  isdie(13300) ==> true\n  isdie(13400) ==> false\n  isdie(13500) ==> true\n  isdie(13600) ==", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split('');\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength2 = hexNumArrayLength * 2;\n  let hexNumArrayLength3 = hexNumArrayLength2 * 3;\n  let hexNumArrayLength4 = hexNumArrayLength3 * 4;\n  let hexNumArrayLength5 = hexNumArrayLength4 * 5;\n  let hexNumArrayLength6 = hexNumArrayLength5 * 6;\n  let hexNumArrayLength7 = hexNumArrayLength6 * 7;\n  let hexNumArrayLength8 = hexNumArrayLength7 * 8;\n  let hexNumArrayLength9 = hexNumArrayLength8 * 9;\n  let hexNumArrayLength10 = hexNumArrayLength9 * 10;\n  let hexNumArrayLength11 = hexNumArrayLength10 * 11;\n  let hexNumArrayLength12 = hexNumArrayLength11 * 12;\n  let hexNumArrayLength13 = hexNumArrayLength12 * 13;\n  let hexNumArrayLength14 = hexNumArrayLength13 * 14;\n  let hexNumArrayLength15 = hexNumArrayLength14 * 15;\n  let hexNumArrayLength16 = hexNumArrayLength15 * 16;\n  let hexNumArrayLength17 = hexNumArrayLength16 * 17;\n  let hexNumArrayLength18 = hexNumArrayLength17 * 18;\n  let hexNumArrayLength19 = hexNumArrayLength18 * 19;\n  let hexNumArrayLength20 = hexNumArrayLength19 * 20;\n  let hexNumArrayLength21 = hexNumArrayLength20 * 21;\n  let hexNumArrayLength22 = hexNumArrayLength21 * 22;\n  let hexNumArrayLength23 = hexNumArrayLength22 * 23;\n  let hexNumArrayLength24 = hexNumArrayLength23 * 24;\n  let hexNumArrayLength25 = hexNumArrayLength24 * 25;\n  let hexNumArrayLength26 = hexNumArrayLength25 * 26;\n  let hexNumArrayLength27 = hexNumArrayLength26 * 27;\n  let hexNumArrayLength28 = hexNumArrayLength27 * 28;\n  let hexNumArrayLength29 = hexNumArrayLength28 * 29;\n  let hexNumArrayLength30 = hexNumArrayLength29 * 30;\n  let hexNumArrayLength31 = hexNumArrayLength30 * 31;\n  let hexNumArrayLength32 = hexNumArrayLength31 * 32;\n  let hexNumArrayLength33 = hexNumArrayLength32 * 33;\n  let hexNumArrayLength34 = hexNumArrayLength33 * 34;\n  let hexNumArrayLength35 = hexNumArrayLength34 * 35;\n  let hexNumArrayLength36 = hexNumArrayLength35 * 36;\n  let hexNumArrayLength37 = hexNumArrayLength36 * 37;\n  let hexNumArrayLength38 = hexNumArrayLength37 * 38;\n  let hexNumArrayLength39 = hexNumArrayLength38 * 39;\n  let hexNumArrayLength40 = hexNumArrayLength39 * 40;\n  let hexNumArrayLength41 = hexNumArrayLength40 * 41;\n  let hexNumArrayLength42 = hexNumArrayLength41 * 42;\n  let hexNumArrayLength43 = hexNumArrayLength42 * 43;\n  let hexNumArrayLength44 = hexNumArrayLength43 * 44;\n  let hexNumArrayLength45 = hexNumArrayLength44 * 45;\n  let hexNumArrayLength46 = hexNumArrayLength45 * 46;\n  let hexNumArrayLength47 = hexNumArrayLength46 * 47;\n  let hexNumArrayLength48 = hexNumArrayLength47 * 48;\n  let hexNumArrayLength49 = hexNumArrayLength48 * 49;\n  let hexNumArrayLength50 = hexNumArrayLength49 * 50;\n  let hexNumArrayLength51 = hexNumArrayLength50 * 51;\n  let hexNumArrayLength52 = hexNumArrayLength51 * 52;\n  let hexNumArrayLength53 = hexNumArrayLength52 * 53;\n  let hexNumArrayLength54 = hexNumArrayLength53 * 54;\n  let hexNumArrayLength55 = hexNumArrayLength54 * 55;\n  let hexNumArrayLength56 = hexNumArrayLength55 * 56;\n  let hexNumArrayLength57 = hexNumArrayLength56 * 57;\n  let hexNumArrayLength58 = hexNumArrayLength57 * 58;\n  let hexNumArrayLength59 = hexNumArrayLength58 * 59;\n  let hexNumArrayLength60 = hexNumArrayLength59 * 60;\n  let hexNumArrayLength61 = hexNumArrayLength60 * 61;\n  let hexNumArrayLength62 = hexNumArrayLength61 * 62;\n  let hexNumArrayLength63 = hexNumArrayLength62 * 63;\n  let hexNumArrayLength64 = hexNumArrayLength63 * 64;\n  let hexNumArrayLength65 = hexNumArrayLength64 * 65;\n  let hexNumArrayLength66 = hexNumArrayLength65 * 66;\n  let hexNumArrayLength67 = hexNumArrayLength66 * 67;\n  let hexNumArrayLength68 = hexNumArrayLength67 * 68;\n  let hexNumArrayLength69 = hexNumArrayLength68 * 69;\n  let hexNumArrayLength70 = hexNumArrayLength69 * 70;\n  let hexNumArrayLength71 = hexNumArrayLength70 * 71;\n  let hexNumArrayLength72 = hexNumArrayLength71 * 72;\n  let hexNumArrayLength73 = hexNumArrayLength72 * 73;\n  let hexNumArrayLength74 = hexNumArrayLength73 * 74;\n  let hexNumArrayLength75 = hexNumArrayLength74 * 75;\n  let hexNumArrayLength76 = hexNumArrayLength75 * 76;\n  let hexNumArrayLength77 = hexNumArrayLength76 * 77;\n  let hexNumArrayLength78 = hexNumArrayLength77 * 78;\n  let hexNumArrayLength79 = hexNumArrayLength78 * 79;\n  let hexNumArrayLength80 = hexNumArrayLength79 * 80;\n  let hexNumArrayLength81 = hexNumArrayLength80 * 81;\n  let hexNumArrayLength82 = hexNumArrayLength81 * 82;\n  let hex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  let decimalStringHalf = decimalStringLength / 2;\n\n  for (let i = 0; i < decimalStringHalf; i++) {\n    decimalString += decimal.toString(2);\n  }\n\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString === '0') {\n      binary += '0';\n    } else if (decimalString === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The binary number\n  will be given as a string. Your task is to convert it to a decimal number. The function should\n  return a number.\n\n  Examples:\n  binaryToDecimal(\"1111\") returns 3\n  binaryToDecimal(\"1010\") returns 5\n  binaryToDecimal(\"01010\") returns 10\n  binaryToDecimal(\"101010\") returns 15\n  binaryToDecimal(\"10101010\") returns 20\n  binaryToDecimal(\"101010101010\") returns 30\n  binaryToDecimal(\"1010101010101010\") returns 45\n  binaryToDecimal(\"10101010101010101010\") returns 70\n  binaryToDecimal(\"101010101010101010101010\") returns 100\n  binaryToDecimal(\"1010101010101010101010101010\") returns 121\n  binaryToDecimal(\"10101010101010101010101010101010\") returns 150\n  binaryToDecimal(\"101010101010101010101010101010101010\") returns 200\n  binaryToDecimal(\"1010101010101010101010101010101010101010\") returns 250\n  binaryToDecimal(\"10101010101010101010101010101010101010101010\") returns 300\n  binaryToDecimal(\"101010101010101010101010101010101010101010101010\") returns 350\n  binaryToDecimal(\"1010101010101010101010101010101010101010101010101010\") returns 400\n  binaryToDecimal(\"10101010101010101010101010101010101010101010101010101010\") returns 450\n  binaryToDecimal(\"10101010101010101010101010101010101010101010101010101010\") returns 500\n  binaryToDecimal(\"101010101010101010101010101010101010101010101010101010101010\") returns 550\n  binaryToDecimal(\"1010101010101010101010101010101010101010101010101010101010101010\") returns 600\n  binaryToDecimal(\"10101010101010101010101010101010101010101010101010101010101010101010\") returns 650\n  binaryToDecimal(\"1010101010101010101010101010101010101010101010101010101010101010101010101010\") returns 700\n  binaryToDecimal(\"10101010101010101010101010101010101010101010101010101010101010101010101010101010\") returns 750\n  binaryToDecimal(\"101010101010101010101010101010101010101010101010101010101010101010101010101010101010\") returns 800\n  binaryToDecimal(\"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\") returns 850\n  binaryToDecimalpassed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list except the one at index i. Empty sum should be 0 and empty product should be 1.\n  >>> sumProductExceptIndex([1,2,3,4], 1)\n  (10, 24)\n  */\nconst sumProductExceptIndex = (numbers, i) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    if (num!== i) {\n      sum += num;\n      product *= num;\n    }\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10)\n  const gradesSum = gradesArray.reduce((acc, val) => acc + val, 0)\n  const gradesAverage = gradesSum / gradesArray.length\n  const gradesSumOfSquares = gradesArray.map(grade => grade * grade)\n  const gradesSumOfSquaresAverage = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesArray.length\n  const gradesSumOfSquaresAverageOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n  const gradesSumOfSquaresAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquares.reduce((acc, val) => acc + val, 0) / gradesSumOfSquares.length\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'e' && string[i]!== 'i' && string[i]!== 'o' && string[i]!== 'u') {\n      prime = false\n    }\n  }\n  return prime\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome2 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome3 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome4 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome5 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome6 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome7 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome8 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome9 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome10 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome11 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome12 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome13 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true if the string is a palindrome or otherwise wrong\n  Examples\n  palindrome('racecar') == true\n  palindrome('racecars') == true\n  palindrome('racecars') == false\n  palindrome('racecar') == false\n  */\nconst palindrome14 = (string) => {\n  let reverse = ''\n  for (let i = 0; i < string.length; i++) {\n    reverse += string[i]\n  }\n  return string === reverse\n}\n\n/*Write is a function that takes a string and returns true ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst startsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const startsZeroEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst startsZeroEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const startsOneStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst startsOneStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsOneEnds = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneEnds = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const endsZeroStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsZeroStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 1. * / const endsOneStarts = (n) = > {\n    return n >= 0 && n <= 9\n  }\n*/\nconst endsOneStarts = (n) => {\n  return n >= 0 && n <= 9\n}\n\n/*\n  Given a positive integer n, returns the number of n-digit positive integers starting or ending with 0. * / const ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(even).concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(\n        char.charCodeAt() - 97\n      );\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDescAndAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(\n        char.charCodeAt() - 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDescAndAscAndDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(\n        char.charCodeAt() - 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDescAndAscAndDescAndAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(\n        char.charCodeAt() - 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDescAndAscAndDescAndAscAndAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(\n        char.charCodeAt() - 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value and in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDescAndAscAndDescAndAscAndAscAndAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(\n        char.charCodeAt() - 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n      newString += String.fromCharCode(\n        char.charCodeAt() + 97\n      );\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the asci", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  const rows = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push([i, col]);\n      }\n    });\n    return acc;\n  }, []);\n  rows.sort((a, b) => a[0] - b[0]);\n  rows.sort((a, b) => b[1] - a[1]);\n  rows.forEach(([row, col]) => {\n    const [x, y] = getCol(row, col);\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  const result = [];\n  const cols = lst.reduce((acc, cur) => {\n    cur.forEach((row, i) => {\n      if (row === x) {\n        acc.push([i, row]);\n      }\n    });\n    return acc;\n  }, []);\n  cols.sort((a, b) => a[1] - b[1]);\n  cols.sort((a, b) => b[0] - a[0]);\n  cols.forEach(([col, row]) => {\n    const [x, y] = getRow(row, col);\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diags = lst.reduce((acc, cur) => {\n    cur.forEach((row, i) => {\n      if (row === x) {\n        acc.push([i, row]);\n      }\n    });\n    return acc;\n  }, []);\n  diags.sort((a, b) => a[1] - b[1]);\n  diags.sort((a, b) => b[0] - a[0]);\n  diags.forEach(([col, row]) => {\n    const [x, y] = getRow(row, col);\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diags = lst.reduce((acc, cur) => {\n    cur.forEach((row, i) => {\n      if (row === x) {\n        acc.push([i, row]);\n      }\n    });\n    return acc;\n  }, []);\n  diags.sort((a, b) => a[1] - b[1]);\n  diags.sort((a, b) => b[0] - a[0]);\n  diags.forEach(([col, row]) => {\n    const [x, y] = getCol(row, col);\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  const diags = lst.reduce((acc, cur) => {\n    cur.forEach((row, i) => {\n      if (row === x) {\n        acc.push([i, row]);\n      }\n    });\n    return acc;\n  }, []);\n  diags.sort((a, b) => a[1] - b[1]);\n  diags.sort((a, b) => b[0] - a[0]);\n  diags.forEach(([col, row]) => {\n    const [x, y] = getCol(row, col);\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a + b > 0) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return sortedArray;\n};\n\n/*\n  Given a sorted array of non-negative integers, return the sum of the first and last value in the array. Note: * Do not change the given array.\n\n  Examples:\n  * sumArray([]) => 0\n  * sumArray([5]) => 5\n  * sumArray([2, 4, 3, 0, 1, 5]) => 6\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => 10\n  */\nconst sumArray = (array) => {\n  const sum = array.reduce((acc, curr) => {\n    return acc + curr;\n  });\n  return sum;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n  return reverseArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the given array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reverseArray = array.slice().reverse();\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(i)\n  }\n  let newAlphabetLength = newAlphabet.length\n  let newAlphabetReverse = newAlphabet\n  newAlphabetReverse = newAlphabetReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseLength = newAlphabetReverse.length\n  let newAlphabetReverseReverse = newAlphabetReverse\n  newAlphabetReverseReverse = newAlphabetReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseLength = newAlphabetReverseReverse.length\n  let newAlphabetReverseReverseReverse = newAlphabetReverseReverse\n  newAlphabetReverseReverseReverse = newAlphabetReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseLength = newAlphabetReverseReverseReverseReverse.length\n  let newAlphabetReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverse.length\n  let newAlphabetReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverse.length\n  let newAlphabetReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverse.length\n  let newAlphabetReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverse.length\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverse.length\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverse.length\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.split(\"\").reverse().join(\"\")\n  let newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      currentMax = max;\n      currentIndex = i;\n      max = numbers[i];\n    } else if (numbers[i] === max) {\n      currentMax = max;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      result.push(numbers[i]);\n      max = numbers[i];\n    } else if (numbers[i] === max) {\n      result.push(numbers[i]);\n      currentMax = max;\n      currentIndex = i;\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating minimum elements found up to a certain moment in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 2]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let currentMin = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      currentMin = min;\n      currentIndex = i;\n      min = numbers[i];\n    } else if (numbers[i] === min) {\n      currentMin = min;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(numbers[i]);\n      min = numbers[i];\n    } else if (numbers[i] === min) {\n      result.push(numbers[i]);\n      currentMin = min;\n      currentIndex = i;\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating average elements found up to a certain moment in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 2]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      currentSum = sum;\n      currentIndex = i;\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      result.push(numbers[i]);\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      result.push(numbers[i]);\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating median elements found up to a certain moment in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 2]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      currentSum = sum;\n      currentIndex = i;\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      result.push(numbers[i]);\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      result.push(numbers[i]);\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating mode elements found up to a certain moment in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let mode = 0;\n  let currentMode = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > mode) {\n      currentMode = mode;\n      currentIndex = i;\n      mode = numbers[i];\n    } else if (numbers[i] === mode) {\n      currentMode = mode;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    if (numbers[i] > mode) {\n      result.push(numbers[i]);\n      mode = numbers[i];\n    } else if (numbers[i] === mode) {\n      result.push(numbers[i]);\n      currentMode = mode;\n      currentIndex = i;\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating sum elements found up to a certain moment in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 2]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      currentSum = sum;\n      currentIndex = i;\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      result.push(numbers[i]);\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      result.push(numbers[i]);\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating variance elements found up to a certain moment in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 2]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      currentSum = sum;\n      currentIndex = i;\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      result.push(numbers[i]);\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      result.push(numbers[i]);\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating standard deviation elements found up to a certain moment in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 2]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      currentSum = sum;\n      currentIndex = i;\n      sum = numbers[i];\n    } else if (numbers[i] === sum) {\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  result.push(numbers[currentIndex]);\n  for (let i = currentIndex + 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (numbers[i] > sum) {\n      result.push(numbers[i]);\n      sum = numbers[i];\n    } else if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  const smallest = lst[0]\n  const secondSmallest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest\n      smallest = lst[i]\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i]\n    }\n  }\n  return secondSmallest\n}\n*/\n\n// Write a function nextLargest () that returns the largest element in the list. Returns zero if there is no such element. nextLargest ([1, 2, 3, 4, 5]) = = 5 nextLargest ([5, 1, 4, 3, 2]) = = 5 nextLargest ([]) = = null nextLargest ([1, 1]) = = null * / const nextLargest = (lst) = > {\n  const largest = lst[0]\n  const secondLargest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      secondLargest = largest\n      largest = lst[i]\n    } else if (lst[i] < secondLargest) {\n      secondLargest = lst[i]\n    }\n  }\n  return secondLargest\n}\n\n// Write a function nextGreatest () that returns the greatest element in the list. Returns zero if there is no such element. nextGreatest ([1, 2, 3, 4, 5]) = = 5 nextGreatest ([5, 1, 4, 3, 2]) = = 5 nextGreatest ([]) = = null nextGreatest ([1, 1]) = = null * / const nextGreatest = (lst) = > {\n  const greatest = lst[0]\n  const secondGreatest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > greatest) {\n      secondGreatest = greatest\n      greatest = lst[i]\n    } else if (lst[i] < secondGreatest) {\n      secondGreatest = lst[i]\n    }\n  }\n  return secondGreatest\n}\n\n// Write a function nextSmallestAndLargest () that returns the smallest and largest element in the list. Returns zero if there is no such element. nextSmallestAndLargest ([1, 2, 3, 4, 5]) = = [1, 5] nextSmallestAndLargest ([5, 1, 4, 3, 2]) = = [1, 5] nextSmallestAndLargest ([]) = = null nextSmallestAndLargest ([1, 1]) = = null nextSmallestAndLargest ([1, 2]) = = [1, 2] nextSmallestAndLargest ([2, 1, 3]) = = [1, 2] nextSmallestAndLargest ([3, 2, 1]) = = [1, 2] nextSmallestAndLargest ([3, 2, 2]) = = [1, 2] nextSmallestAndLargest ([3, 2, 3]) = = [1, 2] nextSmallestAndLargest ([3, 2, 4]) = = [1, 2] nextSmallestAndLargest ([3, 2, 5]) = = [1, 2] nextSmallestAndLargest ([3, 2, 6]) = = [1, 2] nextSmallestAndLargest ([3, 2, 7]) = = [1, 2] nextSmallestAndLargest ([3, 2, 8]) = = [1, 2] nextSmallestAndLargest ([3, 2, 9]) = = [1, 2] nextSmallestAndLargest ([3, 2, 10]) = = [1, 2] nextSmallestAndLargest ([3, 2, 11]) = = [1, 2] nextSmallestAndLargest ([3, 2, 12]) = = [1, 2] nextSmallestAndLargest ([3, 2, 13]) = = [1, 2] nextSmallestAndLargest ([3, 2, 14]) = = [1, 2] nextSmallestAndLargest ([3, 2, 15]) = = [1, 2] nextSmallestAndLargest ([3, 2, 16]) = = [1, 2] nextSmallestAndLargest ([3, 2, 17]) = = [1, 2] nextSmallestAndLargest ([3, 2, 18]) = = [1, 2] nextSmallestAndLargest ([3, 2, 19]) = = [1, 2] nextSmallestAndLargest ([3, 2, 20]) = = [1, 2] nextSmallestAndLargest ([3, 2, 21]) = = [1, 2] nextSmallestAndLargest ([3, 2, 22]) = = [1, 2] nextSmallestAndLargest ([3, 2, 23]) = = [1, 2] nextSmallestAndLargest ([3, 2, 24]) = = [1, 2] nextSmallestAndLargest ([3, 2, 25]) = = [1, 2] nextSmallestAndLargest ([3, 2, 26]) = = [1, 2] nextSmallestAndLargest ([3, 2, 27]) = = [1, 2] nextSmallestAndLargest ([3, 2, 28]) = = [1, 2] nextSmallestAndLargest ([3, 2, 29]) = = [1, 2] nextSmallestAndLargest ([3, 2, 30]) = = [1, 2] nextSmallestAndLargest ([3, 2, 31]) = = [1, 2] nextSmallestAndLargest ([3, 2, 32]) = = [1, 2] nextSmallestAndLargest ([3, 2, 33]) = = [1, 2] nextSmallestAndLargest ([3, 2, 34]) = = [1, 2] nextSmallestAndLargest ([3, 2, 35]) = = [1, 2] nextSmallestAndLargest ([3, 2, 36]) = = [1, 2] nextSmallestAndLargest ([3, 2, 37]) = = [1, 2] nextSmallestAndLargest ([3, 2, 38]) = = [1, 2] nextSmallestAndLargest ([3, 2, 39]) = = [1, 2] nextSmallestAndLargest ([3, 2, 40]) = = [1, 2] nextSmallestAndLargest ([3, 2, 41]) = = [1, 2] nextSmallestAndLargest ([3, 2, 42]) = = [1, 2] nextSmallestAndLargest ([3, 2, 43]) = = [1, 2] nextSmallestAndLargest ([3, 2, 44]) = = [1, 2] nextSmallestAndLargest ([3, 2, 45]) = = [1, 2] nextSmallestAndLargest ([3, 2, 46]) = = [1, 2] nextSmallestAndLargest ([3, 2, 47]) = = [1, 2] nextSmallestAndLargest ([3, 2, 48]) = = [1, 2] nextSmallestAndLargest ([3, 2, 49]) = = [1, 2] nextSmallestAndLargest ([3, 2, 50]) = = [1, 2] nextSmallestAndLargest ([3, 2, 51]) = = [1, 2] nextSmallestAndLargest ([3, 2, 52]) = = [1, 2] nextSmallestAndLargest ([3, 2, 53]) = = [1, 2] nextSmallestAndLargest ([3, 2, 54]) = = [1, 2] nextSmallestAndLargest ([3, 2, 55]) = = [1, 2] nextSmallestAndLargest ([3, 2, 56]) = = [1, 2] ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I.\")) {\n      return 0;\n    }\n  }\n  return 1;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y > z) return true\n  if (y < z) return false\n  return false\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return false\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) return false\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (y > z) return false\n  if (y < z) return true\n  return true\n}\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a string and reverses the order of characters in each word and replaces every vowel in the string with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> reverse('test')\n  'tset'\n  >>> reverse('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst reverse = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a letter appears in the string. Let's just say letters. Examples:\n  >>> countLetters('test')\n  2\n  >>> countLetters('This is a message')\n  5\n  */\nconst countLetters = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a vowel appears in the string. Let's just say letters. Examples:\n  >>> countVowels('test')\n  2\n  >>> countVowels('This is a message')\n  5\n  */\nconst countVowels = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a consonant appears in the string. Let's just say letters. Examples:\n  >>> countConsonants('test')\n  2\n  >>> countConsonants('This is a message')\n  5\n  */\nconst countConsonants = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a letter appears in the string and returns the number of times a vowel appears in the string. Let's just say letters. Examples:\n  >>> countLettersAndVowels('test')\n  2\n  >>> countLettersAndVowels('This is a message')\n  5\n  */\nconst countLettersAndVowels = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a vowel appears in the string and returns the number of times a consonant appears in the string. Let's just say letters. Examples:\n  >>> countVowelsAndConsonants('test')\n  2\n  >>> countVowelsAndConsonants('This is a message')\n  5\n  */\nconst countVowelsAndConsonants = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a consonant appears in the string and returns the number of times a vowel appears in the string. Let's just say letters. Examples:\n  >>> countConsonantsAndVowels('test')\n  2\n  >>> countConsonantsAndVowels('This is a message')\n  5\n  */\nconst countConsonantsAndVowels = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a letter appears in the string and returns the number of times a consonant appears in the string and returns the number of times a vowel appears in the string. Let's just say letters. Examples:\n  >>> countLettersAndVowelsAndConsonants('test')\n  2\n  >>> countLettersAndVowelsAndConsonants('This is a message')\n  5\n  */\nconst countLettersAndVowelsAndConsonants = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a vowel appears in the string and returns the number of times a consonant appears in the string and returns the number of times a letter appears in the string. Let's just say letters. Examples:\n  >>> countVowelsAndConsonantsAndLetters('test')\n  2\n  >>> countVowelsAndConsonantsAndLetters('This is a message')\n  5\n  */\nconst countVowelsAndConsonantsAndLetters = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a consonant appears in the string and returns the number of times a vowel appears in the string and returns the number of times a letter appears in the string. Let's just say letters. Examples:\n  >>> countConsonantsAndVowelsAndLetters('test')\n  2\n  >>> countConsonantsAndVowelsAndLetters('This is a message')\n  5\n  */\nconst countConsonantsAndVowelsAndLetters = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.charAt(index);\n  }\n  return newMessage.length;\n};\n\n/*\n  Write a function that takes a string and returns the number of times a vowel appears in the string and returns the number of times a consonant appears in the string and returns the number of times a letter appears in the string. Let's just say letters. Examples:\n  >>> countVowelsAndConsonantsAndLetters('test')\n  2\n  >>> countVowelsAndConsonantsAndLetters('This is a message')\n  5\n  */\nconst countVowelsAndConsonantsAndLetters = (message) => {\n  let newMessage = '';\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndInBetween = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndInBetweenAndInBetween = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndInBetweenAndInBetweenAndInBetween = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownToAndInBetweenAndInBetweenAndInBetweenAndInBetween = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDown", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return multiply(a / 10, b / 10) * 10 + a % 10 * b % 10;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return a + sum(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product(148, 412) should return 16.\n  product(19, 28) should return 72.\n  product(2020, 1851) should return 0.\n  product(14,-15) should return 20.\n  */\nconst product = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return product(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum2(148, 412) should return 16.\n  sum2(19, 28) should return 72.\n  sum2(2020, 1851) should return 0.\n  sum2(14,-15) should return 20.\n  */\nconst sum2 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return sum2(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product2(148, 412) should return 16.\n  product2(19, 28) should return 72.\n  product2(2020, 1851) should return 0.\n  product2(14,-15) should return 20.\n  */\nconst product2 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return product2(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum3(148, 412) should return 16.\n  sum3(19, 28) should return 72.\n  sum3(2020, 1851) should return 0.\n  sum3(14,-15) should return 20.\n  */\nconst sum3 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return sum3(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product3(148, 412) should return 16.\n  product3(19, 28) should return 72.\n  product3(2020, 1851) should return 0.\n  product3(14,-15) should return 20.\n  */\nconst product3 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return product3(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum4(148, 412) should return 16.\n  sum4(19, 28) should return 72.\n  sum4(2020, 1851) should return 0.\n  sum4(14,-15) should return 20.\n  */\nconst sum4 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return sum4(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product4(148, 412) should return 16.\n  product4(19, 28) should return 72.\n  product4(2020, 1851) should return 0.\n  product4(14,-15) should return 20.\n  */\nconst product4 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return product4(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum5(148, 412) should return 16.\n  sum5(19, 28) should return 72.\n  sum5(2020, 1851) should return 0.\n  sum5(14,-15) should return 20.\n  */\nconst sum5 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return sum5(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product5(148, 412) should return 16.\n  product5(19, 28) should return 72.\n  product5(2020, 1851) should return 0.\n  product5(14,-15) should return 20.\n  */\nconst product5 = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  return product5(a * 10 + b / 10, b % 10);\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum6(148, 412) should return 16.\n  sum6(19, 28) should return 72.\n  sum6(2020, 1851) should return 0.\n  sum6(14,-15) should return 20.\n  */\nconst sum6 = (a) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (a === 0 || a === 1) {\n    return 1;\n  }\n  return sum6(a / 10) * 10 + a % 10;\n};\n\n/*CComplete the function that takes two integers and returns the product of the unit digits. Suppose the input is always valid.\n  Examples:\n  product6(148, 412) should return 16.\n  product6(19, 28) should return 72.\n  product6(2020, 1851) should return 0.\n  product6(14,-15) should return 20.\n  */\nconst product6 = (a) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (a === 0 || a === 1) {\n    return 1;\n  }\n  return product6(a / 10) * 10 + a % 10;\n};\n\n/*CComplete the function that takes two integers and returns the sum of the unit digits. Suppose the input is always valid.\n  Examples:\n  sum7(148, 412) should return 16.\n  sum7(19, 28) should return 72.\n  sum7(2020, 1851) should return 0.\n  sum7(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCaseCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      upperCaseCount += 1;\n    }\n  }\n  return upperCaseCount;\n};\n\n/*\n  Given a string, returns the length of the longest substring without repeating characters.\n  \n  For example:\n  longestSubstring('abcabc') returns 3\n  longestSubstring('abcc') returns 2\n  longestSubstring('a') returns 0\n  longestSubstring('') returns 0\n  longestSubstring('aaa') returns 0\n  longestSubstring('abca') returns 3\n  longestSubstring('abcaa') returns 3\n  longestSubstring('abcabca') returns 4\n  longestSubstring('abcabcbb') returns 4\n  longestSubstring('abcabcbbab') returns 5\n  longestSubstring('abcabcbbabb') returns 5\n  longestSubstring('abcabcbbabbb') returns 6\n  longestSubstring('abcabcbbabbbc') returns 6\n  longestSubstring('abcabcbbabbbcc') returns 6\n  longestSubstring('abcabcbbabbbccc') returns 6\n  longestSubstring('abcabcbbabbbccca') returns 6\n  longestSubstring('abcabcbbabbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbccc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbccca') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbccc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbccca') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbccc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbccca') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbccc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbccca') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbccc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbccca') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbccc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbccc') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbb') returns 6\n  longestSubstring('abcabcbbabbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbbbcccbb') returns 6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestIntegerWhole = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerWhole(\"10\")\n  10\n  >>> closestIntegerWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerWhole(\"14.5\") should\n  return 15 and closestIntegerWhole(\"-14.5\") should return -15.\n  */\nconst closestIntegerWhole = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerWhole(\"10\")\n  10\n  >>> closestIntegerWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerWhole(\"14.5\") should\n  return 15 and closestIntegerWhole(\"-14.5\") should return -15.\n  */\nconst closestIntegerWhole = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerWhole(\"10\")\n  10\n  >>> closestIntegerWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerWhole(\"14.5\") should\n  return 15 and closestIntegerWhole(\"-14.5\") should return -15.\n  */\nconst closestIntegerWhole = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerWhole(\"10\")\n  10\n  >>> closestIntegerWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerWhole(\"14.5\") should\n  return 15 and closestIntegerWhole(\"-14.5\") should return -15.\n  */\nconst closestIntegerWhole = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerWhole(\"10\")\n  10\n  >>> closestIntegerWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerWhole(\"14.5\") should\n  return 15 and closestIntegerWhole(\"-14.5\") should return -15.\n  */\nconst closestIntegerWhole = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerWhole(\"10\")\n  10\n  >>> closestIntegerWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestIntegerWhole(\"14.5\") should\n  return 15 and closestIntegerWhole(\"-14.5\") should return -15.\n  */\nconst closestIntegerWhole = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (integer1int > integer2int) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) that represents a number and returns the nearest whole number to it. If the number is equal to two whole numbers, round it from zero. Examples\n  >>> closestIntegerWhole(\"10\")\n  10\n  >>> closestIntegerWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero", "passed": 0, "run_status": 1}
